
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001964c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000002d0  20000000  0001964c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005a88  200002d0  0001991c  000302d0  2**2
                  ALLOC
  3 .stack        00002000  20005d58  0001f3a4  000302d0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
  6 .debug_info   000dd49f  00000000  00000000  00030351  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0001243e  00000000  00000000  0010d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0004245f  00000000  00000000  0011fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00002f40  00000000  00000000  0016208d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003f38  00000000  00000000  00164fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002a33f  00000000  00000000  00168f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00055703  00000000  00000000  00193244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bfe0b  00000000  00000000  001e8947  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00009ef0  00000000  00000000  002a8754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * @details 	Function to initialize the SHTC3 sensor. Will set the sensor in an On mode, ready for a measurement
 * @return		Returns SHT3_OK if initialized correctly
 * @note
 */
int SHTC3_Init(void)
{
       0:	58 7d 00 20 7d e8 00 00 61 e8 00 00 61 e8 00 00     X}. }...a...a...
	...
      2c:	15 56 00 00 00 00 00 00 00 00 00 00 f1 56 00 00     .V...........V..
      3c:	35 57 00 00 61 e8 00 00 61 e8 00 00 61 e8 00 00     5W..a...a...a...
      4c:	d5 c8 00 00 55 c5 00 00 61 e8 00 00 61 e8 00 00     ....U...a...a...
      5c:	61 e8 00 00 61 e8 00 00 fd cc 00 00 0d cd 00 00     a...a...........
      6c:	1d cd 00 00 2d cd 00 00 3d cd 00 00 4d cd 00 00     ....-...=...M...
      7c:	31 e8 00 00 41 e8 00 00 51 e8 00 00 ed 41 00 00     1...A...Q....A..
      8c:	fd 41 00 00 0d 42 00 00 00 00 00 00 00 00 00 00     .A...B..........
      9c:	61 e8 00 00 61 e8 00 00 61 e8 00 00 61 e8 00 00     a...a...a...a...
      ac:	61 e8 00 00 00 00 00 00                             a.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200002d0 	.word	0x200002d0
      d4:	00000000 	.word	0x00000000
      d8:	0001964c 	.word	0x0001964c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200002d4 	.word	0x200002d4
     108:	0001964c 	.word	0x0001964c
     10c:	0001964c 	.word	0x0001964c
     110:	00000000 	.word	0x00000000

00000114 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
     114:	b510      	push	{r4, lr}
     116:	0001      	movs	r1, r0
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
     118:	4b03      	ldr	r3, [pc, #12]	; (128 <ControlAddGameData+0x14>)
     11a:	6818      	ldr	r0, [r3, #0]
     11c:	2300      	movs	r3, #0
     11e:	220a      	movs	r2, #10
     120:	4c02      	ldr	r4, [pc, #8]	; (12c <ControlAddGameData+0x18>)
     122:	47a0      	blx	r4
    return error;
}
     124:	bd10      	pop	{r4, pc}
     126:	46c0      	nop			; (mov r8, r8)
     128:	200002ec 	.word	0x200002ec
     12c:	00005c55 	.word	0x00005c55

00000130 <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
     130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     132:	0004      	movs	r4, r0
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
     134:	2041      	movs	r0, #65	; 0x41
     136:	5c23      	ldrb	r3, [r4, r0]
     138:	2501      	movs	r5, #1
     13a:	432b      	orrs	r3, r5
     13c:	5423      	strb	r3, [r4, r0]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
     13e:	b292      	uxth	r2, r2
     140:	2000      	movs	r0, #0
     142:	5620      	ldrsb	r0, [r4, r0]
     144:	2300      	movs	r3, #0
     146:	4d12      	ldr	r5, [pc, #72]	; (190 <_http_client_send_wait+0x60>)
     148:	47a8      	blx	r5
     14a:	2800      	cmp	r0, #0
     14c:	db16      	blt.n	17c <_http_client_send_wait+0x4c>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
     14e:	2341      	movs	r3, #65	; 0x41
     150:	5ce3      	ldrb	r3, [r4, r3]
     152:	07db      	lsls	r3, r3, #31
     154:	d518      	bpl.n	188 <_http_client_send_wait+0x58>
     156:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
     158:	2000      	movs	r0, #0
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
     15a:	2b02      	cmp	r3, #2
     15c:	d917      	bls.n	18e <_http_client_send_wait+0x5e>
		m2m_wifi_handle_events(NULL);
     15e:	4f0d      	ldr	r7, [pc, #52]	; (194 <_http_client_send_wait+0x64>)
		sw_timer_task(module->config.timer_inst);
     160:	4e0d      	ldr	r6, [pc, #52]	; (198 <_http_client_send_wait+0x68>)
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
     162:	2541      	movs	r5, #65	; 0x41
		m2m_wifi_handle_events(NULL);
     164:	2000      	movs	r0, #0
     166:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
     168:	6d60      	ldr	r0, [r4, #84]	; 0x54
     16a:	47b0      	blx	r6
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
     16c:	5d63      	ldrb	r3, [r4, r5]
     16e:	07db      	lsls	r3, r3, #31
     170:	d50c      	bpl.n	18c <_http_client_send_wait+0x5c>
     172:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     174:	2b02      	cmp	r3, #2
     176:	d8f5      	bhi.n	164 <_http_client_send_wait+0x34>
	return 0;
     178:	2000      	movs	r0, #0
     17a:	e008      	b.n	18e <_http_client_send_wait+0x5e>
		module->sending = 0;
     17c:	2241      	movs	r2, #65	; 0x41
     17e:	5ca3      	ldrb	r3, [r4, r2]
     180:	2101      	movs	r1, #1
     182:	438b      	bics	r3, r1
     184:	54a3      	strb	r3, [r4, r2]
		return result;
     186:	e002      	b.n	18e <_http_client_send_wait+0x5e>
	return 0;
     188:	2000      	movs	r0, #0
     18a:	e000      	b.n	18e <_http_client_send_wait+0x5e>
     18c:	2000      	movs	r0, #0
}
     18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     190:	0000c059 	.word	0x0000c059
     194:	0000a071 	.word	0x0000a071
     198:	000012c5 	.word	0x000012c5

0000019c <http_client_get_config_defaults>:
	config->port = 80;
     19c:	2350      	movs	r3, #80	; 0x50
     19e:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
     1a0:	2300      	movs	r3, #0
     1a2:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
     1a4:	4a05      	ldr	r2, [pc, #20]	; (1bc <http_client_get_config_defaults+0x20>)
     1a6:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
     1a8:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
     1aa:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
     1ac:	3301      	adds	r3, #1
     1ae:	33ff      	adds	r3, #255	; 0xff
     1b0:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
     1b2:	3bae      	subs	r3, #174	; 0xae
     1b4:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
     1b6:	4b02      	ldr	r3, [pc, #8]	; (1c0 <http_client_get_config_defaults+0x24>)
     1b8:	6183      	str	r3, [r0, #24]
}
     1ba:	4770      	bx	lr
     1bc:	00004e20 	.word	0x00004e20
     1c0:	00015958 	.word	0x00015958

000001c4 <http_client_init>:
{
     1c4:	b570      	push	{r4, r5, r6, lr}
     1c6:	0004      	movs	r4, r0
     1c8:	000d      	movs	r5, r1
	if (module == NULL || config == NULL) {
     1ca:	2800      	cmp	r0, #0
     1cc:	d038      	beq.n	240 <http_client_init+0x7c>
     1ce:	2900      	cmp	r1, #0
     1d0:	d039      	beq.n	246 <http_client_init+0x82>
	if (config->recv_buffer_size == 0) {
     1d2:	690b      	ldr	r3, [r1, #16]
     1d4:	2b00      	cmp	r3, #0
     1d6:	d039      	beq.n	24c <http_client_init+0x88>
	if (config->timer_inst == NULL) {
     1d8:	684b      	ldr	r3, [r1, #4]
     1da:	2b00      	cmp	r3, #0
     1dc:	d039      	beq.n	252 <http_client_init+0x8e>
	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
     1de:	694b      	ldr	r3, [r1, #20]
     1e0:	2b51      	cmp	r3, #81	; 0x51
     1e2:	d939      	bls.n	258 <http_client_init+0x94>
	memset(module, 0, sizeof(struct http_client_module));
     1e4:	22e8      	movs	r2, #232	; 0xe8
     1e6:	2100      	movs	r1, #0
     1e8:	4b1e      	ldr	r3, [pc, #120]	; (264 <http_client_init+0xa0>)
     1ea:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
     1ec:	0020      	movs	r0, r4
     1ee:	3050      	adds	r0, #80	; 0x50
     1f0:	221c      	movs	r2, #28
     1f2:	0029      	movs	r1, r5
     1f4:	4b1c      	ldr	r3, [pc, #112]	; (268 <http_client_init+0xa4>)
     1f6:	4798      	blx	r3
	if (module->config.recv_buffer == NULL) {
     1f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
     1fa:	2b00      	cmp	r3, #0
     1fc:	d008      	beq.n	210 <http_client_init+0x4c>
	if (config->timeout > 0) {
     1fe:	892b      	ldrh	r3, [r5, #8]
     200:	2b00      	cmp	r3, #0
     202:	d111      	bne.n	228 <http_client_init+0x64>
	module->req.state = STATE_INIT;
     204:	2300      	movs	r3, #0
     206:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
     208:	22d8      	movs	r2, #216	; 0xd8
     20a:	50a3      	str	r3, [r4, r2]
	return 0;
     20c:	2000      	movs	r0, #0
}
     20e:	bd70      	pop	{r4, r5, r6, pc}
		module->config.recv_buffer = malloc(config->recv_buffer_size);
     210:	6928      	ldr	r0, [r5, #16]
     212:	4b16      	ldr	r3, [pc, #88]	; (26c <http_client_init+0xa8>)
     214:	4798      	blx	r3
     216:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
     218:	2800      	cmp	r0, #0
     21a:	d020      	beq.n	25e <http_client_init+0x9a>
		module->alloc_buffer = 1;
     21c:	2241      	movs	r2, #65	; 0x41
     21e:	5ca3      	ldrb	r3, [r4, r2]
     220:	2104      	movs	r1, #4
     222:	430b      	orrs	r3, r1
     224:	54a3      	strb	r3, [r4, r2]
     226:	e7ea      	b.n	1fe <http_client_init+0x3a>
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
     228:	6868      	ldr	r0, [r5, #4]
     22a:	2300      	movs	r3, #0
     22c:	0022      	movs	r2, r4
     22e:	4910      	ldr	r1, [pc, #64]	; (270 <http_client_init+0xac>)
     230:	4d10      	ldr	r5, [pc, #64]	; (274 <http_client_init+0xb0>)
     232:	47a8      	blx	r5
     234:	64a0      	str	r0, [r4, #72]	; 0x48
		if (module->timer_id < 0) {
     236:	2800      	cmp	r0, #0
     238:	dae4      	bge.n	204 <http_client_init+0x40>
			return -ENOSPC;
     23a:	201c      	movs	r0, #28
     23c:	4240      	negs	r0, r0
     23e:	e7e6      	b.n	20e <http_client_init+0x4a>
		return -EINVAL;
     240:	2016      	movs	r0, #22
     242:	4240      	negs	r0, r0
     244:	e7e3      	b.n	20e <http_client_init+0x4a>
     246:	2016      	movs	r0, #22
     248:	4240      	negs	r0, r0
     24a:	e7e0      	b.n	20e <http_client_init+0x4a>
		return -EINVAL;
     24c:	2016      	movs	r0, #22
     24e:	4240      	negs	r0, r0
     250:	e7dd      	b.n	20e <http_client_init+0x4a>
		return -EINVAL;
     252:	2016      	movs	r0, #22
     254:	4240      	negs	r0, r0
     256:	e7da      	b.n	20e <http_client_init+0x4a>
		return -EINVAL;
     258:	2016      	movs	r0, #22
     25a:	4240      	negs	r0, r0
     25c:	e7d7      	b.n	20e <http_client_init+0x4a>
			return -ENOMEM;
     25e:	200c      	movs	r0, #12
     260:	4240      	negs	r0, r0
     262:	e7d4      	b.n	20e <http_client_init+0x4a>
     264:	0001427b 	.word	0x0001427b
     268:	00014245 	.word	0x00014245
     26c:	0001421d 	.word	0x0001421d
     270:	00000389 	.word	0x00000389
     274:	00001251 	.word	0x00001251

00000278 <http_client_register_callback>:
	if (module == NULL) {
     278:	2800      	cmp	r0, #0
     27a:	d002      	beq.n	282 <http_client_register_callback+0xa>
	module->cb = callback;
     27c:	64c1      	str	r1, [r0, #76]	; 0x4c
	return 0;
     27e:	2000      	movs	r0, #0
}
     280:	4770      	bx	lr
		return -EINVAL;
     282:	2016      	movs	r0, #22
     284:	4240      	negs	r0, r0
     286:	e7fb      	b.n	280 <http_client_register_callback+0x8>

00000288 <_http_client_clear_conn>:
{
     288:	b5f0      	push	{r4, r5, r6, r7, lr}
     28a:	b085      	sub	sp, #20
     28c:	0004      	movs	r4, r0
     28e:	000e      	movs	r6, r1
	if (module->req.entity.close) {
     290:	23c0      	movs	r3, #192	; 0xc0
     292:	58c3      	ldr	r3, [r0, r3]
     294:	2b00      	cmp	r3, #0
     296:	d002      	beq.n	29e <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
     298:	22c4      	movs	r2, #196	; 0xc4
     29a:	5880      	ldr	r0, [r0, r2]
     29c:	4798      	blx	r3
	memset(&module->req.entity, 0, sizeof(struct http_entity));
     29e:	0020      	movs	r0, r4
     2a0:	30b0      	adds	r0, #176	; 0xb0
     2a2:	2218      	movs	r2, #24
     2a4:	2100      	movs	r1, #0
     2a6:	4b17      	ldr	r3, [pc, #92]	; (304 <_http_client_clear_conn+0x7c>)
     2a8:	4798      	blx	r3
	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
     2aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     2ac:	2b00      	cmp	r3, #0
     2ae:	d124      	bne.n	2fa <_http_client_clear_conn+0x72>
	module_ref_inst[module->sock] = NULL;
     2b0:	2300      	movs	r3, #0
     2b2:	56e3      	ldrsb	r3, [r4, r3]
     2b4:	009b      	lsls	r3, r3, #2
     2b6:	2500      	movs	r5, #0
     2b8:	4a13      	ldr	r2, [pc, #76]	; (308 <_http_client_clear_conn+0x80>)
     2ba:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
     2bc:	0020      	movs	r0, r4
     2be:	306c      	adds	r0, #108	; 0x6c
     2c0:	226c      	movs	r2, #108	; 0x6c
     2c2:	2100      	movs	r1, #0
     2c4:	4f0f      	ldr	r7, [pc, #60]	; (304 <_http_client_clear_conn+0x7c>)
     2c6:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
     2c8:	0020      	movs	r0, r4
     2ca:	30d8      	adds	r0, #216	; 0xd8
     2cc:	2210      	movs	r2, #16
     2ce:	2100      	movs	r1, #0
     2d0:	47b8      	blx	r7
	module->req.state = STATE_INIT;
     2d2:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
     2d4:	23d8      	movs	r3, #216	; 0xd8
     2d6:	50e5      	str	r5, [r4, r3]
	module->sending = 0;
     2d8:	2241      	movs	r2, #65	; 0x41
     2da:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
     2dc:	2101      	movs	r1, #1
     2de:	438b      	bics	r3, r1
     2e0:	3101      	adds	r1, #1
     2e2:	438b      	bics	r3, r1
     2e4:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
     2e6:	9601      	str	r6, [sp, #4]
	if (module->cb) {
     2e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     2ea:	2b00      	cmp	r3, #0
     2ec:	d003      	beq.n	2f6 <_http_client_clear_conn+0x6e>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
     2ee:	aa01      	add	r2, sp, #4
     2f0:	3102      	adds	r1, #2
     2f2:	0020      	movs	r0, r4
     2f4:	4798      	blx	r3
}
     2f6:	b005      	add	sp, #20
     2f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		close(module->sock);
     2fa:	2000      	movs	r0, #0
     2fc:	5620      	ldrsb	r0, [r4, r0]
     2fe:	4b03      	ldr	r3, [pc, #12]	; (30c <_http_client_clear_conn+0x84>)
     300:	4798      	blx	r3
     302:	e7d5      	b.n	2b0 <_http_client_clear_conn+0x28>
     304:	0001427b 	.word	0x0001427b
     308:	200002f0 	.word	0x200002f0
     30c:	0000c185 	.word	0x0000c185

00000310 <http_client_socket_resolve_handler>:
{
     310:	b5f0      	push	{r4, r5, r6, r7, lr}
     312:	b087      	sub	sp, #28
     314:	9000      	str	r0, [sp, #0]
     316:	9101      	str	r1, [sp, #4]
     318:	4c17      	ldr	r4, [pc, #92]	; (378 <http_client_socket_resolve_handler+0x68>)
     31a:	0026      	movs	r6, r4
     31c:	361c      	adds	r6, #28
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
     31e:	4f17      	ldr	r7, [pc, #92]	; (37c <http_client_socket_resolve_handler+0x6c>)
     320:	e015      	b.n	34e <http_client_socket_resolve_handler+0x3e>
				addr_in.sin_family = AF_INET;
     322:	2302      	movs	r3, #2
     324:	aa02      	add	r2, sp, #8
     326:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
     328:	334e      	adds	r3, #78	; 0x4e
     32a:	5aeb      	ldrh	r3, [r5, r3]
     32c:	021a      	lsls	r2, r3, #8
     32e:	0a1b      	lsrs	r3, r3, #8
     330:	4313      	orrs	r3, r2
     332:	aa02      	add	r2, sp, #8
     334:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = server_ip;
     336:	9b01      	ldr	r3, [sp, #4]
     338:	9303      	str	r3, [sp, #12]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
     33a:	2000      	movs	r0, #0
     33c:	5628      	ldrsb	r0, [r5, r0]
     33e:	2210      	movs	r2, #16
     340:	a902      	add	r1, sp, #8
     342:	4b0f      	ldr	r3, [pc, #60]	; (380 <http_client_socket_resolve_handler+0x70>)
     344:	4798      	blx	r3
				return;
     346:	e015      	b.n	374 <http_client_socket_resolve_handler+0x64>
     348:	3404      	adds	r4, #4
	for (i = 0; i < TCP_SOCK_MAX; i++) {
     34a:	42b4      	cmp	r4, r6
     34c:	d012      	beq.n	374 <http_client_socket_resolve_handler+0x64>
		if (module_ref_inst[i] != NULL) {
     34e:	6825      	ldr	r5, [r4, #0]
     350:	2d00      	cmp	r5, #0
     352:	d0f9      	beq.n	348 <http_client_socket_resolve_handler+0x38>
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
     354:	1c69      	adds	r1, r5, #1
     356:	9800      	ldr	r0, [sp, #0]
     358:	47b8      	blx	r7
     35a:	2800      	cmp	r0, #0
     35c:	d1f4      	bne.n	348 <http_client_socket_resolve_handler+0x38>
     35e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
     360:	2b01      	cmp	r3, #1
     362:	d1f1      	bne.n	348 <http_client_socket_resolve_handler+0x38>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
     364:	9b01      	ldr	r3, [sp, #4]
     366:	2b00      	cmp	r3, #0
     368:	d1db      	bne.n	322 <http_client_socket_resolve_handler+0x12>
					_http_client_clear_conn(module, -EHOSTUNREACH);
     36a:	2176      	movs	r1, #118	; 0x76
     36c:	4249      	negs	r1, r1
     36e:	0028      	movs	r0, r5
     370:	4b04      	ldr	r3, [pc, #16]	; (384 <http_client_socket_resolve_handler+0x74>)
     372:	4798      	blx	r3
}
     374:	b007      	add	sp, #28
     376:	bdf0      	pop	{r4, r5, r6, r7, pc}
     378:	200002f0 	.word	0x200002f0
     37c:	000145d3 	.word	0x000145d3
     380:	0000bfc9 	.word	0x0000bfc9
     384:	00000289 	.word	0x00000289

00000388 <http_client_timer_callback>:
{
     388:	b510      	push	{r4, lr}
	if (module_inst == NULL) {
     38a:	2a00      	cmp	r2, #0
     38c:	d004      	beq.n	398 <http_client_timer_callback+0x10>
	_http_client_clear_conn(module_inst, -ETIME);
     38e:	213e      	movs	r1, #62	; 0x3e
     390:	4249      	negs	r1, r1
     392:	0010      	movs	r0, r2
     394:	4b01      	ldr	r3, [pc, #4]	; (39c <http_client_timer_callback+0x14>)
     396:	4798      	blx	r3
}
     398:	bd10      	pop	{r4, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	00000289 	.word	0x00000289

000003a0 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
     3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3a2:	46de      	mov	lr, fp
     3a4:	4657      	mov	r7, sl
     3a6:	b580      	push	{r7, lr}
     3a8:	b095      	sub	sp, #84	; 0x54
     3aa:	af02      	add	r7, sp, #8
     3ac:	0004      	movs	r4, r0
     3ae:	46eb      	mov	fp, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
     3b0:	2310      	movs	r3, #16
     3b2:	2208      	movs	r2, #8
     3b4:	18ba      	adds	r2, r7, r2
     3b6:	18d2      	adds	r2, r2, r3
     3b8:	4bb1      	ldr	r3, [pc, #708]	; (680 <_http_client_request+0x2e0>)
     3ba:	cb23      	ldmia	r3!, {r0, r1, r5}
     3bc:	c223      	stmia	r2!, {r0, r1, r5}
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	6013      	str	r3, [r2, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
     3c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
     3c4:	1dd3      	adds	r3, r2, #7
     3c6:	08db      	lsrs	r3, r3, #3
     3c8:	00db      	lsls	r3, r3, #3
     3ca:	4669      	mov	r1, sp
     3cc:	1acb      	subs	r3, r1, r3
     3ce:	469d      	mov	sp, r3
     3d0:	ae02      	add	r6, sp, #8

	if (module == NULL) {
     3d2:	2c00      	cmp	r4, #0
     3d4:	d100      	bne.n	3d8 <_http_client_request+0x38>
     3d6:	e1f0      	b.n	7ba <_http_client_request+0x41a>
		return;
	}

	if (module->sending != 0) {
     3d8:	2341      	movs	r3, #65	; 0x41
     3da:	5ce3      	ldrb	r3, [r4, r3]
     3dc:	07db      	lsls	r3, r3, #31
     3de:	d500      	bpl.n	3e2 <_http_client_request+0x42>
     3e0:	e1eb      	b.n	7ba <_http_client_request+0x41a>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
     3e2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     3e4:	2b03      	cmp	r3, #3
     3e6:	d004      	beq.n	3f2 <_http_client_request+0x52>
     3e8:	2b04      	cmp	r3, #4
     3ea:	d100      	bne.n	3ee <_http_client_request+0x4e>
     3ec:	e120      	b.n	630 <_http_client_request+0x290>
     3ee:	46dd      	mov	sp, fp
     3f0:	e1e4      	b.n	7bc <_http_client_request+0x41c>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
     3f2:	2300      	movs	r3, #0
     3f4:	21cc      	movs	r1, #204	; 0xcc
     3f6:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
     3f8:	3104      	adds	r1, #4
     3fa:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
     3fc:	9400      	str	r4, [sp, #0]
     3fe:	4ba1      	ldr	r3, [pc, #644]	; (684 <_http_client_request+0x2e4>)
     400:	0031      	movs	r1, r6
     402:	202c      	movs	r0, #44	; 0x2c
     404:	2508      	movs	r5, #8
     406:	46ac      	mov	ip, r5
     408:	44bc      	add	ip, r7
     40a:	4460      	add	r0, ip
     40c:	4d9e      	ldr	r5, [pc, #632]	; (688 <_http_client_request+0x2e8>)
     40e:	47a8      	blx	r5
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
     410:	23c8      	movs	r3, #200	; 0xc8
     412:	5ce3      	ldrb	r3, [r4, r3]
     414:	2b01      	cmp	r3, #1
     416:	d100      	bne.n	41a <_http_client_request+0x7a>
     418:	e0a9      	b.n	56e <_http_client_request+0x1ce>
			stream_writer_send_buffer(&writer, "GET ", 4);
		} else if (module->req.method == HTTP_METHOD_POST) {
     41a:	2b02      	cmp	r3, #2
     41c:	d100      	bne.n	420 <_http_client_request+0x80>
     41e:	e0af      	b.n	580 <_http_client_request+0x1e0>
			stream_writer_send_buffer(&writer, "POST ", 5);
		} else if (module->req.method == HTTP_METHOD_DELETE) {
     420:	2b03      	cmp	r3, #3
     422:	d100      	bne.n	426 <_http_client_request+0x86>
     424:	e0b5      	b.n	592 <_http_client_request+0x1f2>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
		} else if (module->req.method == HTTP_METHOD_PUT) {
     426:	2b04      	cmp	r3, #4
     428:	d100      	bne.n	42c <_http_client_request+0x8c>
     42a:	e0bb      	b.n	5a4 <_http_client_request+0x204>
			stream_writer_send_buffer(&writer, "PUT ", 4);
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
     42c:	2b05      	cmp	r3, #5
     42e:	d100      	bne.n	432 <_http_client_request+0x92>
     430:	e0c1      	b.n	5b6 <_http_client_request+0x216>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
		} else if (module->req.method == HTTP_METHOD_HEAD) {
     432:	2b06      	cmp	r3, #6
     434:	d100      	bne.n	438 <_http_client_request+0x98>
     436:	e0c7      	b.n	5c8 <_http_client_request+0x228>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
     438:	0025      	movs	r5, r4
     43a:	3570      	adds	r5, #112	; 0x70
     43c:	0028      	movs	r0, r5
     43e:	4b93      	ldr	r3, [pc, #588]	; (68c <_http_client_request+0x2ec>)
     440:	469a      	mov	sl, r3
     442:	4798      	blx	r3
     444:	0002      	movs	r2, r0
     446:	0029      	movs	r1, r5
     448:	232c      	movs	r3, #44	; 0x2c
     44a:	2008      	movs	r0, #8
     44c:	1838      	adds	r0, r7, r0
     44e:	18c0      	adds	r0, r0, r3
     450:	4d8f      	ldr	r5, [pc, #572]	; (690 <_http_client_request+0x2f0>)
     452:	47a8      	blx	r5

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
     454:	220b      	movs	r2, #11
     456:	498f      	ldr	r1, [pc, #572]	; (694 <_http_client_request+0x2f4>)
     458:	232c      	movs	r3, #44	; 0x2c
     45a:	2008      	movs	r0, #8
     45c:	1838      	adds	r0, r7, r0
     45e:	18c0      	adds	r0, r0, r3
     460:	47a8      	blx	r5

		/* Write HTTP headers. */
		/* Default value. */
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
     462:	220c      	movs	r2, #12
     464:	498c      	ldr	r1, [pc, #560]	; (698 <_http_client_request+0x2f8>)
     466:	232c      	movs	r3, #44	; 0x2c
     468:	2008      	movs	r0, #8
     46a:	1838      	adds	r0, r7, r0
     46c:	18c0      	adds	r0, r0, r3
     46e:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
     470:	6ea3      	ldr	r3, [r4, #104]	; 0x68
     472:	607b      	str	r3, [r7, #4]
     474:	0018      	movs	r0, r3
     476:	47d0      	blx	sl
     478:	0002      	movs	r2, r0
     47a:	6879      	ldr	r1, [r7, #4]
     47c:	232c      	movs	r3, #44	; 0x2c
     47e:	2008      	movs	r0, #8
     480:	1838      	adds	r0, r7, r0
     482:	18c0      	adds	r0, r0, r3
     484:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
     486:	2202      	movs	r2, #2
     488:	4984      	ldr	r1, [pc, #528]	; (69c <_http_client_request+0x2fc>)
     48a:	232c      	movs	r3, #44	; 0x2c
     48c:	2008      	movs	r0, #8
     48e:	1838      	adds	r0, r7, r0
     490:	18c0      	adds	r0, r0, r3
     492:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
     494:	2206      	movs	r2, #6
     496:	4982      	ldr	r1, [pc, #520]	; (6a0 <_http_client_request+0x300>)
     498:	232c      	movs	r3, #44	; 0x2c
     49a:	2008      	movs	r0, #8
     49c:	1838      	adds	r0, r7, r0
     49e:	18c0      	adds	r0, r0, r3
     4a0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
     4a2:	1c63      	adds	r3, r4, #1
     4a4:	607b      	str	r3, [r7, #4]
     4a6:	0018      	movs	r0, r3
     4a8:	47d0      	blx	sl
     4aa:	0002      	movs	r2, r0
     4ac:	6879      	ldr	r1, [r7, #4]
     4ae:	232c      	movs	r3, #44	; 0x2c
     4b0:	2008      	movs	r0, #8
     4b2:	1838      	adds	r0, r7, r0
     4b4:	18c0      	adds	r0, r0, r3
     4b6:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
     4b8:	2202      	movs	r2, #2
     4ba:	4978      	ldr	r1, [pc, #480]	; (69c <_http_client_request+0x2fc>)
     4bc:	232c      	movs	r3, #44	; 0x2c
     4be:	2008      	movs	r0, #8
     4c0:	1838      	adds	r0, r7, r0
     4c2:	18c0      	adds	r0, r0, r3
     4c4:	47a8      	blx	r5
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
     4c6:	2218      	movs	r2, #24
     4c8:	4976      	ldr	r1, [pc, #472]	; (6a4 <_http_client_request+0x304>)
     4ca:	232c      	movs	r3, #44	; 0x2c
     4cc:	2008      	movs	r0, #8
     4ce:	1838      	adds	r0, r7, r0
     4d0:	18c0      	adds	r0, r0, r3
     4d2:	47a8      	blx	r5
		/* Notify supported encoding type and character set. */
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
     4d4:	2213      	movs	r2, #19
     4d6:	4974      	ldr	r1, [pc, #464]	; (6a8 <_http_client_request+0x308>)
     4d8:	232c      	movs	r3, #44	; 0x2c
     4da:	2008      	movs	r0, #8
     4dc:	1838      	adds	r0, r7, r0
     4de:	18c0      	adds	r0, r0, r3
     4e0:	47a8      	blx	r5
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
     4e2:	2217      	movs	r2, #23
     4e4:	4971      	ldr	r1, [pc, #452]	; (6ac <_http_client_request+0x30c>)
     4e6:	232c      	movs	r3, #44	; 0x2c
     4e8:	2008      	movs	r0, #8
     4ea:	1838      	adds	r0, r7, r0
     4ec:	18c0      	adds	r0, r0, r3
     4ee:	47a8      	blx	r5

		if (entity->read != NULL) {
     4f0:	0023      	movs	r3, r4
     4f2:	33b0      	adds	r3, #176	; 0xb0
     4f4:	68db      	ldr	r3, [r3, #12]
     4f6:	2b00      	cmp	r3, #0
     4f8:	d07b      	beq.n	5f2 <_http_client_request+0x252>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
     4fa:	23b0      	movs	r3, #176	; 0xb0
     4fc:	5ce3      	ldrb	r3, [r4, r3]
     4fe:	2b00      	cmp	r3, #0
     500:	d16b      	bne.n	5da <_http_client_request+0x23a>
				/* Chunked mode. */
				module->req.content_length = -1;
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
			} else if(entity->get_contents_length) {
     502:	0023      	movs	r3, r4
     504:	33b0      	adds	r3, #176	; 0xb0
     506:	689b      	ldr	r3, [r3, #8]
     508:	2b00      	cmp	r3, #0
     50a:	d072      	beq.n	5f2 <_http_client_request+0x252>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
     50c:	0022      	movs	r2, r4
     50e:	32b0      	adds	r2, #176	; 0xb0
     510:	6950      	ldr	r0, [r2, #20]
     512:	4798      	blx	r3
     514:	23cc      	movs	r3, #204	; 0xcc
     516:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
     518:	2800      	cmp	r0, #0
     51a:	da00      	bge.n	51e <_http_client_request+0x17e>
     51c:	e0ac      	b.n	678 <_http_client_request+0x2d8>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
     51e:	0002      	movs	r2, r0
     520:	4963      	ldr	r1, [pc, #396]	; (6b0 <_http_client_request+0x310>)
     522:	2320      	movs	r3, #32
     524:	2008      	movs	r0, #8
     526:	1838      	adds	r0, r7, r0
     528:	18c0      	adds	r0, r0, r3
     52a:	4b62      	ldr	r3, [pc, #392]	; (6b4 <_http_client_request+0x314>)
     52c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
     52e:	2210      	movs	r2, #16
     530:	4961      	ldr	r1, [pc, #388]	; (6b8 <_http_client_request+0x318>)
     532:	232c      	movs	r3, #44	; 0x2c
     534:	2008      	movs	r0, #8
     536:	1838      	adds	r0, r7, r0
     538:	18c0      	adds	r0, r0, r3
     53a:	4d55      	ldr	r5, [pc, #340]	; (690 <_http_client_request+0x2f0>)
     53c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, length, strlen(length));
     53e:	2320      	movs	r3, #32
     540:	2208      	movs	r2, #8
     542:	18ba      	adds	r2, r7, r2
     544:	18d0      	adds	r0, r2, r3
     546:	4b51      	ldr	r3, [pc, #324]	; (68c <_http_client_request+0x2ec>)
     548:	4798      	blx	r3
     54a:	0002      	movs	r2, r0
     54c:	2320      	movs	r3, #32
     54e:	2108      	movs	r1, #8
     550:	1879      	adds	r1, r7, r1
     552:	18c9      	adds	r1, r1, r3
     554:	330c      	adds	r3, #12
     556:	2008      	movs	r0, #8
     558:	1838      	adds	r0, r7, r0
     55a:	18c0      	adds	r0, r0, r3
     55c:	47a8      	blx	r5
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
     55e:	2202      	movs	r2, #2
     560:	494e      	ldr	r1, [pc, #312]	; (69c <_http_client_request+0x2fc>)
     562:	232c      	movs	r3, #44	; 0x2c
     564:	2008      	movs	r0, #8
     566:	1838      	adds	r0, r7, r0
     568:	18c0      	adds	r0, r0, r3
     56a:	47a8      	blx	r5
     56c:	e041      	b.n	5f2 <_http_client_request+0x252>
			stream_writer_send_buffer(&writer, "GET ", 4);
     56e:	2204      	movs	r2, #4
     570:	4952      	ldr	r1, [pc, #328]	; (6bc <_http_client_request+0x31c>)
     572:	332b      	adds	r3, #43	; 0x2b
     574:	2008      	movs	r0, #8
     576:	1838      	adds	r0, r7, r0
     578:	18c0      	adds	r0, r0, r3
     57a:	4b45      	ldr	r3, [pc, #276]	; (690 <_http_client_request+0x2f0>)
     57c:	4798      	blx	r3
     57e:	e75b      	b.n	438 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "POST ", 5);
     580:	2205      	movs	r2, #5
     582:	494f      	ldr	r1, [pc, #316]	; (6c0 <_http_client_request+0x320>)
     584:	332a      	adds	r3, #42	; 0x2a
     586:	2008      	movs	r0, #8
     588:	1838      	adds	r0, r7, r0
     58a:	18c0      	adds	r0, r0, r3
     58c:	4b40      	ldr	r3, [pc, #256]	; (690 <_http_client_request+0x2f0>)
     58e:	4798      	blx	r3
     590:	e752      	b.n	438 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
     592:	2207      	movs	r2, #7
     594:	494b      	ldr	r1, [pc, #300]	; (6c4 <_http_client_request+0x324>)
     596:	3329      	adds	r3, #41	; 0x29
     598:	2008      	movs	r0, #8
     59a:	1838      	adds	r0, r7, r0
     59c:	18c0      	adds	r0, r0, r3
     59e:	4b3c      	ldr	r3, [pc, #240]	; (690 <_http_client_request+0x2f0>)
     5a0:	4798      	blx	r3
     5a2:	e749      	b.n	438 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "PUT ", 4);
     5a4:	2204      	movs	r2, #4
     5a6:	4948      	ldr	r1, [pc, #288]	; (6c8 <_http_client_request+0x328>)
     5a8:	3328      	adds	r3, #40	; 0x28
     5aa:	2008      	movs	r0, #8
     5ac:	1838      	adds	r0, r7, r0
     5ae:	18c0      	adds	r0, r0, r3
     5b0:	4b37      	ldr	r3, [pc, #220]	; (690 <_http_client_request+0x2f0>)
     5b2:	4798      	blx	r3
     5b4:	e740      	b.n	438 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
     5b6:	2208      	movs	r2, #8
     5b8:	4944      	ldr	r1, [pc, #272]	; (6cc <_http_client_request+0x32c>)
     5ba:	3327      	adds	r3, #39	; 0x27
     5bc:	2008      	movs	r0, #8
     5be:	1838      	adds	r0, r7, r0
     5c0:	18c0      	adds	r0, r0, r3
     5c2:	4b33      	ldr	r3, [pc, #204]	; (690 <_http_client_request+0x2f0>)
     5c4:	4798      	blx	r3
     5c6:	e737      	b.n	438 <_http_client_request+0x98>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
     5c8:	2205      	movs	r2, #5
     5ca:	4941      	ldr	r1, [pc, #260]	; (6d0 <_http_client_request+0x330>)
     5cc:	3326      	adds	r3, #38	; 0x26
     5ce:	2008      	movs	r0, #8
     5d0:	1838      	adds	r0, r7, r0
     5d2:	18c0      	adds	r0, r0, r3
     5d4:	4b2e      	ldr	r3, [pc, #184]	; (690 <_http_client_request+0x2f0>)
     5d6:	4798      	blx	r3
     5d8:	e72e      	b.n	438 <_http_client_request+0x98>
				module->req.content_length = -1;
     5da:	2201      	movs	r2, #1
     5dc:	4252      	negs	r2, r2
     5de:	23cc      	movs	r3, #204	; 0xcc
     5e0:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
     5e2:	321d      	adds	r2, #29
     5e4:	493b      	ldr	r1, [pc, #236]	; (6d4 <_http_client_request+0x334>)
     5e6:	3ba0      	subs	r3, #160	; 0xa0
     5e8:	2008      	movs	r0, #8
     5ea:	1838      	adds	r0, r7, r0
     5ec:	18c0      	adds	r0, r0, r3
     5ee:	4b28      	ldr	r3, [pc, #160]	; (690 <_http_client_request+0x2f0>)
     5f0:	4798      	blx	r3
				}
			}
		}
		if (module->req.ext_header != NULL ) {
     5f2:	23d4      	movs	r3, #212	; 0xd4
     5f4:	58e5      	ldr	r5, [r4, r3]
     5f6:	2d00      	cmp	r5, #0
     5f8:	d00a      	beq.n	610 <_http_client_request+0x270>
			stream_writer_send_buffer(&writer,
     5fa:	0028      	movs	r0, r5
     5fc:	4b23      	ldr	r3, [pc, #140]	; (68c <_http_client_request+0x2ec>)
     5fe:	4798      	blx	r3
     600:	0002      	movs	r2, r0
     602:	0029      	movs	r1, r5
     604:	232c      	movs	r3, #44	; 0x2c
     606:	2008      	movs	r0, #8
     608:	1838      	adds	r0, r7, r0
     60a:	18c0      	adds	r0, r0, r3
     60c:	4b20      	ldr	r3, [pc, #128]	; (690 <_http_client_request+0x2f0>)
     60e:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
     610:	2202      	movs	r2, #2
     612:	4922      	ldr	r1, [pc, #136]	; (69c <_http_client_request+0x2fc>)
     614:	232c      	movs	r3, #44	; 0x2c
     616:	2008      	movs	r0, #8
     618:	1838      	adds	r0, r7, r0
     61a:	18c0      	adds	r0, r0, r3
     61c:	4b1c      	ldr	r3, [pc, #112]	; (690 <_http_client_request+0x2f0>)
     61e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
     620:	232c      	movs	r3, #44	; 0x2c
     622:	2208      	movs	r2, #8
     624:	18ba      	adds	r2, r7, r2
     626:	18d0      	adds	r0, r2, r3
     628:	4b2b      	ldr	r3, [pc, #172]	; (6d8 <_http_client_request+0x338>)
     62a:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
     62c:	2304      	movs	r3, #4
     62e:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
     630:	23cc      	movs	r3, #204	; 0xcc
     632:	58e2      	ldr	r2, [r4, r3]
     634:	2a00      	cmp	r2, #0
     636:	db51      	blt.n	6dc <_http_client_request+0x33c>
				if (module->cb) {
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
     638:	dc00      	bgt.n	63c <_http_client_request+0x29c>
     63a:	e0f0      	b.n	81e <_http_client_request+0x47e>
     63c:	0023      	movs	r3, r4
     63e:	33b0      	adds	r3, #176	; 0xb0
     640:	68dd      	ldr	r5, [r3, #12]
     642:	2d00      	cmp	r5, #0
     644:	d100      	bne.n	648 <_http_client_request+0x2a8>
     646:	e0ea      	b.n	81e <_http_client_request+0x47e>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
     648:	23d0      	movs	r3, #208	; 0xd0
     64a:	58e3      	ldr	r3, [r4, r3]
     64c:	429a      	cmp	r2, r3
     64e:	dd00      	ble.n	652 <_http_client_request+0x2b2>
     650:	e0ba      	b.n	7c8 <_http_client_request+0x428>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
     652:	23c0      	movs	r3, #192	; 0xc0
     654:	58e3      	ldr	r3, [r4, r3]
     656:	2b00      	cmp	r3, #0
     658:	d002      	beq.n	660 <_http_client_request+0x2c0>
					module->req.entity.close(module->req.entity.priv_data);
     65a:	22c4      	movs	r2, #196	; 0xc4
     65c:	58a0      	ldr	r0, [r4, r2]
     65e:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
     660:	2302      	movs	r3, #2
     662:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
     664:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     666:	2b00      	cmp	r3, #0
     668:	d100      	bne.n	66c <_http_client_request+0x2cc>
     66a:	e6c0      	b.n	3ee <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
     66c:	220c      	movs	r2, #12
     66e:	18ba      	adds	r2, r7, r2
     670:	2101      	movs	r1, #1
     672:	0020      	movs	r0, r4
     674:	4798      	blx	r3
     676:	e6ba      	b.n	3ee <_http_client_request+0x4e>
					module->req.content_length = 0;
     678:	2200      	movs	r2, #0
     67a:	50e2      	str	r2, [r4, r3]
     67c:	e7b9      	b.n	5f2 <_http_client_request+0x252>
     67e:	46c0      	nop			; (mov r8, r8)
     680:	00015840 	.word	0x00015840
     684:	00000131 	.word	0x00000131
     688:	000010fd 	.word	0x000010fd
     68c:	00014633 	.word	0x00014633
     690:	00001151 	.word	0x00001151
     694:	000158b4 	.word	0x000158b4
     698:	000158c0 	.word	0x000158c0
     69c:	00016a7c 	.word	0x00016a7c
     6a0:	000158d0 	.word	0x000158d0
     6a4:	000158d8 	.word	0x000158d8
     6a8:	000158f4 	.word	0x000158f4
     6ac:	00015908 	.word	0x00015908
     6b0:	00015940 	.word	0x00015940
     6b4:	00014539 	.word	0x00014539
     6b8:	00015944 	.word	0x00015944
     6bc:	00015880 	.word	0x00015880
     6c0:	00015888 	.word	0x00015888
     6c4:	00015890 	.word	0x00015890
     6c8:	00015898 	.word	0x00015898
     6cc:	000158a0 	.word	0x000158a0
     6d0:	000158ac 	.word	0x000158ac
     6d4:	00015920 	.word	0x00015920
     6d8:	0000110d 	.word	0x0000110d
		if (module->req.content_length < 0 && entity->read) {
     6dc:	0023      	movs	r3, r4
     6de:	33b0      	adds	r3, #176	; 0xb0
     6e0:	68dd      	ldr	r5, [r3, #12]
     6e2:	2d00      	cmp	r5, #0
     6e4:	d100      	bne.n	6e8 <_http_client_request+0x348>
     6e6:	e09a      	b.n	81e <_http_client_request+0x47e>
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
     6e8:	23d0      	movs	r3, #208	; 0xd0
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
     6ea:	58e3      	ldr	r3, [r4, r3]
     6ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
     6ee:	3a07      	subs	r2, #7
     6f0:	1d71      	adds	r1, r6, #5
     6f2:	0020      	movs	r0, r4
     6f4:	30b0      	adds	r0, #176	; 0xb0
     6f6:	6940      	ldr	r0, [r0, #20]
     6f8:	47a8      	blx	r5
     6fa:	0005      	movs	r5, r0
     6fc:	43c3      	mvns	r3, r0
     6fe:	17db      	asrs	r3, r3, #31
     700:	401d      	ands	r5, r3
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
     702:	220a      	movs	r2, #10
     704:	7132      	strb	r2, [r6, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
     706:	210d      	movs	r1, #13
     708:	70f1      	strb	r1, [r6, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
     70a:	1973      	adds	r3, r6, r5
     70c:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
     70e:	719a      	strb	r2, [r3, #6]
				*ptr = CH_LUT[size % 16];
     710:	230f      	movs	r3, #15
     712:	402b      	ands	r3, r5
     714:	3206      	adds	r2, #6
     716:	3905      	subs	r1, #5
     718:	468c      	mov	ip, r1
     71a:	44bc      	add	ip, r7
     71c:	4462      	add	r2, ip
     71e:	5cd3      	ldrb	r3, [r2, r3]
     720:	70b3      	strb	r3, [r6, #2]
				ptr = buffer + 2;
     722:	1cb1      	adds	r1, r6, #2
			if (size >= 0x10) {
     724:	2d0f      	cmp	r5, #15
     726:	dd0d      	ble.n	744 <_http_client_request+0x3a4>
				ptr = buffer + 1;
     728:	1c71      	adds	r1, r6, #1
				*ptr = CH_LUT[(size / 0x10) % 16];
     72a:	17eb      	asrs	r3, r5, #31
     72c:	220f      	movs	r2, #15
     72e:	4013      	ands	r3, r2
     730:	195b      	adds	r3, r3, r5
     732:	111b      	asrs	r3, r3, #4
     734:	4013      	ands	r3, r2
     736:	3201      	adds	r2, #1
     738:	2008      	movs	r0, #8
     73a:	4684      	mov	ip, r0
     73c:	44bc      	add	ip, r7
     73e:	4462      	add	r2, ip
     740:	5cd3      	ldrb	r3, [r2, r3]
     742:	7073      	strb	r3, [r6, #1]
			if (size >= 0x100) {
     744:	2dff      	cmp	r5, #255	; 0xff
     746:	dd0d      	ble.n	764 <_http_client_request+0x3c4>
				*ptr = CH_LUT[(size / 0x100) % 16];
     748:	17ea      	asrs	r2, r5, #31
     74a:	23ff      	movs	r3, #255	; 0xff
     74c:	4013      	ands	r3, r2
     74e:	195b      	adds	r3, r3, r5
     750:	051b      	lsls	r3, r3, #20
     752:	0f1b      	lsrs	r3, r3, #28
     754:	2210      	movs	r2, #16
     756:	2108      	movs	r1, #8
     758:	468c      	mov	ip, r1
     75a:	44bc      	add	ip, r7
     75c:	4462      	add	r2, ip
     75e:	5cd3      	ldrb	r3, [r2, r3]
     760:	7033      	strb	r3, [r6, #0]
				ptr = buffer;
     762:	0031      	movs	r1, r6
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
     764:	1cca      	adds	r2, r1, #3
     766:	1b92      	subs	r2, r2, r6
     768:	1d2b      	adds	r3, r5, #4
     76a:	18d2      	adds	r2, r2, r3
     76c:	b292      	uxth	r2, r2
     76e:	2000      	movs	r0, #0
     770:	5620      	ldrsb	r0, [r4, r0]
     772:	2300      	movs	r3, #0
     774:	4e30      	ldr	r6, [pc, #192]	; (838 <_http_client_request+0x498>)
     776:	47b0      	blx	r6
     778:	2800      	cmp	r0, #0
     77a:	db19      	blt.n	7b0 <_http_client_request+0x410>
			module->req.sent_length += size;
     77c:	22d0      	movs	r2, #208	; 0xd0
     77e:	58a3      	ldr	r3, [r4, r2]
     780:	195b      	adds	r3, r3, r5
     782:	50a3      	str	r3, [r4, r2]
			if(size == 0) {
     784:	2d00      	cmp	r5, #0
     786:	d000      	beq.n	78a <_http_client_request+0x3ea>
     788:	e631      	b.n	3ee <_http_client_request+0x4e>
				if (module->req.entity.close) {
     78a:	23c0      	movs	r3, #192	; 0xc0
     78c:	58e3      	ldr	r3, [r4, r3]
     78e:	2b00      	cmp	r3, #0
     790:	d002      	beq.n	798 <_http_client_request+0x3f8>
					module->req.entity.close(module->req.entity.priv_data);
     792:	3a0c      	subs	r2, #12
     794:	58a0      	ldr	r0, [r4, r2]
     796:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
     798:	2302      	movs	r3, #2
     79a:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
     79c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     79e:	2b00      	cmp	r3, #0
     7a0:	d100      	bne.n	7a4 <_http_client_request+0x404>
     7a2:	e624      	b.n	3ee <_http_client_request+0x4e>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
     7a4:	220c      	movs	r2, #12
     7a6:	18ba      	adds	r2, r7, r2
     7a8:	2101      	movs	r1, #1
     7aa:	0020      	movs	r0, r4
     7ac:	4798      	blx	r3
     7ae:	e61e      	b.n	3ee <_http_client_request+0x4e>
				_http_client_clear_conn(module, -EIO);
     7b0:	2105      	movs	r1, #5
     7b2:	4249      	negs	r1, r1
     7b4:	0020      	movs	r0, r4
     7b6:	4b21      	ldr	r3, [pc, #132]	; (83c <_http_client_request+0x49c>)
     7b8:	4798      	blx	r3
     7ba:	46dd      	mov	sp, fp
		break;
	default:
		/* Invalid status. */
		break;
	}
}
     7bc:	46bd      	mov	sp, r7
     7be:	b013      	add	sp, #76	; 0x4c
     7c0:	bc0c      	pop	{r2, r3}
     7c2:	4692      	mov	sl, r2
     7c4:	469b      	mov	fp, r3
     7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
     7c8:	0022      	movs	r2, r4
     7ca:	32b0      	adds	r2, #176	; 0xb0
     7cc:	6950      	ldr	r0, [r2, #20]
     7ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
     7d0:	0031      	movs	r1, r6
     7d2:	47a8      	blx	r5
			if (size < 0) {
     7d4:	2800      	cmp	r0, #0
     7d6:	db16      	blt.n	806 <_http_client_request+0x466>
				if (size > module->req.content_length - module->req.sent_length) {
     7d8:	23cc      	movs	r3, #204	; 0xcc
     7da:	58e5      	ldr	r5, [r4, r3]
     7dc:	3304      	adds	r3, #4
     7de:	58e3      	ldr	r3, [r4, r3]
     7e0:	1aed      	subs	r5, r5, r3
     7e2:	4285      	cmp	r5, r0
     7e4:	dd00      	ble.n	7e8 <_http_client_request+0x448>
     7e6:	0005      	movs	r5, r0
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
     7e8:	b2aa      	uxth	r2, r5
     7ea:	2000      	movs	r0, #0
     7ec:	5620      	ldrsb	r0, [r4, r0]
     7ee:	2300      	movs	r3, #0
     7f0:	0031      	movs	r1, r6
     7f2:	4e11      	ldr	r6, [pc, #68]	; (838 <_http_client_request+0x498>)
     7f4:	47b0      	blx	r6
     7f6:	2800      	cmp	r0, #0
     7f8:	db0b      	blt.n	812 <_http_client_request+0x472>
				module->req.sent_length += size;
     7fa:	23d0      	movs	r3, #208	; 0xd0
     7fc:	58e2      	ldr	r2, [r4, r3]
     7fe:	4694      	mov	ip, r2
     800:	4465      	add	r5, ip
     802:	50e5      	str	r5, [r4, r3]
     804:	e5f3      	b.n	3ee <_http_client_request+0x4e>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
     806:	2105      	movs	r1, #5
     808:	4249      	negs	r1, r1
     80a:	0020      	movs	r0, r4
     80c:	4b0b      	ldr	r3, [pc, #44]	; (83c <_http_client_request+0x49c>)
     80e:	4798      	blx	r3
     810:	e5ed      	b.n	3ee <_http_client_request+0x4e>
					_http_client_clear_conn(module, -EIO);
     812:	2105      	movs	r1, #5
     814:	4249      	negs	r1, r1
     816:	0020      	movs	r0, r4
     818:	4b08      	ldr	r3, [pc, #32]	; (83c <_http_client_request+0x49c>)
     81a:	4798      	blx	r3
					return;
     81c:	e7cd      	b.n	7ba <_http_client_request+0x41a>
			module->req.state = STATE_SOCK_CONNECTED;
     81e:	2302      	movs	r3, #2
     820:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
     822:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     824:	2b00      	cmp	r3, #0
     826:	d100      	bne.n	82a <_http_client_request+0x48a>
     828:	e5e1      	b.n	3ee <_http_client_request+0x4e>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
     82a:	220c      	movs	r2, #12
     82c:	18ba      	adds	r2, r7, r2
     82e:	2101      	movs	r1, #1
     830:	0020      	movs	r0, r4
     832:	4798      	blx	r3
     834:	e5db      	b.n	3ee <_http_client_request+0x4e>
     836:	46c0      	nop			; (mov r8, r8)
     838:	0000c059 	.word	0x0000c059
     83c:	00000289 	.word	0x00000289

00000840 <http_client_send_request>:
{
     840:	b5f0      	push	{r4, r5, r6, r7, lr}
     842:	46d6      	mov	lr, sl
     844:	b500      	push	{lr}
     846:	b088      	sub	sp, #32
     848:	0004      	movs	r4, r0
     84a:	000f      	movs	r7, r1
     84c:	4692      	mov	sl, r2
     84e:	9303      	str	r3, [sp, #12]
	if (module == NULL) {
     850:	2800      	cmp	r0, #0
     852:	d100      	bne.n	856 <http_client_send_request+0x16>
     854:	e0d3      	b.n	9fe <http_client_send_request+0x1be>
	if (module->req.state > STATE_SOCK_CONNECTED) {
     856:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
     858:	2b02      	cmp	r3, #2
     85a:	d900      	bls.n	85e <http_client_send_request+0x1e>
     85c:	e0d3      	b.n	a06 <http_client_send_request+0x1c6>
	if (!strncmp(url, "http://", 7)) {
     85e:	2207      	movs	r2, #7
     860:	4981      	ldr	r1, [pc, #516]	; (a68 <http_client_send_request+0x228>)
     862:	0038      	movs	r0, r7
     864:	4b81      	ldr	r3, [pc, #516]	; (a6c <http_client_send_request+0x22c>)
     866:	4798      	blx	r3
		i = 7;
     868:	2607      	movs	r6, #7
	if (!strncmp(url, "http://", 7)) {
     86a:	2800      	cmp	r0, #0
     86c:	d007      	beq.n	87e <http_client_send_request+0x3e>
	} else if (!strncmp(url, "https://", 8)) {
     86e:	2208      	movs	r2, #8
     870:	497f      	ldr	r1, [pc, #508]	; (a70 <http_client_send_request+0x230>)
     872:	0038      	movs	r0, r7
     874:	4b7d      	ldr	r3, [pc, #500]	; (a6c <http_client_send_request+0x22c>)
     876:	4798      	blx	r3
		i = 8;
     878:	4246      	negs	r6, r0
     87a:	4146      	adcs	r6, r0
     87c:	00f6      	lsls	r6, r6, #3
	reconnect = strncmp(module->host, url + i, strlen(module->host));
     87e:	1c63      	adds	r3, r4, #1
     880:	19bd      	adds	r5, r7, r6
     882:	9302      	str	r3, [sp, #8]
     884:	0018      	movs	r0, r3
     886:	4b7b      	ldr	r3, [pc, #492]	; (a74 <http_client_send_request+0x234>)
     888:	4798      	blx	r3
     88a:	0002      	movs	r2, r0
     88c:	0029      	movs	r1, r5
     88e:	9802      	ldr	r0, [sp, #8]
     890:	4b76      	ldr	r3, [pc, #472]	; (a6c <http_client_send_request+0x22c>)
     892:	4798      	blx	r3
     894:	9001      	str	r0, [sp, #4]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
     896:	782b      	ldrb	r3, [r5, #0]
     898:	2b00      	cmp	r3, #0
     89a:	d052      	beq.n	942 <http_client_send_request+0x102>
     89c:	2b2f      	cmp	r3, #47	; 0x2f
     89e:	d052      	beq.n	946 <http_client_send_request+0x106>
     8a0:	1c71      	adds	r1, r6, #1
     8a2:	1879      	adds	r1, r7, r1
     8a4:	2200      	movs	r2, #0
		module->host[j++] = url[i];
     8a6:	3201      	adds	r2, #1
     8a8:	54a3      	strb	r3, [r4, r2]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
     8aa:	000d      	movs	r5, r1
     8ac:	780b      	ldrb	r3, [r1, #0]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d002      	beq.n	8b8 <http_client_send_request+0x78>
     8b2:	3101      	adds	r1, #1
     8b4:	2b2f      	cmp	r3, #47	; 0x2f
     8b6:	d1f6      	bne.n	8a6 <http_client_send_request+0x66>
	module->host[j] = '\0';
     8b8:	18a2      	adds	r2, r4, r2
     8ba:	2300      	movs	r3, #0
     8bc:	7053      	strb	r3, [r2, #1]
	if (strlen(module->host) == 0) {
     8be:	7863      	ldrb	r3, [r4, #1]
     8c0:	2b00      	cmp	r3, #0
     8c2:	d100      	bne.n	8c6 <http_client_send_request+0x86>
     8c4:	e0a3      	b.n	a0e <http_client_send_request+0x1ce>
	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
     8c6:	0028      	movs	r0, r5
     8c8:	4b6a      	ldr	r3, [pc, #424]	; (a74 <http_client_send_request+0x234>)
     8ca:	4798      	blx	r3
     8cc:	283f      	cmp	r0, #63	; 0x3f
     8ce:	d900      	bls.n	8d2 <http_client_send_request+0x92>
     8d0:	e0a1      	b.n	a16 <http_client_send_request+0x1d6>
	if (module->req.ext_header != NULL) {
     8d2:	23d4      	movs	r3, #212	; 0xd4
     8d4:	58e0      	ldr	r0, [r4, r3]
     8d6:	2800      	cmp	r0, #0
     8d8:	d001      	beq.n	8de <http_client_send_request+0x9e>
		free(module->req.ext_header);
     8da:	4b67      	ldr	r3, [pc, #412]	; (a78 <http_client_send_request+0x238>)
     8dc:	4798      	blx	r3
	if (ext_header != NULL) {
     8de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     8e0:	2b00      	cmp	r3, #0
     8e2:	d032      	beq.n	94a <http_client_send_request+0x10a>
		module->req.ext_header = strdup(ext_header);
     8e4:	0018      	movs	r0, r3
     8e6:	4b65      	ldr	r3, [pc, #404]	; (a7c <http_client_send_request+0x23c>)
     8e8:	4798      	blx	r3
     8ea:	23d4      	movs	r3, #212	; 0xd4
     8ec:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
     8ee:	2800      	cmp	r0, #0
     8f0:	d100      	bne.n	8f4 <http_client_send_request+0xb4>
     8f2:	e094      	b.n	a1e <http_client_send_request+0x1de>
	module->sending = 0;
     8f4:	2241      	movs	r2, #65	; 0x41
     8f6:	5ca3      	ldrb	r3, [r4, r2]
     8f8:	2101      	movs	r1, #1
     8fa:	438b      	bics	r3, r1
     8fc:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
     8fe:	2300      	movs	r3, #0
     900:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
     902:	782b      	ldrb	r3, [r5, #0]
     904:	2b2f      	cmp	r3, #47	; 0x2f
     906:	d024      	beq.n	952 <http_client_send_request+0x112>
		module->req.uri[0] = '/';
     908:	222f      	movs	r2, #47	; 0x2f
     90a:	2370      	movs	r3, #112	; 0x70
     90c:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
     90e:	782b      	ldrb	r3, [r5, #0]
     910:	2b00      	cmp	r3, #0
     912:	d124      	bne.n	95e <http_client_send_request+0x11e>
	if (entity != NULL) {
     914:	9b03      	ldr	r3, [sp, #12]
     916:	2b00      	cmp	r3, #0
     918:	d027      	beq.n	96a <http_client_send_request+0x12a>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
     91a:	0020      	movs	r0, r4
     91c:	30b0      	adds	r0, #176	; 0xb0
     91e:	2218      	movs	r2, #24
     920:	0019      	movs	r1, r3
     922:	4b57      	ldr	r3, [pc, #348]	; (a80 <http_client_send_request+0x240>)
     924:	4798      	blx	r3
	module->req.method = method;
     926:	23c8      	movs	r3, #200	; 0xc8
     928:	4652      	mov	r2, sl
     92a:	54e2      	strb	r2, [r4, r3]
	switch (module->req.state) {
     92c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     92e:	2b01      	cmp	r3, #1
     930:	d022      	beq.n	978 <http_client_send_request+0x138>
     932:	2b00      	cmp	r3, #0
     934:	d027      	beq.n	986 <http_client_send_request+0x146>
     936:	2b02      	cmp	r3, #2
     938:	d03a      	beq.n	9b0 <http_client_send_request+0x170>
		return -EAGAIN;
     93a:	230b      	movs	r3, #11
     93c:	425b      	negs	r3, r3
     93e:	9301      	str	r3, [sp, #4]
     940:	e08d      	b.n	a5e <http_client_send_request+0x21e>
	int i = 0, j = 0, reconnect = 0;
     942:	2200      	movs	r2, #0
     944:	e7b8      	b.n	8b8 <http_client_send_request+0x78>
     946:	2200      	movs	r2, #0
     948:	e7b6      	b.n	8b8 <http_client_send_request+0x78>
		module->req.ext_header = NULL;
     94a:	2200      	movs	r2, #0
     94c:	23d4      	movs	r3, #212	; 0xd4
     94e:	50e2      	str	r2, [r4, r3]
     950:	e7d0      	b.n	8f4 <http_client_send_request+0xb4>
		strcpy(module->req.uri, uri);
     952:	0020      	movs	r0, r4
     954:	3070      	adds	r0, #112	; 0x70
     956:	0029      	movs	r1, r5
     958:	4b4a      	ldr	r3, [pc, #296]	; (a84 <http_client_send_request+0x244>)
     95a:	4798      	blx	r3
     95c:	e7da      	b.n	914 <http_client_send_request+0xd4>
			strcpy(module->req.uri + 1, uri);
     95e:	0029      	movs	r1, r5
     960:	0020      	movs	r0, r4
     962:	3071      	adds	r0, #113	; 0x71
     964:	4b47      	ldr	r3, [pc, #284]	; (a84 <http_client_send_request+0x244>)
     966:	4798      	blx	r3
     968:	e7d4      	b.n	914 <http_client_send_request+0xd4>
		memset(&module->req.entity, 0, sizeof(struct http_entity));
     96a:	0020      	movs	r0, r4
     96c:	30b0      	adds	r0, #176	; 0xb0
     96e:	2218      	movs	r2, #24
     970:	2100      	movs	r1, #0
     972:	4b45      	ldr	r3, [pc, #276]	; (a88 <http_client_send_request+0x248>)
     974:	4798      	blx	r3
     976:	e7d6      	b.n	926 <http_client_send_request+0xe6>
		if (!reconnect) {
     978:	9b01      	ldr	r3, [sp, #4]
     97a:	2b00      	cmp	r3, #0
     97c:	d06f      	beq.n	a5e <http_client_send_request+0x21e>
			_http_client_clear_conn(module, 0);
     97e:	2100      	movs	r1, #0
     980:	0020      	movs	r0, r4
     982:	4b42      	ldr	r3, [pc, #264]	; (a8c <http_client_send_request+0x24c>)
     984:	4798      	blx	r3
		if (module->config.tls) {
     986:	2352      	movs	r3, #82	; 0x52
     988:	5ce2      	ldrb	r2, [r4, r3]
     98a:	1e53      	subs	r3, r2, #1
     98c:	419a      	sbcs	r2, r3
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
     98e:	b2d2      	uxtb	r2, r2
     990:	2101      	movs	r1, #1
     992:	2002      	movs	r0, #2
     994:	4b3e      	ldr	r3, [pc, #248]	; (a90 <http_client_send_request+0x250>)
     996:	4798      	blx	r3
     998:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
     99a:	2800      	cmp	r0, #0
     99c:	db43      	blt.n	a26 <http_client_send_request+0x1e6>
			module_ref_inst[module->sock] = module;
     99e:	0080      	lsls	r0, r0, #2
     9a0:	4b3c      	ldr	r3, [pc, #240]	; (a94 <http_client_send_request+0x254>)
     9a2:	50c4      	str	r4, [r0, r3]
     9a4:	9d02      	ldr	r5, [sp, #8]
	uint32_t isv6 = 0;
     9a6:	2100      	movs	r1, #0
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
     9a8:	2620      	movs	r6, #32
			isv6 = 1;
     9aa:	2001      	movs	r0, #1
		} else if ((ch & 0x30) != 0x30) {
     9ac:	2730      	movs	r7, #48	; 0x30
     9ae:	e00c      	b.n	9ca <http_client_send_request+0x18a>
		if (!reconnect) {
     9b0:	9b01      	ldr	r3, [sp, #4]
     9b2:	2b00      	cmp	r3, #0
     9b4:	d1e3      	bne.n	97e <http_client_send_request+0x13e>
			module->req.state = STATE_REQ_SEND_HEADER;
     9b6:	3303      	adds	r3, #3
     9b8:	66e3      	str	r3, [r4, #108]	; 0x6c
			_http_client_request(module);
     9ba:	0020      	movs	r0, r4
     9bc:	4b36      	ldr	r3, [pc, #216]	; (a98 <http_client_send_request+0x258>)
     9be:	4798      	blx	r3
			break;
     9c0:	e04d      	b.n	a5e <http_client_send_request+0x21e>
			if (isv6) {
     9c2:	2900      	cmp	r1, #0
     9c4:	d001      	beq.n	9ca <http_client_send_request+0x18a>
     9c6:	e012      	b.n	9ee <http_client_send_request+0x1ae>
			isv6 = 1;
     9c8:	0001      	movs	r1, r0
	while (*host != '\0') {
     9ca:	782a      	ldrb	r2, [r5, #0]
     9cc:	2a00      	cmp	r2, #0
     9ce:	d02e      	beq.n	a2e <http_client_send_request+0x1ee>
		ch = *host++;
     9d0:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
     9d2:	0013      	movs	r3, r2
     9d4:	43b3      	bics	r3, r6
     9d6:	3b41      	subs	r3, #65	; 0x41
     9d8:	2b05      	cmp	r3, #5
     9da:	d9f5      	bls.n	9c8 <http_client_send_request+0x188>
     9dc:	2a3a      	cmp	r2, #58	; 0x3a
     9de:	d00a      	beq.n	9f6 <http_client_send_request+0x1b6>
     9e0:	2a2f      	cmp	r2, #47	; 0x2f
     9e2:	d00a      	beq.n	9fa <http_client_send_request+0x1ba>
		} else if (ch == '.') {
     9e4:	2a2e      	cmp	r2, #46	; 0x2e
     9e6:	d0ec      	beq.n	9c2 <http_client_send_request+0x182>
		} else if ((ch & 0x30) != 0x30) {
     9e8:	403a      	ands	r2, r7
     9ea:	2a30      	cmp	r2, #48	; 0x30
     9ec:	d0ed      	beq.n	9ca <http_client_send_request+0x18a>
				gethostbyname((uint8*)module->host);
     9ee:	9802      	ldr	r0, [sp, #8]
     9f0:	4b2a      	ldr	r3, [pc, #168]	; (a9c <http_client_send_request+0x25c>)
     9f2:	4798      	blx	r3
     9f4:	e02f      	b.n	a56 <http_client_send_request+0x216>
			isv6 = 1;
     9f6:	0001      	movs	r1, r0
     9f8:	e7e7      	b.n	9ca <http_client_send_request+0x18a>
     9fa:	0001      	movs	r1, r0
     9fc:	e7e5      	b.n	9ca <http_client_send_request+0x18a>
		return -EINVAL;
     9fe:	2316      	movs	r3, #22
     a00:	425b      	negs	r3, r3
     a02:	9301      	str	r3, [sp, #4]
     a04:	e02b      	b.n	a5e <http_client_send_request+0x21e>
		return -EBUSY;
     a06:	2310      	movs	r3, #16
     a08:	425b      	negs	r3, r3
     a0a:	9301      	str	r3, [sp, #4]
     a0c:	e027      	b.n	a5e <http_client_send_request+0x21e>
		return -EINVAL;
     a0e:	2316      	movs	r3, #22
     a10:	425b      	negs	r3, r3
     a12:	9301      	str	r3, [sp, #4]
     a14:	e023      	b.n	a5e <http_client_send_request+0x21e>
		return -ENAMETOOLONG;
     a16:	235b      	movs	r3, #91	; 0x5b
     a18:	425b      	negs	r3, r3
     a1a:	9301      	str	r3, [sp, #4]
     a1c:	e01f      	b.n	a5e <http_client_send_request+0x21e>
			return -ENOMEM;
     a1e:	230c      	movs	r3, #12
     a20:	425b      	negs	r3, r3
     a22:	9301      	str	r3, [sp, #4]
     a24:	e01b      	b.n	a5e <http_client_send_request+0x21e>
			return -ENOSPC;
     a26:	231c      	movs	r3, #28
     a28:	425b      	negs	r3, r3
     a2a:	9301      	str	r3, [sp, #4]
     a2c:	e017      	b.n	a5e <http_client_send_request+0x21e>
				addr_in.sin_family = AF_INET;
     a2e:	2302      	movs	r3, #2
     a30:	aa04      	add	r2, sp, #16
     a32:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
     a34:	334e      	adds	r3, #78	; 0x4e
     a36:	5ae3      	ldrh	r3, [r4, r3]
     a38:	021a      	lsls	r2, r3, #8
     a3a:	0a1b      	lsrs	r3, r3, #8
     a3c:	4313      	orrs	r3, r2
     a3e:	aa04      	add	r2, sp, #16
     a40:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
     a42:	9802      	ldr	r0, [sp, #8]
     a44:	4b16      	ldr	r3, [pc, #88]	; (aa0 <http_client_send_request+0x260>)
     a46:	4798      	blx	r3
     a48:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
     a4a:	2000      	movs	r0, #0
     a4c:	5620      	ldrsb	r0, [r4, r0]
     a4e:	2210      	movs	r2, #16
     a50:	a904      	add	r1, sp, #16
     a52:	4b14      	ldr	r3, [pc, #80]	; (aa4 <http_client_send_request+0x264>)
     a54:	4798      	blx	r3
			module->req.state = STATE_TRY_SOCK_CONNECT;
     a56:	2301      	movs	r3, #1
     a58:	66e3      	str	r3, [r4, #108]	; 0x6c
	return 0;
     a5a:	2300      	movs	r3, #0
     a5c:	9301      	str	r3, [sp, #4]
}
     a5e:	9801      	ldr	r0, [sp, #4]
     a60:	b008      	add	sp, #32
     a62:	bc04      	pop	{r2}
     a64:	4692      	mov	sl, r2
     a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a68:	00015964 	.word	0x00015964
     a6c:	00014641 	.word	0x00014641
     a70:	0001596c 	.word	0x0001596c
     a74:	00014633 	.word	0x00014633
     a78:	00014231 	.word	0x00014231
     a7c:	000145f9 	.word	0x000145f9
     a80:	00014245 	.word	0x00014245
     a84:	000145e7 	.word	0x000145e7
     a88:	0001427b 	.word	0x0001427b
     a8c:	00000289 	.word	0x00000289
     a90:	0000be49 	.word	0x0000be49
     a94:	200002f0 	.word	0x200002f0
     a98:	000003a1 	.word	0x000003a1
     a9c:	0000c289 	.word	0x0000c289
     aa0:	0000c21d 	.word	0x0000c21d
     aa4:	0000bfc9 	.word	0x0000bfc9

00000aa8 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
     aa8:	b510      	push	{r4, lr}
	if (module == NULL) {
     aaa:	2800      	cmp	r0, #0
     aac:	d00d      	beq.n	aca <_http_client_recv_packet+0x22>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
     aae:	6c41      	ldr	r1, [r0, #68]	; 0x44
     ab0:	6e02      	ldr	r2, [r0, #96]	; 0x60
     ab2:	4291      	cmp	r1, r2
     ab4:	d20a      	bcs.n	acc <_http_client_recv_packet+0x24>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
     ab6:	1a52      	subs	r2, r2, r1
     ab8:	b292      	uxth	r2, r2
		module->config.recv_buffer + module->recved_size,
     aba:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
     abc:	469c      	mov	ip, r3
     abe:	4461      	add	r1, ip
	recv(module->sock,
     ac0:	7800      	ldrb	r0, [r0, #0]
     ac2:	b240      	sxtb	r0, r0
     ac4:	2300      	movs	r3, #0
     ac6:	4c04      	ldr	r4, [pc, #16]	; (ad8 <_http_client_recv_packet+0x30>)
     ac8:	47a0      	blx	r4
		module->config.recv_buffer_size - module->recved_size, 0);
}
     aca:	bd10      	pop	{r4, pc}
		_http_client_clear_conn(module, -EOVERFLOW);
     acc:	218b      	movs	r1, #139	; 0x8b
     ace:	4249      	negs	r1, r1
     ad0:	4b02      	ldr	r3, [pc, #8]	; (adc <_http_client_recv_packet+0x34>)
     ad2:	4798      	blx	r3
		return;
     ad4:	e7f9      	b.n	aca <_http_client_recv_packet+0x22>
     ad6:	46c0      	nop			; (mov r8, r8)
     ad8:	0000c0f1 	.word	0x0000c0f1
     adc:	00000289 	.word	0x00000289

00000ae0 <_http_client_move_buffer>:

	return 0;
}

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
     ae0:	b570      	push	{r4, r5, r6, lr}
     ae2:	0005      	movs	r5, r0
	char *buffer = module->config.recv_buffer;
     ae4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
	int remain = (int)module->recved_size - (int)base + (int)buffer;
     ae6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
     ae8:	1a5c      	subs	r4, r3, r1
     aea:	1904      	adds	r4, r0, r4

	if (remain > 0) {
     aec:	2c00      	cmp	r4, #0
     aee:	dc02      	bgt.n	af6 <_http_client_move_buffer+0x16>
		memmove(buffer, base, remain);
		module->recved_size = remain;
	} else {
		module->recved_size = 0;
     af0:	2300      	movs	r3, #0
     af2:	646b      	str	r3, [r5, #68]	; 0x44
	}
}
     af4:	bd70      	pop	{r4, r5, r6, pc}
		memmove(buffer, base, remain);
     af6:	0022      	movs	r2, r4
     af8:	4b01      	ldr	r3, [pc, #4]	; (b00 <_http_client_move_buffer+0x20>)
     afa:	4798      	blx	r3
		module->recved_size = remain;
     afc:	646c      	str	r4, [r5, #68]	; 0x44
     afe:	e7f9      	b.n	af4 <_http_client_move_buffer+0x14>
     b00:	00014257 	.word	0x00014257

00000b04 <_http_client_handle_header>:
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	46ce      	mov	lr, r9
     b08:	b500      	push	{lr}
     b0a:	b084      	sub	sp, #16
     b0c:	0007      	movs	r7, r0
	for (ptr = module->config.recv_buffer ; ; ) {
     b0e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
		ptr_line_end = strstr(ptr, new_line);
     b10:	4b62      	ldr	r3, [pc, #392]	; (c9c <_http_client_handle_header+0x198>)
     b12:	4699      	mov	r9, r3
     b14:	e049      	b.n	baa <_http_client_handle_header+0xa6>
			_http_client_move_buffer(module, ptr);
     b16:	0021      	movs	r1, r4
     b18:	0038      	movs	r0, r7
     b1a:	4b61      	ldr	r3, [pc, #388]	; (ca0 <_http_client_handle_header+0x19c>)
     b1c:	4798      	blx	r3
			return 0;
     b1e:	2600      	movs	r6, #0
}
     b20:	0030      	movs	r0, r6
     b22:	b004      	add	sp, #16
     b24:	bc04      	pop	{r2}
     b26:	4691      	mov	r9, r2
     b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_http_client_move_buffer(module, ptr + strlen(new_line));
     b2a:	1ca1      	adds	r1, r4, #2
     b2c:	0038      	movs	r0, r7
     b2e:	4b5c      	ldr	r3, [pc, #368]	; (ca0 <_http_client_handle_header+0x19c>)
     b30:	4798      	blx	r3
			if (module->cb && module->resp.response_code) {
     b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     b34:	2b00      	cmp	r3, #0
     b36:	d00a      	beq.n	b4e <_http_client_handle_header+0x4a>
     b38:	22e4      	movs	r2, #228	; 0xe4
     b3a:	5ab9      	ldrh	r1, [r7, r2]
     b3c:	2900      	cmp	r1, #0
     b3e:	d006      	beq.n	b4e <_http_client_handle_header+0x4a>
				if (module->resp.content_length < 0) {
     b40:	3a08      	subs	r2, #8
     b42:	58b8      	ldr	r0, [r7, r2]
     b44:	2800      	cmp	r0, #0
     b46:	db07      	blt.n	b58 <_http_client_handle_header+0x54>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
     b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
     b4a:	4290      	cmp	r0, r2
     b4c:	dc10      	bgt.n	b70 <_http_client_handle_header+0x6c>
			module->resp.state = STATE_PARSE_ENTITY;
     b4e:	2201      	movs	r2, #1
     b50:	23d8      	movs	r3, #216	; 0xd8
     b52:	50fa      	str	r2, [r7, r3]
			return 1;
     b54:	2601      	movs	r6, #1
     b56:	e7e3      	b.n	b20 <_http_client_handle_header+0x1c>
					data.recv_response.response_code = module->resp.response_code;
     b58:	aa01      	add	r2, sp, #4
     b5a:	8011      	strh	r1, [r2, #0]
					data.recv_response.is_chunked = 1;
     b5c:	2101      	movs	r1, #1
     b5e:	7091      	strb	r1, [r2, #2]
					module->resp.read_length = 0;
     b60:	2100      	movs	r1, #0
     b62:	20e0      	movs	r0, #224	; 0xe0
     b64:	5039      	str	r1, [r7, r0]
					data.recv_response.content = NULL;
     b66:	6091      	str	r1, [r2, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
     b68:	3102      	adds	r1, #2
     b6a:	0038      	movs	r0, r7
     b6c:	4798      	blx	r3
     b6e:	e7ee      	b.n	b4e <_http_client_handle_header+0x4a>
					data.recv_response.response_code = module->resp.response_code;
     b70:	aa01      	add	r2, sp, #4
     b72:	8011      	strh	r1, [r2, #0]
					data.recv_response.content_length = module->resp.content_length;
     b74:	6050      	str	r0, [r2, #4]
					data.recv_response.content = NULL;
     b76:	2100      	movs	r1, #0
     b78:	6091      	str	r1, [r2, #8]
					module->resp.read_length = 0;
     b7a:	20e0      	movs	r0, #224	; 0xe0
     b7c:	5039      	str	r1, [r7, r0]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
     b7e:	3102      	adds	r1, #2
     b80:	0038      	movs	r0, r7
     b82:	4798      	blx	r3
     b84:	e7e3      	b.n	b4e <_http_client_handle_header+0x4a>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
     b86:	0020      	movs	r0, r4
     b88:	3010      	adds	r0, #16
     b8a:	4b46      	ldr	r3, [pc, #280]	; (ca4 <_http_client_handle_header+0x1a0>)
     b8c:	4798      	blx	r3
     b8e:	23dc      	movs	r3, #220	; 0xdc
     b90:	50f8      	str	r0, [r7, r3]
     b92:	e009      	b.n	ba8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
     b94:	3201      	adds	r2, #1
     b96:	4295      	cmp	r5, r2
     b98:	d006      	beq.n	ba8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
     b9a:	7813      	ldrb	r3, [r2, #0]
     b9c:	2b20      	cmp	r3, #32
     b9e:	d12b      	bne.n	bf8 <_http_client_handle_header+0xf4>
     ba0:	e7f8      	b.n	b94 <_http_client_handle_header+0x90>
					module->req.content_length = -1;
     ba2:	3a21      	subs	r2, #33	; 0x21
     ba4:	3389      	adds	r3, #137	; 0x89
     ba6:	50fa      	str	r2, [r7, r3]
		ptr = ptr_line_end + strlen(new_line);
     ba8:	1cac      	adds	r4, r5, #2
		ptr_line_end = strstr(ptr, new_line);
     baa:	493f      	ldr	r1, [pc, #252]	; (ca8 <_http_client_handle_header+0x1a4>)
     bac:	0020      	movs	r0, r4
     bae:	47c8      	blx	r9
     bb0:	1e05      	subs	r5, r0, #0
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
     bb2:	d0b0      	beq.n	b16 <_http_client_handle_header+0x12>
     bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     bb8:	4694      	mov	ip, r2
     bba:	4463      	add	r3, ip
     bbc:	4298      	cmp	r0, r3
     bbe:	d2aa      	bcs.n	b16 <_http_client_handle_header+0x12>
		if (!strncmp(ptr, new_line, strlen(new_line))) {
     bc0:	2202      	movs	r2, #2
     bc2:	4939      	ldr	r1, [pc, #228]	; (ca8 <_http_client_handle_header+0x1a4>)
     bc4:	0020      	movs	r0, r4
     bc6:	4b39      	ldr	r3, [pc, #228]	; (cac <_http_client_handle_header+0x1a8>)
     bc8:	4798      	blx	r3
     bca:	2800      	cmp	r0, #0
     bcc:	d0ad      	beq.n	b2a <_http_client_handle_header+0x26>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
     bce:	2210      	movs	r2, #16
     bd0:	4937      	ldr	r1, [pc, #220]	; (cb0 <_http_client_handle_header+0x1ac>)
     bd2:	0020      	movs	r0, r4
     bd4:	4b35      	ldr	r3, [pc, #212]	; (cac <_http_client_handle_header+0x1a8>)
     bd6:	4798      	blx	r3
     bd8:	2800      	cmp	r0, #0
     bda:	d0d4      	beq.n	b86 <_http_client_handle_header+0x82>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
     bdc:	2213      	movs	r2, #19
     bde:	4935      	ldr	r1, [pc, #212]	; (cb4 <_http_client_handle_header+0x1b0>)
     be0:	0020      	movs	r0, r4
     be2:	4b32      	ldr	r3, [pc, #200]	; (cac <_http_client_handle_header+0x1a8>)
     be4:	4798      	blx	r3
     be6:	1e06      	subs	r6, r0, #0
     be8:	d110      	bne.n	c0c <_http_client_handle_header+0x108>
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
     bea:	0022      	movs	r2, r4
     bec:	3213      	adds	r2, #19
			for (; ptr_line_end > type_ptr; type_ptr++) {
     bee:	4295      	cmp	r5, r2
     bf0:	d9da      	bls.n	ba8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
     bf2:	7ce3      	ldrb	r3, [r4, #19]
     bf4:	2b20      	cmp	r3, #32
     bf6:	d0cd      	beq.n	b94 <_http_client_handle_header+0x90>
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
     bf8:	2220      	movs	r2, #32
     bfa:	4393      	bics	r3, r2
     bfc:	2b43      	cmp	r3, #67	; 0x43
     bfe:	d0d0      	beq.n	ba2 <_http_client_handle_header+0x9e>
					_http_client_clear_conn(module, -ENOTSUP);
     c00:	2186      	movs	r1, #134	; 0x86
     c02:	4249      	negs	r1, r1
     c04:	0038      	movs	r0, r7
     c06:	4b2c      	ldr	r3, [pc, #176]	; (cb8 <_http_client_handle_header+0x1b4>)
     c08:	4798      	blx	r3
					return 0;
     c0a:	e789      	b.n	b20 <_http_client_handle_header+0x1c>
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
     c0c:	220c      	movs	r2, #12
     c0e:	492b      	ldr	r1, [pc, #172]	; (cbc <_http_client_handle_header+0x1b8>)
     c10:	0020      	movs	r0, r4
     c12:	4b26      	ldr	r3, [pc, #152]	; (cac <_http_client_handle_header+0x1a8>)
     c14:	4798      	blx	r3
     c16:	2800      	cmp	r0, #0
     c18:	d11d      	bne.n	c56 <_http_client_handle_header+0x152>
			char *type_ptr = ptr + strlen("Connection: ");
     c1a:	0022      	movs	r2, r4
     c1c:	320c      	adds	r2, #12
			for (; ptr_line_end > type_ptr; type_ptr++) {
     c1e:	4295      	cmp	r5, r2
     c20:	d9c2      	bls.n	ba8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
     c22:	7b23      	ldrb	r3, [r4, #12]
     c24:	2b20      	cmp	r3, #32
     c26:	d009      	beq.n	c3c <_http_client_handle_header+0x138>
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
     c28:	2220      	movs	r2, #32
     c2a:	4393      	bics	r3, r2
     c2c:	2b4b      	cmp	r3, #75	; 0x4b
     c2e:	d00c      	beq.n	c4a <_http_client_handle_header+0x146>
					module->permanent = 0;
     c30:	2241      	movs	r2, #65	; 0x41
     c32:	5cbb      	ldrb	r3, [r7, r2]
     c34:	2102      	movs	r1, #2
     c36:	438b      	bics	r3, r1
     c38:	54bb      	strb	r3, [r7, r2]
     c3a:	e7b5      	b.n	ba8 <_http_client_handle_header+0xa4>
			for (; ptr_line_end > type_ptr; type_ptr++) {
     c3c:	3201      	adds	r2, #1
     c3e:	4295      	cmp	r5, r2
     c40:	d0b2      	beq.n	ba8 <_http_client_handle_header+0xa4>
				if (*type_ptr == ' ') {
     c42:	7813      	ldrb	r3, [r2, #0]
     c44:	2b20      	cmp	r3, #32
     c46:	d1ef      	bne.n	c28 <_http_client_handle_header+0x124>
     c48:	e7f8      	b.n	c3c <_http_client_handle_header+0x138>
					module->permanent = 1;
     c4a:	3221      	adds	r2, #33	; 0x21
     c4c:	5cbb      	ldrb	r3, [r7, r2]
     c4e:	2102      	movs	r1, #2
     c50:	430b      	orrs	r3, r1
     c52:	54bb      	strb	r3, [r7, r2]
     c54:	e7a8      	b.n	ba8 <_http_client_handle_header+0xa4>
		} else if (!strncmp(ptr, "HTTP/", 5)) {
     c56:	2205      	movs	r2, #5
     c58:	4919      	ldr	r1, [pc, #100]	; (cc0 <_http_client_handle_header+0x1bc>)
     c5a:	0020      	movs	r0, r4
     c5c:	4b13      	ldr	r3, [pc, #76]	; (cac <_http_client_handle_header+0x1a8>)
     c5e:	4798      	blx	r3
     c60:	2800      	cmp	r0, #0
     c62:	d1a1      	bne.n	ba8 <_http_client_handle_header+0xa4>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
     c64:	0020      	movs	r0, r4
     c66:	3009      	adds	r0, #9
     c68:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <_http_client_handle_header+0x1a0>)
     c6a:	4798      	blx	r3
     c6c:	23e4      	movs	r3, #228	; 0xe4
     c6e:	52f8      	strh	r0, [r7, r3]
			module->resp.content_length = 0;
     c70:	2200      	movs	r2, #0
     c72:	3b08      	subs	r3, #8
     c74:	50fa      	str	r2, [r7, r3]
			if (ptr [5] > '1' || ptr[7] > '0') {
     c76:	7963      	ldrb	r3, [r4, #5]
     c78:	2b31      	cmp	r3, #49	; 0x31
     c7a:	d802      	bhi.n	c82 <_http_client_handle_header+0x17e>
     c7c:	79e3      	ldrb	r3, [r4, #7]
     c7e:	2b30      	cmp	r3, #48	; 0x30
     c80:	d905      	bls.n	c8e <_http_client_handle_header+0x18a>
				module->permanent = 1;
     c82:	2241      	movs	r2, #65	; 0x41
     c84:	5cbb      	ldrb	r3, [r7, r2]
     c86:	2102      	movs	r1, #2
     c88:	430b      	orrs	r3, r1
     c8a:	54bb      	strb	r3, [r7, r2]
     c8c:	e78c      	b.n	ba8 <_http_client_handle_header+0xa4>
				module->permanent = 0;
     c8e:	2241      	movs	r2, #65	; 0x41
     c90:	5cbb      	ldrb	r3, [r7, r2]
     c92:	2102      	movs	r1, #2
     c94:	438b      	bics	r3, r1
     c96:	54bb      	strb	r3, [r7, r2]
     c98:	e786      	b.n	ba8 <_http_client_handle_header+0xa4>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	000146b1 	.word	0x000146b1
     ca0:	00000ae1 	.word	0x00000ae1
     ca4:	000141c9 	.word	0x000141c9
     ca8:	00016a7c 	.word	0x00016a7c
     cac:	00014641 	.word	0x00014641
     cb0:	00015944 	.word	0x00015944
     cb4:	00015854 	.word	0x00015854
     cb8:	00000289 	.word	0x00000289
     cbc:	00015868 	.word	0x00015868
     cc0:	00015878 	.word	0x00015878

00000cc4 <_http_client_handle_entity>:
{
     cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cc6:	46ce      	mov	lr, r9
     cc8:	b500      	push	{lr}
     cca:	b086      	sub	sp, #24
     ccc:	0004      	movs	r4, r0
	char *buffer = module->config.recv_buffer;
     cce:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
     cd0:	23dc      	movs	r3, #220	; 0xdc
     cd2:	58c3      	ldr	r3, [r0, r3]
     cd4:	2b00      	cmp	r3, #0
     cd6:	db69      	blt.n	dac <_http_client_handle_entity+0xe8>
     cd8:	6e02      	ldr	r2, [r0, #96]	; 0x60
     cda:	4293      	cmp	r3, r2
     cdc:	dc2b      	bgt.n	d36 <_http_client_handle_entity+0x72>
	return 0;
     cde:	2000      	movs	r0, #0
		if ((int)module->recved_size >= module->resp.content_length) {
     ce0:	6c62      	ldr	r2, [r4, #68]	; 0x44
     ce2:	4293      	cmp	r3, r2
     ce4:	dc4e      	bgt.n	d84 <_http_client_handle_entity+0xc0>
			if (module->cb && module->resp.response_code) {
     ce6:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
     ce8:	2e00      	cmp	r6, #0
     cea:	d003      	beq.n	cf4 <_http_client_handle_entity+0x30>
     cec:	22e4      	movs	r2, #228	; 0xe4
     cee:	5aa1      	ldrh	r1, [r4, r2]
     cf0:	2900      	cmp	r1, #0
     cf2:	d10e      	bne.n	d12 <_http_client_handle_entity+0x4e>
			module->resp.state = STATE_PARSE_HEADER;
     cf4:	2300      	movs	r3, #0
     cf6:	22d8      	movs	r2, #216	; 0xd8
     cf8:	50a3      	str	r3, [r4, r2]
			module->resp.response_code = 0;
     cfa:	320c      	adds	r2, #12
     cfc:	52a3      	strh	r3, [r4, r2]
			if (module->permanent == 0) {
     cfe:	3341      	adds	r3, #65	; 0x41
     d00:	5ce3      	ldrb	r3, [r4, r3]
     d02:	079b      	lsls	r3, r3, #30
     d04:	d40f      	bmi.n	d26 <_http_client_handle_entity+0x62>
				_http_client_clear_conn(module, 0);
     d06:	2100      	movs	r1, #0
     d08:	0020      	movs	r0, r4
     d0a:	4b71      	ldr	r3, [pc, #452]	; (ed0 <_http_client_handle_entity+0x20c>)
     d0c:	4798      	blx	r3
	return 0;
     d0e:	2000      	movs	r0, #0
     d10:	e038      	b.n	d84 <_http_client_handle_entity+0xc0>
				data.recv_response.response_code = module->resp.response_code;
     d12:	aa03      	add	r2, sp, #12
     d14:	8011      	strh	r1, [r2, #0]
				data.recv_response.is_chunked = 0;
     d16:	2100      	movs	r1, #0
     d18:	7091      	strb	r1, [r2, #2]
				data.recv_response.content_length = module->resp.content_length;
     d1a:	6053      	str	r3, [r2, #4]
				data.recv_response.content = buffer;
     d1c:	6095      	str	r5, [r2, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
     d1e:	3102      	adds	r1, #2
     d20:	0020      	movs	r0, r4
     d22:	47b0      	blx	r6
     d24:	e7e6      	b.n	cf4 <_http_client_handle_entity+0x30>
				_http_client_move_buffer(module, buffer + module->resp.content_length);
     d26:	23dc      	movs	r3, #220	; 0xdc
     d28:	58e1      	ldr	r1, [r4, r3]
     d2a:	1869      	adds	r1, r5, r1
     d2c:	0020      	movs	r0, r4
     d2e:	4b69      	ldr	r3, [pc, #420]	; (ed4 <_http_client_handle_entity+0x210>)
     d30:	4798      	blx	r3
				return module->recved_size;
     d32:	6c60      	ldr	r0, [r4, #68]	; 0x44
     d34:	e026      	b.n	d84 <_http_client_handle_entity+0xc0>
			data.recv_chunked_data.length = module->recved_size;
     d36:	6c42      	ldr	r2, [r0, #68]	; 0x44
     d38:	9203      	str	r2, [sp, #12]
			data.recv_chunked_data.data = buffer;
     d3a:	9504      	str	r5, [sp, #16]
			module->resp.read_length += (int)module->recved_size;
     d3c:	21e0      	movs	r1, #224	; 0xe0
     d3e:	5840      	ldr	r0, [r0, r1]
     d40:	4684      	mov	ip, r0
     d42:	4462      	add	r2, ip
     d44:	5062      	str	r2, [r4, r1]
			if (module->resp.content_length <= module->resp.read_length) {
     d46:	4293      	cmp	r3, r2
     d48:	dc20      	bgt.n	d8c <_http_client_handle_entity+0xc8>
				module->resp.state = STATE_PARSE_HEADER;
     d4a:	2300      	movs	r3, #0
     d4c:	22d8      	movs	r2, #216	; 0xd8
     d4e:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
     d50:	320c      	adds	r2, #12
     d52:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
     d54:	3ae3      	subs	r2, #227	; 0xe3
     d56:	ab03      	add	r3, sp, #12
     d58:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
     d5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     d5c:	2b00      	cmp	r3, #0
     d5e:	d007      	beq.n	d70 <_http_client_handle_entity+0xac>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
     d60:	ae03      	add	r6, sp, #12
     d62:	0032      	movs	r2, r6
     d64:	2103      	movs	r1, #3
     d66:	0020      	movs	r0, r4
     d68:	4798      	blx	r3
			if (data.recv_chunked_data.is_complete == 1) {
     d6a:	7a33      	ldrb	r3, [r6, #8]
     d6c:	2b01      	cmp	r3, #1
     d6e:	d103      	bne.n	d78 <_http_client_handle_entity+0xb4>
				if (module->permanent == 0) {
     d70:	2341      	movs	r3, #65	; 0x41
     d72:	5ce3      	ldrb	r3, [r4, r3]
     d74:	079b      	lsls	r3, r3, #30
     d76:	d510      	bpl.n	d9a <_http_client_handle_entity+0xd6>
			_http_client_move_buffer(module, buffer + module->recved_size);
     d78:	6c63      	ldr	r3, [r4, #68]	; 0x44
     d7a:	18e9      	adds	r1, r5, r3
     d7c:	0020      	movs	r0, r4
     d7e:	4b55      	ldr	r3, [pc, #340]	; (ed4 <_http_client_handle_entity+0x210>)
     d80:	4798      	blx	r3
	return 0;
     d82:	2000      	movs	r0, #0
}
     d84:	b006      	add	sp, #24
     d86:	bc04      	pop	{r2}
     d88:	4691      	mov	r9, r2
     d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				data.recv_chunked_data.is_complete = 0;
     d8c:	2200      	movs	r2, #0
     d8e:	ab03      	add	r3, sp, #12
     d90:	721a      	strb	r2, [r3, #8]
			if (module->cb) {
     d92:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     d94:	2b00      	cmp	r3, #0
     d96:	d0ef      	beq.n	d78 <_http_client_handle_entity+0xb4>
     d98:	e7e2      	b.n	d60 <_http_client_handle_entity+0x9c>
					printf("1\r\n");
     d9a:	484f      	ldr	r0, [pc, #316]	; (ed8 <_http_client_handle_entity+0x214>)
     d9c:	4b4f      	ldr	r3, [pc, #316]	; (edc <_http_client_handle_entity+0x218>)
     d9e:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
     da0:	2100      	movs	r1, #0
     da2:	0020      	movs	r0, r4
     da4:	4b4a      	ldr	r3, [pc, #296]	; (ed0 <_http_client_handle_entity+0x20c>)
     da6:	4798      	blx	r3
					return 0;
     da8:	2000      	movs	r0, #0
     daa:	e7eb      	b.n	d84 <_http_client_handle_entity+0xc0>
	int length = (int)module->recved_size;
     dac:	6c47      	ldr	r7, [r0, #68]	; 0x44
	int extension = 0;
     dae:	2300      	movs	r3, #0
     db0:	4699      	mov	r9, r3
		if (module->resp.read_length >= 0) {
     db2:	26e0      	movs	r6, #224	; 0xe0
     db4:	e00a      	b.n	dcc <_http_client_handle_entity+0x108>
				if (module->permanent == 0) {
     db6:	2341      	movs	r3, #65	; 0x41
     db8:	5ce3      	ldrb	r3, [r4, r3]
     dba:	079b      	lsls	r3, r3, #30
     dbc:	d51b      	bpl.n	df6 <_http_client_handle_entity+0x132>
				_http_client_move_buffer(module, buffer + 2);
     dbe:	1ca9      	adds	r1, r5, #2
     dc0:	0020      	movs	r0, r4
     dc2:	4b44      	ldr	r3, [pc, #272]	; (ed4 <_http_client_handle_entity+0x210>)
     dc4:	4798      	blx	r3
	} while(module->recved_size > 0);
     dc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
     dc8:	2b00      	cmp	r3, #0
     dca:	d073      	beq.n	eb4 <_http_client_handle_entity+0x1f0>
		if (module->resp.read_length >= 0) {
     dcc:	59a3      	ldr	r3, [r4, r6]
     dce:	2b00      	cmp	r3, #0
     dd0:	db30      	blt.n	e34 <_http_client_handle_entity+0x170>
			if (module->resp.read_length == 0) {
     dd2:	d116      	bne.n	e02 <_http_client_handle_entity+0x13e>
				module->resp.state = STATE_PARSE_HEADER;
     dd4:	22d8      	movs	r2, #216	; 0xd8
     dd6:	50a3      	str	r3, [r4, r2]
				module->resp.response_code = 0;
     dd8:	320c      	adds	r2, #12
     dda:	52a3      	strh	r3, [r4, r2]
				data.recv_chunked_data.is_complete = 1;
     ddc:	3ae3      	subs	r2, #227	; 0xe3
     dde:	4669      	mov	r1, sp
     de0:	720a      	strb	r2, [r1, #8]
				data.recv_chunked_data.length = 0;
     de2:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = NULL;
     de4:	9301      	str	r3, [sp, #4]
				if (module->cb) {
     de6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     de8:	2b00      	cmp	r3, #0
     dea:	d0e4      	beq.n	db6 <_http_client_handle_entity+0xf2>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
     dec:	466a      	mov	r2, sp
     dee:	2103      	movs	r1, #3
     df0:	0020      	movs	r0, r4
     df2:	4798      	blx	r3
     df4:	e7df      	b.n	db6 <_http_client_handle_entity+0xf2>
					_http_client_clear_conn(module, 0);
     df6:	2100      	movs	r1, #0
     df8:	0020      	movs	r0, r4
     dfa:	4b35      	ldr	r3, [pc, #212]	; (ed0 <_http_client_handle_entity+0x20c>)
     dfc:	4798      	blx	r3
	return 0;
     dfe:	2000      	movs	r0, #0
     e00:	e7c0      	b.n	d84 <_http_client_handle_entity+0xc0>
			} else if (module->resp.read_length <= length) {
     e02:	42bb      	cmp	r3, r7
     e04:	dcdf      	bgt.n	dc6 <_http_client_handle_entity+0x102>
				data.recv_chunked_data.length = module->resp.read_length;
     e06:	9300      	str	r3, [sp, #0]
				data.recv_chunked_data.data = buffer;
     e08:	9501      	str	r5, [sp, #4]
				data.recv_chunked_data.is_complete = 0;
     e0a:	2300      	movs	r3, #0
     e0c:	466a      	mov	r2, sp
     e0e:	7213      	strb	r3, [r2, #8]
				if (module->cb) {
     e10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     e12:	2b00      	cmp	r3, #0
     e14:	d002      	beq.n	e1c <_http_client_handle_entity+0x158>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
     e16:	2103      	movs	r1, #3
     e18:	0020      	movs	r0, r4
     e1a:	4798      	blx	r3
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
     e1c:	59a3      	ldr	r3, [r4, r6]
     e1e:	1c99      	adds	r1, r3, #2
     e20:	1869      	adds	r1, r5, r1
     e22:	0020      	movs	r0, r4
     e24:	4b2b      	ldr	r3, [pc, #172]	; (ed4 <_http_client_handle_entity+0x210>)
     e26:	4798      	blx	r3
				length = (int)module->recved_size;
     e28:	6c67      	ldr	r7, [r4, #68]	; 0x44
				buffer = module->config.recv_buffer;
     e2a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
				module->resp.read_length = -1;
     e2c:	2301      	movs	r3, #1
     e2e:	425b      	negs	r3, r3
     e30:	51a3      	str	r3, [r4, r6]
     e32:	e7c8      	b.n	dc6 <_http_client_handle_entity+0x102>
			module->resp.read_length = 0;
     e34:	2300      	movs	r3, #0
     e36:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
     e38:	2f00      	cmp	r7, #0
     e3a:	dd04      	ble.n	e46 <_http_client_handle_entity+0x182>
				if (*buffer == '\n') {
     e3c:	782b      	ldrb	r3, [r5, #0]
     e3e:	2b0a      	cmp	r3, #10
     e40:	d11c      	bne.n	e7c <_http_client_handle_entity+0x1b8>
					buffer++;
     e42:	3501      	adds	r5, #1
					length--;
     e44:	3f01      	subs	r7, #1
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
     e46:	59a3      	ldr	r3, [r4, r6]
     e48:	6e22      	ldr	r2, [r4, #96]	; 0x60
     e4a:	4293      	cmp	r3, r2
     e4c:	dc39      	bgt.n	ec2 <_http_client_handle_entity+0x1fe>
			if (length  == 0) {
     e4e:	2f00      	cmp	r7, #0
     e50:	d1b9      	bne.n	dc6 <_http_client_handle_entity+0x102>
				module->resp.read_length = -1;
     e52:	2201      	movs	r2, #1
     e54:	4252      	negs	r2, r2
     e56:	23e0      	movs	r3, #224	; 0xe0
     e58:	50e2      	str	r2, [r4, r3]
     e5a:	e7d0      	b.n	dfe <_http_client_handle_entity+0x13a>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
     e5c:	001a      	movs	r2, r3
     e5e:	3a61      	subs	r2, #97	; 0x61
     e60:	2a05      	cmp	r2, #5
     e62:	d818      	bhi.n	e96 <_http_client_handle_entity+0x1d2>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
     e64:	59a2      	ldr	r2, [r4, r6]
     e66:	0112      	lsls	r2, r2, #4
     e68:	18d3      	adds	r3, r2, r3
     e6a:	3b61      	subs	r3, #97	; 0x61
     e6c:	51a3      	str	r3, [r4, r6]
			for (; length > 0; buffer++, length--) {
     e6e:	3501      	adds	r5, #1
     e70:	3f01      	subs	r7, #1
     e72:	2f00      	cmp	r7, #0
     e74:	d020      	beq.n	eb8 <_http_client_handle_entity+0x1f4>
				if (*buffer == '\n') {
     e76:	782b      	ldrb	r3, [r5, #0]
     e78:	2b0a      	cmp	r3, #10
     e7a:	d0e2      	beq.n	e42 <_http_client_handle_entity+0x17e>
				if (extension != 0) {
     e7c:	464a      	mov	r2, r9
     e7e:	2a00      	cmp	r2, #0
     e80:	d1f5      	bne.n	e6e <_http_client_handle_entity+0x1aa>
				if (*buffer >= '0' && *buffer <= '9') {
     e82:	001a      	movs	r2, r3
     e84:	3a30      	subs	r2, #48	; 0x30
     e86:	2a09      	cmp	r2, #9
     e88:	d8e8      	bhi.n	e5c <_http_client_handle_entity+0x198>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
     e8a:	59a2      	ldr	r2, [r4, r6]
     e8c:	0112      	lsls	r2, r2, #4
     e8e:	18d3      	adds	r3, r2, r3
     e90:	3b30      	subs	r3, #48	; 0x30
     e92:	51a3      	str	r3, [r4, r6]
     e94:	e7eb      	b.n	e6e <_http_client_handle_entity+0x1aa>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
     e96:	001a      	movs	r2, r3
     e98:	3a41      	subs	r2, #65	; 0x41
     e9a:	2a05      	cmp	r2, #5
     e9c:	d805      	bhi.n	eaa <_http_client_handle_entity+0x1e6>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
     e9e:	59a2      	ldr	r2, [r4, r6]
     ea0:	0112      	lsls	r2, r2, #4
     ea2:	18d3      	adds	r3, r2, r3
     ea4:	3b41      	subs	r3, #65	; 0x41
     ea6:	51a3      	str	r3, [r4, r6]
     ea8:	e7e1      	b.n	e6e <_http_client_handle_entity+0x1aa>
				} else if (*buffer == ';') {
     eaa:	3b3b      	subs	r3, #59	; 0x3b
     eac:	425a      	negs	r2, r3
     eae:	415a      	adcs	r2, r3
     eb0:	4691      	mov	r9, r2
     eb2:	e7dc      	b.n	e6e <_http_client_handle_entity+0x1aa>
	return 0;
     eb4:	2000      	movs	r0, #0
     eb6:	e765      	b.n	d84 <_http_client_handle_entity+0xc0>
			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
     eb8:	23e0      	movs	r3, #224	; 0xe0
     eba:	58e3      	ldr	r3, [r4, r3]
     ebc:	6e22      	ldr	r2, [r4, #96]	; 0x60
     ebe:	4293      	cmp	r3, r2
     ec0:	ddc7      	ble.n	e52 <_http_client_handle_entity+0x18e>
				_http_client_clear_conn(module, -EOVERFLOW);
     ec2:	218b      	movs	r1, #139	; 0x8b
     ec4:	4249      	negs	r1, r1
     ec6:	0020      	movs	r0, r4
     ec8:	4b01      	ldr	r3, [pc, #4]	; (ed0 <_http_client_handle_entity+0x20c>)
     eca:	4798      	blx	r3
     ecc:	e797      	b.n	dfe <_http_client_handle_entity+0x13a>
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	00000289 	.word	0x00000289
     ed4:	00000ae1 	.word	0x00000ae1
     ed8:	00015850 	.word	0x00015850
     edc:	0001449d 	.word	0x0001449d

00000ee0 <_http_client_handle_response>:
{
     ee0:	b510      	push	{r4, lr}
	switch(module->resp.state) {
     ee2:	23d8      	movs	r3, #216	; 0xd8
     ee4:	58c3      	ldr	r3, [r0, r3]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d003      	beq.n	ef2 <_http_client_handle_response+0x12>
     eea:	2b01      	cmp	r3, #1
     eec:	d004      	beq.n	ef8 <_http_client_handle_response+0x18>
	return 0;
     eee:	2000      	movs	r0, #0
     ef0:	e001      	b.n	ef6 <_http_client_handle_response+0x16>
		return _http_client_handle_header(module);
     ef2:	4b03      	ldr	r3, [pc, #12]	; (f00 <_http_client_handle_response+0x20>)
     ef4:	4798      	blx	r3
}
     ef6:	bd10      	pop	{r4, pc}
		return _http_client_handle_entity(module);
     ef8:	4b02      	ldr	r3, [pc, #8]	; (f04 <_http_client_handle_response+0x24>)
     efa:	4798      	blx	r3
     efc:	e7fb      	b.n	ef6 <_http_client_handle_response+0x16>
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00000b05 	.word	0x00000b05
     f04:	00000cc5 	.word	0x00000cc5

00000f08 <_http_client_recved_packet>:
{
     f08:	b570      	push	{r4, r5, r6, lr}
     f0a:	0004      	movs	r4, r0
	module->recved_size += read_len;
     f0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
     f0e:	469c      	mov	ip, r3
     f10:	4461      	add	r1, ip
     f12:	6441      	str	r1, [r0, #68]	; 0x44
	if (module->config.timeout > 0) {
     f14:	2358      	movs	r3, #88	; 0x58
     f16:	5ac3      	ldrh	r3, [r0, r3]
     f18:	2b00      	cmp	r3, #0
     f1a:	d105      	bne.n	f28 <_http_client_recved_packet+0x20>
	while(_http_client_handle_response(module) != 0);
     f1c:	4d05      	ldr	r5, [pc, #20]	; (f34 <_http_client_recved_packet+0x2c>)
     f1e:	0020      	movs	r0, r4
     f20:	47a8      	blx	r5
     f22:	2800      	cmp	r0, #0
     f24:	d1fb      	bne.n	f1e <_http_client_recved_packet+0x16>
}
     f26:	bd70      	pop	{r4, r5, r6, pc}
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
     f28:	6c81      	ldr	r1, [r0, #72]	; 0x48
     f2a:	6d40      	ldr	r0, [r0, #84]	; 0x54
     f2c:	4b02      	ldr	r3, [pc, #8]	; (f38 <_http_client_recved_packet+0x30>)
     f2e:	4798      	blx	r3
     f30:	e7f4      	b.n	f1c <_http_client_recved_packet+0x14>
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00000ee1 	.word	0x00000ee1
     f38:	000012b5 	.word	0x000012b5

00000f3c <http_client_socket_event_handler>:
{
     f3c:	b510      	push	{r4, lr}
     f3e:	b084      	sub	sp, #16
	struct http_client_module *module = module_ref_inst[sock];
     f40:	0080      	lsls	r0, r0, #2
     f42:	4b65      	ldr	r3, [pc, #404]	; (10d8 <http_client_socket_event_handler+0x19c>)
     f44:	58c4      	ldr	r4, [r0, r3]
	if (module == NULL) {
     f46:	2c00      	cmp	r4, #0
     f48:	d006      	beq.n	f58 <http_client_socket_event_handler+0x1c>
	switch (msg_type) {
     f4a:	2906      	cmp	r1, #6
     f4c:	d051      	beq.n	ff2 <http_client_socket_event_handler+0xb6>
     f4e:	2907      	cmp	r1, #7
     f50:	d100      	bne.n	f54 <http_client_socket_event_handler+0x18>
     f52:	e08a      	b.n	106a <http_client_socket_event_handler+0x12e>
     f54:	2905      	cmp	r1, #5
     f56:	d001      	beq.n	f5c <http_client_socket_event_handler+0x20>
}
     f58:	b004      	add	sp, #16
     f5a:	bd10      	pop	{r4, pc}
    	data.sock_connected.result = msg_connect->s8Error;
     f5c:	2301      	movs	r3, #1
     f5e:	56d3      	ldrsb	r3, [r2, r3]
     f60:	1e1a      	subs	r2, r3, #0
     f62:	9301      	str	r3, [sp, #4]
    	if (msg_connect->s8Error < 0) {
     f64:	db15      	blt.n	f92 <http_client_socket_event_handler+0x56>
			if (module->cb != NULL) {
     f66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     f68:	2b00      	cmp	r3, #0
     f6a:	d003      	beq.n	f74 <http_client_socket_event_handler+0x38>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
     f6c:	aa01      	add	r2, sp, #4
     f6e:	2100      	movs	r1, #0
     f70:	0020      	movs	r0, r4
     f72:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
     f74:	2303      	movs	r3, #3
     f76:	66e3      	str	r3, [r4, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
     f78:	3355      	adds	r3, #85	; 0x55
     f7a:	5ae2      	ldrh	r2, [r4, r3]
     f7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
     f7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
     f80:	4b56      	ldr	r3, [pc, #344]	; (10dc <http_client_socket_event_handler+0x1a0>)
     f82:	4798      	blx	r3
    		_http_client_recv_packet(module);
     f84:	0020      	movs	r0, r4
     f86:	4b56      	ldr	r3, [pc, #344]	; (10e0 <http_client_socket_event_handler+0x1a4>)
     f88:	4798      	blx	r3
			_http_client_request(module);
     f8a:	0020      	movs	r0, r4
     f8c:	4b55      	ldr	r3, [pc, #340]	; (10e4 <http_client_socket_event_handler+0x1a8>)
     f8e:	4798      	blx	r3
     f90:	e7e2      	b.n	f58 <http_client_socket_event_handler+0x1c>
	switch (err) {
     f92:	330e      	adds	r3, #14
     f94:	b2d9      	uxtb	r1, r3
     f96:	290e      	cmp	r1, #14
     f98:	d81e      	bhi.n	fd8 <http_client_socket_event_handler+0x9c>
     f9a:	008b      	lsls	r3, r1, #2
     f9c:	4952      	ldr	r1, [pc, #328]	; (10e8 <http_client_socket_event_handler+0x1ac>)
     f9e:	58cb      	ldr	r3, [r1, r3]
     fa0:	469f      	mov	pc, r3
			return -ENOENT;
     fa2:	2102      	movs	r1, #2
     fa4:	4249      	negs	r1, r1
     fa6:	e01d      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -EADDRINUSE;
     fa8:	2170      	movs	r1, #112	; 0x70
     faa:	4249      	negs	r1, r1
     fac:	e01a      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
     fae:	210c      	movs	r1, #12
     fb0:	4249      	negs	r1, r1
     fb2:	e017      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -EINVAL;
     fb4:	2116      	movs	r1, #22
     fb6:	4249      	negs	r1, r1
     fb8:	e014      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -ENOMEM;
     fba:	210c      	movs	r1, #12
     fbc:	4249      	negs	r1, r1
     fbe:	e011      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -EDESTADDRREQ;
     fc0:	2179      	movs	r1, #121	; 0x79
     fc2:	4249      	negs	r1, r1
     fc4:	e00e      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -ECONNRESET;
     fc6:	2168      	movs	r1, #104	; 0x68
     fc8:	4249      	negs	r1, r1
     fca:	e00b      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -EAGAIN;
     fcc:	210b      	movs	r1, #11
     fce:	4249      	negs	r1, r1
     fd0:	e008      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -EBUSY; /* HW error occurred. Retry it*/
     fd2:	2110      	movs	r1, #16
     fd4:	4249      	negs	r1, r1
     fd6:	e005      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			if (err < 0) {
     fd8:	2a00      	cmp	r2, #0
     fda:	db07      	blt.n	fec <http_client_socket_event_handler+0xb0>
			return 0;
     fdc:	2100      	movs	r1, #0
     fde:	e001      	b.n	fe4 <http_client_socket_event_handler+0xa8>
			return -EIO;
     fe0:	2105      	movs	r1, #5
     fe2:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
     fe4:	0020      	movs	r0, r4
     fe6:	4b41      	ldr	r3, [pc, #260]	; (10ec <http_client_socket_event_handler+0x1b0>)
     fe8:	4798      	blx	r3
     fea:	e7b5      	b.n	f58 <http_client_socket_event_handler+0x1c>
				return -EIO;
     fec:	2105      	movs	r1, #5
     fee:	4249      	negs	r1, r1
     ff0:	e7f8      	b.n	fe4 <http_client_socket_event_handler+0xa8>
    	if (msg_recv->s16BufferSize > 0) {
     ff2:	2304      	movs	r3, #4
     ff4:	5ed1      	ldrsh	r1, [r2, r3]
     ff6:	2900      	cmp	r1, #0
     ff8:	dd06      	ble.n	1008 <http_client_socket_event_handler+0xcc>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
     ffa:	0020      	movs	r0, r4
     ffc:	4b3c      	ldr	r3, [pc, #240]	; (10f0 <http_client_socket_event_handler+0x1b4>)
     ffe:	4798      	blx	r3
		_http_client_recv_packet(module);
    1000:	0020      	movs	r0, r4
    1002:	4b37      	ldr	r3, [pc, #220]	; (10e0 <http_client_socket_event_handler+0x1a4>)
    1004:	4798      	blx	r3
		break;
    1006:	e7a7      	b.n	f58 <http_client_socket_event_handler+0x1c>
	switch (err) {
    1008:	000b      	movs	r3, r1
    100a:	330e      	adds	r3, #14
    100c:	b29a      	uxth	r2, r3
    100e:	2a0e      	cmp	r2, #14
    1010:	d81e      	bhi.n	1050 <http_client_socket_event_handler+0x114>
    1012:	0093      	lsls	r3, r2, #2
    1014:	4a37      	ldr	r2, [pc, #220]	; (10f4 <http_client_socket_event_handler+0x1b8>)
    1016:	58d3      	ldr	r3, [r2, r3]
    1018:	469f      	mov	pc, r3
			return -ENOENT;
    101a:	2102      	movs	r1, #2
    101c:	4249      	negs	r1, r1
    101e:	e01d      	b.n	105c <http_client_socket_event_handler+0x120>
			return -EADDRINUSE;
    1020:	2170      	movs	r1, #112	; 0x70
    1022:	4249      	negs	r1, r1
    1024:	e01a      	b.n	105c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    1026:	210c      	movs	r1, #12
    1028:	4249      	negs	r1, r1
    102a:	e017      	b.n	105c <http_client_socket_event_handler+0x120>
			return -EINVAL;
    102c:	2116      	movs	r1, #22
    102e:	4249      	negs	r1, r1
    1030:	e014      	b.n	105c <http_client_socket_event_handler+0x120>
			return -ENOMEM;
    1032:	210c      	movs	r1, #12
    1034:	4249      	negs	r1, r1
    1036:	e011      	b.n	105c <http_client_socket_event_handler+0x120>
			return -EDESTADDRREQ;
    1038:	2179      	movs	r1, #121	; 0x79
    103a:	4249      	negs	r1, r1
    103c:	e00e      	b.n	105c <http_client_socket_event_handler+0x120>
			return -ECONNRESET;
    103e:	2168      	movs	r1, #104	; 0x68
    1040:	4249      	negs	r1, r1
    1042:	e00b      	b.n	105c <http_client_socket_event_handler+0x120>
			return -EAGAIN;
    1044:	210b      	movs	r1, #11
    1046:	4249      	negs	r1, r1
    1048:	e008      	b.n	105c <http_client_socket_event_handler+0x120>
			return -EBUSY; /* HW error occurred. Retry it*/
    104a:	2110      	movs	r1, #16
    104c:	4249      	negs	r1, r1
    104e:	e005      	b.n	105c <http_client_socket_event_handler+0x120>
			if (err < 0) {
    1050:	2900      	cmp	r1, #0
    1052:	db07      	blt.n	1064 <http_client_socket_event_handler+0x128>
			return 0;
    1054:	2100      	movs	r1, #0
    1056:	e001      	b.n	105c <http_client_socket_event_handler+0x120>
			return -EIO;
    1058:	2105      	movs	r1, #5
    105a:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
    105c:	0020      	movs	r0, r4
    105e:	4b23      	ldr	r3, [pc, #140]	; (10ec <http_client_socket_event_handler+0x1b0>)
    1060:	4798      	blx	r3
    1062:	e7cd      	b.n	1000 <http_client_socket_event_handler+0xc4>
				return -EIO;
    1064:	2105      	movs	r1, #5
    1066:	4249      	negs	r1, r1
    1068:	e7f8      	b.n	105c <http_client_socket_event_handler+0x120>
		send_ret = *(int16_t*)msg_data;
    106a:	2300      	movs	r3, #0
    106c:	5ed3      	ldrsh	r3, [r2, r3]
		if (send_ret < 0) {
    106e:	2b00      	cmp	r3, #0
    1070:	db08      	blt.n	1084 <http_client_socket_event_handler+0x148>
    		_http_client_request(module);
    1072:	0020      	movs	r0, r4
    1074:	4b1b      	ldr	r3, [pc, #108]	; (10e4 <http_client_socket_event_handler+0x1a8>)
    1076:	4798      	blx	r3
		module->sending = 0;
    1078:	2241      	movs	r2, #65	; 0x41
    107a:	5ca3      	ldrb	r3, [r4, r2]
    107c:	2101      	movs	r1, #1
    107e:	438b      	bics	r3, r1
    1080:	54a3      	strb	r3, [r4, r2]
    	break;
    1082:	e769      	b.n	f58 <http_client_socket_event_handler+0x1c>
	switch (err) {
    1084:	330e      	adds	r3, #14
    1086:	b29a      	uxth	r2, r3
    1088:	2a0d      	cmp	r2, #13
    108a:	d81e      	bhi.n	10ca <http_client_socket_event_handler+0x18e>
    108c:	0093      	lsls	r3, r2, #2
    108e:	4a1a      	ldr	r2, [pc, #104]	; (10f8 <http_client_socket_event_handler+0x1bc>)
    1090:	58d3      	ldr	r3, [r2, r3]
    1092:	469f      	mov	pc, r3
			return -ENOENT;
    1094:	2102      	movs	r1, #2
    1096:	4249      	negs	r1, r1
    1098:	e019      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -EADDRINUSE;
    109a:	2170      	movs	r1, #112	; 0x70
    109c:	4249      	negs	r1, r1
    109e:	e016      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    10a0:	210c      	movs	r1, #12
    10a2:	4249      	negs	r1, r1
    10a4:	e013      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -EINVAL;
    10a6:	2116      	movs	r1, #22
    10a8:	4249      	negs	r1, r1
    10aa:	e010      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -ENOMEM;
    10ac:	210c      	movs	r1, #12
    10ae:	4249      	negs	r1, r1
    10b0:	e00d      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -EDESTADDRREQ;
    10b2:	2179      	movs	r1, #121	; 0x79
    10b4:	4249      	negs	r1, r1
    10b6:	e00a      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -ECONNRESET;
    10b8:	2168      	movs	r1, #104	; 0x68
    10ba:	4249      	negs	r1, r1
    10bc:	e007      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -EAGAIN;
    10be:	210b      	movs	r1, #11
    10c0:	4249      	negs	r1, r1
    10c2:	e004      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -EBUSY; /* HW error occurred. Retry it*/
    10c4:	2110      	movs	r1, #16
    10c6:	4249      	negs	r1, r1
    10c8:	e001      	b.n	10ce <http_client_socket_event_handler+0x192>
			return -EIO;
    10ca:	2105      	movs	r1, #5
    10cc:	4249      	negs	r1, r1
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
    10ce:	0020      	movs	r0, r4
    10d0:	4b06      	ldr	r3, [pc, #24]	; (10ec <http_client_socket_event_handler+0x1b0>)
    10d2:	4798      	blx	r3
    10d4:	e7d0      	b.n	1078 <http_client_socket_event_handler+0x13c>
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	200002f0 	.word	0x200002f0
    10dc:	00001289 	.word	0x00001289
    10e0:	00000aa9 	.word	0x00000aa9
    10e4:	000003a1 	.word	0x000003a1
    10e8:	00015790 	.word	0x00015790
    10ec:	00000289 	.word	0x00000289
    10f0:	00000f09 	.word	0x00000f09
    10f4:	000157cc 	.word	0x000157cc
    10f8:	00015808 	.word	0x00015808

000010fc <stream_writer_init>:
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    10fc:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    10fe:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    1100:	2200      	movs	r2, #0
    1102:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    1104:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    1106:	9b00      	ldr	r3, [sp, #0]
    1108:	60c3      	str	r3, [r0, #12]
}
    110a:	4770      	bx	lr

0000110c <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    110c:	b510      	push	{r4, lr}
    110e:	0004      	movs	r4, r0
	if(writer->written > 0) {
    1110:	6842      	ldr	r2, [r0, #4]
    1112:	2a00      	cmp	r2, #0
    1114:	d100      	bne.n	1118 <stream_writer_send_remain+0xc>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
		writer->written = 0;
	}
}
    1116:	bd10      	pop	{r4, pc}
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    1118:	6901      	ldr	r1, [r0, #16]
    111a:	68c0      	ldr	r0, [r0, #12]
    111c:	68a3      	ldr	r3, [r4, #8]
    111e:	4798      	blx	r3
		writer->written = 0;
    1120:	2300      	movs	r3, #0
    1122:	6063      	str	r3, [r4, #4]
}
    1124:	e7f7      	b.n	1116 <stream_writer_send_remain+0xa>
	...

00001128 <stream_writer_send_8>:
{
    1128:	b570      	push	{r4, r5, r6, lr}
    112a:	0004      	movs	r4, r0
    112c:	000d      	movs	r5, r1
	int remain = writer->max_size - writer->written;
    112e:	6803      	ldr	r3, [r0, #0]
    1130:	6842      	ldr	r2, [r0, #4]
    1132:	1a9b      	subs	r3, r3, r2
	if (remain < 1) {
    1134:	2b00      	cmp	r3, #0
    1136:	dd05      	ble.n	1144 <stream_writer_send_8+0x1c>
	writer->buffer[writer->written++] = (char)value;
    1138:	6922      	ldr	r2, [r4, #16]
    113a:	6863      	ldr	r3, [r4, #4]
    113c:	1c59      	adds	r1, r3, #1
    113e:	6061      	str	r1, [r4, #4]
    1140:	54d5      	strb	r5, [r2, r3]
}
    1142:	bd70      	pop	{r4, r5, r6, pc}
		stream_writer_send_remain(writer);
    1144:	4b01      	ldr	r3, [pc, #4]	; (114c <stream_writer_send_8+0x24>)
    1146:	4798      	blx	r3
    1148:	e7f6      	b.n	1138 <stream_writer_send_8+0x10>
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	0000110d 	.word	0x0000110d

00001150 <stream_writer_send_buffer>:
{
    1150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1152:	0006      	movs	r6, r0
    1154:	000c      	movs	r4, r1
	for (; length > 0; length--, buffer++) {
    1156:	2a00      	cmp	r2, #0
    1158:	d008      	beq.n	116c <stream_writer_send_buffer+0x1c>
    115a:	188d      	adds	r5, r1, r2
		stream_writer_send_8(writer, *buffer);
    115c:	4f04      	ldr	r7, [pc, #16]	; (1170 <stream_writer_send_buffer+0x20>)
    115e:	2100      	movs	r1, #0
    1160:	5661      	ldrsb	r1, [r4, r1]
    1162:	0030      	movs	r0, r6
    1164:	47b8      	blx	r7
	for (; length > 0; length--, buffer++) {
    1166:	3401      	adds	r4, #1
    1168:	42a5      	cmp	r5, r4
    116a:	d1f8      	bne.n	115e <stream_writer_send_buffer+0xe>
}
    116c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    116e:	46c0      	nop			; (mov r8, r8)
    1170:	00001129 	.word	0x00001129

00001174 <sw_timer_tcc_callback>:
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    1174:	4a02      	ldr	r2, [pc, #8]	; (1180 <sw_timer_tcc_callback+0xc>)
    1176:	6813      	ldr	r3, [r2, #0]
    1178:	3301      	adds	r3, #1
    117a:	6013      	str	r3, [r2, #0]
}
    117c:	4770      	bx	lr
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	2000030c 	.word	0x2000030c

00001184 <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);

	config->accuracy = 100;
    1184:	2364      	movs	r3, #100	; 0x64
    1186:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    1188:	2300      	movs	r3, #0
    118a:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    118c:	7043      	strb	r3, [r0, #1]
}
    118e:	4770      	bx	lr

00001190 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    1190:	b5f0      	push	{r4, r5, r6, r7, lr}
    1192:	46c6      	mov	lr, r8
    1194:	b500      	push	{lr}
    1196:	b0ac      	sub	sp, #176	; 0xb0
    1198:	000d      	movs	r5, r1
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    119a:	466e      	mov	r6, sp
    119c:	4b1d      	ldr	r3, [pc, #116]	; (1214 <sw_timer_init+0x84>)
    119e:	466a      	mov	r2, sp
    11a0:	cb92      	ldmia	r3!, {r1, r4, r7}
    11a2:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
    11a4:	886b      	ldrh	r3, [r5, #2]
    11a6:	6543      	str	r3, [r0, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    11a8:	3014      	adds	r0, #20
    11aa:	0004      	movs	r4, r0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    11ac:	782b      	ldrb	r3, [r5, #0]
    11ae:	009b      	lsls	r3, r3, #2
    11b0:	5999      	ldr	r1, [r3, r6]
    11b2:	0017      	movs	r7, r2
    11b4:	0010      	movs	r0, r2
    11b6:	4b18      	ldr	r3, [pc, #96]	; (1218 <sw_timer_init+0x88>)
    11b8:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    11ba:	2000      	movs	r0, #0
    11bc:	4b17      	ldr	r3, [pc, #92]	; (121c <sw_timer_init+0x8c>)
    11be:	4798      	blx	r3
    11c0:	4b17      	ldr	r3, [pc, #92]	; (1220 <sw_timer_init+0x90>)
    11c2:	7a1b      	ldrb	r3, [r3, #8]
    11c4:	b2db      	uxtb	r3, r3
    11c6:	40d8      	lsrs	r0, r3
    11c8:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    11ca:	8869      	ldrh	r1, [r5, #2]
    11cc:	20fa      	movs	r0, #250	; 0xfa
    11ce:	0200      	lsls	r0, r0, #8
    11d0:	4b14      	ldr	r3, [pc, #80]	; (1224 <sw_timer_init+0x94>)
    11d2:	4798      	blx	r3
    11d4:	0001      	movs	r1, r0
    11d6:	4640      	mov	r0, r8
    11d8:	4b13      	ldr	r3, [pc, #76]	; (1228 <sw_timer_init+0x98>)
    11da:	4798      	blx	r3
    11dc:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    11de:	2305      	movs	r3, #5
    11e0:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    11e2:	782b      	ldrb	r3, [r5, #0]
    11e4:	009b      	lsls	r3, r3, #2
    11e6:	5999      	ldr	r1, [r3, r6]
    11e8:	003a      	movs	r2, r7
    11ea:	0020      	movs	r0, r4
    11ec:	4b0f      	ldr	r3, [pc, #60]	; (122c <sw_timer_init+0x9c>)
    11ee:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    11f0:	786a      	ldrb	r2, [r5, #1]
    11f2:	3208      	adds	r2, #8
    11f4:	b2d2      	uxtb	r2, r2
    11f6:	490e      	ldr	r1, [pc, #56]	; (1230 <sw_timer_init+0xa0>)
    11f8:	0020      	movs	r0, r4
    11fa:	4b0e      	ldr	r3, [pc, #56]	; (1234 <sw_timer_init+0xa4>)
    11fc:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    11fe:	7869      	ldrb	r1, [r5, #1]
    1200:	3108      	adds	r1, #8
    1202:	b2c9      	uxtb	r1, r1
    1204:	0020      	movs	r0, r4
    1206:	4b0c      	ldr	r3, [pc, #48]	; (1238 <sw_timer_init+0xa8>)
    1208:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
    120a:	b02c      	add	sp, #176	; 0xb0
    120c:	bc04      	pop	{r2}
    120e:	4690      	mov	r8, r2
    1210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	00015978 	.word	0x00015978
    1218:	0000e225 	.word	0x0000e225
    121c:	0000dedd 	.word	0x0000dedd
    1220:	40000400 	.word	0x40000400
    1224:	00011e89 	.word	0x00011e89
    1228:	00011d75 	.word	0x00011d75
    122c:	0000e371 	.word	0x0000e371
    1230:	00001175 	.word	0x00001175
    1234:	0000e78d 	.word	0x0000e78d
    1238:	0000e7a5 	.word	0x0000e7a5

0000123c <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    123c:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    123e:	2102      	movs	r1, #2
    1240:	6893      	ldr	r3, [r2, #8]
    1242:	4219      	tst	r1, r3
    1244:	d1fc      	bne.n	1240 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1246:	6813      	ldr	r3, [r2, #0]
    1248:	2102      	movs	r1, #2
    124a:	430b      	orrs	r3, r1
    124c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
    124e:	4770      	bx	lr

00001250 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    1254:	7805      	ldrb	r5, [r0, #0]
    1256:	07e8      	lsls	r0, r5, #31
    1258:	d502      	bpl.n	1260 <sw_timer_register_callback+0x10>
			handler->period = period / module_inst->accuracy;
			handler->used = 1;
			return index;
		}
	}
	return -1;
    125a:	2001      	movs	r0, #1
    125c:	4240      	negs	r0, r0
}
    125e:	bd70      	pop	{r4, r5, r6, pc}
			handler->callback = callback;
    1260:	6061      	str	r1, [r4, #4]
			handler->callback_enable = 0;
    1262:	0029      	movs	r1, r5
    1264:	2002      	movs	r0, #2
    1266:	4381      	bics	r1, r0
    1268:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    126a:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    126c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    126e:	0018      	movs	r0, r3
    1270:	4b04      	ldr	r3, [pc, #16]	; (1284 <sw_timer_register_callback+0x34>)
    1272:	4798      	blx	r3
    1274:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    1276:	7823      	ldrb	r3, [r4, #0]
    1278:	2201      	movs	r2, #1
    127a:	4313      	orrs	r3, r2
    127c:	7023      	strb	r3, [r4, #0]
			return index;
    127e:	2000      	movs	r0, #0
    1280:	e7ed      	b.n	125e <sw_timer_register_callback+0xe>
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	00011d75 	.word	0x00011d75

00001288 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    1288:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 1;
    128a:	008b      	lsls	r3, r1, #2
    128c:	185d      	adds	r5, r3, r1
    128e:	00ad      	lsls	r5, r5, #2
    1290:	5c29      	ldrb	r1, [r5, r0]
    1292:	2602      	movs	r6, #2
    1294:	4331      	orrs	r1, r6
    1296:	5429      	strb	r1, [r5, r0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    1298:	1944      	adds	r4, r0, r5
    129a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    129c:	0010      	movs	r0, r2
    129e:	4b03      	ldr	r3, [pc, #12]	; (12ac <sw_timer_enable_callback+0x24>)
    12a0:	4798      	blx	r3
    12a2:	4b03      	ldr	r3, [pc, #12]	; (12b0 <sw_timer_enable_callback+0x28>)
    12a4:	681b      	ldr	r3, [r3, #0]
    12a6:	18c0      	adds	r0, r0, r3
    12a8:	6120      	str	r0, [r4, #16]
}
    12aa:	bd70      	pop	{r4, r5, r6, pc}
    12ac:	00011d75 	.word	0x00011d75
    12b0:	2000030c 	.word	0x2000030c

000012b4 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];

	handler->callback_enable = 0;
    12b4:	008b      	lsls	r3, r1, #2
    12b6:	1859      	adds	r1, r3, r1
    12b8:	0089      	lsls	r1, r1, #2
    12ba:	5c0b      	ldrb	r3, [r1, r0]
    12bc:	2202      	movs	r2, #2
    12be:	4393      	bics	r3, r2
    12c0:	540b      	strb	r3, [r1, r0]
}
    12c2:	4770      	bx	lr

000012c4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    12c4:	b570      	push	{r4, r5, r6, lr}
    12c6:	0004      	movs	r4, r0
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    12c8:	7803      	ldrb	r3, [r0, #0]
    12ca:	07db      	lsls	r3, r3, #31
    12cc:	d507      	bpl.n	12de <sw_timer_task+0x1a>
    12ce:	7803      	ldrb	r3, [r0, #0]
    12d0:	079b      	lsls	r3, r3, #30
    12d2:	d504      	bpl.n	12de <sw_timer_task+0x1a>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    12d4:	4b10      	ldr	r3, [pc, #64]	; (1318 <sw_timer_task+0x54>)
    12d6:	681a      	ldr	r2, [r3, #0]
    12d8:	6903      	ldr	r3, [r0, #16]
    12da:	1a9b      	subs	r3, r3, r2
    12dc:	d400      	bmi.n	12e0 <sw_timer_task+0x1c>
				/* Leave critical section. */
				handler->busy = 0;
			}
		}
	}
}
    12de:	bd70      	pop	{r4, r5, r6, pc}
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    12e0:	7803      	ldrb	r3, [r0, #0]
    12e2:	075b      	lsls	r3, r3, #29
    12e4:	d4fb      	bmi.n	12de <sw_timer_task+0x1a>
				handler->busy = 1;
    12e6:	7803      	ldrb	r3, [r0, #0]
    12e8:	2104      	movs	r1, #4
    12ea:	430b      	orrs	r3, r1
    12ec:	7003      	strb	r3, [r0, #0]
				if (handler->period > 0) {
    12ee:	68c3      	ldr	r3, [r0, #12]
    12f0:	2b00      	cmp	r3, #0
    12f2:	d00b      	beq.n	130c <sw_timer_task+0x48>
					handler->expire_time = sw_timer_tick + handler->period;
    12f4:	18d2      	adds	r2, r2, r3
    12f6:	6102      	str	r2, [r0, #16]
				handler->callback(module_inst, index, handler->context, handler->period);
    12f8:	68a2      	ldr	r2, [r4, #8]
    12fa:	2100      	movs	r1, #0
    12fc:	0020      	movs	r0, r4
    12fe:	6865      	ldr	r5, [r4, #4]
    1300:	47a8      	blx	r5
				handler->busy = 0;
    1302:	7823      	ldrb	r3, [r4, #0]
    1304:	2204      	movs	r2, #4
    1306:	4393      	bics	r3, r2
    1308:	7023      	strb	r3, [r4, #0]
}
    130a:	e7e8      	b.n	12de <sw_timer_task+0x1a>
					handler->callback_enable = 0;
    130c:	7802      	ldrb	r2, [r0, #0]
    130e:	2102      	movs	r1, #2
    1310:	438a      	bics	r2, r1
    1312:	7002      	strb	r2, [r0, #0]
    1314:	e7f0      	b.n	12f8 <sw_timer_task+0x34>
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	2000030c 	.word	0x2000030c

0000131c <Wirewrite>:
	_length = 0;
}

static void Wirewrite(byte data)
{
	_data[_length++] = data;
    131c:	4a03      	ldr	r2, [pc, #12]	; (132c <Wirewrite+0x10>)
    131e:	7813      	ldrb	r3, [r2, #0]
    1320:	1c59      	adds	r1, r3, #1
    1322:	7011      	strb	r1, [r2, #0]
    1324:	4a02      	ldr	r2, [pc, #8]	; (1330 <Wirewrite+0x14>)
    1326:	54d0      	strb	r0, [r2, r3]
}
    1328:	4770      	bx	lr
    132a:	46c0      	nop			; (mov r8, r8)
    132c:	200003d8 	.word	0x200003d8
    1330:	20000310 	.word	0x20000310

00001334 <ssd1306_command>:
	i2c_write(_data, _length);
}

/////////////////////////////////the rest of library/////////////////////////////

static void ssd1306_command(uint8_t c) {
    1334:	b500      	push	{lr}
    1336:	b087      	sub	sp, #28
	// I2C
	uint8_t control = 0x00;   // Co = 0, D/C = 0
	const uint8_t length = 2U;
	uint8_t data[length];
	data[0] = control;
    1338:	ab05      	add	r3, sp, #20
    133a:	2200      	movs	r2, #0
    133c:	701a      	strb	r2, [r3, #0]
	data[1] = c;
    133e:	7058      	strb	r0, [r3, #1]
	i2cData.address = SSD1306_I2C_ADDRESS; // Set the I2C address
    1340:	a801      	add	r0, sp, #4
    1342:	323c      	adds	r2, #60	; 0x3c
    1344:	7002      	strb	r2, [r0, #0]
	i2cData.msgOut = data;                 // Set the data to be sent
    1346:	6043      	str	r3, [r0, #4]
	i2cData.lenOut = len;                  // Set the length of the data
    1348:	2302      	movs	r3, #2
    134a:	81c3      	strh	r3, [r0, #14]
	int32_t error = I2cWriteDataWait(&i2cData, portMAX_DELAY);
    134c:	2101      	movs	r1, #1
    134e:	4249      	negs	r1, r1
    1350:	4b01      	ldr	r3, [pc, #4]	; (1358 <ssd1306_command+0x24>)
    1352:	4798      	blx	r3
	i2c_write(data, length);
}
    1354:	b007      	add	sp, #28
    1356:	bd00      	pop	{pc}
    1358:	00003a35 	.word	0x00003a35

0000135c <WireendTransmission>:
{
    135c:	b500      	push	{lr}
    135e:	b085      	sub	sp, #20
	i2c_write(_data, _length);
    1360:	4b07      	ldr	r3, [pc, #28]	; (1380 <WireendTransmission+0x24>)
    1362:	781b      	ldrb	r3, [r3, #0]
	i2cData.address = SSD1306_I2C_ADDRESS; // Set the I2C address
    1364:	223c      	movs	r2, #60	; 0x3c
    1366:	4669      	mov	r1, sp
    1368:	700a      	strb	r2, [r1, #0]
	i2cData.msgOut = data;                 // Set the data to be sent
    136a:	4a06      	ldr	r2, [pc, #24]	; (1384 <WireendTransmission+0x28>)
    136c:	9201      	str	r2, [sp, #4]
	i2cData.lenOut = len;                  // Set the length of the data
    136e:	81cb      	strh	r3, [r1, #14]
	int32_t error = I2cWriteDataWait(&i2cData, portMAX_DELAY);
    1370:	2101      	movs	r1, #1
    1372:	4249      	negs	r1, r1
    1374:	4668      	mov	r0, sp
    1376:	4b04      	ldr	r3, [pc, #16]	; (1388 <WireendTransmission+0x2c>)
    1378:	4798      	blx	r3
}
    137a:	b005      	add	sp, #20
    137c:	bd00      	pop	{pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	200003d8 	.word	0x200003d8
    1384:	20000310 	.word	0x20000310
    1388:	00003a35 	.word	0x00003a35

0000138c <i2c_begin>:

void i2c_begin() {
    138c:	b5f0      	push	{r4, r5, r6, r7, lr}
    138e:	46de      	mov	lr, fp
    1390:	4657      	mov	r7, sl
    1392:	464e      	mov	r6, r9
    1394:	4645      	mov	r5, r8
    1396:	b5e0      	push	{r5, r6, r7, lr}
    1398:	b083      	sub	sp, #12
	uint8_t vccstate = SSD1306_SWITCHCAPVCC;
	uint8_t i2caddr = SSD1306_I2C_ADDRESS;
	m_font = FONT_SIZE_SMALL;
    139a:	2200      	movs	r2, #0
    139c:	4b3c      	ldr	r3, [pc, #240]	; (1490 <i2c_begin+0x104>)
    139e:	701a      	strb	r2, [r3, #0]
	m_flags = FLAG_PAD_ZERO;
    13a0:	3201      	adds	r2, #1
    13a2:	4b3c      	ldr	r3, [pc, #240]	; (1494 <i2c_begin+0x108>)
    13a4:	701a      	strb	r2, [r3, #0]
	_i2caddr = i2caddr;
    13a6:	323b      	adds	r2, #59	; 0x3b
    13a8:	4b3b      	ldr	r3, [pc, #236]	; (1498 <i2c_begin+0x10c>)
    13aa:	701a      	strb	r2, [r3, #0]
	
	//wait for older OLEDs to start up after power on
	delay_ms(100);
    13ac:	2064      	movs	r0, #100	; 0x64
    13ae:	4d3b      	ldr	r5, [pc, #236]	; (149c <i2c_begin+0x110>)
    13b0:	47a8      	blx	r5
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
	#endif

	#if defined SSD1306_128_64
	// Init sequence for 128x64 OLED module
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
    13b2:	20ae      	movs	r0, #174	; 0xae
    13b4:	4c3a      	ldr	r4, [pc, #232]	; (14a0 <i2c_begin+0x114>)
    13b6:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
    13b8:	20d5      	movs	r0, #213	; 0xd5
    13ba:	47a0      	blx	r4
	ssd1306_command(0x80);                                  // the suggested ratio 0x80
    13bc:	2080      	movs	r0, #128	; 0x80
    13be:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
    13c0:	20a8      	movs	r0, #168	; 0xa8
    13c2:	47a0      	blx	r4
	ssd1306_command(0x3F);
    13c4:	203f      	movs	r0, #63	; 0x3f
    13c6:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
    13c8:	20d3      	movs	r0, #211	; 0xd3
    13ca:	47a0      	blx	r4
	ssd1306_command(0x0);                                   // no offset
    13cc:	2000      	movs	r0, #0
    13ce:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
    13d0:	2040      	movs	r0, #64	; 0x40
    13d2:	47a0      	blx	r4
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
    13d4:	208d      	movs	r0, #141	; 0x8d
    13d6:	47a0      	blx	r4
	if (vccstate == SSD1306_EXTERNALVCC)
	{ ssd1306_command(0x10); }
	else
	{ ssd1306_command(0x14); }
    13d8:	2014      	movs	r0, #20
    13da:	47a0      	blx	r4
	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
    13dc:	2020      	movs	r0, #32
    13de:	47a0      	blx	r4
	ssd1306_command(0x00);                                  // 0x0 act like ks0108
    13e0:	2000      	movs	r0, #0
    13e2:	47a0      	blx	r4
	ssd1306_command(SSD1306_SEGREMAP | 0x1);
    13e4:	20a1      	movs	r0, #161	; 0xa1
    13e6:	47a0      	blx	r4
	ssd1306_command(SSD1306_COMSCANDEC);
    13e8:	20c8      	movs	r0, #200	; 0xc8
    13ea:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
    13ec:	20da      	movs	r0, #218	; 0xda
    13ee:	47a0      	blx	r4
	ssd1306_command(0x12);
    13f0:	2012      	movs	r0, #18
    13f2:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
    13f4:	2081      	movs	r0, #129	; 0x81
    13f6:	47a0      	blx	r4
	if (vccstate == SSD1306_EXTERNALVCC)
	{ ssd1306_command(0x9F); }
	else
	{ ssd1306_command(0xCF); }
    13f8:	20cf      	movs	r0, #207	; 0xcf
    13fa:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
    13fc:	20d9      	movs	r0, #217	; 0xd9
    13fe:	47a0      	blx	r4
	if (vccstate == SSD1306_EXTERNALVCC)
	{ ssd1306_command(0x22); }
	else
	{ ssd1306_command(0xF1); }
    1400:	20f1      	movs	r0, #241	; 0xf1
    1402:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
    1404:	20db      	movs	r0, #219	; 0xdb
    1406:	47a0      	blx	r4
	ssd1306_command(0x40);
    1408:	2040      	movs	r0, #64	; 0x40
    140a:	47a0      	blx	r4
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    140c:	20a4      	movs	r0, #164	; 0xa4
    140e:	47a0      	blx	r4
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
    1410:	20a6      	movs	r0, #166	; 0xa6
    1412:	47a0      	blx	r4
	#endif

	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
    1414:	20af      	movs	r0, #175	; 0xaf
    1416:	47a0      	blx	r4

	// clear screen
	delay_ms(5);
    1418:	2005      	movs	r0, #5
    141a:	47a8      	blx	r5

	ssd1306_command(SSD1306_SETLOWCOLUMN | 0x0);  // low col = 0
    141c:	2000      	movs	r0, #0
    141e:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETHIGHCOLUMN | 0x0);  // hi col = 0
    1420:	2010      	movs	r0, #16
    1422:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0); // line #0
    1424:	2040      	movs	r0, #64	; 0x40
    1426:	47a0      	blx	r4
    1428:	23b0      	movs	r3, #176	; 0xb0
    142a:	9301      	str	r3, [sp, #4]

	for (byte i = 0; i < SSD1306_LCDHEIGHT / 8; i++) {
		// send a bunch of data in one xmission
		ssd1306_command(0xB0 + i);//set page address
    142c:	4b1c      	ldr	r3, [pc, #112]	; (14a0 <i2c_begin+0x114>)
    142e:	469b      	mov	fp, r3
	_length = 0;
    1430:	4b1c      	ldr	r3, [pc, #112]	; (14a4 <i2c_begin+0x118>)
    1432:	469a      	mov	sl, r3
		ssd1306_command(0);//set lower column address
		ssd1306_command(0x10);//set higher column address

		for(byte j = 0; j < 8; j++){
			WirebeginTransmission(_i2caddr);
			Wirewrite(0x40);
    1434:	4b1c      	ldr	r3, [pc, #112]	; (14a8 <i2c_begin+0x11c>)
    1436:	4699      	mov	r9, r3
    1438:	e005      	b.n	1446 <i2c_begin+0xba>
    143a:	9b01      	ldr	r3, [sp, #4]
    143c:	3301      	adds	r3, #1
    143e:	b2db      	uxtb	r3, r3
    1440:	9301      	str	r3, [sp, #4]
	for (byte i = 0; i < SSD1306_LCDHEIGHT / 8; i++) {
    1442:	2bb8      	cmp	r3, #184	; 0xb8
    1444:	d01c      	beq.n	1480 <i2c_begin+0xf4>
		ssd1306_command(0xB0 + i);//set page address
    1446:	9801      	ldr	r0, [sp, #4]
    1448:	47d8      	blx	fp
		ssd1306_command(0);//set lower column address
    144a:	2000      	movs	r0, #0
    144c:	47d8      	blx	fp
		ssd1306_command(0x10);//set higher column address
    144e:	2010      	movs	r0, #16
    1450:	47d8      	blx	fp
    1452:	2708      	movs	r7, #8
	_length = 0;
    1454:	2500      	movs	r5, #0
    1456:	46a8      	mov	r8, r5
			for (byte k = 0; k < SSD1306_LCDWIDTH / 8; k++) {
				Wirewrite(0);
    1458:	4e13      	ldr	r6, [pc, #76]	; (14a8 <i2c_begin+0x11c>)
	_length = 0;
    145a:	4653      	mov	r3, sl
    145c:	4642      	mov	r2, r8
    145e:	701a      	strb	r2, [r3, #0]
			Wirewrite(0x40);
    1460:	2040      	movs	r0, #64	; 0x40
    1462:	47c8      	blx	r9
    1464:	2410      	movs	r4, #16
				Wirewrite(0);
    1466:	0028      	movs	r0, r5
    1468:	47b0      	blx	r6
    146a:	3c01      	subs	r4, #1
    146c:	b2e4      	uxtb	r4, r4
			for (byte k = 0; k < SSD1306_LCDWIDTH / 8; k++) {
    146e:	2c00      	cmp	r4, #0
    1470:	d1f9      	bne.n	1466 <i2c_begin+0xda>
			}
			WireendTransmission();
    1472:	4b0e      	ldr	r3, [pc, #56]	; (14ac <i2c_begin+0x120>)
    1474:	4798      	blx	r3
    1476:	3f01      	subs	r7, #1
    1478:	b2ff      	uxtb	r7, r7
		for(byte j = 0; j < 8; j++){
    147a:	2f00      	cmp	r7, #0
    147c:	d1ed      	bne.n	145a <i2c_begin+0xce>
    147e:	e7dc      	b.n	143a <i2c_begin+0xae>
	//set brightness to dim the display slightly if the display is too bright
	//ssd1306_command(SSD1306_SETPRECHARGE);
	//ssd1306_command(16);
	//ssd1306_command(SSD1306_SETCONTRAST);
	//ssd1306_command(255);
}
    1480:	b003      	add	sp, #12
    1482:	bc3c      	pop	{r2, r3, r4, r5}
    1484:	4690      	mov	r8, r2
    1486:	4699      	mov	r9, r3
    1488:	46a2      	mov	sl, r4
    148a:	46ab      	mov	fp, r5
    148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    148e:	46c0      	nop			; (mov r8, r8)
    1490:	20004332 	.word	0x20004332
    1494:	20004334 	.word	0x20004334
    1498:	20004331 	.word	0x20004331
    149c:	00008fe1 	.word	0x00008fe1
    14a0:	00001335 	.word	0x00001335
    14a4:	200003d8 	.word	0x200003d8
    14a8:	0000131d 	.word	0x0000131d
    14ac:	0000135d 	.word	0x0000135d

000014b0 <i2c_setCursor>:
		i2c_writeDigit(v);
	}
}

void i2c_setCursor(byte column, byte line)
{
    14b0:	b570      	push	{r4, r5, r6, lr}
	m_col = column;
    14b2:	4d09      	ldr	r5, [pc, #36]	; (14d8 <i2c_setCursor+0x28>)
    14b4:	7028      	strb	r0, [r5, #0]
	m_row = line;
    14b6:	4b09      	ldr	r3, [pc, #36]	; (14dc <i2c_setCursor+0x2c>)
    14b8:	7019      	strb	r1, [r3, #0]
	ssd1306_command(0xB0 + m_row);//set page address
    14ba:	3950      	subs	r1, #80	; 0x50
    14bc:	b2c8      	uxtb	r0, r1
    14be:	4c08      	ldr	r4, [pc, #32]	; (14e0 <i2c_setCursor+0x30>)
    14c0:	47a0      	blx	r4
	ssd1306_command(m_col & 0xf);//set lower column address
    14c2:	782b      	ldrb	r3, [r5, #0]
    14c4:	200f      	movs	r0, #15
    14c6:	4018      	ands	r0, r3
    14c8:	47a0      	blx	r4
	ssd1306_command(0x10 | (m_col >> 4));//set higher column address
    14ca:	7828      	ldrb	r0, [r5, #0]
    14cc:	0900      	lsrs	r0, r0, #4
    14ce:	2310      	movs	r3, #16
    14d0:	4318      	orrs	r0, r3
    14d2:	47a0      	blx	r4
}
    14d4:	bd70      	pop	{r4, r5, r6, pc}
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	20004333 	.word	0x20004333
    14dc:	20004330 	.word	0x20004330
    14e0:	00001335 	.word	0x00001335

000014e4 <i2c_write_char>:

size_t i2c_write_char(uint8_t c)
{
    14e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14e6:	46d6      	mov	lr, sl
    14e8:	464f      	mov	r7, r9
    14ea:	4646      	mov	r6, r8
    14ec:	b5c0      	push	{r6, r7, lr}
    14ee:	0004      	movs	r4, r0
	
	if (c == '\n') {
    14f0:	280a      	cmp	r0, #10
    14f2:	d02b      	beq.n	154c <i2c_write_char+0x68>
		i2c_setCursor(0, m_row + ((m_font == FONT_SIZE_SMALL) ? 1 : 2));
		return 1;
		} else if (c == '\r') {
    14f4:	280d      	cmp	r0, #13
    14f6:	d03b      	beq.n	1570 <i2c_write_char+0x8c>
		m_col = 0;
		return 1;
	}
	#ifndef MEMORY_SAVING
	if (m_font == FONT_SIZE_SMALL) {
    14f8:	4b96      	ldr	r3, [pc, #600]	; (1754 <i2c_write_char+0x270>)
    14fa:	781b      	ldrb	r3, [r3, #0]
    14fc:	2b00      	cmp	r3, #0
    14fe:	d03b      	beq.n	1578 <i2c_write_char+0x94>
			m_col = 0;
			m_row ++;
		}
		#ifndef MEMORY_SAVING
		} else {
		if (c > 0x20 && c < 0x7f) {
    1500:	3c21      	subs	r4, #33	; 0x21
    1502:	b2e4      	uxtb	r4, r4
    1504:	2c5d      	cmp	r4, #93	; 0x5d
    1506:	d900      	bls.n	150a <i2c_write_char+0x26>
    1508:	e0d0      	b.n	16ac <i2c_write_char+0x1c8>
			c -= 0x21;

			ssd1306_command(0xB0 + m_row);//set page address
    150a:	4b93      	ldr	r3, [pc, #588]	; (1758 <i2c_write_char+0x274>)
    150c:	7818      	ldrb	r0, [r3, #0]
    150e:	3850      	subs	r0, #80	; 0x50
    1510:	b2c0      	uxtb	r0, r0
    1512:	4d92      	ldr	r5, [pc, #584]	; (175c <i2c_write_char+0x278>)
    1514:	47a8      	blx	r5
			ssd1306_command(m_col & 0xf);//set lower column address
    1516:	4e92      	ldr	r6, [pc, #584]	; (1760 <i2c_write_char+0x27c>)
    1518:	7833      	ldrb	r3, [r6, #0]
    151a:	200f      	movs	r0, #15
    151c:	4018      	ands	r0, r3
    151e:	47a8      	blx	r5
			ssd1306_command(0x10 | (m_col >> 4));//set higher column address
    1520:	7830      	ldrb	r0, [r6, #0]
    1522:	0900      	lsrs	r0, r0, #4
    1524:	2310      	movs	r3, #16
    1526:	4318      	orrs	r0, r3
    1528:	47a8      	blx	r5
	_length = 0;
    152a:	2200      	movs	r2, #0
    152c:	4b8d      	ldr	r3, [pc, #564]	; (1764 <i2c_write_char+0x280>)
    152e:	701a      	strb	r2, [r3, #0]

			WirebeginTransmission(_i2caddr);
			Wirewrite(0x40);
    1530:	2040      	movs	r0, #64	; 0x40
    1532:	4b8d      	ldr	r3, [pc, #564]	; (1768 <i2c_write_char+0x284>)
    1534:	4798      	blx	r3
    1536:	4b8d      	ldr	r3, [pc, #564]	; (176c <i2c_write_char+0x288>)
    1538:	0127      	lsls	r7, r4, #4
    153a:	19df      	adds	r7, r3, r7
    153c:	1c62      	adds	r2, r4, #1
    153e:	0112      	lsls	r2, r2, #4
    1540:	4698      	mov	r8, r3
    1542:	4490      	add	r8, r2
			for (byte i = 0; i <= 14; i += 2) {
				byte d = pgm_read_byte(&font8x16_terminal[c][i]);
				Wirewrite(d);
    1544:	4b88      	ldr	r3, [pc, #544]	; (1768 <i2c_write_char+0x284>)
    1546:	469a      	mov	sl, r3
				if (m_flags & FLAG_PIXEL_DOUBLE_H) Wirewrite(d);
    1548:	4e89      	ldr	r6, [pc, #548]	; (1770 <i2c_write_char+0x28c>)
    154a:	e065      	b.n	1618 <i2c_write_char+0x134>
		i2c_setCursor(0, m_row + ((m_font == FONT_SIZE_SMALL) ? 1 : 2));
    154c:	4b81      	ldr	r3, [pc, #516]	; (1754 <i2c_write_char+0x270>)
    154e:	7819      	ldrb	r1, [r3, #0]
    1550:	1e4b      	subs	r3, r1, #1
    1552:	4199      	sbcs	r1, r3
    1554:	3101      	adds	r1, #1
    1556:	4b80      	ldr	r3, [pc, #512]	; (1758 <i2c_write_char+0x274>)
    1558:	781b      	ldrb	r3, [r3, #0]
    155a:	18c9      	adds	r1, r1, r3
    155c:	b2c9      	uxtb	r1, r1
    155e:	2000      	movs	r0, #0
    1560:	4b84      	ldr	r3, [pc, #528]	; (1774 <i2c_write_char+0x290>)
    1562:	4798      	blx	r3
			m_row += 2;
		}
	}
	#endif
	return 1;
}
    1564:	2001      	movs	r0, #1
    1566:	bc1c      	pop	{r2, r3, r4}
    1568:	4690      	mov	r8, r2
    156a:	4699      	mov	r9, r3
    156c:	46a2      	mov	sl, r4
    156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		m_col = 0;
    1570:	2200      	movs	r2, #0
    1572:	4b7b      	ldr	r3, [pc, #492]	; (1760 <i2c_write_char+0x27c>)
    1574:	701a      	strb	r2, [r3, #0]
		return 1;
    1576:	e7f5      	b.n	1564 <i2c_write_char+0x80>
	_length = 0;
    1578:	2200      	movs	r2, #0
    157a:	4b7a      	ldr	r3, [pc, #488]	; (1764 <i2c_write_char+0x280>)
    157c:	701a      	strb	r2, [r3, #0]
		Wirewrite(0x40);
    157e:	2040      	movs	r0, #64	; 0x40
    1580:	4b79      	ldr	r3, [pc, #484]	; (1768 <i2c_write_char+0x284>)
    1582:	4798      	blx	r3
		if (c > 0x20 && c < 0x7f) {
    1584:	3c21      	subs	r4, #33	; 0x21
    1586:	b2e4      	uxtb	r4, r4
    1588:	2c5d      	cmp	r4, #93	; 0x5d
    158a:	d82c      	bhi.n	15e6 <i2c_write_char+0x102>
    158c:	4b7a      	ldr	r3, [pc, #488]	; (1778 <i2c_write_char+0x294>)
    158e:	00a5      	lsls	r5, r4, #2
    1590:	192d      	adds	r5, r5, r4
    1592:	195d      	adds	r5, r3, r5
    1594:	3401      	adds	r4, #1
    1596:	00a2      	lsls	r2, r4, #2
    1598:	1914      	adds	r4, r2, r4
    159a:	191c      	adds	r4, r3, r4
				Wirewrite(d);
    159c:	4b72      	ldr	r3, [pc, #456]	; (1768 <i2c_write_char+0x284>)
    159e:	4698      	mov	r8, r3
				if (m_flags & FLAG_PIXEL_DOUBLE_H) Wirewrite(d);
    15a0:	4f73      	ldr	r7, [pc, #460]	; (1770 <i2c_write_char+0x28c>)
    15a2:	e002      	b.n	15aa <i2c_write_char+0xc6>
    15a4:	3501      	adds	r5, #1
			for (byte i = 0; i < 5; i++) {
    15a6:	42a5      	cmp	r5, r4
    15a8:	d009      	beq.n	15be <i2c_write_char+0xda>
	return *ptr;
    15aa:	782e      	ldrb	r6, [r5, #0]
				Wirewrite(d);
    15ac:	0030      	movs	r0, r6
    15ae:	47c0      	blx	r8
				if (m_flags & FLAG_PIXEL_DOUBLE_H) Wirewrite(d);
    15b0:	783b      	ldrb	r3, [r7, #0]
    15b2:	079b      	lsls	r3, r3, #30
    15b4:	d5f6      	bpl.n	15a4 <i2c_write_char+0xc0>
    15b6:	0030      	movs	r0, r6
    15b8:	4b6b      	ldr	r3, [pc, #428]	; (1768 <i2c_write_char+0x284>)
    15ba:	4798      	blx	r3
    15bc:	e7f2      	b.n	15a4 <i2c_write_char+0xc0>
			Wirewrite(0);
    15be:	2000      	movs	r0, #0
    15c0:	4b69      	ldr	r3, [pc, #420]	; (1768 <i2c_write_char+0x284>)
    15c2:	4798      	blx	r3
		WireendTransmission();
    15c4:	4b6d      	ldr	r3, [pc, #436]	; (177c <i2c_write_char+0x298>)
    15c6:	4798      	blx	r3
		m_col += (m_flags & FLAG_PIXEL_DOUBLE_H) ? 11 : 6;
    15c8:	4b69      	ldr	r3, [pc, #420]	; (1770 <i2c_write_char+0x28c>)
    15ca:	781a      	ldrb	r2, [r3, #0]
    15cc:	230b      	movs	r3, #11
    15ce:	0792      	lsls	r2, r2, #30
    15d0:	d400      	bmi.n	15d4 <i2c_write_char+0xf0>
    15d2:	3b05      	subs	r3, #5
    15d4:	4a62      	ldr	r2, [pc, #392]	; (1760 <i2c_write_char+0x27c>)
    15d6:	7812      	ldrb	r2, [r2, #0]
    15d8:	189b      	adds	r3, r3, r2
		if (m_col >= 128) {
    15da:	b2da      	uxtb	r2, r3
    15dc:	061b      	lsls	r3, r3, #24
    15de:	d410      	bmi.n	1602 <i2c_write_char+0x11e>
		m_col += (m_flags & FLAG_PIXEL_DOUBLE_H) ? 11 : 6;
    15e0:	4b5f      	ldr	r3, [pc, #380]	; (1760 <i2c_write_char+0x27c>)
    15e2:	701a      	strb	r2, [r3, #0]
    15e4:	e7be      	b.n	1564 <i2c_write_char+0x80>
			for (byte i = (m_flags & FLAG_PIXEL_DOUBLE_H) ? 11 : 6; i > 0; i--) {
    15e6:	4b62      	ldr	r3, [pc, #392]	; (1770 <i2c_write_char+0x28c>)
    15e8:	781b      	ldrb	r3, [r3, #0]
    15ea:	240b      	movs	r4, #11
    15ec:	079b      	lsls	r3, r3, #30
    15ee:	d400      	bmi.n	15f2 <i2c_write_char+0x10e>
    15f0:	3c05      	subs	r4, #5
				Wirewrite(0);
    15f2:	4d5d      	ldr	r5, [pc, #372]	; (1768 <i2c_write_char+0x284>)
    15f4:	2000      	movs	r0, #0
    15f6:	47a8      	blx	r5
			for (byte i = (m_flags & FLAG_PIXEL_DOUBLE_H) ? 11 : 6; i > 0; i--) {
    15f8:	3c01      	subs	r4, #1
    15fa:	b2e4      	uxtb	r4, r4
    15fc:	2c00      	cmp	r4, #0
    15fe:	d1f9      	bne.n	15f4 <i2c_write_char+0x110>
    1600:	e7e0      	b.n	15c4 <i2c_write_char+0xe0>
			m_col = 0;
    1602:	2200      	movs	r2, #0
    1604:	4b56      	ldr	r3, [pc, #344]	; (1760 <i2c_write_char+0x27c>)
    1606:	701a      	strb	r2, [r3, #0]
			m_row ++;
    1608:	4a53      	ldr	r2, [pc, #332]	; (1758 <i2c_write_char+0x274>)
    160a:	7813      	ldrb	r3, [r2, #0]
    160c:	3301      	adds	r3, #1
    160e:	7013      	strb	r3, [r2, #0]
    1610:	e7a8      	b.n	1564 <i2c_write_char+0x80>
    1612:	3702      	adds	r7, #2
			for (byte i = 0; i <= 14; i += 2) {
    1614:	4547      	cmp	r7, r8
    1616:	d009      	beq.n	162c <i2c_write_char+0x148>
	return *ptr;
    1618:	783d      	ldrb	r5, [r7, #0]
				Wirewrite(d);
    161a:	0028      	movs	r0, r5
    161c:	47d0      	blx	sl
				if (m_flags & FLAG_PIXEL_DOUBLE_H) Wirewrite(d);
    161e:	7833      	ldrb	r3, [r6, #0]
    1620:	079b      	lsls	r3, r3, #30
    1622:	d5f6      	bpl.n	1612 <i2c_write_char+0x12e>
    1624:	0028      	movs	r0, r5
    1626:	4b50      	ldr	r3, [pc, #320]	; (1768 <i2c_write_char+0x284>)
    1628:	4798      	blx	r3
    162a:	e7f2      	b.n	1612 <i2c_write_char+0x12e>
			WireendTransmission();
    162c:	4b53      	ldr	r3, [pc, #332]	; (177c <i2c_write_char+0x298>)
    162e:	4798      	blx	r3
			ssd1306_command(0xB0 + m_row + 1);//set page address
    1630:	4b49      	ldr	r3, [pc, #292]	; (1758 <i2c_write_char+0x274>)
    1632:	7818      	ldrb	r0, [r3, #0]
    1634:	384f      	subs	r0, #79	; 0x4f
    1636:	b2c0      	uxtb	r0, r0
    1638:	4d48      	ldr	r5, [pc, #288]	; (175c <i2c_write_char+0x278>)
    163a:	47a8      	blx	r5
			ssd1306_command(m_col & 0xf);//set lower column address
    163c:	4e48      	ldr	r6, [pc, #288]	; (1760 <i2c_write_char+0x27c>)
    163e:	7833      	ldrb	r3, [r6, #0]
    1640:	200f      	movs	r0, #15
    1642:	4018      	ands	r0, r3
    1644:	47a8      	blx	r5
			ssd1306_command(0x10 | (m_col >> 4));//set higher column address
    1646:	7830      	ldrb	r0, [r6, #0]
    1648:	0900      	lsrs	r0, r0, #4
    164a:	2310      	movs	r3, #16
    164c:	4318      	orrs	r0, r3
    164e:	47a8      	blx	r5
	_length = 0;
    1650:	2200      	movs	r2, #0
    1652:	4b44      	ldr	r3, [pc, #272]	; (1764 <i2c_write_char+0x280>)
    1654:	701a      	strb	r2, [r3, #0]
			Wirewrite(0x40);
    1656:	2040      	movs	r0, #64	; 0x40
    1658:	4b43      	ldr	r3, [pc, #268]	; (1768 <i2c_write_char+0x284>)
    165a:	4798      	blx	r3
    165c:	0124      	lsls	r4, r4, #4
    165e:	4b43      	ldr	r3, [pc, #268]	; (176c <i2c_write_char+0x288>)
    1660:	1c67      	adds	r7, r4, #1
    1662:	19df      	adds	r7, r3, r7
    1664:	3411      	adds	r4, #17
    1666:	191c      	adds	r4, r3, r4
				Wirewrite(d);
    1668:	4b3f      	ldr	r3, [pc, #252]	; (1768 <i2c_write_char+0x284>)
    166a:	4699      	mov	r9, r3
				if (m_flags & FLAG_PIXEL_DOUBLE_H) Wirewrite(d);
    166c:	4e40      	ldr	r6, [pc, #256]	; (1770 <i2c_write_char+0x28c>)
    166e:	e002      	b.n	1676 <i2c_write_char+0x192>
    1670:	3702      	adds	r7, #2
			for (byte i = 1; i <= 15; i += 2) {
    1672:	42bc      	cmp	r4, r7
    1674:	d009      	beq.n	168a <i2c_write_char+0x1a6>
	return *ptr;
    1676:	783d      	ldrb	r5, [r7, #0]
				Wirewrite(d);
    1678:	0028      	movs	r0, r5
    167a:	47c8      	blx	r9
				if (m_flags & FLAG_PIXEL_DOUBLE_H) Wirewrite(d);
    167c:	7833      	ldrb	r3, [r6, #0]
    167e:	079b      	lsls	r3, r3, #30
    1680:	d5f6      	bpl.n	1670 <i2c_write_char+0x18c>
    1682:	0028      	movs	r0, r5
    1684:	4b38      	ldr	r3, [pc, #224]	; (1768 <i2c_write_char+0x284>)
    1686:	4798      	blx	r3
    1688:	e7f2      	b.n	1670 <i2c_write_char+0x18c>
			WireendTransmission();
    168a:	4b3c      	ldr	r3, [pc, #240]	; (177c <i2c_write_char+0x298>)
    168c:	4798      	blx	r3
		m_col += (m_flags & FLAG_PIXEL_DOUBLE_H) ? 17 : 9;
    168e:	4b38      	ldr	r3, [pc, #224]	; (1770 <i2c_write_char+0x28c>)
    1690:	781a      	ldrb	r2, [r3, #0]
    1692:	2311      	movs	r3, #17
    1694:	0792      	lsls	r2, r2, #30
    1696:	d400      	bmi.n	169a <i2c_write_char+0x1b6>
    1698:	3b08      	subs	r3, #8
    169a:	4a31      	ldr	r2, [pc, #196]	; (1760 <i2c_write_char+0x27c>)
    169c:	7812      	ldrb	r2, [r2, #0]
    169e:	189b      	adds	r3, r3, r2
		if (m_col >= 128) {
    16a0:	b2da      	uxtb	r2, r3
    16a2:	061b      	lsls	r3, r3, #24
    16a4:	d44d      	bmi.n	1742 <i2c_write_char+0x25e>
		m_col += (m_flags & FLAG_PIXEL_DOUBLE_H) ? 17 : 9;
    16a6:	4b2e      	ldr	r3, [pc, #184]	; (1760 <i2c_write_char+0x27c>)
    16a8:	701a      	strb	r2, [r3, #0]
    16aa:	e75b      	b.n	1564 <i2c_write_char+0x80>
			ssd1306_command(0xB0 + m_row);//set page address
    16ac:	4b2a      	ldr	r3, [pc, #168]	; (1758 <i2c_write_char+0x274>)
    16ae:	7818      	ldrb	r0, [r3, #0]
    16b0:	3850      	subs	r0, #80	; 0x50
    16b2:	b2c0      	uxtb	r0, r0
    16b4:	4c29      	ldr	r4, [pc, #164]	; (175c <i2c_write_char+0x278>)
    16b6:	47a0      	blx	r4
			ssd1306_command(m_col & 0xf);//set lower column address
    16b8:	4d29      	ldr	r5, [pc, #164]	; (1760 <i2c_write_char+0x27c>)
    16ba:	782b      	ldrb	r3, [r5, #0]
    16bc:	200f      	movs	r0, #15
    16be:	4018      	ands	r0, r3
    16c0:	47a0      	blx	r4
			ssd1306_command(0x10 | (m_col >> 4));//set higher column address
    16c2:	7828      	ldrb	r0, [r5, #0]
    16c4:	0900      	lsrs	r0, r0, #4
    16c6:	2310      	movs	r3, #16
    16c8:	4318      	orrs	r0, r3
    16ca:	47a0      	blx	r4
	_length = 0;
    16cc:	2200      	movs	r2, #0
    16ce:	4b25      	ldr	r3, [pc, #148]	; (1764 <i2c_write_char+0x280>)
    16d0:	701a      	strb	r2, [r3, #0]
			Wirewrite(0x40);
    16d2:	2040      	movs	r0, #64	; 0x40
    16d4:	4b24      	ldr	r3, [pc, #144]	; (1768 <i2c_write_char+0x284>)
    16d6:	4798      	blx	r3
			for (byte i = (m_flags & FLAG_PIXEL_DOUBLE_H) ? 16 : 8; i > 0; i--) {
    16d8:	4b25      	ldr	r3, [pc, #148]	; (1770 <i2c_write_char+0x28c>)
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	2410      	movs	r4, #16
    16de:	079b      	lsls	r3, r3, #30
    16e0:	d400      	bmi.n	16e4 <i2c_write_char+0x200>
    16e2:	3c08      	subs	r4, #8
				Wirewrite(0);
    16e4:	4d20      	ldr	r5, [pc, #128]	; (1768 <i2c_write_char+0x284>)
    16e6:	2000      	movs	r0, #0
    16e8:	47a8      	blx	r5
			for (byte i = (m_flags & FLAG_PIXEL_DOUBLE_H) ? 16 : 8; i > 0; i--) {
    16ea:	3c01      	subs	r4, #1
    16ec:	b2e4      	uxtb	r4, r4
    16ee:	2c00      	cmp	r4, #0
    16f0:	d1f9      	bne.n	16e6 <i2c_write_char+0x202>
			WireendTransmission();
    16f2:	4b22      	ldr	r3, [pc, #136]	; (177c <i2c_write_char+0x298>)
    16f4:	4798      	blx	r3
			ssd1306_command(0xB0 + m_row + 1);//set page address
    16f6:	4b18      	ldr	r3, [pc, #96]	; (1758 <i2c_write_char+0x274>)
    16f8:	7818      	ldrb	r0, [r3, #0]
    16fa:	384f      	subs	r0, #79	; 0x4f
    16fc:	b2c0      	uxtb	r0, r0
    16fe:	4c17      	ldr	r4, [pc, #92]	; (175c <i2c_write_char+0x278>)
    1700:	47a0      	blx	r4
			ssd1306_command(m_col & 0xf);//set lower column address
    1702:	4d17      	ldr	r5, [pc, #92]	; (1760 <i2c_write_char+0x27c>)
    1704:	782b      	ldrb	r3, [r5, #0]
    1706:	200f      	movs	r0, #15
    1708:	4018      	ands	r0, r3
    170a:	47a0      	blx	r4
			ssd1306_command(0x10 | (m_col >> 4));//set higher column address
    170c:	7828      	ldrb	r0, [r5, #0]
    170e:	0900      	lsrs	r0, r0, #4
    1710:	2310      	movs	r3, #16
    1712:	4318      	orrs	r0, r3
    1714:	47a0      	blx	r4
	_length = 0;
    1716:	2200      	movs	r2, #0
    1718:	4b12      	ldr	r3, [pc, #72]	; (1764 <i2c_write_char+0x280>)
    171a:	701a      	strb	r2, [r3, #0]
			Wirewrite(0x40);
    171c:	2040      	movs	r0, #64	; 0x40
    171e:	4b12      	ldr	r3, [pc, #72]	; (1768 <i2c_write_char+0x284>)
    1720:	4798      	blx	r3
			for (byte i = (m_flags & FLAG_PIXEL_DOUBLE_H) ? 16 : 8; i > 0; i--) {
    1722:	4b13      	ldr	r3, [pc, #76]	; (1770 <i2c_write_char+0x28c>)
    1724:	781b      	ldrb	r3, [r3, #0]
    1726:	2410      	movs	r4, #16
    1728:	079b      	lsls	r3, r3, #30
    172a:	d400      	bmi.n	172e <i2c_write_char+0x24a>
    172c:	3c08      	subs	r4, #8
				Wirewrite(0);
    172e:	4d0e      	ldr	r5, [pc, #56]	; (1768 <i2c_write_char+0x284>)
    1730:	2000      	movs	r0, #0
    1732:	47a8      	blx	r5
			for (byte i = (m_flags & FLAG_PIXEL_DOUBLE_H) ? 16 : 8; i > 0; i--) {
    1734:	3c01      	subs	r4, #1
    1736:	b2e4      	uxtb	r4, r4
    1738:	2c00      	cmp	r4, #0
    173a:	d1f9      	bne.n	1730 <i2c_write_char+0x24c>
			WireendTransmission();
    173c:	4b0f      	ldr	r3, [pc, #60]	; (177c <i2c_write_char+0x298>)
    173e:	4798      	blx	r3
    1740:	e7a5      	b.n	168e <i2c_write_char+0x1aa>
			m_col = 0;
    1742:	2200      	movs	r2, #0
    1744:	4b06      	ldr	r3, [pc, #24]	; (1760 <i2c_write_char+0x27c>)
    1746:	701a      	strb	r2, [r3, #0]
			m_row += 2;
    1748:	4a03      	ldr	r2, [pc, #12]	; (1758 <i2c_write_char+0x274>)
    174a:	7813      	ldrb	r3, [r2, #0]
    174c:	3302      	adds	r3, #2
    174e:	7013      	strb	r3, [r2, #0]
    1750:	e708      	b.n	1564 <i2c_write_char+0x80>
    1752:	46c0      	nop			; (mov r8, r8)
    1754:	20004332 	.word	0x20004332
    1758:	20004330 	.word	0x20004330
    175c:	00001335 	.word	0x00001335
    1760:	20004333 	.word	0x20004333
    1764:	200003d8 	.word	0x200003d8
    1768:	0000131d 	.word	0x0000131d
    176c:	00015b5c 	.word	0x00015b5c
    1770:	20004334 	.word	0x20004334
    1774:	000014b1 	.word	0x000014b1
    1778:	00015984 	.word	0x00015984
    177c:	0000135d 	.word	0x0000135d

00001780 <i2c_clear>:
		WireendTransmission();
	}
}

void i2c_clear()
{
    1780:	b5f0      	push	{r4, r5, r6, r7, lr}
    1782:	46de      	mov	lr, fp
    1784:	4657      	mov	r7, sl
    1786:	464e      	mov	r6, r9
    1788:	4645      	mov	r5, r8
    178a:	b5e0      	push	{r5, r6, r7, lr}
    178c:	b083      	sub	sp, #12
	byte x = 0;
	byte y = 0;
	byte width = 128;
	byte height = 64;
	
	ssd1306_command(SSD1306_SETLOWCOLUMN | 0x0);  // low col = 0
    178e:	2000      	movs	r0, #0
    1790:	4c1e      	ldr	r4, [pc, #120]	; (180c <i2c_clear+0x8c>)
    1792:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETHIGHCOLUMN | 0x0);  // hi col = 0
    1794:	2010      	movs	r0, #16
    1796:	47a0      	blx	r4
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0); // line #0
    1798:	2040      	movs	r0, #64	; 0x40
    179a:	47a0      	blx	r4
    179c:	23b0      	movs	r3, #176	; 0xb0
    179e:	9301      	str	r3, [sp, #4]
	height >>= 3;
	width >>= 3;
	y >>= 3;
	for (byte i = 0; i < height; i++) {
		// send a bunch of data in one xmission
		ssd1306_command(0xB0 + i + y);//set page address
    17a0:	4b1a      	ldr	r3, [pc, #104]	; (180c <i2c_clear+0x8c>)
    17a2:	469b      	mov	fp, r3
	_length = 0;
    17a4:	4b1a      	ldr	r3, [pc, #104]	; (1810 <i2c_clear+0x90>)
    17a6:	469a      	mov	sl, r3
		ssd1306_command(x & 0xf);//set lower column address
		ssd1306_command(0x10 | (x >> 4));//set higher column address

		for(byte j = 0; j < 8; j++){
			WirebeginTransmission(_i2caddr);
			Wirewrite(0x40);
    17a8:	4b1a      	ldr	r3, [pc, #104]	; (1814 <i2c_clear+0x94>)
    17aa:	4699      	mov	r9, r3
    17ac:	e005      	b.n	17ba <i2c_clear+0x3a>
    17ae:	9b01      	ldr	r3, [sp, #4]
    17b0:	3301      	adds	r3, #1
    17b2:	b2db      	uxtb	r3, r3
    17b4:	9301      	str	r3, [sp, #4]
	for (byte i = 0; i < height; i++) {
    17b6:	2bb8      	cmp	r3, #184	; 0xb8
    17b8:	d01c      	beq.n	17f4 <i2c_clear+0x74>
		ssd1306_command(0xB0 + i + y);//set page address
    17ba:	9801      	ldr	r0, [sp, #4]
    17bc:	47d8      	blx	fp
		ssd1306_command(x & 0xf);//set lower column address
    17be:	2000      	movs	r0, #0
    17c0:	47d8      	blx	fp
		ssd1306_command(0x10 | (x >> 4));//set higher column address
    17c2:	2010      	movs	r0, #16
    17c4:	47d8      	blx	fp
    17c6:	2708      	movs	r7, #8
	_length = 0;
    17c8:	2500      	movs	r5, #0
    17ca:	46a8      	mov	r8, r5
			for (byte k = 0; k < width; k++) {
				Wirewrite(0);
    17cc:	4e11      	ldr	r6, [pc, #68]	; (1814 <i2c_clear+0x94>)
	_length = 0;
    17ce:	4653      	mov	r3, sl
    17d0:	4642      	mov	r2, r8
    17d2:	701a      	strb	r2, [r3, #0]
			Wirewrite(0x40);
    17d4:	2040      	movs	r0, #64	; 0x40
    17d6:	47c8      	blx	r9
    17d8:	2410      	movs	r4, #16
				Wirewrite(0);
    17da:	0028      	movs	r0, r5
    17dc:	47b0      	blx	r6
    17de:	3c01      	subs	r4, #1
    17e0:	b2e4      	uxtb	r4, r4
			for (byte k = 0; k < width; k++) {
    17e2:	2c00      	cmp	r4, #0
    17e4:	d1f9      	bne.n	17da <i2c_clear+0x5a>
			}
			WireendTransmission();
    17e6:	4b0c      	ldr	r3, [pc, #48]	; (1818 <i2c_clear+0x98>)
    17e8:	4798      	blx	r3
    17ea:	3f01      	subs	r7, #1
    17ec:	b2ff      	uxtb	r7, r7
		for(byte j = 0; j < 8; j++){
    17ee:	2f00      	cmp	r7, #0
    17f0:	d1ed      	bne.n	17ce <i2c_clear+0x4e>
    17f2:	e7dc      	b.n	17ae <i2c_clear+0x2e>
		}
	}

	i2c_setCursor(0, 0);
    17f4:	2100      	movs	r1, #0
    17f6:	2000      	movs	r0, #0
    17f8:	4b08      	ldr	r3, [pc, #32]	; (181c <i2c_clear+0x9c>)
    17fa:	4798      	blx	r3
}
    17fc:	b003      	add	sp, #12
    17fe:	bc3c      	pop	{r2, r3, r4, r5}
    1800:	4690      	mov	r8, r2
    1802:	4699      	mov	r9, r3
    1804:	46a2      	mov	sl, r4
    1806:	46ab      	mov	fp, r5
    1808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	00001335 	.word	0x00001335
    1810:	200003d8 	.word	0x200003d8
    1814:	0000131d 	.word	0x0000131d
    1818:	0000135d 	.word	0x0000135d
    181c:	000014b1 	.word	0x000014b1

00001820 <i2c_print>:

size_t i2c_print(const char * str)
{
    1820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1822:	1e05      	subs	r5, r0, #0
	if (str == NULL)
    1824:	d00e      	beq.n	1844 <i2c_print+0x24>
	{
		return 0;
	}
	else
	{
		size_t size = strlen(str);
    1826:	4b09      	ldr	r3, [pc, #36]	; (184c <i2c_print+0x2c>)
    1828:	4798      	blx	r3
    182a:	1e06      	subs	r6, r0, #0
		size_t n = 0;
		while (size--) {
    182c:	d00c      	beq.n	1848 <i2c_print+0x28>
    182e:	2400      	movs	r4, #0
			if (i2c_write_char(*str++)) n++;
    1830:	4f07      	ldr	r7, [pc, #28]	; (1850 <i2c_print+0x30>)
    1832:	5d28      	ldrb	r0, [r5, r4]
    1834:	47b8      	blx	r7
    1836:	2800      	cmp	r0, #0
    1838:	d002      	beq.n	1840 <i2c_print+0x20>
    183a:	3401      	adds	r4, #1
		while (size--) {
    183c:	42a6      	cmp	r6, r4
    183e:	d1f8      	bne.n	1832 <i2c_print+0x12>
			else break;
		}
		return n;
	}
}
    1840:	0020      	movs	r0, r4
    1842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
    1844:	2400      	movs	r4, #0
    1846:	e7fb      	b.n	1840 <i2c_print+0x20>
		size_t n = 0;
    1848:	0004      	movs	r4, r0
    184a:	e7f9      	b.n	1840 <i2c_print+0x20>
    184c:	00014633 	.word	0x00014633
    1850:	000014e5 	.word	0x000014e5

00001854 <add_state>:
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
    down_state |= mask;
    1854:	4b02      	ldr	r3, [pc, #8]	; (1860 <add_state+0xc>)
    1856:	781a      	ldrb	r2, [r3, #0]
    1858:	4310      	orrs	r0, r2
    185a:	7018      	strb	r0, [r3, #0]
}
    185c:	4770      	bx	lr
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	200003da 	.word	0x200003da

00001864 <SubscribeHandlerImuTopic>:
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}

void SubscribeHandlerImuTopic(MessageData *msgData)
{
    1864:	b570      	push	{r4, r5, r6, lr}
    1866:	0005      	movs	r5, r0
    LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
    1868:	4905      	ldr	r1, [pc, #20]	; (1880 <SubscribeHandlerImuTopic+0x1c>)
    186a:	2001      	movs	r0, #1
    186c:	4c05      	ldr	r4, [pc, #20]	; (1884 <SubscribeHandlerImuTopic+0x20>)
    186e:	47a0      	blx	r4
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    1870:	686a      	ldr	r2, [r5, #4]
    1872:	6893      	ldr	r3, [r2, #8]
    1874:	6852      	ldr	r2, [r2, #4]
    1876:	4904      	ldr	r1, [pc, #16]	; (1888 <SubscribeHandlerImuTopic+0x24>)
    1878:	2001      	movs	r0, #1
    187a:	47a0      	blx	r4
}
    187c:	bd70      	pop	{r4, r5, r6, pc}
    187e:	46c0      	nop			; (mov r8, r8)
    1880:	000161d4 	.word	0x000161d4
    1884:	00007fad 	.word	0x00007fad
    1888:	000161ec 	.word	0x000161ec

0000188c <SubscribeHandlerLedTopic>:
{
    188c:	b570      	push	{r4, r5, r6, lr}
    188e:	b084      	sub	sp, #16
    1890:	0004      	movs	r4, r0
    uint8_t rgb[3] = {0, 0, 0};
    1892:	ab03      	add	r3, sp, #12
    1894:	2200      	movs	r2, #0
    1896:	701a      	strb	r2, [r3, #0]
    1898:	705a      	strb	r2, [r3, #1]
    189a:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    189c:	6842      	ldr	r2, [r0, #4]
    189e:	6893      	ldr	r3, [r2, #8]
    18a0:	6852      	ldr	r2, [r2, #4]
    18a2:	4918      	ldr	r1, [pc, #96]	; (1904 <SubscribeHandlerLedTopic+0x78>)
    18a4:	2001      	movs	r0, #1
    18a6:	4d18      	ldr	r5, [pc, #96]	; (1908 <SubscribeHandlerLedTopic+0x7c>)
    18a8:	47a8      	blx	r5
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
    18aa:	6823      	ldr	r3, [r4, #0]
    18ac:	689c      	ldr	r4, [r3, #8]
    18ae:	2204      	movs	r2, #4
    18b0:	4916      	ldr	r1, [pc, #88]	; (190c <SubscribeHandlerLedTopic+0x80>)
    18b2:	0020      	movs	r0, r4
    18b4:	4b16      	ldr	r3, [pc, #88]	; (1910 <SubscribeHandlerLedTopic+0x84>)
    18b6:	4798      	blx	r3
    18b8:	2800      	cmp	r0, #0
    18ba:	d120      	bne.n	18fe <SubscribeHandlerLedTopic+0x72>
        char *p = (char *)&msgData->message->payload[4];
    18bc:	1d20      	adds	r0, r4, #4
    18be:	9002      	str	r0, [sp, #8]
        while (nb <= 2 && *p) {
    18c0:	7923      	ldrb	r3, [r4, #4]
    18c2:	2b00      	cmp	r3, #0
    18c4:	d012      	beq.n	18ec <SubscribeHandlerLedTopic+0x60>
    18c6:	2400      	movs	r4, #0
            rgb[nb++] = strtol(p, &p, 10);
    18c8:	4e12      	ldr	r6, [pc, #72]	; (1914 <SubscribeHandlerLedTopic+0x88>)
    18ca:	ad03      	add	r5, sp, #12
    18cc:	220a      	movs	r2, #10
    18ce:	a902      	add	r1, sp, #8
    18d0:	47b0      	blx	r6
    18d2:	5560      	strb	r0, [r4, r5]
            if (*p != ',') break;
    18d4:	9b02      	ldr	r3, [sp, #8]
    18d6:	781a      	ldrb	r2, [r3, #0]
    18d8:	2a2c      	cmp	r2, #44	; 0x2c
    18da:	d107      	bne.n	18ec <SubscribeHandlerLedTopic+0x60>
            p++; /* skip, */
    18dc:	1c58      	adds	r0, r3, #1
    18de:	9002      	str	r0, [sp, #8]
        while (nb <= 2 && *p) {
    18e0:	2c02      	cmp	r4, #2
    18e2:	d003      	beq.n	18ec <SubscribeHandlerLedTopic+0x60>
    18e4:	3401      	adds	r4, #1
    18e6:	785b      	ldrb	r3, [r3, #1]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d1ef      	bne.n	18cc <SubscribeHandlerLedTopic+0x40>
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
    18ec:	a903      	add	r1, sp, #12
    18ee:	784b      	ldrb	r3, [r1, #1]
    18f0:	780a      	ldrb	r2, [r1, #0]
    18f2:	7889      	ldrb	r1, [r1, #2]
    18f4:	9100      	str	r1, [sp, #0]
    18f6:	4908      	ldr	r1, [pc, #32]	; (1918 <SubscribeHandlerLedTopic+0x8c>)
    18f8:	2001      	movs	r0, #1
    18fa:	4c03      	ldr	r4, [pc, #12]	; (1908 <SubscribeHandlerLedTopic+0x7c>)
    18fc:	47a0      	blx	r4
}
    18fe:	b004      	add	sp, #16
    1900:	bd70      	pop	{r4, r5, r6, pc}
    1902:	46c0      	nop			; (mov r8, r8)
    1904:	000161ec 	.word	0x000161ec
    1908:	00007fad 	.word	0x00007fad
    190c:	000161f4 	.word	0x000161f4
    1910:	00014641 	.word	0x00014641
    1914:	000147ed 	.word	0x000147ed
    1918:	000161fc 	.word	0x000161fc

0000191c <SubscribeHandlerGameTopic>:
{
    191c:	b5f0      	push	{r4, r5, r6, r7, lr}
    191e:	b087      	sub	sp, #28
    1920:	0004      	movs	r4, r0
    memset(game.game, 0xff, sizeof(game.game));
    1922:	2214      	movs	r2, #20
    1924:	21ff      	movs	r1, #255	; 0xff
    1926:	a801      	add	r0, sp, #4
    1928:	4b2f      	ldr	r3, [pc, #188]	; (19e8 <SubscribeHandlerGameTopic+0xcc>)
    192a:	4798      	blx	r3
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
    192c:	6823      	ldr	r3, [r4, #0]
    192e:	6898      	ldr	r0, [r3, #8]
    1930:	2209      	movs	r2, #9
    1932:	492e      	ldr	r1, [pc, #184]	; (19ec <SubscribeHandlerGameTopic+0xd0>)
    1934:	4b2e      	ldr	r3, [pc, #184]	; (19f0 <SubscribeHandlerGameTopic+0xd4>)
    1936:	4798      	blx	r3
    1938:	2800      	cmp	r0, #0
    193a:	d143      	bne.n	19c4 <SubscribeHandlerGameTopic+0xa8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
    193c:	492d      	ldr	r1, [pc, #180]	; (19f4 <SubscribeHandlerGameTopic+0xd8>)
    193e:	3001      	adds	r0, #1
    1940:	4d2d      	ldr	r5, [pc, #180]	; (19f8 <SubscribeHandlerGameTopic+0xdc>)
    1942:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    1944:	6862      	ldr	r2, [r4, #4]
    1946:	6893      	ldr	r3, [r2, #8]
    1948:	6852      	ldr	r2, [r2, #4]
    194a:	492c      	ldr	r1, [pc, #176]	; (19fc <SubscribeHandlerGameTopic+0xe0>)
    194c:	2001      	movs	r0, #1
    194e:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    1950:	6822      	ldr	r2, [r4, #0]
    1952:	6893      	ldr	r3, [r2, #8]
    1954:	68d2      	ldr	r2, [r2, #12]
    1956:	492a      	ldr	r1, [pc, #168]	; (1a00 <SubscribeHandlerGameTopic+0xe4>)
    1958:	2001      	movs	r0, #1
    195a:	47a8      	blx	r5
        char *p = &msgData->message->payload[9];
    195c:	6823      	ldr	r3, [r4, #0]
    195e:	689b      	ldr	r3, [r3, #8]
    1960:	0018      	movs	r0, r3
    1962:	3009      	adds	r0, #9
    1964:	9000      	str	r0, [sp, #0]
        while (nb < GAME_SIZE && *p) {
    1966:	7a5b      	ldrb	r3, [r3, #9]
    1968:	2b00      	cmp	r3, #0
    196a:	d013      	beq.n	1994 <SubscribeHandlerGameTopic+0x78>
    196c:	ac01      	add	r4, sp, #4
    196e:	2517      	movs	r5, #23
    1970:	446d      	add	r5, sp
            game.game[nb++] = strtol(p, &p, 10);
    1972:	4e24      	ldr	r6, [pc, #144]	; (1a04 <SubscribeHandlerGameTopic+0xe8>)
    1974:	220a      	movs	r2, #10
    1976:	4669      	mov	r1, sp
    1978:	47b0      	blx	r6
    197a:	7020      	strb	r0, [r4, #0]
            if (*p != ',') break;
    197c:	9b00      	ldr	r3, [sp, #0]
    197e:	781a      	ldrb	r2, [r3, #0]
    1980:	2a2c      	cmp	r2, #44	; 0x2c
    1982:	d107      	bne.n	1994 <SubscribeHandlerGameTopic+0x78>
            p++; /* skip, */
    1984:	1c58      	adds	r0, r3, #1
    1986:	9000      	str	r0, [sp, #0]
        while (nb < GAME_SIZE && *p) {
    1988:	42ac      	cmp	r4, r5
    198a:	d003      	beq.n	1994 <SubscribeHandlerGameTopic+0x78>
    198c:	3401      	adds	r4, #1
    198e:	785b      	ldrb	r3, [r3, #1]
    1990:	2b00      	cmp	r3, #0
    1992:	d1ef      	bne.n	1974 <SubscribeHandlerGameTopic+0x58>
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
    1994:	491c      	ldr	r1, [pc, #112]	; (1a08 <SubscribeHandlerGameTopic+0xec>)
    1996:	2001      	movs	r0, #1
    1998:	4b17      	ldr	r3, [pc, #92]	; (19f8 <SubscribeHandlerGameTopic+0xdc>)
    199a:	4798      	blx	r3
    199c:	ac01      	add	r4, sp, #4
    199e:	af06      	add	r7, sp, #24
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
    19a0:	4e1a      	ldr	r6, [pc, #104]	; (1a0c <SubscribeHandlerGameTopic+0xf0>)
    19a2:	4d15      	ldr	r5, [pc, #84]	; (19f8 <SubscribeHandlerGameTopic+0xdc>)
    19a4:	7822      	ldrb	r2, [r4, #0]
    19a6:	0031      	movs	r1, r6
    19a8:	2001      	movs	r0, #1
    19aa:	47a8      	blx	r5
    19ac:	3401      	adds	r4, #1
        for (int i = 0; i < GAME_SIZE; i++) {
    19ae:	42a7      	cmp	r7, r4
    19b0:	d1f8      	bne.n	19a4 <SubscribeHandlerGameTopic+0x88>
        if (pdTRUE == ControlAddGameData(&game)) {
    19b2:	a801      	add	r0, sp, #4
    19b4:	4b16      	ldr	r3, [pc, #88]	; (1a10 <SubscribeHandlerGameTopic+0xf4>)
    19b6:	4798      	blx	r3
    19b8:	2801      	cmp	r0, #1
    19ba:	d113      	bne.n	19e4 <SubscribeHandlerGameTopic+0xc8>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
    19bc:	4915      	ldr	r1, [pc, #84]	; (1a14 <SubscribeHandlerGameTopic+0xf8>)
    19be:	4b0e      	ldr	r3, [pc, #56]	; (19f8 <SubscribeHandlerGameTopic+0xdc>)
    19c0:	4798      	blx	r3
    19c2:	e00f      	b.n	19e4 <SubscribeHandlerGameTopic+0xc8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
    19c4:	4914      	ldr	r1, [pc, #80]	; (1a18 <SubscribeHandlerGameTopic+0xfc>)
    19c6:	2001      	movs	r0, #1
    19c8:	4d0b      	ldr	r5, [pc, #44]	; (19f8 <SubscribeHandlerGameTopic+0xdc>)
    19ca:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
    19cc:	6862      	ldr	r2, [r4, #4]
    19ce:	6893      	ldr	r3, [r2, #8]
    19d0:	6852      	ldr	r2, [r2, #4]
    19d2:	490a      	ldr	r1, [pc, #40]	; (19fc <SubscribeHandlerGameTopic+0xe0>)
    19d4:	2001      	movs	r0, #1
    19d6:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    19d8:	6822      	ldr	r2, [r4, #0]
    19da:	6893      	ldr	r3, [r2, #8]
    19dc:	68d2      	ldr	r2, [r2, #12]
    19de:	4908      	ldr	r1, [pc, #32]	; (1a00 <SubscribeHandlerGameTopic+0xe4>)
    19e0:	2001      	movs	r0, #1
    19e2:	47a8      	blx	r5
}
    19e4:	b007      	add	sp, #28
    19e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19e8:	0001427b 	.word	0x0001427b
    19ec:	00016140 	.word	0x00016140
    19f0:	00014641 	.word	0x00014641
    19f4:	0001614c 	.word	0x0001614c
    19f8:	00007fad 	.word	0x00007fad
    19fc:	000161ec 	.word	0x000161ec
    1a00:	00016168 	.word	0x00016168
    1a04:	000147ed 	.word	0x000147ed
    1a08:	00016170 	.word	0x00016170
    1a0c:	00016184 	.word	0x00016184
    1a10:	00000115 	.word	0x00000115
    1a14:	00016188 	.word	0x00016188
    1a18:	000161a4 	.word	0x000161a4

00001a1c <SubscribeHandlerServo>:
    }
}


void SubscribeHandlerServo(MessageData *msgData)
{
    1a1c:	b570      	push	{r4, r5, r6, lr}
    1a1e:	0004      	movs	r4, r0
	/* You received publish message which you had subscribed. */
	/* Print Topic and message */
	LogMessage(LOG_DEBUG_LVL, "\r\Feeding Fish %.*s\r\n ", msgData->message->payloadlen,(char*)msgData->message->payload);
    1a20:	6802      	ldr	r2, [r0, #0]
    1a22:	6893      	ldr	r3, [r2, #8]
    1a24:	68d2      	ldr	r2, [r2, #12]
    1a26:	4910      	ldr	r1, [pc, #64]	; (1a68 <SubscribeHandlerServo+0x4c>)
    1a28:	2001      	movs	r0, #1
    1a2a:	4d10      	ldr	r5, [pc, #64]	; (1a6c <SubscribeHandlerServo+0x50>)
    1a2c:	47a8      	blx	r5

	// Handle LedData message
	if (strncmp(msgData->message->payload, "true", 4) == 0) {
    1a2e:	6823      	ldr	r3, [r4, #0]
    1a30:	6898      	ldr	r0, [r3, #8]
    1a32:	2204      	movs	r2, #4
    1a34:	490e      	ldr	r1, [pc, #56]	; (1a70 <SubscribeHandlerServo+0x54>)
    1a36:	4b0f      	ldr	r3, [pc, #60]	; (1a74 <SubscribeHandlerServo+0x58>)
    1a38:	4798      	blx	r3
    1a3a:	2800      	cmp	r0, #0
    1a3c:	d004      	beq.n	1a48 <SubscribeHandlerServo+0x2c>
		configure_pwm_pin();
		servo_set(100000);
		delay_ms(1000);
		servo_set(50000);
	}else{
		LogMessage(LOG_DEBUG_LVL, "Feeding Fish %*s \r\n");
    1a3e:	490e      	ldr	r1, [pc, #56]	; (1a78 <SubscribeHandlerServo+0x5c>)
    1a40:	2001      	movs	r0, #1
    1a42:	4b0a      	ldr	r3, [pc, #40]	; (1a6c <SubscribeHandlerServo+0x50>)
    1a44:	4798      	blx	r3
	}
}
    1a46:	bd70      	pop	{r4, r5, r6, pc}
		configure_clocks();
    1a48:	4b0c      	ldr	r3, [pc, #48]	; (1a7c <SubscribeHandlerServo+0x60>)
    1a4a:	4798      	blx	r3
		configure_tcc_for_pwm();
    1a4c:	4b0c      	ldr	r3, [pc, #48]	; (1a80 <SubscribeHandlerServo+0x64>)
    1a4e:	4798      	blx	r3
		configure_pwm_pin();
    1a50:	4b0c      	ldr	r3, [pc, #48]	; (1a84 <SubscribeHandlerServo+0x68>)
    1a52:	4798      	blx	r3
		servo_set(100000);
    1a54:	480c      	ldr	r0, [pc, #48]	; (1a88 <SubscribeHandlerServo+0x6c>)
    1a56:	4c0d      	ldr	r4, [pc, #52]	; (1a8c <SubscribeHandlerServo+0x70>)
    1a58:	47a0      	blx	r4
		delay_ms(1000);
    1a5a:	20fa      	movs	r0, #250	; 0xfa
    1a5c:	0080      	lsls	r0, r0, #2
    1a5e:	4b0c      	ldr	r3, [pc, #48]	; (1a90 <SubscribeHandlerServo+0x74>)
    1a60:	4798      	blx	r3
		servo_set(50000);
    1a62:	480c      	ldr	r0, [pc, #48]	; (1a94 <SubscribeHandlerServo+0x78>)
    1a64:	47a0      	blx	r4
    1a66:	e7ee      	b.n	1a46 <SubscribeHandlerServo+0x2a>
    1a68:	00016210 	.word	0x00016210
    1a6c:	00007fad 	.word	0x00007fad
    1a70:	00016228 	.word	0x00016228
    1a74:	00014641 	.word	0x00014641
    1a78:	00016230 	.word	0x00016230
    1a7c:	00003d61 	.word	0x00003d61
    1a80:	00003cb5 	.word	0x00003cb5
    1a84:	00003d1d 	.word	0x00003d1d
    1a88:	000186a0 	.word	0x000186a0
    1a8c:	00003d41 	.word	0x00003d41
    1a90:	00008fe1 	.word	0x00008fe1
    1a94:	0000c350 	.word	0x0000c350

00001a98 <extint_detection_callback>:
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
}

volatile bool isPressed = false;
void extint_detection_callback(void)
{
    1a98:	b510      	push	{r4, lr}
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
    1a9a:	4b0a      	ldr	r3, [pc, #40]	; (1ac4 <extint_detection_callback+0x2c>)
    1a9c:	681a      	ldr	r2, [r3, #0]
    1a9e:	3201      	adds	r2, #1
    1aa0:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	2b28      	cmp	r3, #40	; 0x28
    1aa6:	d902      	bls.n	1aae <extint_detection_callback+0x16>
    1aa8:	2201      	movs	r2, #1
    1aaa:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <extint_detection_callback+0x2c>)
    1aac:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
    1aae:	4b05      	ldr	r3, [pc, #20]	; (1ac4 <extint_detection_callback+0x2c>)
    1ab0:	681b      	ldr	r3, [r3, #0]
    1ab2:	4a05      	ldr	r2, [pc, #20]	; (1ac8 <extint_detection_callback+0x30>)
    1ab4:	213f      	movs	r1, #63	; 0x3f
    1ab6:	4805      	ldr	r0, [pc, #20]	; (1acc <extint_detection_callback+0x34>)
    1ab8:	4c05      	ldr	r4, [pc, #20]	; (1ad0 <extint_detection_callback+0x38>)
    1aba:	47a0      	blx	r4
    isPressed = true;
    1abc:	2201      	movs	r2, #1
    1abe:	4b05      	ldr	r3, [pc, #20]	; (1ad4 <extint_detection_callback+0x3c>)
    1ac0:	701a      	strb	r2, [r3, #0]
    // Published in the Wifi thread main loop
}
    1ac2:	bd10      	pop	{r4, pc}
    1ac4:	200000c4 	.word	0x200000c4
    1ac8:	000162ac 	.word	0x000162ac
    1acc:	20000040 	.word	0x20000040
    1ad0:	000144d5 	.word	0x000144d5
    1ad4:	20000404 	.word	0x20000404

00001ad8 <socket_resolve_handler>:
{
    1ad8:	b510      	push	{r4, lr}
    mqtt_socket_resolve_handler(doamin_name, server_ip);
    1ada:	4b01      	ldr	r3, [pc, #4]	; (1ae0 <socket_resolve_handler+0x8>)
    1adc:	4798      	blx	r3
}
    1ade:	bd10      	pop	{r4, pc}
    1ae0:	00011105 	.word	0x00011105

00001ae4 <socket_event_handler>:
{
    1ae4:	b510      	push	{r4, lr}
    mqtt_socket_event_handler(sock, msg_type, msg_data);
    1ae6:	4b01      	ldr	r3, [pc, #4]	; (1aec <socket_event_handler+0x8>)
    1ae8:	4798      	blx	r3
}
    1aea:	bd10      	pop	{r4, pc}
    1aec:	000110f9 	.word	0x000110f9

00001af0 <start_download>:
{
    1af0:	b510      	push	{r4, lr}
    1af2:	b082      	sub	sp, #8
    return ((down_state & mask) != 0);
    1af4:	4b15      	ldr	r3, [pc, #84]	; (1b4c <start_download+0x5c>)
    1af6:	781b      	ldrb	r3, [r3, #0]
    if (!is_state_set(STORAGE_READY)) {
    1af8:	07da      	lsls	r2, r3, #31
    1afa:	d512      	bpl.n	1b22 <start_download+0x32>
    if (!is_state_set(WIFI_CONNECTED)) {
    1afc:	079a      	lsls	r2, r3, #30
    1afe:	d515      	bpl.n	1b2c <start_download+0x3c>
    if (is_state_set(GET_REQUESTED)) {
    1b00:	075a      	lsls	r2, r3, #29
    1b02:	d418      	bmi.n	1b36 <start_download+0x46>
    if (is_state_set(DOWNLOADING)) {
    1b04:	071b      	lsls	r3, r3, #28
    1b06:	d41b      	bmi.n	1b40 <start_download+0x50>
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
    1b08:	4911      	ldr	r1, [pc, #68]	; (1b50 <start_download+0x60>)
    1b0a:	2001      	movs	r0, #1
    1b0c:	4b11      	ldr	r3, [pc, #68]	; (1b54 <start_download+0x64>)
    1b0e:	4798      	blx	r3
    int http_req_status = http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
    1b10:	2300      	movs	r3, #0
    1b12:	9300      	str	r3, [sp, #0]
    1b14:	2201      	movs	r2, #1
    1b16:	4910      	ldr	r1, [pc, #64]	; (1b58 <start_download+0x68>)
    1b18:	4810      	ldr	r0, [pc, #64]	; (1b5c <start_download+0x6c>)
    1b1a:	4c11      	ldr	r4, [pc, #68]	; (1b60 <start_download+0x70>)
    1b1c:	47a0      	blx	r4
}
    1b1e:	b002      	add	sp, #8
    1b20:	bd10      	pop	{r4, pc}
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
    1b22:	4910      	ldr	r1, [pc, #64]	; (1b64 <start_download+0x74>)
    1b24:	2001      	movs	r0, #1
    1b26:	4b0b      	ldr	r3, [pc, #44]	; (1b54 <start_download+0x64>)
    1b28:	4798      	blx	r3
        return;
    1b2a:	e7f8      	b.n	1b1e <start_download+0x2e>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
    1b2c:	490e      	ldr	r1, [pc, #56]	; (1b68 <start_download+0x78>)
    1b2e:	2001      	movs	r0, #1
    1b30:	4b08      	ldr	r3, [pc, #32]	; (1b54 <start_download+0x64>)
    1b32:	4798      	blx	r3
        return;
    1b34:	e7f3      	b.n	1b1e <start_download+0x2e>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
    1b36:	490d      	ldr	r1, [pc, #52]	; (1b6c <start_download+0x7c>)
    1b38:	2001      	movs	r0, #1
    1b3a:	4b06      	ldr	r3, [pc, #24]	; (1b54 <start_download+0x64>)
    1b3c:	4798      	blx	r3
        return;
    1b3e:	e7ee      	b.n	1b1e <start_download+0x2e>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
    1b40:	490b      	ldr	r1, [pc, #44]	; (1b70 <start_download+0x80>)
    1b42:	2001      	movs	r0, #1
    1b44:	4b03      	ldr	r3, [pc, #12]	; (1b54 <start_download+0x64>)
    1b46:	4798      	blx	r3
        return;
    1b48:	e7e9      	b.n	1b1e <start_download+0x2e>
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	200003da 	.word	0x200003da
    1b50:	000165d4 	.word	0x000165d4
    1b54:	00007fad 	.word	0x00007fad
    1b58:	00016600 	.word	0x00016600
    1b5c:	20004390 	.word	0x20004390
    1b60:	00000841 	.word	0x00000841
    1b64:	00016524 	.word	0x00016524
    1b68:	00016550 	.word	0x00016550
    1b6c:	0001657c 	.word	0x0001657c
    1b70:	000165a8 	.word	0x000165a8

00001b74 <configure_mqtt>:
{
    1b74:	b500      	push	{lr}
    1b76:	b087      	sub	sp, #28
    mqtt_get_config_defaults(&mqtt_conf);
    1b78:	4668      	mov	r0, sp
    1b7a:	4b13      	ldr	r3, [pc, #76]	; (1bc8 <configure_mqtt+0x54>)
    1b7c:	4798      	blx	r3
    mqtt_conf.read_buffer = mqtt_read_buffer;
    1b7e:	4b13      	ldr	r3, [pc, #76]	; (1bcc <configure_mqtt+0x58>)
    1b80:	9302      	str	r3, [sp, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    1b82:	2380      	movs	r3, #128	; 0x80
    1b84:	009b      	lsls	r3, r3, #2
    1b86:	9303      	str	r3, [sp, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
    1b88:	4a11      	ldr	r2, [pc, #68]	; (1bd0 <configure_mqtt+0x5c>)
    1b8a:	9204      	str	r2, [sp, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    1b8c:	9305      	str	r3, [sp, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
    1b8e:	4b11      	ldr	r3, [pc, #68]	; (1bd4 <configure_mqtt+0x60>)
    1b90:	466a      	mov	r2, sp
    1b92:	8013      	strh	r3, [r2, #0]
    mqtt_conf.keep_alive = 6000;
    1b94:	4b10      	ldr	r3, [pc, #64]	; (1bd8 <configure_mqtt+0x64>)
    1b96:	8093      	strh	r3, [r2, #4]
    result = mqtt_init(&mqtt_inst, &mqtt_conf);
    1b98:	4669      	mov	r1, sp
    1b9a:	4810      	ldr	r0, [pc, #64]	; (1bdc <configure_mqtt+0x68>)
    1b9c:	4b10      	ldr	r3, [pc, #64]	; (1be0 <configure_mqtt+0x6c>)
    1b9e:	4798      	blx	r3
    1ba0:	1e02      	subs	r2, r0, #0
    if (result < 0) {
    1ba2:	db07      	blt.n	1bb4 <configure_mqtt+0x40>
    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    1ba4:	490f      	ldr	r1, [pc, #60]	; (1be4 <configure_mqtt+0x70>)
    1ba6:	480d      	ldr	r0, [pc, #52]	; (1bdc <configure_mqtt+0x68>)
    1ba8:	4b0f      	ldr	r3, [pc, #60]	; (1be8 <configure_mqtt+0x74>)
    1baa:	4798      	blx	r3
    1bac:	1e02      	subs	r2, r0, #0
    if (result < 0) {
    1bae:	db06      	blt.n	1bbe <configure_mqtt+0x4a>
}
    1bb0:	b007      	add	sp, #28
    1bb2:	bd00      	pop	{pc}
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
    1bb4:	490d      	ldr	r1, [pc, #52]	; (1bec <configure_mqtt+0x78>)
    1bb6:	2001      	movs	r0, #1
    1bb8:	4b0d      	ldr	r3, [pc, #52]	; (1bf0 <configure_mqtt+0x7c>)
    1bba:	4798      	blx	r3
    1bbc:	e7fe      	b.n	1bbc <configure_mqtt+0x48>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
    1bbe:	490d      	ldr	r1, [pc, #52]	; (1bf4 <configure_mqtt+0x80>)
    1bc0:	2001      	movs	r0, #1
    1bc2:	4b0b      	ldr	r3, [pc, #44]	; (1bf0 <configure_mqtt+0x7c>)
    1bc4:	4798      	blx	r3
    1bc6:	e7fe      	b.n	1bc6 <configure_mqtt+0x52>
    1bc8:	000110cd 	.word	0x000110cd
    1bcc:	20000440 	.word	0x20000440
    1bd0:	20000640 	.word	0x20000640
    1bd4:	0000075b 	.word	0x0000075b
    1bd8:	00001770 	.word	0x00001770
    1bdc:	20000408 	.word	0x20000408
    1be0:	00011015 	.word	0x00011015
    1be4:	00001bf9 	.word	0x00001bf9
    1be8:	000110e9 	.word	0x000110e9
    1bec:	00016244 	.word	0x00016244
    1bf0:	00007fad 	.word	0x00007fad
    1bf4:	00016278 	.word	0x00016278

00001bf8 <mqtt_callback>:
{
    1bf8:	b530      	push	{r4, r5, lr}
    1bfa:	b087      	sub	sp, #28
    1bfc:	0004      	movs	r4, r0
    switch (type) {
    1bfe:	2901      	cmp	r1, #1
    1c00:	d030      	beq.n	1c64 <mqtt_callback+0x6c>
    1c02:	2905      	cmp	r1, #5
    1c04:	d04f      	beq.n	1ca6 <mqtt_callback+0xae>
    1c06:	2900      	cmp	r1, #0
    1c08:	d001      	beq.n	1c0e <mqtt_callback+0x16>
}
    1c0a:	b007      	add	sp, #28
    1c0c:	bd30      	pop	{r4, r5, pc}
            if (data->sock_connected.result >= 0) {
    1c0e:	6813      	ldr	r3, [r2, #0]
    1c10:	2b00      	cmp	r3, #0
    1c12:	db1c      	blt.n	1c4e <mqtt_callback+0x56>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
    1c14:	4926      	ldr	r1, [pc, #152]	; (1cb0 <mqtt_callback+0xb8>)
    1c16:	2001      	movs	r0, #1
    1c18:	4b26      	ldr	r3, [pc, #152]	; (1cb4 <mqtt_callback+0xbc>)
    1c1a:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
    1c1c:	4a26      	ldr	r2, [pc, #152]	; (1cb8 <mqtt_callback+0xc0>)
    1c1e:	2300      	movs	r3, #0
    1c20:	9305      	str	r3, [sp, #20]
    1c22:	9304      	str	r3, [sp, #16]
    1c24:	9303      	str	r3, [sp, #12]
    1c26:	9302      	str	r3, [sp, #8]
    1c28:	9301      	str	r3, [sp, #4]
    1c2a:	9200      	str	r2, [sp, #0]
    1c2c:	4b23      	ldr	r3, [pc, #140]	; (1cbc <mqtt_callback+0xc4>)
    1c2e:	2101      	movs	r1, #1
    1c30:	0020      	movs	r0, r4
    1c32:	4c23      	ldr	r4, [pc, #140]	; (1cc0 <mqtt_callback+0xc8>)
    1c34:	47a0      	blx	r4
    1c36:	2800      	cmp	r0, #0
    1c38:	d004      	beq.n	1c44 <mqtt_callback+0x4c>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
    1c3a:	4922      	ldr	r1, [pc, #136]	; (1cc4 <mqtt_callback+0xcc>)
    1c3c:	2001      	movs	r0, #1
    1c3e:	4b1d      	ldr	r3, [pc, #116]	; (1cb4 <mqtt_callback+0xbc>)
    1c40:	4798      	blx	r3
    1c42:	e7e2      	b.n	1c0a <mqtt_callback+0x12>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
    1c44:	4920      	ldr	r1, [pc, #128]	; (1cc8 <mqtt_callback+0xd0>)
    1c46:	2001      	movs	r0, #1
    1c48:	4b1a      	ldr	r3, [pc, #104]	; (1cb4 <mqtt_callback+0xbc>)
    1c4a:	4798      	blx	r3
    1c4c:	e7dd      	b.n	1c0a <mqtt_callback+0x12>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    1c4e:	4d1f      	ldr	r5, [pc, #124]	; (1ccc <mqtt_callback+0xd4>)
    1c50:	002a      	movs	r2, r5
    1c52:	491f      	ldr	r1, [pc, #124]	; (1cd0 <mqtt_callback+0xd8>)
    1c54:	2001      	movs	r0, #1
    1c56:	4b17      	ldr	r3, [pc, #92]	; (1cb4 <mqtt_callback+0xbc>)
    1c58:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    1c5a:	0029      	movs	r1, r5
    1c5c:	0020      	movs	r0, r4
    1c5e:	4b1d      	ldr	r3, [pc, #116]	; (1cd4 <mqtt_callback+0xdc>)
    1c60:	4798      	blx	r3
    1c62:	e7d2      	b.n	1c0a <mqtt_callback+0x12>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    1c64:	7812      	ldrb	r2, [r2, #0]
    1c66:	2a00      	cmp	r2, #0
    1c68:	d118      	bne.n	1c9c <mqtt_callback+0xa4>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
    1c6a:	4b1b      	ldr	r3, [pc, #108]	; (1cd8 <mqtt_callback+0xe0>)
    1c6c:	3202      	adds	r2, #2
    1c6e:	491b      	ldr	r1, [pc, #108]	; (1cdc <mqtt_callback+0xe4>)
    1c70:	4d1b      	ldr	r5, [pc, #108]	; (1ce0 <mqtt_callback+0xe8>)
    1c72:	47a8      	blx	r5
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
    1c74:	4b1b      	ldr	r3, [pc, #108]	; (1ce4 <mqtt_callback+0xec>)
    1c76:	2202      	movs	r2, #2
    1c78:	491b      	ldr	r1, [pc, #108]	; (1ce8 <mqtt_callback+0xf0>)
    1c7a:	0020      	movs	r0, r4
    1c7c:	47a8      	blx	r5
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
    1c7e:	4b1b      	ldr	r3, [pc, #108]	; (1cec <mqtt_callback+0xf4>)
    1c80:	2202      	movs	r2, #2
    1c82:	491b      	ldr	r1, [pc, #108]	; (1cf0 <mqtt_callback+0xf8>)
    1c84:	0020      	movs	r0, r4
    1c86:	47a8      	blx	r5
				mqtt_subscribe(module_inst, servos, 2, SubscribeHandlerServo);
    1c88:	4b1a      	ldr	r3, [pc, #104]	; (1cf4 <mqtt_callback+0xfc>)
    1c8a:	2202      	movs	r2, #2
    1c8c:	491a      	ldr	r1, [pc, #104]	; (1cf8 <mqtt_callback+0x100>)
    1c8e:	0020      	movs	r0, r4
    1c90:	47a8      	blx	r5
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
    1c92:	491a      	ldr	r1, [pc, #104]	; (1cfc <mqtt_callback+0x104>)
    1c94:	2001      	movs	r0, #1
    1c96:	4b07      	ldr	r3, [pc, #28]	; (1cb4 <mqtt_callback+0xbc>)
    1c98:	4798      	blx	r3
    1c9a:	e7b6      	b.n	1c0a <mqtt_callback+0x12>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
    1c9c:	4918      	ldr	r1, [pc, #96]	; (1d00 <mqtt_callback+0x108>)
    1c9e:	2001      	movs	r0, #1
    1ca0:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <mqtt_callback+0xbc>)
    1ca2:	4798      	blx	r3
    1ca4:	e7b1      	b.n	1c0a <mqtt_callback+0x12>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
    1ca6:	4917      	ldr	r1, [pc, #92]	; (1d04 <mqtt_callback+0x10c>)
    1ca8:	2001      	movs	r0, #1
    1caa:	4b02      	ldr	r3, [pc, #8]	; (1cb4 <mqtt_callback+0xbc>)
    1cac:	4798      	blx	r3
}
    1cae:	e7ac      	b.n	1c0a <mqtt_callback+0x12>
    1cb0:	000163a0 	.word	0x000163a0
    1cb4:	00007fad 	.word	0x00007fad
    1cb8:	000163cc 	.word	0x000163cc
    1cbc:	000163bc 	.word	0x000163bc
    1cc0:	0001113d 	.word	0x0001113d
    1cc4:	000163d8 	.word	0x000163d8
    1cc8:	00016400 	.word	0x00016400
    1ccc:	00016390 	.word	0x00016390
    1cd0:	0001641c 	.word	0x0001641c
    1cd4:	00011111 	.word	0x00011111
    1cd8:	0000191d 	.word	0x0000191d
    1cdc:	00016454 	.word	0x00016454
    1ce0:	00011241 	.word	0x00011241
    1ce4:	0000188d 	.word	0x0000188d
    1ce8:	00016468 	.word	0x00016468
    1cec:	00001865 	.word	0x00001865
    1cf0:	0001647c 	.word	0x0001647c
    1cf4:	00001a1d 	.word	0x00001a1d
    1cf8:	00016490 	.word	0x00016490
    1cfc:	00016498 	.word	0x00016498
    1d00:	000164ac 	.word	0x000164ac
    1d04:	000164e0 	.word	0x000164e0

00001d08 <resolve_cb>:
{
    1d08:	b570      	push	{r4, r5, r6, lr}
    1d0a:	b084      	sub	sp, #16
    1d0c:	0005      	movs	r5, r0
    1d0e:	000c      	movs	r4, r1
    LogMessage(LOG_DEBUG_LVL,
    1d10:	22ff      	movs	r2, #255	; 0xff
    1d12:	0013      	movs	r3, r2
    1d14:	400b      	ands	r3, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
    1d16:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
    1d18:	9102      	str	r1, [sp, #8]
               (int)IPV4_BYTE(u32ServerIP, 2),
    1d1a:	0c21      	lsrs	r1, r4, #16
    LogMessage(LOG_DEBUG_LVL,
    1d1c:	4011      	ands	r1, r2
    1d1e:	9101      	str	r1, [sp, #4]
               (int)IPV4_BYTE(u32ServerIP, 1),
    1d20:	0a21      	lsrs	r1, r4, #8
    LogMessage(LOG_DEBUG_LVL,
    1d22:	400a      	ands	r2, r1
    1d24:	9200      	str	r2, [sp, #0]
    1d26:	0002      	movs	r2, r0
    1d28:	4904      	ldr	r1, [pc, #16]	; (1d3c <resolve_cb+0x34>)
    1d2a:	2001      	movs	r0, #1
    1d2c:	4e04      	ldr	r6, [pc, #16]	; (1d40 <resolve_cb+0x38>)
    1d2e:	47b0      	blx	r6
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
    1d30:	0021      	movs	r1, r4
    1d32:	0028      	movs	r0, r5
    1d34:	4b03      	ldr	r3, [pc, #12]	; (1d44 <resolve_cb+0x3c>)
    1d36:	4798      	blx	r3
}
    1d38:	b004      	add	sp, #16
    1d3a:	bd70      	pop	{r4, r5, r6, pc}
    1d3c:	000164f4 	.word	0x000164f4
    1d40:	00007fad 	.word	0x00007fad
    1d44:	00000311 	.word	0x00000311

00001d48 <socket_cb>:
{
    1d48:	b510      	push	{r4, lr}
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
    1d4a:	4b01      	ldr	r3, [pc, #4]	; (1d50 <socket_cb+0x8>)
    1d4c:	4798      	blx	r3
}
    1d4e:	bd10      	pop	{r4, pc}
    1d50:	00000f3d 	.word	0x00000f3d

00001d54 <store_file_packet>:
{
    1d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d56:	46d6      	mov	lr, sl
    1d58:	b500      	push	{lr}
    1d5a:	b09a      	sub	sp, #104	; 0x68
    1d5c:	9001      	str	r0, [sp, #4]
    1d5e:	9102      	str	r1, [sp, #8]
    if ((data == NULL) || (length < 1)) {
    1d60:	2800      	cmp	r0, #0
    1d62:	d00d      	beq.n	1d80 <store_file_packet+0x2c>
    1d64:	2900      	cmp	r1, #0
    1d66:	d00b      	beq.n	1d80 <store_file_packet+0x2c>
    return ((down_state & mask) != 0);
    1d68:	4b87      	ldr	r3, [pc, #540]	; (1f88 <store_file_packet+0x234>)
    1d6a:	781b      	ldrb	r3, [r3, #0]
    if (!is_state_set(DOWNLOADING)) {
    1d6c:	071b      	lsls	r3, r3, #28
    1d6e:	d500      	bpl.n	1d72 <store_file_packet+0x1e>
    1d70:	e0c5      	b.n	1efe <store_file_packet+0x1aa>
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    1d72:	4b86      	ldr	r3, [pc, #536]	; (1f8c <store_file_packet+0x238>)
    1d74:	2230      	movs	r2, #48	; 0x30
    1d76:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
    1d78:	320a      	adds	r2, #10
    1d7a:	705a      	strb	r2, [r3, #1]
    1d7c:	4c84      	ldr	r4, [pc, #528]	; (1f90 <store_file_packet+0x23c>)
    1d7e:	e008      	b.n	1d92 <store_file_packet+0x3e>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
    1d80:	4984      	ldr	r1, [pc, #528]	; (1f94 <store_file_packet+0x240>)
    1d82:	2001      	movs	r0, #1
    1d84:	4b84      	ldr	r3, [pc, #528]	; (1f98 <store_file_packet+0x244>)
    1d86:	4798      	blx	r3
}
    1d88:	b01a      	add	sp, #104	; 0x68
    1d8a:	bc04      	pop	{r2}
    1d8c:	4692      	mov	sl, r2
    1d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cp--;
    1d90:	0004      	movs	r4, r0
    1d92:	1e60      	subs	r0, r4, #1
        while (*cp != '/') {
    1d94:	7803      	ldrb	r3, [r0, #0]
    1d96:	2b2f      	cmp	r3, #47	; 0x2f
    1d98:	d1fa      	bne.n	1d90 <store_file_packet+0x3c>
        if (strlen(cp) > 1) {
    1d9a:	4b80      	ldr	r3, [pc, #512]	; (1f9c <store_file_packet+0x248>)
    1d9c:	4798      	blx	r3
    1d9e:	2801      	cmp	r0, #1
    1da0:	d800      	bhi.n	1da4 <store_file_packet+0x50>
    1da2:	e0c1      	b.n	1f28 <store_file_packet+0x1d4>
            strcpy(&save_file_name[2], cp);
    1da4:	4f79      	ldr	r7, [pc, #484]	; (1f8c <store_file_packet+0x238>)
    1da6:	1cb8      	adds	r0, r7, #2
    1da8:	0021      	movs	r1, r4
    1daa:	4b7d      	ldr	r3, [pc, #500]	; (1fa0 <store_file_packet+0x24c>)
    1dac:	4798      	blx	r3
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
    1dae:	2241      	movs	r2, #65	; 0x41
    1db0:	2100      	movs	r1, #0
    1db2:	a809      	add	r0, sp, #36	; 0x24
    1db4:	4c7b      	ldr	r4, [pc, #492]	; (1fa4 <store_file_packet+0x250>)
    1db6:	47a0      	blx	r4
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
    1db8:	2209      	movs	r2, #9
    1dba:	2100      	movs	r1, #0
    1dbc:	a806      	add	r0, sp, #24
    1dbe:	47a0      	blx	r4
    char numbering[NUMBRING_MAX + 1] = {0};
    1dc0:	2300      	movs	r3, #0
    1dc2:	9305      	str	r3, [sp, #20]
    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    1dc4:	4c78      	ldr	r4, [pc, #480]	; (1fa8 <store_file_packet+0x254>)
    1dc6:	2200      	movs	r2, #0
    1dc8:	0039      	movs	r1, r7
    1dca:	0020      	movs	r0, r4
    1dcc:	4b77      	ldr	r3, [pc, #476]	; (1fac <store_file_packet+0x258>)
    1dce:	4798      	blx	r3
    1dd0:	0007      	movs	r7, r0
    f_close(&file_object);
    1dd2:	0020      	movs	r0, r4
    1dd4:	4b76      	ldr	r3, [pc, #472]	; (1fb0 <store_file_packet+0x25c>)
    1dd6:	4798      	blx	r3
    if (!is_exist_file(fp, file_path_name)) {
    1dd8:	2f00      	cmp	r7, #0
    1dda:	d17d      	bne.n	1ed8 <store_file_packet+0x184>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
    1ddc:	486b      	ldr	r0, [pc, #428]	; (1f8c <store_file_packet+0x238>)
    1dde:	4b6f      	ldr	r3, [pc, #444]	; (1f9c <store_file_packet+0x248>)
    1de0:	4798      	blx	r3
    1de2:	2840      	cmp	r0, #64	; 0x40
    1de4:	d878      	bhi.n	1ed8 <store_file_packet+0x184>
    p = strrchr(file_path_name, '.');
    1de6:	212e      	movs	r1, #46	; 0x2e
    1de8:	4868      	ldr	r0, [pc, #416]	; (1f8c <store_file_packet+0x238>)
    1dea:	4b72      	ldr	r3, [pc, #456]	; (1fb4 <store_file_packet+0x260>)
    1dec:	4798      	blx	r3
    1dee:	1e04      	subs	r4, r0, #0
    if (p != NULL) {
    1df0:	d03b      	beq.n	1e6a <store_file_packet+0x116>
        ext_len = strlen(p);
    1df2:	4b6a      	ldr	r3, [pc, #424]	; (1f9c <store_file_packet+0x248>)
    1df4:	4798      	blx	r3
    1df6:	0007      	movs	r7, r0
    1df8:	b286      	uxth	r6, r0
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
    1dfa:	2e07      	cmp	r6, #7
    1dfc:	d821      	bhi.n	1e42 <store_file_packet+0xee>
            strcpy(ext, p);
    1dfe:	0021      	movs	r1, r4
    1e00:	a806      	add	r0, sp, #24
    1e02:	4b67      	ldr	r3, [pc, #412]	; (1fa0 <store_file_packet+0x24c>)
    1e04:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
    1e06:	4861      	ldr	r0, [pc, #388]	; (1f8c <store_file_packet+0x238>)
    1e08:	4b64      	ldr	r3, [pc, #400]	; (1f9c <store_file_packet+0x248>)
    1e0a:	4798      	blx	r3
    1e0c:	043f      	lsls	r7, r7, #16
    1e0e:	0c3f      	lsrs	r7, r7, #16
    1e10:	1bc7      	subs	r7, r0, r7
    1e12:	2f3c      	cmp	r7, #60	; 0x3c
    1e14:	d90a      	bls.n	1e2c <store_file_packet+0xd8>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
    1e16:	273c      	movs	r7, #60	; 0x3c
    1e18:	1bbf      	subs	r7, r7, r6
    1e1a:	b2bf      	uxth	r7, r7
                strncpy(name, file_path_name, name_len);
    1e1c:	003a      	movs	r2, r7
    1e1e:	495b      	ldr	r1, [pc, #364]	; (1f8c <store_file_packet+0x238>)
    1e20:	a809      	add	r0, sp, #36	; 0x24
    1e22:	4b65      	ldr	r3, [pc, #404]	; (1fb8 <store_file_packet+0x264>)
    1e24:	4798      	blx	r3
            valid_ext = true;
    1e26:	2301      	movs	r3, #1
    1e28:	469a      	mov	sl, r3
    1e2a:	e012      	b.n	1e52 <store_file_packet+0xfe>
                name_len = (p - file_path_name);
    1e2c:	4957      	ldr	r1, [pc, #348]	; (1f8c <store_file_packet+0x238>)
    1e2e:	1a64      	subs	r4, r4, r1
    1e30:	b2a7      	uxth	r7, r4
                strncpy(name, file_path_name, name_len);
    1e32:	0424      	lsls	r4, r4, #16
    1e34:	0c22      	lsrs	r2, r4, #16
    1e36:	a809      	add	r0, sp, #36	; 0x24
    1e38:	4b5f      	ldr	r3, [pc, #380]	; (1fb8 <store_file_packet+0x264>)
    1e3a:	4798      	blx	r3
            valid_ext = true;
    1e3c:	2301      	movs	r3, #1
    1e3e:	469a      	mov	sl, r3
    1e40:	e007      	b.n	1e52 <store_file_packet+0xfe>
            strncpy(name, file_path_name, name_len);
    1e42:	223c      	movs	r2, #60	; 0x3c
    1e44:	4951      	ldr	r1, [pc, #324]	; (1f8c <store_file_packet+0x238>)
    1e46:	a809      	add	r0, sp, #36	; 0x24
    1e48:	4b5b      	ldr	r3, [pc, #364]	; (1fb8 <store_file_packet+0x264>)
    1e4a:	4798      	blx	r3
    bool valid_ext = false;
    1e4c:	2300      	movs	r3, #0
    1e4e:	469a      	mov	sl, r3
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    1e50:	273c      	movs	r7, #60	; 0x3c
    name[name_len++] = '-';
    1e52:	1c7c      	adds	r4, r7, #1
    1e54:	b2a4      	uxth	r4, r4
    1e56:	222d      	movs	r2, #45	; 0x2d
    1e58:	ab09      	add	r3, sp, #36	; 0x24
    1e5a:	55da      	strb	r2, [r3, r7]
    1e5c:	2601      	movs	r6, #1
            strcpy(&name[name_len + NUMBRING_MAX], ext);
    1e5e:	1ce3      	adds	r3, r4, #3
    1e60:	aa09      	add	r2, sp, #36	; 0x24
    1e62:	4694      	mov	ip, r2
    1e64:	4463      	add	r3, ip
    1e66:	9303      	str	r3, [sp, #12]
    1e68:	e019      	b.n	1e9e <store_file_packet+0x14a>
        strncpy(name, file_path_name, name_len);
    1e6a:	223c      	movs	r2, #60	; 0x3c
    1e6c:	4947      	ldr	r1, [pc, #284]	; (1f8c <store_file_packet+0x238>)
    1e6e:	a809      	add	r0, sp, #36	; 0x24
    1e70:	4b51      	ldr	r3, [pc, #324]	; (1fb8 <store_file_packet+0x264>)
    1e72:	4798      	blx	r3
    bool valid_ext = false;
    1e74:	2300      	movs	r3, #0
    1e76:	469a      	mov	sl, r3
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
    1e78:	273c      	movs	r7, #60	; 0x3c
    1e7a:	e7ea      	b.n	1e52 <store_file_packet+0xfe>
    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
    1e7c:	4f4a      	ldr	r7, [pc, #296]	; (1fa8 <store_file_packet+0x254>)
    1e7e:	2200      	movs	r2, #0
    1e80:	a909      	add	r1, sp, #36	; 0x24
    1e82:	0038      	movs	r0, r7
    1e84:	4b49      	ldr	r3, [pc, #292]	; (1fac <store_file_packet+0x258>)
    1e86:	4798      	blx	r3
    1e88:	0005      	movs	r5, r0
    f_close(&file_object);
    1e8a:	0038      	movs	r0, r7
    1e8c:	4b48      	ldr	r3, [pc, #288]	; (1fb0 <store_file_packet+0x25c>)
    1e8e:	4798      	blx	r3
        if (!is_exist_file(fp, name)) {
    1e90:	2d00      	cmp	r5, #0
    1e92:	d117      	bne.n	1ec4 <store_file_packet+0x170>
    1e94:	3601      	adds	r6, #1
    for (i = 1; i < count; i++) {
    1e96:	4b49      	ldr	r3, [pc, #292]	; (1fbc <store_file_packet+0x268>)
    1e98:	b2b2      	uxth	r2, r6
    1e9a:	429a      	cmp	r2, r3
    1e9c:	d81c      	bhi.n	1ed8 <store_file_packet+0x184>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
    1e9e:	0032      	movs	r2, r6
    1ea0:	4947      	ldr	r1, [pc, #284]	; (1fc0 <store_file_packet+0x26c>)
    1ea2:	a805      	add	r0, sp, #20
    1ea4:	4b47      	ldr	r3, [pc, #284]	; (1fc4 <store_file_packet+0x270>)
    1ea6:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
    1ea8:	ab09      	add	r3, sp, #36	; 0x24
    1eaa:	1918      	adds	r0, r3, r4
    1eac:	2203      	movs	r2, #3
    1eae:	a905      	add	r1, sp, #20
    1eb0:	4b41      	ldr	r3, [pc, #260]	; (1fb8 <store_file_packet+0x264>)
    1eb2:	4798      	blx	r3
        if (valid_ext) {
    1eb4:	4653      	mov	r3, sl
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d0e0      	beq.n	1e7c <store_file_packet+0x128>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
    1eba:	a906      	add	r1, sp, #24
    1ebc:	9803      	ldr	r0, [sp, #12]
    1ebe:	4b38      	ldr	r3, [pc, #224]	; (1fa0 <store_file_packet+0x24c>)
    1ec0:	4798      	blx	r3
    1ec2:	e7db      	b.n	1e7c <store_file_packet+0x128>
            memset(file_path_name, 0, max_len);
    1ec4:	4c31      	ldr	r4, [pc, #196]	; (1f8c <store_file_packet+0x238>)
    1ec6:	2240      	movs	r2, #64	; 0x40
    1ec8:	2100      	movs	r1, #0
    1eca:	0020      	movs	r0, r4
    1ecc:	4b35      	ldr	r3, [pc, #212]	; (1fa4 <store_file_packet+0x250>)
    1ece:	4798      	blx	r3
            strcpy(file_path_name, name);
    1ed0:	a909      	add	r1, sp, #36	; 0x24
    1ed2:	0020      	movs	r0, r4
    1ed4:	4b32      	ldr	r3, [pc, #200]	; (1fa0 <store_file_packet+0x24c>)
    1ed6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
    1ed8:	4c2c      	ldr	r4, [pc, #176]	; (1f8c <store_file_packet+0x238>)
    1eda:	0022      	movs	r2, r4
    1edc:	493a      	ldr	r1, [pc, #232]	; (1fc8 <store_file_packet+0x274>)
    1ede:	2001      	movs	r0, #1
    1ee0:	4b2d      	ldr	r3, [pc, #180]	; (1f98 <store_file_packet+0x244>)
    1ee2:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    1ee4:	220a      	movs	r2, #10
    1ee6:	0021      	movs	r1, r4
    1ee8:	482f      	ldr	r0, [pc, #188]	; (1fa8 <store_file_packet+0x254>)
    1eea:	4b30      	ldr	r3, [pc, #192]	; (1fac <store_file_packet+0x258>)
    1eec:	4798      	blx	r3
        if (ret != FR_OK) {
    1eee:	2800      	cmp	r0, #0
    1ef0:	d122      	bne.n	1f38 <store_file_packet+0x1e4>
        received_file_size = 0;
    1ef2:	2200      	movs	r2, #0
    1ef4:	4b35      	ldr	r3, [pc, #212]	; (1fcc <store_file_packet+0x278>)
    1ef6:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
    1ef8:	2008      	movs	r0, #8
    1efa:	4b35      	ldr	r3, [pc, #212]	; (1fd0 <store_file_packet+0x27c>)
    1efc:	4798      	blx	r3
        UINT wsize = 0;
    1efe:	2300      	movs	r3, #0
    1f00:	9309      	str	r3, [sp, #36]	; 0x24
        ret = f_write(&file_object, (const void *)data, length, &wsize);
    1f02:	ab09      	add	r3, sp, #36	; 0x24
    1f04:	9a02      	ldr	r2, [sp, #8]
    1f06:	9901      	ldr	r1, [sp, #4]
    1f08:	4827      	ldr	r0, [pc, #156]	; (1fa8 <store_file_packet+0x254>)
    1f0a:	4c32      	ldr	r4, [pc, #200]	; (1fd4 <store_file_packet+0x280>)
    1f0c:	47a0      	blx	r4
        if (ret != FR_OK) {
    1f0e:	2800      	cmp	r0, #0
    1f10:	d018      	beq.n	1f44 <store_file_packet+0x1f0>
            f_close(&file_object);
    1f12:	4825      	ldr	r0, [pc, #148]	; (1fa8 <store_file_packet+0x254>)
    1f14:	4b26      	ldr	r3, [pc, #152]	; (1fb0 <store_file_packet+0x25c>)
    1f16:	4798      	blx	r3
            add_state(CANCELED);
    1f18:	2020      	movs	r0, #32
    1f1a:	4b2d      	ldr	r3, [pc, #180]	; (1fd0 <store_file_packet+0x27c>)
    1f1c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
    1f1e:	492e      	ldr	r1, [pc, #184]	; (1fd8 <store_file_packet+0x284>)
    1f20:	2001      	movs	r0, #1
    1f22:	4b1d      	ldr	r3, [pc, #116]	; (1f98 <store_file_packet+0x244>)
    1f24:	4798      	blx	r3
            return;
    1f26:	e72f      	b.n	1d88 <store_file_packet+0x34>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
    1f28:	492c      	ldr	r1, [pc, #176]	; (1fdc <store_file_packet+0x288>)
    1f2a:	2001      	movs	r0, #1
    1f2c:	4b1a      	ldr	r3, [pc, #104]	; (1f98 <store_file_packet+0x244>)
    1f2e:	4798      	blx	r3
            add_state(CANCELED);
    1f30:	2020      	movs	r0, #32
    1f32:	4b27      	ldr	r3, [pc, #156]	; (1fd0 <store_file_packet+0x27c>)
    1f34:	4798      	blx	r3
            return;
    1f36:	e727      	b.n	1d88 <store_file_packet+0x34>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
    1f38:	0002      	movs	r2, r0
    1f3a:	4929      	ldr	r1, [pc, #164]	; (1fe0 <store_file_packet+0x28c>)
    1f3c:	2001      	movs	r0, #1
    1f3e:	4b16      	ldr	r3, [pc, #88]	; (1f98 <store_file_packet+0x244>)
    1f40:	4798      	blx	r3
            return;
    1f42:	e721      	b.n	1d88 <store_file_packet+0x34>
        received_file_size += wsize;
    1f44:	4c21      	ldr	r4, [pc, #132]	; (1fcc <store_file_packet+0x278>)
    1f46:	6823      	ldr	r3, [r4, #0]
    1f48:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f4a:	468c      	mov	ip, r1
    1f4c:	4463      	add	r3, ip
    1f4e:	001a      	movs	r2, r3
    1f50:	6023      	str	r3, [r4, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
    1f52:	4d24      	ldr	r5, [pc, #144]	; (1fe4 <store_file_packet+0x290>)
    1f54:	682b      	ldr	r3, [r5, #0]
    1f56:	4924      	ldr	r1, [pc, #144]	; (1fe8 <store_file_packet+0x294>)
    1f58:	2001      	movs	r0, #1
    1f5a:	4e0f      	ldr	r6, [pc, #60]	; (1f98 <store_file_packet+0x244>)
    1f5c:	47b0      	blx	r6
        if (received_file_size >= http_file_size) {
    1f5e:	6822      	ldr	r2, [r4, #0]
    1f60:	682b      	ldr	r3, [r5, #0]
    1f62:	429a      	cmp	r2, r3
    1f64:	d200      	bcs.n	1f68 <store_file_packet+0x214>
    1f66:	e70f      	b.n	1d88 <store_file_packet+0x34>
            f_close(&file_object);
    1f68:	480f      	ldr	r0, [pc, #60]	; (1fa8 <store_file_packet+0x254>)
    1f6a:	4b11      	ldr	r3, [pc, #68]	; (1fb0 <store_file_packet+0x25c>)
    1f6c:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
    1f6e:	491f      	ldr	r1, [pc, #124]	; (1fec <store_file_packet+0x298>)
    1f70:	2001      	movs	r0, #1
    1f72:	4b09      	ldr	r3, [pc, #36]	; (1f98 <store_file_packet+0x244>)
    1f74:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1f76:	2280      	movs	r2, #128	; 0x80
    1f78:	0412      	lsls	r2, r2, #16
    1f7a:	4b1d      	ldr	r3, [pc, #116]	; (1ff0 <store_file_packet+0x29c>)
    1f7c:	615a      	str	r2, [r3, #20]
            add_state(COMPLETED);
    1f7e:	2010      	movs	r0, #16
    1f80:	4b13      	ldr	r3, [pc, #76]	; (1fd0 <store_file_packet+0x27c>)
    1f82:	4798      	blx	r3
            return;
    1f84:	e700      	b.n	1d88 <store_file_packet+0x34>
    1f86:	46c0      	nop			; (mov r8, r8)
    1f88:	200003da 	.word	0x200003da
    1f8c:	20000080 	.word	0x20000080
    1f90:	0001661e 	.word	0x0001661e
    1f94:	00016620 	.word	0x00016620
    1f98:	00007fad 	.word	0x00007fad
    1f9c:	00014633 	.word	0x00014633
    1fa0:	000145e7 	.word	0x000145e7
    1fa4:	0001427b 	.word	0x0001427b
    1fa8:	200003dc 	.word	0x200003dc
    1fac:	00010081 	.word	0x00010081
    1fb0:	000104cd 	.word	0x000104cd
    1fb4:	0001468d 	.word	0x0001468d
    1fb8:	00014663 	.word	0x00014663
    1fbc:	000003e7 	.word	0x000003e7
    1fc0:	00016644 	.word	0x00016644
    1fc4:	00014539 	.word	0x00014539
    1fc8:	0001664c 	.word	0x0001664c
    1fcc:	20000840 	.word	0x20000840
    1fd0:	00001855 	.word	0x00001855
    1fd4:	00010209 	.word	0x00010209
    1fd8:	000166e8 	.word	0x000166e8
    1fdc:	00016674 	.word	0x00016674
    1fe0:	000166b4 	.word	0x000166b4
    1fe4:	20000400 	.word	0x20000400
    1fe8:	00016724 	.word	0x00016724
    1fec:	00016758 	.word	0x00016758
    1ff0:	41004400 	.word	0x41004400

00001ff4 <http_client_callback>:
{
    1ff4:	b570      	push	{r4, r5, r6, lr}
    1ff6:	0014      	movs	r4, r2
    switch (type) {
    1ff8:	2904      	cmp	r1, #4
    1ffa:	d807      	bhi.n	200c <STACK_SIZE+0xc>
    1ffc:	0089      	lsls	r1, r1, #2
    1ffe:	4b2d      	ldr	r3, [pc, #180]	; (20b4 <STACK_SIZE+0xb4>)
    2000:	585b      	ldr	r3, [r3, r1]
    2002:	469f      	mov	pc, r3
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
    2004:	492c      	ldr	r1, [pc, #176]	; (20b8 <STACK_SIZE+0xb8>)
    2006:	2001      	movs	r0, #1
    2008:	4b2c      	ldr	r3, [pc, #176]	; (20bc <STACK_SIZE+0xbc>)
    200a:	4798      	blx	r3
}
    200c:	bd70      	pop	{r4, r5, r6, pc}
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
    200e:	492c      	ldr	r1, [pc, #176]	; (20c0 <STACK_SIZE+0xc0>)
    2010:	2001      	movs	r0, #1
    2012:	4b2a      	ldr	r3, [pc, #168]	; (20bc <STACK_SIZE+0xbc>)
    2014:	4798      	blx	r3
            add_state(GET_REQUESTED);
    2016:	2004      	movs	r0, #4
    2018:	4b2a      	ldr	r3, [pc, #168]	; (20c4 <STACK_SIZE+0xc4>)
    201a:	4798      	blx	r3
            break;
    201c:	e7f6      	b.n	200c <STACK_SIZE+0xc>
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
    201e:	8812      	ldrh	r2, [r2, #0]
    2020:	6863      	ldr	r3, [r4, #4]
    2022:	4929      	ldr	r1, [pc, #164]	; (20c8 <STACK_SIZE+0xc8>)
    2024:	2001      	movs	r0, #1
    2026:	4d25      	ldr	r5, [pc, #148]	; (20bc <STACK_SIZE+0xbc>)
    2028:	47a8      	blx	r5
            if ((unsigned int)data->recv_response.response_code == 200) {
    202a:	8823      	ldrh	r3, [r4, #0]
    202c:	2bc8      	cmp	r3, #200	; 0xc8
    202e:	d110      	bne.n	2052 <STACK_SIZE+0x52>
                http_file_size = data->recv_response.content_length;
    2030:	6861      	ldr	r1, [r4, #4]
    2032:	4b26      	ldr	r3, [pc, #152]	; (20cc <STACK_SIZE+0xcc>)
    2034:	6019      	str	r1, [r3, #0]
                received_file_size = 0;
    2036:	2200      	movs	r2, #0
    2038:	4b25      	ldr	r3, [pc, #148]	; (20d0 <STACK_SIZE+0xd0>)
    203a:	601a      	str	r2, [r3, #0]
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
    203c:	2380      	movs	r3, #128	; 0x80
    203e:	009b      	lsls	r3, r3, #2
    2040:	4299      	cmp	r1, r3
    2042:	d8e3      	bhi.n	200c <STACK_SIZE+0xc>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
    2044:	68a0      	ldr	r0, [r4, #8]
    2046:	4b23      	ldr	r3, [pc, #140]	; (20d4 <STACK_SIZE+0xd4>)
    2048:	4798      	blx	r3
                add_state(COMPLETED);
    204a:	2010      	movs	r0, #16
    204c:	4b1d      	ldr	r3, [pc, #116]	; (20c4 <STACK_SIZE+0xc4>)
    204e:	4798      	blx	r3
    2050:	e7dc      	b.n	200c <STACK_SIZE+0xc>
                add_state(CANCELED);
    2052:	2020      	movs	r0, #32
    2054:	4b1b      	ldr	r3, [pc, #108]	; (20c4 <STACK_SIZE+0xc4>)
    2056:	4798      	blx	r3
                return;
    2058:	e7d8      	b.n	200c <STACK_SIZE+0xc>
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
    205a:	6811      	ldr	r1, [r2, #0]
    205c:	6850      	ldr	r0, [r2, #4]
    205e:	4b1d      	ldr	r3, [pc, #116]	; (20d4 <STACK_SIZE+0xd4>)
    2060:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
    2062:	7a23      	ldrb	r3, [r4, #8]
    2064:	2b00      	cmp	r3, #0
    2066:	d0d1      	beq.n	200c <STACK_SIZE+0xc>
                add_state(COMPLETED);
    2068:	2010      	movs	r0, #16
    206a:	4b16      	ldr	r3, [pc, #88]	; (20c4 <STACK_SIZE+0xc4>)
    206c:	4798      	blx	r3
    206e:	e7cd      	b.n	200c <STACK_SIZE+0xc>
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
    2070:	6812      	ldr	r2, [r2, #0]
    2072:	4919      	ldr	r1, [pc, #100]	; (20d8 <STACK_SIZE+0xd8>)
    2074:	2001      	movs	r0, #1
    2076:	4b11      	ldr	r3, [pc, #68]	; (20bc <STACK_SIZE+0xbc>)
    2078:	4798      	blx	r3
            if (data->disconnected.reason == -EAGAIN) {
    207a:	6823      	ldr	r3, [r4, #0]
    207c:	330b      	adds	r3, #11
    207e:	d1c5      	bne.n	200c <STACK_SIZE+0xc>
    return ((down_state & mask) != 0);
    2080:	4b16      	ldr	r3, [pc, #88]	; (20dc <STACK_SIZE+0xdc>)
    2082:	781b      	ldrb	r3, [r3, #0]
                if (is_state_set(DOWNLOADING)) {
    2084:	071b      	lsls	r3, r3, #28
    2086:	d406      	bmi.n	2096 <STACK_SIZE+0x96>
    return ((down_state & mask) != 0);
    2088:	4b14      	ldr	r3, [pc, #80]	; (20dc <STACK_SIZE+0xdc>)
    208a:	781b      	ldrb	r3, [r3, #0]
                if (is_state_set(GET_REQUESTED)) {
    208c:	075a      	lsls	r2, r3, #29
    208e:	d40b      	bmi.n	20a8 <STACK_SIZE+0xa8>
                start_download();
    2090:	4b13      	ldr	r3, [pc, #76]	; (20e0 <STACK_SIZE+0xe0>)
    2092:	4798      	blx	r3
    2094:	e7ba      	b.n	200c <STACK_SIZE+0xc>
                    f_close(&file_object);
    2096:	4813      	ldr	r0, [pc, #76]	; (20e4 <STACK_SIZE+0xe4>)
    2098:	4b13      	ldr	r3, [pc, #76]	; (20e8 <STACK_SIZE+0xe8>)
    209a:	4798      	blx	r3
    down_state &= ~mask;
    209c:	4a0f      	ldr	r2, [pc, #60]	; (20dc <STACK_SIZE+0xdc>)
    209e:	7813      	ldrb	r3, [r2, #0]
    20a0:	2108      	movs	r1, #8
    20a2:	438b      	bics	r3, r1
    20a4:	7013      	strb	r3, [r2, #0]
    20a6:	e7ef      	b.n	2088 <STACK_SIZE+0x88>
    20a8:	2204      	movs	r2, #4
    20aa:	4393      	bics	r3, r2
    20ac:	4a0b      	ldr	r2, [pc, #44]	; (20dc <STACK_SIZE+0xdc>)
    20ae:	7013      	strb	r3, [r2, #0]
    20b0:	e7ee      	b.n	2090 <STACK_SIZE+0x90>
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	0001612c 	.word	0x0001612c
    20b8:	000162c0 	.word	0x000162c0
    20bc:	00007fad 	.word	0x00007fad
    20c0:	000162f8 	.word	0x000162f8
    20c4:	00001855 	.word	0x00001855
    20c8:	00016324 	.word	0x00016324
    20cc:	20000400 	.word	0x20000400
    20d0:	20000840 	.word	0x20000840
    20d4:	00001d55 	.word	0x00001d55
    20d8:	00016360 	.word	0x00016360
    20dc:	200003da 	.word	0x200003da
    20e0:	00001af1 	.word	0x00001af1
    20e4:	200003dc 	.word	0x200003dc
    20e8:	000104cd 	.word	0x000104cd

000020ec <wifi_cb>:
{
    20ec:	b510      	push	{r4, lr}
    20ee:	b082      	sub	sp, #8
    switch (u8MsgType) {
    20f0:	282c      	cmp	r0, #44	; 0x2c
    20f2:	d003      	beq.n	20fc <wifi_cb+0x10>
    20f4:	2832      	cmp	r0, #50	; 0x32
    20f6:	d037      	beq.n	2168 <wifi_cb+0x7c>
}
    20f8:	b002      	add	sp, #8
    20fa:	bd10      	pop	{r4, pc}
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    20fc:	780b      	ldrb	r3, [r1, #0]
    20fe:	2b01      	cmp	r3, #1
    2100:	d01d      	beq.n	213e <wifi_cb+0x52>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    2102:	2b00      	cmp	r3, #0
    2104:	d1f8      	bne.n	20f8 <wifi_cb+0xc>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
    2106:	4928      	ldr	r1, [pc, #160]	; (21a8 <wifi_cb+0xbc>)
    2108:	2001      	movs	r0, #1
    210a:	4b28      	ldr	r3, [pc, #160]	; (21ac <wifi_cb+0xc0>)
    210c:	4798      	blx	r3
    down_state &= ~mask;
    210e:	4a28      	ldr	r2, [pc, #160]	; (21b0 <wifi_cb+0xc4>)
    2110:	7813      	ldrb	r3, [r2, #0]
    2112:	2102      	movs	r1, #2
    2114:	438b      	bics	r3, r1
    2116:	7013      	strb	r3, [r2, #0]
                if (is_state_set(DOWNLOADING)) {
    2118:	071b      	lsls	r3, r3, #28
    211a:	d417      	bmi.n	214c <wifi_cb+0x60>
    return ((down_state & mask) != 0);
    211c:	4b24      	ldr	r3, [pc, #144]	; (21b0 <wifi_cb+0xc4>)
    211e:	781b      	ldrb	r3, [r3, #0]
                if (is_state_set(GET_REQUESTED)) {
    2120:	075a      	lsls	r2, r3, #29
    2122:	d41c      	bmi.n	215e <wifi_cb+0x72>
                mqtt_disconnect(&mqtt_inst, 1);
    2124:	2101      	movs	r1, #1
    2126:	4823      	ldr	r0, [pc, #140]	; (21b4 <wifi_cb+0xc8>)
    2128:	4b23      	ldr	r3, [pc, #140]	; (21b8 <wifi_cb+0xcc>)
    212a:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    212c:	23ff      	movs	r3, #255	; 0xff
    212e:	9300      	str	r3, [sp, #0]
    2130:	4b22      	ldr	r3, [pc, #136]	; (21bc <wifi_cb+0xd0>)
    2132:	2202      	movs	r2, #2
    2134:	2111      	movs	r1, #17
    2136:	4822      	ldr	r0, [pc, #136]	; (21c0 <wifi_cb+0xd4>)
    2138:	4c22      	ldr	r4, [pc, #136]	; (21c4 <wifi_cb+0xd8>)
    213a:	47a0      	blx	r4
    213c:	e7dc      	b.n	20f8 <wifi_cb+0xc>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
    213e:	4922      	ldr	r1, [pc, #136]	; (21c8 <wifi_cb+0xdc>)
    2140:	2001      	movs	r0, #1
    2142:	4b1a      	ldr	r3, [pc, #104]	; (21ac <wifi_cb+0xc0>)
    2144:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
    2146:	4b21      	ldr	r3, [pc, #132]	; (21cc <wifi_cb+0xe0>)
    2148:	4798      	blx	r3
    214a:	e7d5      	b.n	20f8 <wifi_cb+0xc>
                    f_close(&file_object);
    214c:	4820      	ldr	r0, [pc, #128]	; (21d0 <wifi_cb+0xe4>)
    214e:	4b21      	ldr	r3, [pc, #132]	; (21d4 <wifi_cb+0xe8>)
    2150:	4798      	blx	r3
    down_state &= ~mask;
    2152:	4a17      	ldr	r2, [pc, #92]	; (21b0 <wifi_cb+0xc4>)
    2154:	7813      	ldrb	r3, [r2, #0]
    2156:	2108      	movs	r1, #8
    2158:	438b      	bics	r3, r1
    215a:	7013      	strb	r3, [r2, #0]
    215c:	e7de      	b.n	211c <wifi_cb+0x30>
    215e:	2204      	movs	r2, #4
    2160:	4393      	bics	r3, r2
    2162:	4a13      	ldr	r2, [pc, #76]	; (21b0 <wifi_cb+0xc4>)
    2164:	7013      	strb	r3, [r2, #0]
    2166:	e7dd      	b.n	2124 <wifi_cb+0x38>
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    2168:	784b      	ldrb	r3, [r1, #1]
    216a:	780a      	ldrb	r2, [r1, #0]
    216c:	78c8      	ldrb	r0, [r1, #3]
    216e:	9001      	str	r0, [sp, #4]
    2170:	7889      	ldrb	r1, [r1, #2]
    2172:	9100      	str	r1, [sp, #0]
    2174:	4918      	ldr	r1, [pc, #96]	; (21d8 <wifi_cb+0xec>)
    2176:	2001      	movs	r0, #1
    2178:	4c0c      	ldr	r4, [pc, #48]	; (21ac <wifi_cb+0xc0>)
    217a:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
    217c:	2002      	movs	r0, #2
    217e:	4b17      	ldr	r3, [pc, #92]	; (21dc <wifi_cb+0xf0>)
    2180:	4798      	blx	r3
            if (do_download_flag == 1) {
    2182:	4b17      	ldr	r3, [pc, #92]	; (21e0 <wifi_cb+0xf4>)
    2184:	781b      	ldrb	r3, [r3, #0]
    2186:	2b01      	cmp	r3, #1
    2188:	d00a      	beq.n	21a0 <wifi_cb+0xb4>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    218a:	4916      	ldr	r1, [pc, #88]	; (21e4 <wifi_cb+0xf8>)
    218c:	4809      	ldr	r0, [pc, #36]	; (21b4 <wifi_cb+0xc8>)
    218e:	4b16      	ldr	r3, [pc, #88]	; (21e8 <wifi_cb+0xfc>)
    2190:	4798      	blx	r3
    2192:	2800      	cmp	r0, #0
    2194:	d0b0      	beq.n	20f8 <wifi_cb+0xc>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    2196:	4915      	ldr	r1, [pc, #84]	; (21ec <wifi_cb+0x100>)
    2198:	2001      	movs	r0, #1
    219a:	4b04      	ldr	r3, [pc, #16]	; (21ac <wifi_cb+0xc0>)
    219c:	4798      	blx	r3
}
    219e:	e7ab      	b.n	20f8 <wifi_cb+0xc>
                start_download();
    21a0:	4b13      	ldr	r3, [pc, #76]	; (21f0 <wifi_cb+0x104>)
    21a2:	4798      	blx	r3
    21a4:	e7a8      	b.n	20f8 <wifi_cb+0xc>
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	00016940 	.word	0x00016940
    21ac:	00007fad 	.word	0x00007fad
    21b0:	200003da 	.word	0x200003da
    21b4:	20000408 	.word	0x20000408
    21b8:	000111d5 	.word	0x000111d5
    21bc:	00016964 	.word	0x00016964
    21c0:	00016974 	.word	0x00016974
    21c4:	0000a2e9 	.word	0x0000a2e9
    21c8:	00016920 	.word	0x00016920
    21cc:	0000a305 	.word	0x0000a305
    21d0:	200003dc 	.word	0x200003dc
    21d4:	000104cd 	.word	0x000104cd
    21d8:	00016988 	.word	0x00016988
    21dc:	00001855 	.word	0x00001855
    21e0:	200003d9 	.word	0x200003d9
    21e4:	00016390 	.word	0x00016390
    21e8:	00011111 	.word	0x00011111
    21ec:	000169b0 	.word	0x000169b0
    21f0:	00001af1 	.word	0x00001af1

000021f4 <configure_extint_channel>:
{
    21f4:	b510      	push	{r4, lr}
    21f6:	b084      	sub	sp, #16
    extint_chan_get_config_defaults(&config_extint_chan);
    21f8:	ac01      	add	r4, sp, #4
    21fa:	0020      	movs	r0, r4
    21fc:	4b07      	ldr	r3, [pc, #28]	; (221c <configure_extint_channel+0x28>)
    21fe:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
    2200:	2337      	movs	r3, #55	; 0x37
    2202:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
    2204:	2300      	movs	r3, #0
    2206:	6063      	str	r3, [r4, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    2208:	3301      	adds	r3, #1
    220a:	7223      	strb	r3, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    220c:	3301      	adds	r3, #1
    220e:	72e3      	strb	r3, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
    2210:	0021      	movs	r1, r4
    2212:	2007      	movs	r0, #7
    2214:	4b02      	ldr	r3, [pc, #8]	; (2220 <configure_extint_channel+0x2c>)
    2216:	4798      	blx	r3
}
    2218:	b004      	add	sp, #16
    221a:	bd10      	pop	{r4, pc}
    221c:	0000c62d 	.word	0x0000c62d
    2220:	0000c641 	.word	0x0000c641

00002224 <configure_extint_callbacks>:
{
    2224:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    2226:	2200      	movs	r2, #0
    2228:	2107      	movs	r1, #7
    222a:	4804      	ldr	r0, [pc, #16]	; (223c <configure_extint_callbacks+0x18>)
    222c:	4b04      	ldr	r3, [pc, #16]	; (2240 <configure_extint_callbacks+0x1c>)
    222e:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    2230:	2100      	movs	r1, #0
    2232:	2007      	movs	r0, #7
    2234:	4b03      	ldr	r3, [pc, #12]	; (2244 <configure_extint_callbacks+0x20>)
    2236:	4798      	blx	r3
}
    2238:	bd10      	pop	{r4, pc}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	00001a99 	.word	0x00001a99
    2240:	0000c4e9 	.word	0x0000c4e9
    2244:	0000c515 	.word	0x0000c515

00002248 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
    2248:	b5f0      	push	{r4, r5, r6, r7, lr}
    224a:	46c6      	mov	lr, r8
    224c:	b500      	push	{lr}
    224e:	b092      	sub	sp, #72	; 0x48
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
    2250:	2064      	movs	r0, #100	; 0x64
    2252:	4bca      	ldr	r3, [pc, #808]	; (257c <vWifiTask+0x334>)
    2254:	4798      	blx	r3
    down_state = NOT_READY;
    2256:	2200      	movs	r2, #0
    2258:	4bc9      	ldr	r3, [pc, #804]	; (2580 <vWifiTask+0x338>)
    225a:	701a      	strb	r2, [r3, #0]
    init_state();
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
    225c:	2104      	movs	r1, #4
    225e:	2005      	movs	r0, #5
    2260:	4cc8      	ldr	r4, [pc, #800]	; (2584 <vWifiTask+0x33c>)
    2262:	47a0      	blx	r4
    2264:	4dc8      	ldr	r5, [pc, #800]	; (2588 <vWifiTask+0x340>)
    2266:	6028      	str	r0, [r5, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
    2268:	2200      	movs	r2, #0
    226a:	2106      	movs	r1, #6
    226c:	2005      	movs	r0, #5
    226e:	47a0      	blx	r4
    2270:	4bc6      	ldr	r3, [pc, #792]	; (258c <vWifiTask+0x344>)
    2272:	6018      	str	r0, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
    2274:	2200      	movs	r2, #0
    2276:	2114      	movs	r1, #20
    2278:	2002      	movs	r0, #2
    227a:	47a0      	blx	r4
    227c:	4bc4      	ldr	r3, [pc, #784]	; (2590 <vWifiTask+0x348>)
    227e:	6018      	str	r0, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
    2280:	2200      	movs	r2, #0
    2282:	2102      	movs	r1, #2
    2284:	2005      	movs	r0, #5
    2286:	47a0      	blx	r4
    2288:	4bc2      	ldr	r3, [pc, #776]	; (2594 <vWifiTask+0x34c>)
    228a:	6018      	str	r0, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
    228c:	682b      	ldr	r3, [r5, #0]
    228e:	2b00      	cmp	r3, #0
    2290:	d044      	beq.n	231c <vWifiTask+0xd4>
    2292:	4bbe      	ldr	r3, [pc, #760]	; (258c <vWifiTask+0x344>)
    2294:	681b      	ldr	r3, [r3, #0]
    2296:	2b00      	cmp	r3, #0
    2298:	d040      	beq.n	231c <vWifiTask+0xd4>
    229a:	4bbd      	ldr	r3, [pc, #756]	; (2590 <vWifiTask+0x348>)
    229c:	681b      	ldr	r3, [r3, #0]
    229e:	2b00      	cmp	r3, #0
    22a0:	d03c      	beq.n	231c <vWifiTask+0xd4>
    22a2:	2800      	cmp	r0, #0
    22a4:	d03a      	beq.n	231c <vWifiTask+0xd4>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
    22a6:	48bc      	ldr	r0, [pc, #752]	; (2598 <vWifiTask+0x350>)
    22a8:	4bbc      	ldr	r3, [pc, #752]	; (259c <vWifiTask+0x354>)
    22aa:	4798      	blx	r3
    sw_timer_get_config_defaults(&swt_conf);
    22ac:	ac05      	add	r4, sp, #20
    22ae:	0020      	movs	r0, r4
    22b0:	4bbb      	ldr	r3, [pc, #748]	; (25a0 <vWifiTask+0x358>)
    22b2:	4798      	blx	r3
    sw_timer_init(&swt_module_inst, &swt_conf);
    22b4:	4dbb      	ldr	r5, [pc, #748]	; (25a4 <vWifiTask+0x35c>)
    22b6:	0021      	movs	r1, r4
    22b8:	0028      	movs	r0, r5
    22ba:	4bbb      	ldr	r3, [pc, #748]	; (25a8 <vWifiTask+0x360>)
    22bc:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
    22be:	0028      	movs	r0, r5
    22c0:	4bba      	ldr	r3, [pc, #744]	; (25ac <vWifiTask+0x364>)
    22c2:	4798      	blx	r3
    http_client_get_config_defaults(&httpc_conf);
    22c4:	0020      	movs	r0, r4
    22c6:	4bba      	ldr	r3, [pc, #744]	; (25b0 <vWifiTask+0x368>)
    22c8:	4798      	blx	r3
    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
    22ca:	2380      	movs	r3, #128	; 0x80
    22cc:	009b      	lsls	r3, r3, #2
    22ce:	6123      	str	r3, [r4, #16]
    httpc_conf.timer_inst = &swt_module_inst;
    22d0:	6065      	str	r5, [r4, #4]
    httpc_conf.tls = 0;
    22d2:	2300      	movs	r3, #0
    22d4:	70a3      	strb	r3, [r4, #2]
    ret = http_client_init(&http_client_module_inst, &httpc_conf);
    22d6:	0021      	movs	r1, r4
    22d8:	48b6      	ldr	r0, [pc, #728]	; (25b4 <vWifiTask+0x36c>)
    22da:	4bb7      	ldr	r3, [pc, #732]	; (25b8 <vWifiTask+0x370>)
    22dc:	4798      	blx	r3
    22de:	1e02      	subs	r2, r0, #0
    if (ret < 0) {
    22e0:	db20      	blt.n	2324 <vWifiTask+0xdc>
    http_client_register_callback(&http_client_module_inst, http_client_callback);
    22e2:	49b6      	ldr	r1, [pc, #728]	; (25bc <vWifiTask+0x374>)
    22e4:	48b3      	ldr	r0, [pc, #716]	; (25b4 <vWifiTask+0x36c>)
    22e6:	4bb6      	ldr	r3, [pc, #728]	; (25c0 <vWifiTask+0x378>)
    22e8:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();

    /* Initialize the MQTT service. */
    configure_mqtt();
    22ea:	4bb6      	ldr	r3, [pc, #728]	; (25c4 <vWifiTask+0x37c>)
    22ec:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
    22ee:	4bb6      	ldr	r3, [pc, #728]	; (25c8 <vWifiTask+0x380>)
    22f0:	4798      	blx	r3
    configure_extint_callbacks();
    22f2:	4bb6      	ldr	r3, [pc, #728]	; (25cc <vWifiTask+0x384>)
    22f4:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    22f6:	2218      	movs	r2, #24
    22f8:	2100      	movs	r1, #0
    22fa:	a80c      	add	r0, sp, #48	; 0x30
    22fc:	4bb4      	ldr	r3, [pc, #720]	; (25d0 <vWifiTask+0x388>)
    22fe:	4798      	blx	r3

    nm_bsp_init();
    2300:	4bb4      	ldr	r3, [pc, #720]	; (25d4 <vWifiTask+0x38c>)
    2302:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
    2304:	4bb4      	ldr	r3, [pc, #720]	; (25d8 <vWifiTask+0x390>)
    2306:	930c      	str	r3, [sp, #48]	; 0x30
    ret = m2m_wifi_init(&param);
    2308:	a80c      	add	r0, sp, #48	; 0x30
    230a:	4bb4      	ldr	r3, [pc, #720]	; (25dc <vWifiTask+0x394>)
    230c:	4798      	blx	r3
    230e:	1e02      	subs	r2, r0, #0
    if (M2M_SUCCESS != ret) {
    2310:	d00d      	beq.n	232e <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
    2312:	49b3      	ldr	r1, [pc, #716]	; (25e0 <vWifiTask+0x398>)
    2314:	2001      	movs	r0, #1
    2316:	4bb3      	ldr	r3, [pc, #716]	; (25e4 <vWifiTask+0x39c>)
    2318:	4798      	blx	r3
    231a:	e7fe      	b.n	231a <vWifiTask+0xd2>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
    231c:	48b2      	ldr	r0, [pc, #712]	; (25e8 <vWifiTask+0x3a0>)
    231e:	4b9f      	ldr	r3, [pc, #636]	; (259c <vWifiTask+0x354>)
    2320:	4798      	blx	r3
    2322:	e7c0      	b.n	22a6 <vWifiTask+0x5e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
    2324:	49b1      	ldr	r1, [pc, #708]	; (25ec <vWifiTask+0x3a4>)
    2326:	2001      	movs	r0, #1
    2328:	4bae      	ldr	r3, [pc, #696]	; (25e4 <vWifiTask+0x39c>)
    232a:	4798      	blx	r3
    232c:	e7fe      	b.n	232c <vWifiTask+0xe4>
        while (1) {
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
    232e:	4cb0      	ldr	r4, [pc, #704]	; (25f0 <vWifiTask+0x3a8>)
    2330:	0022      	movs	r2, r4
    2332:	49b0      	ldr	r1, [pc, #704]	; (25f4 <vWifiTask+0x3ac>)
    2334:	2001      	movs	r0, #1
    2336:	4bab      	ldr	r3, [pc, #684]	; (25e4 <vWifiTask+0x39c>)
    2338:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
    233a:	4baf      	ldr	r3, [pc, #700]	; (25f8 <vWifiTask+0x3b0>)
    233c:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    233e:	49af      	ldr	r1, [pc, #700]	; (25fc <vWifiTask+0x3b4>)
    2340:	48af      	ldr	r0, [pc, #700]	; (2600 <vWifiTask+0x3b8>)
    2342:	4bb0      	ldr	r3, [pc, #704]	; (2604 <vWifiTask+0x3bc>)
    2344:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    2346:	23ff      	movs	r3, #255	; 0xff
    2348:	9300      	str	r3, [sp, #0]
    234a:	4baf      	ldr	r3, [pc, #700]	; (2608 <vWifiTask+0x3c0>)
    234c:	2202      	movs	r2, #2
    234e:	2111      	movs	r1, #17
    2350:	0020      	movs	r0, r4
    2352:	4cae      	ldr	r4, [pc, #696]	; (260c <vWifiTask+0x3c4>)
    2354:	47a0      	blx	r4
    return ((down_state & mask) != 0);
    2356:	4b8a      	ldr	r3, [pc, #552]	; (2580 <vWifiTask+0x338>)
    2358:	781b      	ldrb	r3, [r3, #0]

    while (!(is_state_set(WIFI_CONNECTED))) {
    235a:	079b      	lsls	r3, r3, #30
    235c:	d40a      	bmi.n	2374 <vWifiTask+0x12c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
    235e:	4eac      	ldr	r6, [pc, #688]	; (2610 <vWifiTask+0x3c8>)
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
    2360:	4d90      	ldr	r5, [pc, #576]	; (25a4 <vWifiTask+0x35c>)
    2362:	4cac      	ldr	r4, [pc, #688]	; (2614 <vWifiTask+0x3cc>)
        m2m_wifi_handle_events(NULL);
    2364:	2000      	movs	r0, #0
    2366:	47b0      	blx	r6
        sw_timer_task(&swt_module_inst);
    2368:	0028      	movs	r0, r5
    236a:	47a0      	blx	r4
    return ((down_state & mask) != 0);
    236c:	4b84      	ldr	r3, [pc, #528]	; (2580 <vWifiTask+0x338>)
    236e:	781b      	ldrb	r3, [r3, #0]
    while (!(is_state_set(WIFI_CONNECTED))) {
    2370:	079b      	lsls	r3, r3, #30
    2372:	d5f7      	bpl.n	2364 <vWifiTask+0x11c>
    }

    vTaskDelay(1000);
    2374:	20fa      	movs	r0, #250	; 0xfa
    2376:	0080      	lsls	r0, r0, #2
    2378:	4b80      	ldr	r3, [pc, #512]	; (257c <vWifiTask+0x334>)
    237a:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
    237c:	2201      	movs	r2, #1
    237e:	4ba6      	ldr	r3, [pc, #664]	; (2618 <vWifiTask+0x3d0>)
    2380:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
    2382:	001e      	movs	r6, r3
    m2m_wifi_handle_events(NULL);
    2384:	4ba2      	ldr	r3, [pc, #648]	; (2610 <vWifiTask+0x3c8>)
    2386:	4698      	mov	r8, r3
    2388:	e02b      	b.n	23e2 <vWifiTask+0x19a>
        switch (wifiStateMachine) {
    238a:	2b00      	cmp	r3, #0
    238c:	d000      	beq.n	2390 <vWifiTask+0x148>
    238e:	e1ac      	b.n	26ea <vWifiTask+0x4a2>
    socketDeinit();
    2390:	4ba2      	ldr	r3, [pc, #648]	; (261c <vWifiTask+0x3d4>)
    2392:	4798      	blx	r3
    configure_mqtt();
    2394:	4b8b      	ldr	r3, [pc, #556]	; (25c4 <vWifiTask+0x37c>)
    2396:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
    2398:	4998      	ldr	r1, [pc, #608]	; (25fc <vWifiTask+0x3b4>)
    239a:	4899      	ldr	r0, [pc, #612]	; (2600 <vWifiTask+0x3b8>)
    239c:	4b99      	ldr	r3, [pc, #612]	; (2604 <vWifiTask+0x3bc>)
    239e:	4798      	blx	r3
    socketInit();
    23a0:	4b95      	ldr	r3, [pc, #596]	; (25f8 <vWifiTask+0x3b0>)
    23a2:	4798      	blx	r3
    if (!(mqtt_inst.isConnected)) {
    23a4:	2334      	movs	r3, #52	; 0x34
    23a6:	4a9e      	ldr	r2, [pc, #632]	; (2620 <vWifiTask+0x3d8>)
    23a8:	5cd3      	ldrb	r3, [r2, r3]
    23aa:	2b00      	cmp	r3, #0
    23ac:	d058      	beq.n	2460 <vWifiTask+0x218>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
    23ae:	499d      	ldr	r1, [pc, #628]	; (2624 <vWifiTask+0x3dc>)
    23b0:	2001      	movs	r0, #1
    23b2:	4b8c      	ldr	r3, [pc, #560]	; (25e4 <vWifiTask+0x39c>)
    23b4:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_HANDLE;
    23b6:	2201      	movs	r2, #1
    23b8:	4b97      	ldr	r3, [pc, #604]	; (2618 <vWifiTask+0x3d0>)
    23ba:	701a      	strb	r2, [r3, #0]
            default:
                wifiStateMachine = WIFI_MQTT_INIT;
                break;
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
    23bc:	a905      	add	r1, sp, #20
    23be:	2300      	movs	r3, #0
    23c0:	700b      	strb	r3, [r1, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
    23c2:	4b71      	ldr	r3, [pc, #452]	; (2588 <vWifiTask+0x340>)
    23c4:	6818      	ldr	r0, [r3, #0]
    23c6:	2200      	movs	r2, #0
    23c8:	4b97      	ldr	r3, [pc, #604]	; (2628 <vWifiTask+0x3e0>)
    23ca:	4798      	blx	r3
    23cc:	2801      	cmp	r0, #1
    23ce:	d100      	bne.n	23d2 <vWifiTask+0x18a>
    23d0:	e18f      	b.n	26f2 <vWifiTask+0x4aa>
            wifiStateMachine = DataToReceive;  // Update new state
        }

        // Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if (isPressed) {
    23d2:	4b96      	ldr	r3, [pc, #600]	; (262c <vWifiTask+0x3e4>)
    23d4:	781b      	ldrb	r3, [r3, #0]
    23d6:	2b00      	cmp	r3, #0
    23d8:	d000      	beq.n	23dc <vWifiTask+0x194>
    23da:	e18f      	b.n	26fc <vWifiTask+0x4b4>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
            isPressed = false;
        }

        vTaskDelay(100);
    23dc:	2064      	movs	r0, #100	; 0x64
    23de:	4b67      	ldr	r3, [pc, #412]	; (257c <vWifiTask+0x334>)
    23e0:	4798      	blx	r3
        switch (wifiStateMachine) {
    23e2:	7833      	ldrb	r3, [r6, #0]
    23e4:	2b01      	cmp	r3, #1
    23e6:	d04c      	beq.n	2482 <vWifiTask+0x23a>
    23e8:	b25a      	sxtb	r2, r3
    23ea:	2a01      	cmp	r2, #1
    23ec:	ddcd      	ble.n	238a <vWifiTask+0x142>
    23ee:	2b02      	cmp	r3, #2
    23f0:	d100      	bne.n	23f4 <vWifiTask+0x1ac>
    23f2:	e14b      	b.n	268c <vWifiTask+0x444>
    23f4:	2b03      	cmp	r3, #3
    23f6:	d000      	beq.n	23fa <vWifiTask+0x1b2>
    23f8:	e177      	b.n	26ea <vWifiTask+0x4a2>
    return ((down_state & mask) != 0);
    23fa:	4b61      	ldr	r3, [pc, #388]	; (2580 <vWifiTask+0x338>)
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    23fc:	781b      	ldrb	r3, [r3, #0]
    23fe:	2230      	movs	r2, #48	; 0x30
    2400:	421a      	tst	r2, r3
    2402:	d10e      	bne.n	2422 <vWifiTask+0x1da>
        m2m_wifi_handle_events(NULL);
    2404:	4d82      	ldr	r5, [pc, #520]	; (2610 <vWifiTask+0x3c8>)
        sw_timer_task(&swt_module_inst);
    2406:	4c67      	ldr	r4, [pc, #412]	; (25a4 <vWifiTask+0x35c>)
    2408:	4f82      	ldr	r7, [pc, #520]	; (2614 <vWifiTask+0x3cc>)
        m2m_wifi_handle_events(NULL);
    240a:	2000      	movs	r0, #0
    240c:	47a8      	blx	r5
        sw_timer_task(&swt_module_inst);
    240e:	0020      	movs	r0, r4
    2410:	47b8      	blx	r7
        vTaskDelay(5);
    2412:	2005      	movs	r0, #5
    2414:	4b59      	ldr	r3, [pc, #356]	; (257c <vWifiTask+0x334>)
    2416:	4798      	blx	r3
    return ((down_state & mask) != 0);
    2418:	4b59      	ldr	r3, [pc, #356]	; (2580 <vWifiTask+0x338>)
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
    241a:	781b      	ldrb	r3, [r3, #0]
    241c:	2230      	movs	r2, #48	; 0x30
    241e:	421a      	tst	r2, r3
    2420:	d0f3      	beq.n	240a <vWifiTask+0x1c2>
    socketDeinit();
    2422:	4b7e      	ldr	r3, [pc, #504]	; (261c <vWifiTask+0x3d4>)
    2424:	4798      	blx	r3
    vTaskDelay(1000);
    2426:	20fa      	movs	r0, #250	; 0xfa
    2428:	0080      	lsls	r0, r0, #2
    242a:	4b54      	ldr	r3, [pc, #336]	; (257c <vWifiTask+0x334>)
    242c:	4798      	blx	r3
    do_download_flag = false;
    242e:	2200      	movs	r2, #0
    2430:	4b7f      	ldr	r3, [pc, #508]	; (2630 <vWifiTask+0x3e8>)
    2432:	701a      	strb	r2, [r3, #0]
    char test_file_name[] = "0:FlagA.txt";
    2434:	a905      	add	r1, sp, #20
    2436:	4b7f      	ldr	r3, [pc, #508]	; (2634 <vWifiTask+0x3ec>)
    2438:	000a      	movs	r2, r1
    243a:	cb31      	ldmia	r3!, {r0, r4, r5}
    243c:	c231      	stmia	r2!, {r0, r4, r5}
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
    243e:	220a      	movs	r2, #10
    2440:	487d      	ldr	r0, [pc, #500]	; (2638 <vWifiTask+0x3f0>)
    2442:	4b7e      	ldr	r3, [pc, #504]	; (263c <vWifiTask+0x3f4>)
    2444:	4798      	blx	r3
    if (res != FR_OK) {
    2446:	2800      	cmp	r0, #0
    2448:	d000      	beq.n	244c <vWifiTask+0x204>
    244a:	e148      	b.n	26de <vWifiTask+0x496>
        SerialConsoleWriteString("FlagA.txt added!\r\n");
    244c:	487c      	ldr	r0, [pc, #496]	; (2640 <vWifiTask+0x3f8>)
    244e:	4b53      	ldr	r3, [pc, #332]	; (259c <vWifiTask+0x354>)
    2450:	4798      	blx	r3
    f_close(&file_object);
    2452:	4879      	ldr	r0, [pc, #484]	; (2638 <vWifiTask+0x3f0>)
    2454:	4b7b      	ldr	r3, [pc, #492]	; (2644 <vWifiTask+0x3fc>)
    2456:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
    2458:	2200      	movs	r2, #0
    245a:	4b6f      	ldr	r3, [pc, #444]	; (2618 <vWifiTask+0x3d0>)
    245c:	701a      	strb	r2, [r3, #0]
    245e:	e7ad      	b.n	23bc <vWifiTask+0x174>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
    2460:	4979      	ldr	r1, [pc, #484]	; (2648 <vWifiTask+0x400>)
    2462:	0010      	movs	r0, r2
    2464:	4b79      	ldr	r3, [pc, #484]	; (264c <vWifiTask+0x404>)
    2466:	4798      	blx	r3
    2468:	2800      	cmp	r0, #0
    246a:	d105      	bne.n	2478 <vWifiTask+0x230>
    if (mqtt_inst.isConnected) {
    246c:	2334      	movs	r3, #52	; 0x34
    246e:	4a6c      	ldr	r2, [pc, #432]	; (2620 <vWifiTask+0x3d8>)
    2470:	5cd3      	ldrb	r3, [r2, r3]
    2472:	2b00      	cmp	r3, #0
    2474:	d09f      	beq.n	23b6 <vWifiTask+0x16e>
    2476:	e79a      	b.n	23ae <vWifiTask+0x166>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    2478:	4975      	ldr	r1, [pc, #468]	; (2650 <vWifiTask+0x408>)
    247a:	2001      	movs	r0, #1
    247c:	4b59      	ldr	r3, [pc, #356]	; (25e4 <vWifiTask+0x39c>)
    247e:	4798      	blx	r3
    2480:	e7f4      	b.n	246c <vWifiTask+0x224>
    m2m_wifi_handle_events(NULL);
    2482:	2000      	movs	r0, #0
    2484:	47c0      	blx	r8
    sw_timer_task(&swt_module_inst);
    2486:	4847      	ldr	r0, [pc, #284]	; (25a4 <vWifiTask+0x35c>)
    2488:	4b62      	ldr	r3, [pc, #392]	; (2614 <vWifiTask+0x3cc>)
    248a:	4798      	blx	r3
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
    248c:	4b40      	ldr	r3, [pc, #256]	; (2590 <vWifiTask+0x348>)
    248e:	6818      	ldr	r0, [r3, #0]
    2490:	2200      	movs	r2, #0
    2492:	a905      	add	r1, sp, #20
    2494:	4b64      	ldr	r3, [pc, #400]	; (2628 <vWifiTask+0x3e0>)
    2496:	4798      	blx	r3
    2498:	2801      	cmp	r0, #1
    249a:	d011      	beq.n	24c0 <vWifiTask+0x278>
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
    249c:	4b3b      	ldr	r3, [pc, #236]	; (258c <vWifiTask+0x344>)
    249e:	6818      	ldr	r0, [r3, #0]
    24a0:	2200      	movs	r2, #0
    24a2:	a905      	add	r1, sp, #20
    24a4:	4b60      	ldr	r3, [pc, #384]	; (2628 <vWifiTask+0x3e0>)
    24a6:	4798      	blx	r3
    24a8:	2801      	cmp	r0, #1
    24aa:	d049      	beq.n	2540 <vWifiTask+0x2f8>
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
    24ac:	2334      	movs	r3, #52	; 0x34
    24ae:	4a5c      	ldr	r2, [pc, #368]	; (2620 <vWifiTask+0x3d8>)
    24b0:	5cd3      	ldrb	r3, [r2, r3]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d082      	beq.n	23bc <vWifiTask+0x174>
    24b6:	2164      	movs	r1, #100	; 0x64
    24b8:	0010      	movs	r0, r2
    24ba:	4b66      	ldr	r3, [pc, #408]	; (2654 <vWifiTask+0x40c>)
    24bc:	4798      	blx	r3
    24be:	e77d      	b.n	23bc <vWifiTask+0x174>
        snprintf(mqtt_msg, 63, "{\"game\":[");
    24c0:	4a65      	ldr	r2, [pc, #404]	; (2658 <vWifiTask+0x410>)
    24c2:	4b66      	ldr	r3, [pc, #408]	; (265c <vWifiTask+0x414>)
    24c4:	cb03      	ldmia	r3!, {r0, r1}
    24c6:	c203      	stmia	r2!, {r0, r1}
    24c8:	881b      	ldrh	r3, [r3, #0]
    24ca:	8013      	strh	r3, [r2, #0]
            if (gamePacket.game[iter] != 0xFF) {
    24cc:	ab05      	add	r3, sp, #20
    24ce:	781f      	ldrb	r7, [r3, #0]
    24d0:	2fff      	cmp	r7, #255	; 0xff
    24d2:	d018      	beq.n	2506 <vWifiTask+0x2be>
    24d4:	2400      	movs	r4, #0
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
    24d6:	4d62      	ldr	r5, [pc, #392]	; (2660 <vWifiTask+0x418>)
    24d8:	e005      	b.n	24e6 <vWifiTask+0x29e>
                    snprintf(numGame, 5, ",");
    24da:	a903      	add	r1, sp, #12
    24dc:	232c      	movs	r3, #44	; 0x2c
    24de:	800b      	strh	r3, [r1, #0]
                    strcat(mqtt_msg, numGame);
    24e0:	485d      	ldr	r0, [pc, #372]	; (2658 <vWifiTask+0x410>)
    24e2:	4b60      	ldr	r3, [pc, #384]	; (2664 <vWifiTask+0x41c>)
    24e4:	4798      	blx	r3
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
    24e6:	003b      	movs	r3, r7
    24e8:	4a5f      	ldr	r2, [pc, #380]	; (2668 <vWifiTask+0x420>)
    24ea:	2103      	movs	r1, #3
    24ec:	a803      	add	r0, sp, #12
    24ee:	47a8      	blx	r5
                strcat(mqtt_msg, numGame);
    24f0:	a903      	add	r1, sp, #12
    24f2:	4859      	ldr	r0, [pc, #356]	; (2658 <vWifiTask+0x410>)
    24f4:	4b5b      	ldr	r3, [pc, #364]	; (2664 <vWifiTask+0x41c>)
    24f6:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
    24f8:	3401      	adds	r4, #1
    24fa:	ab05      	add	r3, sp, #20
    24fc:	5ce7      	ldrb	r7, [r4, r3]
    24fe:	2fff      	cmp	r7, #255	; 0xff
    2500:	d001      	beq.n	2506 <vWifiTask+0x2be>
    2502:	2c14      	cmp	r4, #20
    2504:	d1e9      	bne.n	24da <vWifiTask+0x292>
        strcat(mqtt_msg, "]}");
    2506:	4c54      	ldr	r4, [pc, #336]	; (2658 <vWifiTask+0x410>)
    2508:	0020      	movs	r0, r4
    250a:	4f58      	ldr	r7, [pc, #352]	; (266c <vWifiTask+0x424>)
    250c:	47b8      	blx	r7
    250e:	1820      	adds	r0, r4, r0
    2510:	2203      	movs	r2, #3
    2512:	4957      	ldr	r1, [pc, #348]	; (2670 <vWifiTask+0x428>)
    2514:	4b57      	ldr	r3, [pc, #348]	; (2674 <vWifiTask+0x42c>)
    2516:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
    2518:	0021      	movs	r1, r4
    251a:	2001      	movs	r0, #1
    251c:	4d31      	ldr	r5, [pc, #196]	; (25e4 <vWifiTask+0x39c>)
    251e:	47a8      	blx	r5
        LogMessage(LOG_DEBUG_LVL, "\r\n");
    2520:	4955      	ldr	r1, [pc, #340]	; (2678 <vWifiTask+0x430>)
    2522:	2001      	movs	r0, #1
    2524:	47a8      	blx	r5
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
    2526:	0020      	movs	r0, r4
    2528:	47b8      	blx	r7
    252a:	0003      	movs	r3, r0
    252c:	2200      	movs	r2, #0
    252e:	9201      	str	r2, [sp, #4]
    2530:	3201      	adds	r2, #1
    2532:	9200      	str	r2, [sp, #0]
    2534:	0022      	movs	r2, r4
    2536:	4951      	ldr	r1, [pc, #324]	; (267c <vWifiTask+0x434>)
    2538:	4839      	ldr	r0, [pc, #228]	; (2620 <vWifiTask+0x3d8>)
    253a:	4c51      	ldr	r4, [pc, #324]	; (2680 <vWifiTask+0x438>)
    253c:	47a0      	blx	r4
    253e:	e7ad      	b.n	249c <vWifiTask+0x254>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
    2540:	aa05      	add	r2, sp, #20
    2542:	2100      	movs	r1, #0
    2544:	5e53      	ldrsh	r3, [r2, r1]
    2546:	4c44      	ldr	r4, [pc, #272]	; (2658 <vWifiTask+0x410>)
    2548:	2004      	movs	r0, #4
    254a:	5e11      	ldrsh	r1, [r2, r0]
    254c:	9101      	str	r1, [sp, #4]
    254e:	2102      	movs	r1, #2
    2550:	5e52      	ldrsh	r2, [r2, r1]
    2552:	9200      	str	r2, [sp, #0]
    2554:	4a4b      	ldr	r2, [pc, #300]	; (2684 <vWifiTask+0x43c>)
    2556:	213f      	movs	r1, #63	; 0x3f
    2558:	0020      	movs	r0, r4
    255a:	4f41      	ldr	r7, [pc, #260]	; (2660 <vWifiTask+0x418>)
    255c:	47b8      	blx	r7
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
    255e:	0020      	movs	r0, r4
    2560:	4b42      	ldr	r3, [pc, #264]	; (266c <vWifiTask+0x424>)
    2562:	4798      	blx	r3
    2564:	0003      	movs	r3, r0
    2566:	2200      	movs	r2, #0
    2568:	9201      	str	r2, [sp, #4]
    256a:	3201      	adds	r2, #1
    256c:	9200      	str	r2, [sp, #0]
    256e:	0022      	movs	r2, r4
    2570:	4945      	ldr	r1, [pc, #276]	; (2688 <vWifiTask+0x440>)
    2572:	482b      	ldr	r0, [pc, #172]	; (2620 <vWifiTask+0x3d8>)
    2574:	4c42      	ldr	r4, [pc, #264]	; (2680 <vWifiTask+0x438>)
    2576:	47a0      	blx	r4
    2578:	e798      	b.n	24ac <vWifiTask+0x264>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	000070d9 	.word	0x000070d9
    2580:	200003da 	.word	0x200003da
    2584:	00005b19 	.word	0x00005b19
    2588:	20000854 	.word	0x20000854
    258c:	20000850 	.word	0x20000850
    2590:	2000084c 	.word	0x2000084c
    2594:	20000848 	.word	0x20000848
    2598:	000167b4 	.word	0x000167b4
    259c:	00007efd 	.word	0x00007efd
    25a0:	00001185 	.word	0x00001185
    25a4:	20004338 	.word	0x20004338
    25a8:	00001191 	.word	0x00001191
    25ac:	0000123d 	.word	0x0000123d
    25b0:	0000019d 	.word	0x0000019d
    25b4:	20004390 	.word	0x20004390
    25b8:	000001c5 	.word	0x000001c5
    25bc:	00001ff5 	.word	0x00001ff5
    25c0:	00000279 	.word	0x00000279
    25c4:	00001b75 	.word	0x00001b75
    25c8:	000021f5 	.word	0x000021f5
    25cc:	00002225 	.word	0x00002225
    25d0:	0001427b 	.word	0x0001427b
    25d4:	00009021 	.word	0x00009021
    25d8:	000020ed 	.word	0x000020ed
    25dc:	00009f45 	.word	0x00009f45
    25e0:	00016818 	.word	0x00016818
    25e4:	00007fad 	.word	0x00007fad
    25e8:	0001678c 	.word	0x0001678c
    25ec:	000167d0 	.word	0x000167d0
    25f0:	00016974 	.word	0x00016974
    25f4:	00016844 	.word	0x00016844
    25f8:	0000bdb5 	.word	0x0000bdb5
    25fc:	00001ad9 	.word	0x00001ad9
    2600:	00001ae5 	.word	0x00001ae5
    2604:	0000be35 	.word	0x0000be35
    2608:	00016964 	.word	0x00016964
    260c:	0000a2e9 	.word	0x0000a2e9
    2610:	0000a071 	.word	0x0000a071
    2614:	000012c5 	.word	0x000012c5
    2618:	20000844 	.word	0x20000844
    261c:	0000bdf9 	.word	0x0000bdf9
    2620:	20000408 	.word	0x20000408
    2624:	00016868 	.word	0x00016868
    2628:	000062f1 	.word	0x000062f1
    262c:	20000404 	.word	0x20000404
    2630:	200003d9 	.word	0x200003d9
    2634:	00016914 	.word	0x00016914
    2638:	200003dc 	.word	0x200003dc
    263c:	00010081 	.word	0x00010081
    2640:	000168d4 	.word	0x000168d4
    2644:	000104cd 	.word	0x000104cd
    2648:	00016390 	.word	0x00016390
    264c:	00011111 	.word	0x00011111
    2650:	000169b0 	.word	0x000169b0
    2654:	00011265 	.word	0x00011265
    2658:	20000000 	.word	0x20000000
    265c:	00016140 	.word	0x00016140
    2660:	000144d5 	.word	0x000144d5
    2664:	000145b9 	.word	0x000145b9
    2668:	00016884 	.word	0x00016884
    266c:	00014633 	.word	0x00014633
    2670:	00016888 	.word	0x00016888
    2674:	00014245 	.word	0x00014245
    2678:	00016a7c 	.word	0x00016a7c
    267c:	0001688c 	.word	0x0001688c
    2680:	00011205 	.word	0x00011205
    2684:	000168a0 	.word	0x000168a0
    2688:	0001647c 	.word	0x0001647c
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
    268c:	4926      	ldr	r1, [pc, #152]	; (2728 <vWifiTask+0x4e0>)
    268e:	4827      	ldr	r0, [pc, #156]	; (272c <vWifiTask+0x4e4>)
    2690:	4b27      	ldr	r3, [pc, #156]	; (2730 <vWifiTask+0x4e8>)
    2692:	4798      	blx	r3
    2694:	2800      	cmp	r0, #0
    2696:	d11d      	bne.n	26d4 <vWifiTask+0x48c>
    while ((mqtt_inst.isConnected)) {
    2698:	2334      	movs	r3, #52	; 0x34
    269a:	4a24      	ldr	r2, [pc, #144]	; (272c <vWifiTask+0x4e4>)
    269c:	5cd3      	ldrb	r3, [r2, r3]
    269e:	2b00      	cmp	r3, #0
    26a0:	d007      	beq.n	26b2 <vWifiTask+0x46a>
        m2m_wifi_handle_events(NULL);
    26a2:	4d24      	ldr	r5, [pc, #144]	; (2734 <vWifiTask+0x4ec>)
    while ((mqtt_inst.isConnected)) {
    26a4:	0017      	movs	r7, r2
    26a6:	2434      	movs	r4, #52	; 0x34
        m2m_wifi_handle_events(NULL);
    26a8:	2000      	movs	r0, #0
    26aa:	47a8      	blx	r5
    while ((mqtt_inst.isConnected)) {
    26ac:	5d3b      	ldrb	r3, [r7, r4]
    26ae:	2b00      	cmp	r3, #0
    26b0:	d1fa      	bne.n	26a8 <vWifiTask+0x460>
    socketDeinit();
    26b2:	4b21      	ldr	r3, [pc, #132]	; (2738 <vWifiTask+0x4f0>)
    26b4:	4798      	blx	r3
    do_download_flag = true;
    26b6:	2201      	movs	r2, #1
    26b8:	4b20      	ldr	r3, [pc, #128]	; (273c <vWifiTask+0x4f4>)
    26ba:	701a      	strb	r2, [r3, #0]
    registerSocketCallback(socket_cb, resolve_cb);
    26bc:	4920      	ldr	r1, [pc, #128]	; (2740 <vWifiTask+0x4f8>)
    26be:	4821      	ldr	r0, [pc, #132]	; (2744 <vWifiTask+0x4fc>)
    26c0:	4b21      	ldr	r3, [pc, #132]	; (2748 <vWifiTask+0x500>)
    26c2:	4798      	blx	r3
    socketInit();
    26c4:	4b21      	ldr	r3, [pc, #132]	; (274c <vWifiTask+0x504>)
    26c6:	4798      	blx	r3
    start_download();
    26c8:	4b21      	ldr	r3, [pc, #132]	; (2750 <vWifiTask+0x508>)
    26ca:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
    26cc:	2203      	movs	r2, #3
    26ce:	4b21      	ldr	r3, [pc, #132]	; (2754 <vWifiTask+0x50c>)
    26d0:	701a      	strb	r2, [r3, #0]
    26d2:	e673      	b.n	23bc <vWifiTask+0x174>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
    26d4:	4920      	ldr	r1, [pc, #128]	; (2758 <vWifiTask+0x510>)
    26d6:	2001      	movs	r0, #1
    26d8:	4b20      	ldr	r3, [pc, #128]	; (275c <vWifiTask+0x514>)
    26da:	4798      	blx	r3
    26dc:	e7dc      	b.n	2698 <vWifiTask+0x450>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
    26de:	0002      	movs	r2, r0
    26e0:	491f      	ldr	r1, [pc, #124]	; (2760 <vWifiTask+0x518>)
    26e2:	2000      	movs	r0, #0
    26e4:	4b1d      	ldr	r3, [pc, #116]	; (275c <vWifiTask+0x514>)
    26e6:	4798      	blx	r3
    26e8:	e6b3      	b.n	2452 <vWifiTask+0x20a>
                wifiStateMachine = WIFI_MQTT_INIT;
    26ea:	2200      	movs	r2, #0
    26ec:	4b19      	ldr	r3, [pc, #100]	; (2754 <vWifiTask+0x50c>)
    26ee:	701a      	strb	r2, [r3, #0]
                break;
    26f0:	e664      	b.n	23bc <vWifiTask+0x174>
            wifiStateMachine = DataToReceive;  // Update new state
    26f2:	ab05      	add	r3, sp, #20
    26f4:	781a      	ldrb	r2, [r3, #0]
    26f6:	4b17      	ldr	r3, [pc, #92]	; (2754 <vWifiTask+0x50c>)
    26f8:	701a      	strb	r2, [r3, #0]
    26fa:	e66a      	b.n	23d2 <vWifiTask+0x18a>
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
    26fc:	4c19      	ldr	r4, [pc, #100]	; (2764 <vWifiTask+0x51c>)
    26fe:	0020      	movs	r0, r4
    2700:	4b19      	ldr	r3, [pc, #100]	; (2768 <vWifiTask+0x520>)
    2702:	4798      	blx	r3
    2704:	0003      	movs	r3, r0
    2706:	2700      	movs	r7, #0
    2708:	9701      	str	r7, [sp, #4]
    270a:	2201      	movs	r2, #1
    270c:	9200      	str	r2, [sp, #0]
    270e:	0022      	movs	r2, r4
    2710:	4916      	ldr	r1, [pc, #88]	; (276c <vWifiTask+0x524>)
    2712:	4806      	ldr	r0, [pc, #24]	; (272c <vWifiTask+0x4e4>)
    2714:	4d16      	ldr	r5, [pc, #88]	; (2770 <vWifiTask+0x528>)
    2716:	47a8      	blx	r5
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
    2718:	0022      	movs	r2, r4
    271a:	4916      	ldr	r1, [pc, #88]	; (2774 <vWifiTask+0x52c>)
    271c:	2001      	movs	r0, #1
    271e:	4b0f      	ldr	r3, [pc, #60]	; (275c <vWifiTask+0x514>)
    2720:	4798      	blx	r3
            isPressed = false;
    2722:	4b15      	ldr	r3, [pc, #84]	; (2778 <vWifiTask+0x530>)
    2724:	701f      	strb	r7, [r3, #0]
    2726:	e659      	b.n	23dc <vWifiTask+0x194>
    2728:	00016390 	.word	0x00016390
    272c:	20000408 	.word	0x20000408
    2730:	000111d5 	.word	0x000111d5
    2734:	0000a071 	.word	0x0000a071
    2738:	0000bdf9 	.word	0x0000bdf9
    273c:	200003d9 	.word	0x200003d9
    2740:	00001d09 	.word	0x00001d09
    2744:	00001d49 	.word	0x00001d49
    2748:	0000be35 	.word	0x0000be35
    274c:	0000bdb5 	.word	0x0000bdb5
    2750:	00001af1 	.word	0x00001af1
    2754:	20000844 	.word	0x20000844
    2758:	000169b0 	.word	0x000169b0
    275c:	00007fad 	.word	0x00007fad
    2760:	000168c4 	.word	0x000168c4
    2764:	20000040 	.word	0x20000040
    2768:	00014633 	.word	0x00014633
    276c:	000168e8 	.word	0x000168e8
    2770:	00011205 	.word	0x00011205
    2774:	00016904 	.word	0x00016904
    2778:	20000404 	.word	0x20000404

0000277c <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
    277c:	b510      	push	{r4, lr}
    277e:	0001      	movs	r1, r0
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
    2780:	4b03      	ldr	r3, [pc, #12]	; (2790 <WifiAddDistanceDataToQueue+0x14>)
    2782:	6818      	ldr	r0, [r3, #0]
    2784:	2300      	movs	r3, #0
    2786:	220a      	movs	r2, #10
    2788:	4c02      	ldr	r4, [pc, #8]	; (2794 <WifiAddDistanceDataToQueue+0x18>)
    278a:	47a0      	blx	r4
    return error;
}
    278c:	bd10      	pop	{r4, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	20000848 	.word	0x20000848
    2794:	00005c55 	.word	0x00005c55

00002798 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2798:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    279a:	2207      	movs	r2, #7
    279c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    279e:	421a      	tst	r2, r3
    27a0:	d1fc      	bne.n	279c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    27a2:	4770      	bx	lr

000027a4 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    27a4:	b570      	push	{r4, r5, r6, lr}
    27a6:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    27a8:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    27aa:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    27ac:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    27ae:	8b83      	ldrh	r3, [r0, #28]
    27b0:	1aed      	subs	r5, r5, r3
    27b2:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    27b4:	8b83      	ldrh	r3, [r0, #28]
    27b6:	3b01      	subs	r3, #1
    27b8:	b29b      	uxth	r3, r3
    27ba:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    27bc:	0113      	lsls	r3, r2, #4
    27be:	d51d      	bpl.n	27fc <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    27c0:	7ac3      	ldrb	r3, [r0, #11]
    27c2:	2b00      	cmp	r3, #0
    27c4:	d003      	beq.n	27ce <_i2c_master_read+0x2a>
    27c6:	8b83      	ldrh	r3, [r0, #28]
    27c8:	b29b      	uxth	r3, r3
    27ca:	2b01      	cmp	r3, #1
    27cc:	d010      	beq.n	27f0 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    27ce:	8ba3      	ldrh	r3, [r4, #28]
    27d0:	b29b      	uxth	r3, r3
    27d2:	2b00      	cmp	r3, #0
    27d4:	d102      	bne.n	27dc <_i2c_master_read+0x38>
		if (module->send_stop) {
    27d6:	7aa3      	ldrb	r3, [r4, #10]
    27d8:	2b00      	cmp	r3, #0
    27da:	d11c      	bne.n	2816 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    27dc:	0020      	movs	r0, r4
    27de:	4b12      	ldr	r3, [pc, #72]	; (2828 <_i2c_master_read+0x84>)
    27e0:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    27e2:	6a23      	ldr	r3, [r4, #32]
    27e4:	195d      	adds	r5, r3, r5
    27e6:	2328      	movs	r3, #40	; 0x28
    27e8:	5cf3      	ldrb	r3, [r6, r3]
    27ea:	b2db      	uxtb	r3, r3
    27ec:	702b      	strb	r3, [r5, #0]
}
    27ee:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    27f0:	6872      	ldr	r2, [r6, #4]
    27f2:	2380      	movs	r3, #128	; 0x80
    27f4:	02db      	lsls	r3, r3, #11
    27f6:	4313      	orrs	r3, r2
    27f8:	6073      	str	r3, [r6, #4]
    27fa:	e7e8      	b.n	27ce <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    27fc:	7ac3      	ldrb	r3, [r0, #11]
    27fe:	2b00      	cmp	r3, #0
    2800:	d0e5      	beq.n	27ce <_i2c_master_read+0x2a>
    2802:	8b83      	ldrh	r3, [r0, #28]
    2804:	b29b      	uxth	r3, r3
    2806:	2b00      	cmp	r3, #0
    2808:	d1e1      	bne.n	27ce <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    280a:	6872      	ldr	r2, [r6, #4]
    280c:	2380      	movs	r3, #128	; 0x80
    280e:	02db      	lsls	r3, r3, #11
    2810:	4313      	orrs	r3, r2
    2812:	6073      	str	r3, [r6, #4]
    2814:	e7db      	b.n	27ce <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    2816:	0020      	movs	r0, r4
    2818:	4b03      	ldr	r3, [pc, #12]	; (2828 <_i2c_master_read+0x84>)
    281a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    281c:	6872      	ldr	r2, [r6, #4]
    281e:	23c0      	movs	r3, #192	; 0xc0
    2820:	029b      	lsls	r3, r3, #10
    2822:	4313      	orrs	r3, r2
    2824:	6073      	str	r3, [r6, #4]
    2826:	e7d9      	b.n	27dc <_i2c_master_read+0x38>
    2828:	00002799 	.word	0x00002799

0000282c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    282c:	b570      	push	{r4, r5, r6, lr}
    282e:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2830:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    2832:	8b6b      	ldrh	r3, [r5, #26]
    2834:	075b      	lsls	r3, r3, #29
    2836:	d503      	bpl.n	2840 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    2838:	221e      	movs	r2, #30
    283a:	2325      	movs	r3, #37	; 0x25
    283c:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    283e:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    2840:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    2842:	8b83      	ldrh	r3, [r0, #28]
    2844:	1af6      	subs	r6, r6, r3
    2846:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    2848:	8b83      	ldrh	r3, [r0, #28]
    284a:	3b01      	subs	r3, #1
    284c:	b29b      	uxth	r3, r3
    284e:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    2850:	4b04      	ldr	r3, [pc, #16]	; (2864 <_i2c_master_write+0x38>)
    2852:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    2854:	6a23      	ldr	r3, [r4, #32]
    2856:	199e      	adds	r6, r3, r6
    2858:	7833      	ldrb	r3, [r6, #0]
    285a:	b2db      	uxtb	r3, r3
    285c:	2228      	movs	r2, #40	; 0x28
    285e:	54ab      	strb	r3, [r5, r2]
    2860:	e7ed      	b.n	283e <_i2c_master_write+0x12>
    2862:	46c0      	nop			; (mov r8, r8)
    2864:	00002799 	.word	0x00002799

00002868 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    2868:	b570      	push	{r4, r5, r6, lr}
    286a:	0005      	movs	r5, r0
    286c:	000c      	movs	r4, r1
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    286e:	6806      	ldr	r6, [r0, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
    2870:	7a4b      	ldrb	r3, [r1, #9]
    2872:	2b00      	cmp	r3, #0
    2874:	d11a      	bne.n	28ac <_i2c_master_write_packet+0x44>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2876:	6873      	ldr	r3, [r6, #4]
    2878:	4a13      	ldr	r2, [pc, #76]	; (28c8 <_i2c_master_write_packet+0x60>)
    287a:	4013      	ands	r3, r2
    287c:	6073      	str	r3, [r6, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
    287e:	6863      	ldr	r3, [r4, #4]
    2880:	622b      	str	r3, [r5, #32]
	module->buffer_remaining   = packet->data_length;
    2882:	8863      	ldrh	r3, [r4, #2]
    2884:	83ab      	strh	r3, [r5, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
    2886:	2200      	movs	r2, #0
    2888:	2324      	movs	r3, #36	; 0x24
    288a:	54ea      	strb	r2, [r5, r3]
	module->status             = STATUS_BUSY;
    288c:	3205      	adds	r2, #5
    288e:	3301      	adds	r3, #1
    2890:	54ea      	strb	r2, [r5, r3]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
    2892:	3b22      	subs	r3, #34	; 0x22
    2894:	75b3      	strb	r3, [r6, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
    2896:	7a23      	ldrb	r3, [r4, #8]
    2898:	2b00      	cmp	r3, #0
    289a:	d10b      	bne.n	28b4 <_i2c_master_write_packet+0x4c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    289c:	8823      	ldrh	r3, [r4, #0]
    289e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    28a0:	7a62      	ldrb	r2, [r4, #9]
    28a2:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    28a4:	4313      	orrs	r3, r2
    28a6:	6273      	str	r3, [r6, #36]	; 0x24
	}

	return STATUS_OK;
}
    28a8:	2000      	movs	r0, #0
    28aa:	bd70      	pop	{r4, r5, r6, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    28ac:	7a89      	ldrb	r1, [r1, #10]
    28ae:	4b07      	ldr	r3, [pc, #28]	; (28cc <_i2c_master_write_packet+0x64>)
    28b0:	4798      	blx	r3
    28b2:	e7e0      	b.n	2876 <_i2c_master_write_packet+0xe>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    28b4:	8823      	ldrh	r3, [r4, #0]
    28b6:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    28b8:	7a62      	ldrb	r2, [r4, #9]
    28ba:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    28bc:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    28be:	2280      	movs	r2, #128	; 0x80
    28c0:	0212      	lsls	r2, r2, #8
    28c2:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    28c4:	6273      	str	r3, [r6, #36]	; 0x24
    28c6:	e7ef      	b.n	28a8 <_i2c_master_write_packet+0x40>
    28c8:	fffbffff 	.word	0xfffbffff
    28cc:	00004169 	.word	0x00004169

000028d0 <_i2c_master_read_packet>:
{
    28d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28d2:	0005      	movs	r5, r0
    28d4:	000c      	movs	r4, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    28d6:	6806      	ldr	r6, [r0, #0]
	module->buffer             = packet->data;
    28d8:	684b      	ldr	r3, [r1, #4]
    28da:	6203      	str	r3, [r0, #32]
	module->buffer_remaining   = packet->data_length;
    28dc:	884b      	ldrh	r3, [r1, #2]
    28de:	8383      	strh	r3, [r0, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
    28e0:	2201      	movs	r2, #1
    28e2:	2324      	movs	r3, #36	; 0x24
    28e4:	54c2      	strb	r2, [r0, r3]
	module->status             = STATUS_BUSY;
    28e6:	3204      	adds	r2, #4
    28e8:	3301      	adds	r3, #1
    28ea:	54c2      	strb	r2, [r0, r3]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    28ec:	6837      	ldr	r7, [r6, #0]
    28ee:	013f      	lsls	r7, r7, #4
    28f0:	0fff      	lsrs	r7, r7, #31
	if (packet->high_speed) {
    28f2:	7a4b      	ldrb	r3, [r1, #9]
    28f4:	2b00      	cmp	r3, #0
    28f6:	d117      	bne.n	2928 <_i2c_master_read_packet+0x58>
	if ((sclsm_flag) && (packet->data_length == 1)) {
    28f8:	2f00      	cmp	r7, #0
    28fa:	d002      	beq.n	2902 <_i2c_master_read_packet+0x32>
    28fc:	8863      	ldrh	r3, [r4, #2]
    28fe:	2b01      	cmp	r3, #1
    2900:	d016      	beq.n	2930 <_i2c_master_read_packet+0x60>
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2902:	6873      	ldr	r3, [r6, #4]
    2904:	4a20      	ldr	r2, [pc, #128]	; (2988 <_i2c_master_read_packet+0xb8>)
    2906:	4013      	ands	r3, r2
    2908:	6073      	str	r3, [r6, #4]
	if (packet->ten_bit_address) {
    290a:	7a23      	ldrb	r3, [r4, #8]
    290c:	2b00      	cmp	r3, #0
    290e:	d115      	bne.n	293c <_i2c_master_read_packet+0x6c>
		i2c_module->INTENSET.reg =
    2910:	2303      	movs	r3, #3
    2912:	75b3      	strb	r3, [r6, #22]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    2914:	8823      	ldrh	r3, [r4, #0]
    2916:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    2918:	7a62      	ldrb	r2, [r4, #9]
    291a:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    291c:	4313      	orrs	r3, r2
    291e:	2201      	movs	r2, #1
    2920:	4313      	orrs	r3, r2
    2922:	6273      	str	r3, [r6, #36]	; 0x24
	return STATUS_OK;
    2924:	2000      	movs	r0, #0
}
    2926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    2928:	7a89      	ldrb	r1, [r1, #10]
    292a:	4b18      	ldr	r3, [pc, #96]	; (298c <_i2c_master_read_packet+0xbc>)
    292c:	4798      	blx	r3
    292e:	e7e3      	b.n	28f8 <_i2c_master_read_packet+0x28>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    2930:	6872      	ldr	r2, [r6, #4]
    2932:	2380      	movs	r3, #128	; 0x80
    2934:	02db      	lsls	r3, r3, #11
    2936:	4313      	orrs	r3, r2
    2938:	6073      	str	r3, [r6, #4]
    293a:	e7e6      	b.n	290a <_i2c_master_read_packet+0x3a>
		i2c_module->ADDR.reg = (packet->address << 1) |
    293c:	8823      	ldrh	r3, [r4, #0]
    293e:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2940:	7a62      	ldrb	r2, [r4, #9]
    2942:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    2944:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2946:	2280      	movs	r2, #128	; 0x80
    2948:	0212      	lsls	r2, r2, #8
    294a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    294c:	6273      	str	r3, [r6, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    294e:	0028      	movs	r0, r5
    2950:	4b0f      	ldr	r3, [pc, #60]	; (2990 <_i2c_master_read_packet+0xc0>)
    2952:	4798      	blx	r3
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    2954:	6873      	ldr	r3, [r6, #4]
    2956:	4a0c      	ldr	r2, [pc, #48]	; (2988 <_i2c_master_read_packet+0xb8>)
    2958:	4013      	ands	r3, r2
    295a:	6073      	str	r3, [r6, #4]
		if (tmp_status == STATUS_OK) {
    295c:	2800      	cmp	r0, #0
    295e:	d1e2      	bne.n	2926 <_i2c_master_read_packet+0x56>
			tmp_status = _i2c_master_address_response(module);
    2960:	0028      	movs	r0, r5
    2962:	4b0c      	ldr	r3, [pc, #48]	; (2994 <_i2c_master_read_packet+0xc4>)
    2964:	4798      	blx	r3
		if (tmp_status == STATUS_OK) {
    2966:	2800      	cmp	r0, #0
    2968:	d1dd      	bne.n	2926 <_i2c_master_read_packet+0x56>
			i2c_module->INTENSET.reg =
    296a:	2303      	movs	r3, #3
    296c:	75b3      	strb	r3, [r6, #22]
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    296e:	8823      	ldrh	r3, [r4, #0]
    2970:	0a1b      	lsrs	r3, r3, #8
    2972:	2278      	movs	r2, #120	; 0x78
    2974:	4313      	orrs	r3, r2
    2976:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    2978:	7a62      	ldrb	r2, [r4, #9]
    297a:	0392      	lsls	r2, r2, #14
    297c:	2101      	movs	r1, #1
    297e:	430a      	orrs	r2, r1
    2980:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    2982:	6273      	str	r3, [r6, #36]	; 0x24
    2984:	e7cf      	b.n	2926 <_i2c_master_read_packet+0x56>
    2986:	46c0      	nop			; (mov r8, r8)
    2988:	fffbffff 	.word	0xfffbffff
    298c:	00004169 	.word	0x00004169
    2990:	0000413d 	.word	0x0000413d
    2994:	0000410d 	.word	0x0000410d

00002998 <i2c_master_register_callback>:
	module->callbacks[callback_type] = callback;
    2998:	1c93      	adds	r3, r2, #2
    299a:	009b      	lsls	r3, r3, #2
    299c:	18c3      	adds	r3, r0, r3
    299e:	6059      	str	r1, [r3, #4]
	module->registered_callback |= (1 << callback_type);
    29a0:	7e03      	ldrb	r3, [r0, #24]
    29a2:	2101      	movs	r1, #1
    29a4:	4091      	lsls	r1, r2
    29a6:	430b      	orrs	r3, r1
    29a8:	b2db      	uxtb	r3, r3
    29aa:	7603      	strb	r3, [r0, #24]
}
    29ac:	4770      	bx	lr
	...

000029b0 <i2c_master_read_packet_job>:
{
    29b0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    29b2:	8b83      	ldrh	r3, [r0, #28]
    29b4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    29b6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    29b8:	2b00      	cmp	r3, #0
    29ba:	d001      	beq.n	29c0 <i2c_master_read_packet_job+0x10>
}
    29bc:	0010      	movs	r0, r2
    29be:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    29c0:	3301      	adds	r3, #1
    29c2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    29c4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    29c6:	4b02      	ldr	r3, [pc, #8]	; (29d0 <i2c_master_read_packet_job+0x20>)
    29c8:	4798      	blx	r3
    29ca:	0002      	movs	r2, r0
    29cc:	e7f6      	b.n	29bc <i2c_master_read_packet_job+0xc>
    29ce:	46c0      	nop			; (mov r8, r8)
    29d0:	000028d1 	.word	0x000028d1

000029d4 <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    29d4:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
    29d6:	8b83      	ldrh	r3, [r0, #28]
    29d8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    29da:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    29dc:	2b00      	cmp	r3, #0
    29de:	d001      	beq.n	29e4 <i2c_master_write_packet_job+0x10>
	/* Make sure we send STOP at end*/
	module->send_stop = true;
	module->send_nack = true;
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
}
    29e0:	0010      	movs	r0, r2
    29e2:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    29e4:	3301      	adds	r3, #1
    29e6:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    29e8:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    29ea:	4b02      	ldr	r3, [pc, #8]	; (29f4 <i2c_master_write_packet_job+0x20>)
    29ec:	4798      	blx	r3
    29ee:	0002      	movs	r2, r0
    29f0:	e7f6      	b.n	29e0 <i2c_master_write_packet_job+0xc>
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	00002869 	.word	0x00002869

000029f8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    29f8:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    29fa:	0080      	lsls	r0, r0, #2
    29fc:	4b75      	ldr	r3, [pc, #468]	; (2bd4 <_i2c_master_interrupt_handler+0x1dc>)
    29fe:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2a00:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    2a02:	682b      	ldr	r3, [r5, #0]
    2a04:	011b      	lsls	r3, r3, #4
    2a06:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    2a08:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    2a0a:	7e26      	ldrb	r6, [r4, #24]
    2a0c:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    2a0e:	8b63      	ldrh	r3, [r4, #26]
    2a10:	b29b      	uxth	r3, r3
    2a12:	2b00      	cmp	r3, #0
    2a14:	d103      	bne.n	2a1e <_i2c_master_interrupt_handler+0x26>
    2a16:	8ba3      	ldrh	r3, [r4, #28]
    2a18:	b29b      	uxth	r3, r3
    2a1a:	2b00      	cmp	r3, #0
    2a1c:	d123      	bne.n	2a66 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    2a1e:	8b63      	ldrh	r3, [r4, #26]
    2a20:	b29b      	uxth	r3, r3
    2a22:	2b00      	cmp	r3, #0
    2a24:	d008      	beq.n	2a38 <_i2c_master_interrupt_handler+0x40>
    2a26:	8ba3      	ldrh	r3, [r4, #28]
    2a28:	b29b      	uxth	r3, r3
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d104      	bne.n	2a38 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    2a2e:	3325      	adds	r3, #37	; 0x25
    2a30:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    2a32:	2b05      	cmp	r3, #5
    2a34:	d100      	bne.n	2a38 <_i2c_master_interrupt_handler+0x40>
    2a36:	e06d      	b.n	2b14 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    2a38:	8b63      	ldrh	r3, [r4, #26]
    2a3a:	b29b      	uxth	r3, r3
    2a3c:	2b00      	cmp	r3, #0
    2a3e:	d024      	beq.n	2a8a <_i2c_master_interrupt_handler+0x92>
    2a40:	8ba3      	ldrh	r3, [r4, #28]
    2a42:	b29b      	uxth	r3, r3
    2a44:	2b00      	cmp	r3, #0
    2a46:	d020      	beq.n	2a8a <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    2a48:	8b6b      	ldrh	r3, [r5, #26]
    2a4a:	069b      	lsls	r3, r3, #26
    2a4c:	d500      	bpl.n	2a50 <_i2c_master_interrupt_handler+0x58>
    2a4e:	e081      	b.n	2b54 <_i2c_master_interrupt_handler+0x15c>
    2a50:	2a00      	cmp	r2, #0
    2a52:	d004      	beq.n	2a5e <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    2a54:	8ba3      	ldrh	r3, [r4, #28]
    2a56:	b29b      	uxth	r3, r3
    2a58:	2b01      	cmp	r3, #1
    2a5a:	d100      	bne.n	2a5e <_i2c_master_interrupt_handler+0x66>
    2a5c:	e07a      	b.n	2b54 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    2a5e:	2241      	movs	r2, #65	; 0x41
    2a60:	2325      	movs	r3, #37	; 0x25
    2a62:	54e2      	strb	r2, [r4, r3]
    2a64:	e011      	b.n	2a8a <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    2a66:	7e2b      	ldrb	r3, [r5, #24]
    2a68:	07db      	lsls	r3, r3, #31
    2a6a:	d507      	bpl.n	2a7c <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    2a6c:	2301      	movs	r3, #1
    2a6e:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    2a70:	8b6b      	ldrh	r3, [r5, #26]
    2a72:	079b      	lsls	r3, r3, #30
    2a74:	d52e      	bpl.n	2ad4 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    2a76:	2241      	movs	r2, #65	; 0x41
    2a78:	2325      	movs	r3, #37	; 0x25
    2a7a:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    2a7c:	8ba3      	ldrh	r3, [r4, #28]
    2a7e:	b29b      	uxth	r3, r3
    2a80:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    2a82:	2325      	movs	r3, #37	; 0x25
    2a84:	5ce3      	ldrb	r3, [r4, r3]
    2a86:	2b05      	cmp	r3, #5
    2a88:	d038      	beq.n	2afc <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    2a8a:	8b63      	ldrh	r3, [r4, #26]
    2a8c:	b29b      	uxth	r3, r3
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d007      	beq.n	2aa2 <_i2c_master_interrupt_handler+0xaa>
    2a92:	8ba3      	ldrh	r3, [r4, #28]
    2a94:	b29b      	uxth	r3, r3
    2a96:	2b00      	cmp	r3, #0
    2a98:	d103      	bne.n	2aa2 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    2a9a:	3325      	adds	r3, #37	; 0x25
    2a9c:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    2a9e:	2b05      	cmp	r3, #5
    2aa0:	d064      	beq.n	2b6c <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    2aa2:	2325      	movs	r3, #37	; 0x25
    2aa4:	5ce3      	ldrb	r3, [r4, r3]
    2aa6:	2b05      	cmp	r3, #5
    2aa8:	d013      	beq.n	2ad2 <_i2c_master_interrupt_handler+0xda>
    2aaa:	2325      	movs	r3, #37	; 0x25
    2aac:	5ce3      	ldrb	r3, [r4, r3]
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d00f      	beq.n	2ad2 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    2ab2:	2303      	movs	r3, #3
    2ab4:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    2ab6:	2300      	movs	r3, #0
    2ab8:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    2aba:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    2abc:	3325      	adds	r3, #37	; 0x25
    2abe:	5ce3      	ldrb	r3, [r4, r3]
    2ac0:	2b41      	cmp	r3, #65	; 0x41
    2ac2:	d003      	beq.n	2acc <_i2c_master_interrupt_handler+0xd4>
    2ac4:	7aa3      	ldrb	r3, [r4, #10]
    2ac6:	2b00      	cmp	r3, #0
    2ac8:	d000      	beq.n	2acc <_i2c_master_interrupt_handler+0xd4>
    2aca:	e075      	b.n	2bb8 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    2acc:	0773      	lsls	r3, r6, #29
    2ace:	d500      	bpl.n	2ad2 <_i2c_master_interrupt_handler+0xda>
    2ad0:	e07b      	b.n	2bca <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    2ad2:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    2ad4:	8b6b      	ldrh	r3, [r5, #26]
    2ad6:	075b      	lsls	r3, r3, #29
    2ad8:	d5d0      	bpl.n	2a7c <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    2ada:	2218      	movs	r2, #24
    2adc:	2325      	movs	r3, #37	; 0x25
    2ade:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    2ae0:	2300      	movs	r3, #0
    2ae2:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    2ae4:	7aa3      	ldrb	r3, [r4, #10]
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d0c8      	beq.n	2a7c <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    2aea:	0020      	movs	r0, r4
    2aec:	4b3a      	ldr	r3, [pc, #232]	; (2bd8 <_i2c_master_interrupt_handler+0x1e0>)
    2aee:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2af0:	686a      	ldr	r2, [r5, #4]
    2af2:	23c0      	movs	r3, #192	; 0xc0
    2af4:	029b      	lsls	r3, r3, #10
    2af6:	4313      	orrs	r3, r2
    2af8:	606b      	str	r3, [r5, #4]
    2afa:	e7bf      	b.n	2a7c <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    2afc:	331f      	adds	r3, #31
    2afe:	5ce3      	ldrb	r3, [r4, r3]
    2b00:	2b00      	cmp	r3, #0
    2b02:	d003      	beq.n	2b0c <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    2b04:	0020      	movs	r0, r4
    2b06:	4b35      	ldr	r3, [pc, #212]	; (2bdc <_i2c_master_interrupt_handler+0x1e4>)
    2b08:	4798      	blx	r3
    2b0a:	e7be      	b.n	2a8a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    2b0c:	0020      	movs	r0, r4
    2b0e:	4b34      	ldr	r3, [pc, #208]	; (2be0 <_i2c_master_interrupt_handler+0x1e8>)
    2b10:	4798      	blx	r3
    2b12:	e7ba      	b.n	2a8a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    2b14:	331f      	adds	r3, #31
    2b16:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    2b18:	2b00      	cmp	r3, #0
    2b1a:	d000      	beq.n	2b1e <_i2c_master_interrupt_handler+0x126>
    2b1c:	e78c      	b.n	2a38 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    2b1e:	3303      	adds	r3, #3
    2b20:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    2b22:	2300      	movs	r3, #0
    2b24:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    2b26:	3325      	adds	r3, #37	; 0x25
    2b28:	2200      	movs	r2, #0
    2b2a:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    2b2c:	7aa3      	ldrb	r3, [r4, #10]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d107      	bne.n	2b42 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    2b32:	2301      	movs	r3, #1
    2b34:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    2b36:	07f3      	lsls	r3, r6, #31
    2b38:	d5a7      	bpl.n	2a8a <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    2b3a:	68e3      	ldr	r3, [r4, #12]
    2b3c:	0020      	movs	r0, r4
    2b3e:	4798      	blx	r3
    2b40:	e7a3      	b.n	2a8a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    2b42:	0020      	movs	r0, r4
    2b44:	4b24      	ldr	r3, [pc, #144]	; (2bd8 <_i2c_master_interrupt_handler+0x1e0>)
    2b46:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    2b48:	686a      	ldr	r2, [r5, #4]
    2b4a:	23c0      	movs	r3, #192	; 0xc0
    2b4c:	029b      	lsls	r3, r3, #10
    2b4e:	4313      	orrs	r3, r2
    2b50:	606b      	str	r3, [r5, #4]
    2b52:	e7f0      	b.n	2b36 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    2b54:	2324      	movs	r3, #36	; 0x24
    2b56:	5ce3      	ldrb	r3, [r4, r3]
    2b58:	2b00      	cmp	r3, #0
    2b5a:	d103      	bne.n	2b64 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    2b5c:	0020      	movs	r0, r4
    2b5e:	4b20      	ldr	r3, [pc, #128]	; (2be0 <_i2c_master_interrupt_handler+0x1e8>)
    2b60:	4798      	blx	r3
    2b62:	e792      	b.n	2a8a <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    2b64:	0020      	movs	r0, r4
    2b66:	4b1d      	ldr	r3, [pc, #116]	; (2bdc <_i2c_master_interrupt_handler+0x1e4>)
    2b68:	4798      	blx	r3
    2b6a:	e78e      	b.n	2a8a <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    2b6c:	331f      	adds	r3, #31
    2b6e:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    2b70:	2b01      	cmp	r3, #1
    2b72:	d196      	bne.n	2aa2 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    2b74:	7e2b      	ldrb	r3, [r5, #24]
    2b76:	079b      	lsls	r3, r3, #30
    2b78:	d501      	bpl.n	2b7e <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2b7a:	2302      	movs	r3, #2
    2b7c:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    2b7e:	2303      	movs	r3, #3
    2b80:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    2b82:	2300      	movs	r3, #0
    2b84:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    2b86:	3325      	adds	r3, #37	; 0x25
    2b88:	2200      	movs	r2, #0
    2b8a:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    2b8c:	07b3      	lsls	r3, r6, #30
    2b8e:	d503      	bpl.n	2b98 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    2b90:	2324      	movs	r3, #36	; 0x24
    2b92:	5ce3      	ldrb	r3, [r4, r3]
    2b94:	2b01      	cmp	r3, #1
    2b96:	d00b      	beq.n	2bb0 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    2b98:	07f3      	lsls	r3, r6, #31
    2b9a:	d400      	bmi.n	2b9e <_i2c_master_interrupt_handler+0x1a6>
    2b9c:	e781      	b.n	2aa2 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    2b9e:	2324      	movs	r3, #36	; 0x24
    2ba0:	5ce3      	ldrb	r3, [r4, r3]
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d000      	beq.n	2ba8 <_i2c_master_interrupt_handler+0x1b0>
    2ba6:	e77c      	b.n	2aa2 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    2ba8:	68e3      	ldr	r3, [r4, #12]
    2baa:	0020      	movs	r0, r4
    2bac:	4798      	blx	r3
    2bae:	e778      	b.n	2aa2 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    2bb0:	6923      	ldr	r3, [r4, #16]
    2bb2:	0020      	movs	r0, r4
    2bb4:	4798      	blx	r3
    2bb6:	e774      	b.n	2aa2 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    2bb8:	0020      	movs	r0, r4
    2bba:	4b07      	ldr	r3, [pc, #28]	; (2bd8 <_i2c_master_interrupt_handler+0x1e0>)
    2bbc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    2bbe:	686a      	ldr	r2, [r5, #4]
    2bc0:	23e0      	movs	r3, #224	; 0xe0
    2bc2:	02db      	lsls	r3, r3, #11
    2bc4:	4313      	orrs	r3, r2
    2bc6:	606b      	str	r3, [r5, #4]
    2bc8:	e780      	b.n	2acc <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    2bca:	6963      	ldr	r3, [r4, #20]
    2bcc:	0020      	movs	r0, r4
    2bce:	4798      	blx	r3
}
    2bd0:	e77f      	b.n	2ad2 <_i2c_master_interrupt_handler+0xda>
    2bd2:	46c0      	nop			; (mov r8, r8)
    2bd4:	20005bcc 	.word	0x20005bcc
    2bd8:	00002799 	.word	0x00002799
    2bdc:	000027a5 	.word	0x000027a5
    2be0:	0000282d 	.word	0x0000282d

00002be4 <CLI_ResetDevice>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2be4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    2be8:	4a02      	ldr	r2, [pc, #8]	; (2bf4 <CLI_ResetDevice+0x10>)
    2bea:	4b03      	ldr	r3, [pc, #12]	; (2bf8 <CLI_ResetDevice+0x14>)
    2bec:	60da      	str	r2, [r3, #12]
    2bee:	f3bf 8f4f 	dsb	sy
    2bf2:	e7fe      	b.n	2bf2 <CLI_ResetDevice+0xe>
    2bf4:	05fa0004 	.word	0x05fa0004
    2bf8:	e000ed00 	.word	0xe000ed00

00002bfc <CLI_GetImuData>:
/******************************************************************************
* CLI Functions - Define here
******************************************************************************/
//Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    2bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bfe:	b087      	sub	sp, #28
    2c00:	9002      	str	r0, [sp, #8]
    2c02:	000f      	movs	r7, r1
static int16_t  data_raw_acceleration[3];
static int16_t  data_raw_angular_rate;
static float acceleration_mg[3];
uint8_t reg;
stmdev_ctx_t *dev_ctx = GetImuStruct();
    2c04:	4b1f      	ldr	r3, [pc, #124]	; (2c84 <CLI_GetImuData+0x88>)
    2c06:	4798      	blx	r3
    2c08:	0005      	movs	r5, r0


/* Read output only if new xl value is available */
lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
    2c0a:	240f      	movs	r4, #15
    2c0c:	ab02      	add	r3, sp, #8
    2c0e:	469c      	mov	ip, r3
    2c10:	4464      	add	r4, ip
    2c12:	0021      	movs	r1, r4
    2c14:	4b1c      	ldr	r3, [pc, #112]	; (2c88 <CLI_GetImuData+0x8c>)
    2c16:	4798      	blx	r3

if(reg){
    2c18:	7823      	ldrb	r3, [r4, #0]
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d107      	bne.n	2c2e <CLI_GetImuData+0x32>

	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
	(int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
}else
{
	snprintf(pcWriteBuffer,xWriteBufferLen, "No data ready! \r\n");
    2c1e:	4a1b      	ldr	r2, [pc, #108]	; (2c8c <CLI_GetImuData+0x90>)
    2c20:	0039      	movs	r1, r7
    2c22:	9802      	ldr	r0, [sp, #8]
    2c24:	4b1a      	ldr	r3, [pc, #104]	; (2c90 <CLI_GetImuData+0x94>)
    2c26:	4798      	blx	r3
}
return pdFALSE;
}
    2c28:	2000      	movs	r0, #0
    2c2a:	b007      	add	sp, #28
    2c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
    2c2e:	4c19      	ldr	r4, [pc, #100]	; (2c94 <CLI_GetImuData+0x98>)
    2c30:	2206      	movs	r2, #6
    2c32:	2100      	movs	r1, #0
    2c34:	0020      	movs	r0, r4
    2c36:	4b18      	ldr	r3, [pc, #96]	; (2c98 <CLI_GetImuData+0x9c>)
    2c38:	4798      	blx	r3
	lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
    2c3a:	0021      	movs	r1, r4
    2c3c:	0028      	movs	r0, r5
    2c3e:	4b17      	ldr	r3, [pc, #92]	; (2c9c <CLI_GetImuData+0xa0>)
    2c40:	4798      	blx	r3
	lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
    2c42:	2300      	movs	r3, #0
    2c44:	5ee0      	ldrsh	r0, [r4, r3]
    2c46:	4d16      	ldr	r5, [pc, #88]	; (2ca0 <CLI_GetImuData+0xa4>)
    2c48:	47a8      	blx	r5
	acceleration_mg[0] =
    2c4a:	4e16      	ldr	r6, [pc, #88]	; (2ca4 <CLI_GetImuData+0xa8>)
    2c4c:	6030      	str	r0, [r6, #0]
	lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
    2c4e:	2302      	movs	r3, #2
    2c50:	5ee0      	ldrsh	r0, [r4, r3]
    2c52:	47a8      	blx	r5
	acceleration_mg[1] =
    2c54:	6070      	str	r0, [r6, #4]
	lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
    2c56:	2304      	movs	r3, #4
    2c58:	5ee0      	ldrsh	r0, [r4, r3]
    2c5a:	47a8      	blx	r5
    2c5c:	1c04      	adds	r4, r0, #0
	acceleration_mg[2] =
    2c5e:	60b0      	str	r0, [r6, #8]
	snprintf(pcWriteBuffer,xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n",
    2c60:	4d11      	ldr	r5, [pc, #68]	; (2ca8 <CLI_GetImuData+0xac>)
    2c62:	6830      	ldr	r0, [r6, #0]
    2c64:	47a8      	blx	r5
    2c66:	9003      	str	r0, [sp, #12]
    2c68:	1c20      	adds	r0, r4, #0
    2c6a:	47a8      	blx	r5
    2c6c:	9001      	str	r0, [sp, #4]
    2c6e:	6870      	ldr	r0, [r6, #4]
    2c70:	47a8      	blx	r5
    2c72:	9000      	str	r0, [sp, #0]
    2c74:	9b03      	ldr	r3, [sp, #12]
    2c76:	4a0d      	ldr	r2, [pc, #52]	; (2cac <CLI_GetImuData+0xb0>)
    2c78:	0039      	movs	r1, r7
    2c7a:	9802      	ldr	r0, [sp, #8]
    2c7c:	4c04      	ldr	r4, [pc, #16]	; (2c90 <CLI_GetImuData+0x94>)
    2c7e:	47a0      	blx	r4
    2c80:	e7d2      	b.n	2c28 <CLI_GetImuData+0x2c>
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	00003c49 	.word	0x00003c49
    2c88:	00003be9 	.word	0x00003be9
    2c8c:	00016a58 	.word	0x00016a58
    2c90:	000144d5 	.word	0x000144d5
    2c94:	20000874 	.word	0x20000874
    2c98:	0001427b 	.word	0x0001427b
    2c9c:	00003c0d 	.word	0x00003c0d
    2ca0:	00003bcd 	.word	0x00003bcd
    2ca4:	20000858 	.word	0x20000858
    2ca8:	0001265d 	.word	0x0001265d
    2cac:	00016a34 	.word	0x00016a34

00002cb0 <xCliClearTerminalScreen>:
//THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
//SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
//CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen( char *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
    2cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cb2:	0006      	movs	r6, r0
    2cb4:	000f      	movs	r7, r1
	char clearScreen = ASCII_ESC;
	snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
    2cb6:	4d06      	ldr	r5, [pc, #24]	; (2cd0 <xCliClearTerminalScreen+0x20>)
    2cb8:	231b      	movs	r3, #27
    2cba:	4a06      	ldr	r2, [pc, #24]	; (2cd4 <xCliClearTerminalScreen+0x24>)
    2cbc:	210f      	movs	r1, #15
    2cbe:	0028      	movs	r0, r5
    2cc0:	4c05      	ldr	r4, [pc, #20]	; (2cd8 <xCliClearTerminalScreen+0x28>)
    2cc2:	47a0      	blx	r4
	snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
    2cc4:	002a      	movs	r2, r5
    2cc6:	0039      	movs	r1, r7
    2cc8:	0030      	movs	r0, r6
    2cca:	47a0      	blx	r4
	return pdFALSE;
}
    2ccc:	2000      	movs	r0, #0
    2cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2cd0:	20000864 	.word	0x20000864
    2cd4:	00016d54 	.word	0x00016d54
    2cd8:	000144d5 	.word	0x000144d5

00002cdc <CLI_GetTemp>:
	return pdFALSE;
}


BaseType_t CLI_GetTemp(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cde:	0004      	movs	r4, r0
    2ce0:	000d      	movs	r5, r1
	//delay_init();
    static uint16_t temperature;
    static float temp_celc;
	ds18b20_init();
    2ce2:	4b0e      	ldr	r3, [pc, #56]	; (2d1c <CLI_GetTemp+0x40>)
    2ce4:	4798      	blx	r3
	ds18b20_start_conversion();
    2ce6:	4b0e      	ldr	r3, [pc, #56]	; (2d20 <CLI_GetTemp+0x44>)
    2ce8:	4798      	blx	r3
	delay_ms(750);
    2cea:	480e      	ldr	r0, [pc, #56]	; (2d24 <CLI_GetTemp+0x48>)
    2cec:	4f0e      	ldr	r7, [pc, #56]	; (2d28 <CLI_GetTemp+0x4c>)
    2cee:	47b8      	blx	r7
	temperature = ds18b20_read_temp();
    2cf0:	4b0e      	ldr	r3, [pc, #56]	; (2d2c <CLI_GetTemp+0x50>)
    2cf2:	4798      	blx	r3
    2cf4:	4e0e      	ldr	r6, [pc, #56]	; (2d30 <CLI_GetTemp+0x54>)
    2cf6:	8030      	strh	r0, [r6, #0]
	delay_ms(1000);
    2cf8:	20fa      	movs	r0, #250	; 0xfa
    2cfa:	0080      	lsls	r0, r0, #2
    2cfc:	47b8      	blx	r7
	temp_celc = temperature / 16;
    2cfe:	8830      	ldrh	r0, [r6, #0]
    2d00:	0900      	lsrs	r0, r0, #4
    2d02:	4b0c      	ldr	r3, [pc, #48]	; (2d34 <CLI_GetTemp+0x58>)
    2d04:	4798      	blx	r3
	

	//does not print for some reason
    snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Temperature: %u \r\n", (uint16_t)temp_celc);
    2d06:	4b0c      	ldr	r3, [pc, #48]	; (2d38 <CLI_GetTemp+0x5c>)
    2d08:	4798      	blx	r3
    2d0a:	b283      	uxth	r3, r0
    2d0c:	4a0b      	ldr	r2, [pc, #44]	; (2d3c <CLI_GetTemp+0x60>)
    2d0e:	0029      	movs	r1, r5
    2d10:	0020      	movs	r0, r4
    2d12:	4c0b      	ldr	r4, [pc, #44]	; (2d40 <CLI_GetTemp+0x64>)
    2d14:	47a0      	blx	r4
    return pdFALSE;
}
    2d16:	2000      	movs	r0, #0
    2d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	00003275 	.word	0x00003275
    2d20:	000034cd 	.word	0x000034cd
    2d24:	000002ee 	.word	0x000002ee
    2d28:	00008fe1 	.word	0x00008fe1
    2d2c:	000034f1 	.word	0x000034f1
    2d30:	2000094c 	.word	0x2000094c
    2d34:	0001269d 	.word	0x0001269d
    2d38:	000120b5 	.word	0x000120b5
    2d3c:	00016a6c 	.word	0x00016a6c
    2d40:	000144d5 	.word	0x000144d5

00002d44 <CLI_Feed>:




BaseType_t CLI_Feed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2d44:	b570      	push	{r4, r5, r6, lr}
    2d46:	0005      	movs	r5, r0
    2d48:	000e      	movs	r6, r1

	//delay_init();
	configure_clocks();
    2d4a:	4b0b      	ldr	r3, [pc, #44]	; (2d78 <CLI_Feed+0x34>)
    2d4c:	4798      	blx	r3
	configure_tcc_for_pwm();
    2d4e:	4b0b      	ldr	r3, [pc, #44]	; (2d7c <CLI_Feed+0x38>)
    2d50:	4798      	blx	r3
	configure_pwm_pin();
    2d52:	4b0b      	ldr	r3, [pc, #44]	; (2d80 <CLI_Feed+0x3c>)
    2d54:	4798      	blx	r3
	
	servo_set(50000);
    2d56:	480b      	ldr	r0, [pc, #44]	; (2d84 <CLI_Feed+0x40>)
    2d58:	4c0b      	ldr	r4, [pc, #44]	; (2d88 <CLI_Feed+0x44>)
    2d5a:	47a0      	blx	r4
	delay_ms(1000);
    2d5c:	20fa      	movs	r0, #250	; 0xfa
    2d5e:	0080      	lsls	r0, r0, #2
    2d60:	4b0a      	ldr	r3, [pc, #40]	; (2d8c <CLI_Feed+0x48>)
    2d62:	4798      	blx	r3
	servo_set(100000);
    2d64:	480a      	ldr	r0, [pc, #40]	; (2d90 <CLI_Feed+0x4c>)
    2d66:	47a0      	blx	r4
	//does not print for some reason
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Servo Actuating...\r\n");
    2d68:	4a0a      	ldr	r2, [pc, #40]	; (2d94 <CLI_Feed+0x50>)
    2d6a:	0031      	movs	r1, r6
    2d6c:	0028      	movs	r0, r5
    2d6e:	4b0a      	ldr	r3, [pc, #40]	; (2d98 <CLI_Feed+0x54>)
    2d70:	4798      	blx	r3
	return pdFALSE;
}
    2d72:	2000      	movs	r0, #0
    2d74:	bd70      	pop	{r4, r5, r6, pc}
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	00003d61 	.word	0x00003d61
    2d7c:	00003cb5 	.word	0x00003cb5
    2d80:	00003d1d 	.word	0x00003d1d
    2d84:	0000c350 	.word	0x0000c350
    2d88:	00003d41 	.word	0x00003d41
    2d8c:	00008fe1 	.word	0x00008fe1
    2d90:	000186a0 	.word	0x000186a0
    2d94:	00016a1c 	.word	0x00016a1c
    2d98:	000144d5 	.word	0x000144d5

00002d9c <CLI_DistanceSensorGetDistance>:


BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
    2d9c:	b530      	push	{r4, r5, lr}
    2d9e:	b083      	sub	sp, #12
    2da0:	0004      	movs	r4, r0
    2da2:	000d      	movs	r5, r1
    uint16_t distance = 0;
    2da4:	466b      	mov	r3, sp
    2da6:	1d98      	adds	r0, r3, #6
    2da8:	2300      	movs	r3, #0
    2daa:	8003      	strh	r3, [r0, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
    2dac:	2164      	movs	r1, #100	; 0x64
    2dae:	4b12      	ldr	r3, [pc, #72]	; (2df8 <CLI_DistanceSensorGetDistance+0x5c>)
    2db0:	4798      	blx	r3
    if (0 != error) {
    2db2:	2800      	cmp	r0, #0
    2db4:	d00e      	beq.n	2dd4 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
    2db6:	0003      	movs	r3, r0
    2db8:	4a10      	ldr	r2, [pc, #64]	; (2dfc <CLI_DistanceSensorGetDistance+0x60>)
    2dba:	0029      	movs	r1, r5
    2dbc:	0020      	movs	r0, r4
    2dbe:	4d10      	ldr	r5, [pc, #64]	; (2e00 <CLI_DistanceSensorGetDistance+0x64>)
    2dc0:	47a8      	blx	r5
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
    }

    error = WifiAddDistanceDataToQueue(&distance);
    2dc2:	466b      	mov	r3, sp
    2dc4:	1d98      	adds	r0, r3, #6
    2dc6:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <CLI_DistanceSensorGetDistance+0x68>)
    2dc8:	4798      	blx	r3
    if (error == pdTRUE) {
    2dca:	2801      	cmp	r0, #1
    2dcc:	d00b      	beq.n	2de6 <CLI_DistanceSensorGetDistance+0x4a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
    }
    return pdFALSE;
}
    2dce:	2000      	movs	r0, #0
    2dd0:	b003      	add	sp, #12
    2dd2:	bd30      	pop	{r4, r5, pc}
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
    2dd4:	466b      	mov	r3, sp
    2dd6:	3306      	adds	r3, #6
    2dd8:	881b      	ldrh	r3, [r3, #0]
    2dda:	4a0b      	ldr	r2, [pc, #44]	; (2e08 <CLI_DistanceSensorGetDistance+0x6c>)
    2ddc:	0029      	movs	r1, r5
    2dde:	0020      	movs	r0, r4
    2de0:	4d07      	ldr	r5, [pc, #28]	; (2e00 <CLI_DistanceSensorGetDistance+0x64>)
    2de2:	47a8      	blx	r5
    2de4:	e7ed      	b.n	2dc2 <CLI_DistanceSensorGetDistance+0x26>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
    2de6:	0020      	movs	r0, r4
    2de8:	4b08      	ldr	r3, [pc, #32]	; (2e0c <CLI_DistanceSensorGetDistance+0x70>)
    2dea:	4798      	blx	r3
    2dec:	1820      	adds	r0, r4, r0
    2dee:	221a      	movs	r2, #26
    2df0:	4907      	ldr	r1, [pc, #28]	; (2e10 <CLI_DistanceSensorGetDistance+0x74>)
    2df2:	4b08      	ldr	r3, [pc, #32]	; (2e14 <CLI_DistanceSensorGetDistance+0x78>)
    2df4:	4798      	blx	r3
    2df6:	e7ea      	b.n	2dce <CLI_DistanceSensorGetDistance+0x32>
    2df8:	000036b5 	.word	0x000036b5
    2dfc:	000169d8 	.word	0x000169d8
    2e00:	000144d5 	.word	0x000144d5
    2e04:	0000277d 	.word	0x0000277d
    2e08:	000169ec 	.word	0x000169ec
    2e0c:	00014633 	.word	0x00014633
    2e10:	00016a00 	.word	0x00016a00
    2e14:	00014245 	.word	0x00014245

00002e18 <CLI_NeotrellisSetLed>:
* @return		Returns pdFALSE if the CLI command finished.
* @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
				for more information on how to use the FreeRTOS CLI.

*****************************************************************************/
BaseType_t CLI_NeotrellisSetLed( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString ) {
    2e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e1a:	46d6      	mov	lr, sl
    2e1c:	4647      	mov	r7, r8
    2e1e:	b580      	push	{r7, lr}
    2e20:	b08b      	sub	sp, #44	; 0x2c
    2e22:	9005      	str	r0, [sp, #20]
    2e24:	9106      	str	r1, [sp, #24]
    2e26:	0014      	movs	r4, r2
	BaseType_t xParameterStringLength;
	uint32_t ulParamValue;
	uint8_t keynum, red, green, blue;

	/* Getting the first parameter: Keynum */
	pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, 1, &xParameterStringLength);
    2e28:	aa09      	add	r2, sp, #36	; 0x24
    2e2a:	2101      	movs	r1, #1
    2e2c:	0020      	movs	r0, r4
    2e2e:	4b3b      	ldr	r3, [pc, #236]	; (2f1c <CLI_NeotrellisSetLed+0x104>)
    2e30:	4798      	blx	r3
	ulParamValue = strtoul((char *)pcParameter, NULL, 10);
    2e32:	220a      	movs	r2, #10
    2e34:	2100      	movs	r1, #0
    2e36:	4b3a      	ldr	r3, [pc, #232]	; (2f20 <CLI_NeotrellisSetLed+0x108>)
    2e38:	4798      	blx	r3
    2e3a:	0005      	movs	r5, r0
	if (ulParamValue < 16) {
    2e3c:	280f      	cmp	r0, #15
    2e3e:	d842      	bhi.n	2ec6 <CLI_NeotrellisSetLed+0xae>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Keynum parameter out of range (0-15).\r\n");
		return pdFALSE;
	}

	/* Getting the second parameter: Red */
	pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, 2, &xParameterStringLength);
    2e40:	aa09      	add	r2, sp, #36	; 0x24
    2e42:	2102      	movs	r1, #2
    2e44:	0020      	movs	r0, r4
    2e46:	4b35      	ldr	r3, [pc, #212]	; (2f1c <CLI_NeotrellisSetLed+0x104>)
    2e48:	4798      	blx	r3
	ulParamValue = strtoul((char *)pcParameter, NULL, 10);
    2e4a:	220a      	movs	r2, #10
    2e4c:	2100      	movs	r1, #0
    2e4e:	4b34      	ldr	r3, [pc, #208]	; (2f20 <CLI_NeotrellisSetLed+0x108>)
    2e50:	4798      	blx	r3
    2e52:	0006      	movs	r6, r0
	if (ulParamValue < 256) {
    2e54:	28ff      	cmp	r0, #255	; 0xff
    2e56:	d841      	bhi.n	2edc <CLI_NeotrellisSetLed+0xc4>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Red parameter out of range (0-255).\r\n");
		return pdFALSE;
	}

	/* Getting the third parameter: Green */
	pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, 3, &xParameterStringLength);
    2e58:	aa09      	add	r2, sp, #36	; 0x24
    2e5a:	2103      	movs	r1, #3
    2e5c:	0020      	movs	r0, r4
    2e5e:	4b2f      	ldr	r3, [pc, #188]	; (2f1c <CLI_NeotrellisSetLed+0x104>)
    2e60:	4798      	blx	r3
	ulParamValue = strtoul((char *)pcParameter, NULL, 10);
    2e62:	220a      	movs	r2, #10
    2e64:	2100      	movs	r1, #0
    2e66:	4b2e      	ldr	r3, [pc, #184]	; (2f20 <CLI_NeotrellisSetLed+0x108>)
    2e68:	4798      	blx	r3
    2e6a:	0007      	movs	r7, r0
	if (ulParamValue < 256) {
    2e6c:	28ff      	cmp	r0, #255	; 0xff
    2e6e:	d83b      	bhi.n	2ee8 <CLI_NeotrellisSetLed+0xd0>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Green parameter out of range (0-255).\r\n");
		return pdFALSE;
	}

	/* Getting the fourth parameter: Blue */
	pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, 4, &xParameterStringLength);
    2e70:	aa09      	add	r2, sp, #36	; 0x24
    2e72:	2104      	movs	r1, #4
    2e74:	0020      	movs	r0, r4
    2e76:	4b29      	ldr	r3, [pc, #164]	; (2f1c <CLI_NeotrellisSetLed+0x104>)
    2e78:	4798      	blx	r3
	ulParamValue = strtoul((char *)pcParameter, NULL, 10);
    2e7a:	220a      	movs	r2, #10
    2e7c:	2100      	movs	r1, #0
    2e7e:	4b28      	ldr	r3, [pc, #160]	; (2f20 <CLI_NeotrellisSetLed+0x108>)
    2e80:	4798      	blx	r3
    2e82:	4680      	mov	r8, r0
	if (ulParamValue < 256) {
    2e84:	28ff      	cmp	r0, #255	; 0xff
    2e86:	d835      	bhi.n	2ef4 <CLI_NeotrellisSetLed+0xdc>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Blue parameter out of range (0-255).\r\n");
		return pdFALSE;
	}

	/* If we reach this point, all parameters are correct and we can set the LED */
	int32_t error = SeesawSetLed(keynum, red, green, blue);
    2e88:	466a      	mov	r2, sp
    2e8a:	77d0      	strb	r0, [r2, #31]
    2e8c:	7fd3      	ldrb	r3, [r2, #31]
    2e8e:	b2fa      	uxtb	r2, r7
    2e90:	b2f1      	uxtb	r1, r6
    2e92:	b2e8      	uxtb	r0, r5
    2e94:	4c23      	ldr	r4, [pc, #140]	; (2f24 <CLI_NeotrellisSetLed+0x10c>)
    2e96:	47a0      	blx	r4
	if (error != ERROR_NONE) {
    2e98:	2800      	cmp	r0, #0
    2e9a:	d131      	bne.n	2f00 <CLI_NeotrellisSetLed+0xe8>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error setting LED: %d\r\n", error);
		return pdFALSE;
	}

	/* Update the LEDs with the new settings */
	error = SeesawOrderLedUpdate();
    2e9c:	4b22      	ldr	r3, [pc, #136]	; (2f28 <CLI_NeotrellisSetLed+0x110>)
    2e9e:	4798      	blx	r3
	if (error != ERROR_NONE) {
    2ea0:	2800      	cmp	r0, #0
    2ea2:	d134      	bne.n	2f0e <CLI_NeotrellisSetLed+0xf6>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error updating LED: %d\r\n", error);
		return pdFALSE;
	}

	/* show to screen */
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "LED %d set to R:%d G:%d B:%d\r\n", keynum, red, green, blue);
    2ea4:	21ff      	movs	r1, #255	; 0xff
    2ea6:	002b      	movs	r3, r5
    2ea8:	400b      	ands	r3, r1
    2eaa:	4644      	mov	r4, r8
    2eac:	400c      	ands	r4, r1
    2eae:	9402      	str	r4, [sp, #8]
    2eb0:	003a      	movs	r2, r7
    2eb2:	400a      	ands	r2, r1
    2eb4:	9201      	str	r2, [sp, #4]
    2eb6:	4031      	ands	r1, r6
    2eb8:	9100      	str	r1, [sp, #0]
    2eba:	4a1c      	ldr	r2, [pc, #112]	; (2f2c <CLI_NeotrellisSetLed+0x114>)
    2ebc:	9906      	ldr	r1, [sp, #24]
    2ebe:	9805      	ldr	r0, [sp, #20]
    2ec0:	4c1b      	ldr	r4, [pc, #108]	; (2f30 <CLI_NeotrellisSetLed+0x118>)
    2ec2:	47a0      	blx	r4


	return pdFALSE;
    2ec4:	e004      	b.n	2ed0 <CLI_NeotrellisSetLed+0xb8>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Keynum parameter out of range (0-15).\r\n");
    2ec6:	4a1b      	ldr	r2, [pc, #108]	; (2f34 <CLI_NeotrellisSetLed+0x11c>)
    2ec8:	9906      	ldr	r1, [sp, #24]
    2eca:	9805      	ldr	r0, [sp, #20]
    2ecc:	4b18      	ldr	r3, [pc, #96]	; (2f30 <CLI_NeotrellisSetLed+0x118>)
    2ece:	4798      	blx	r3
}
    2ed0:	2000      	movs	r0, #0
    2ed2:	b00b      	add	sp, #44	; 0x2c
    2ed4:	bc0c      	pop	{r2, r3}
    2ed6:	4690      	mov	r8, r2
    2ed8:	469a      	mov	sl, r3
    2eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Red parameter out of range (0-255).\r\n");
    2edc:	4a16      	ldr	r2, [pc, #88]	; (2f38 <CLI_NeotrellisSetLed+0x120>)
    2ede:	9906      	ldr	r1, [sp, #24]
    2ee0:	9805      	ldr	r0, [sp, #20]
    2ee2:	4b13      	ldr	r3, [pc, #76]	; (2f30 <CLI_NeotrellisSetLed+0x118>)
    2ee4:	4798      	blx	r3
		return pdFALSE;
    2ee6:	e7f3      	b.n	2ed0 <CLI_NeotrellisSetLed+0xb8>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Green parameter out of range (0-255).\r\n");
    2ee8:	4a14      	ldr	r2, [pc, #80]	; (2f3c <CLI_NeotrellisSetLed+0x124>)
    2eea:	9906      	ldr	r1, [sp, #24]
    2eec:	9805      	ldr	r0, [sp, #20]
    2eee:	4b10      	ldr	r3, [pc, #64]	; (2f30 <CLI_NeotrellisSetLed+0x118>)
    2ef0:	4798      	blx	r3
		return pdFALSE;
    2ef2:	e7ed      	b.n	2ed0 <CLI_NeotrellisSetLed+0xb8>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Blue parameter out of range (0-255).\r\n");
    2ef4:	4a12      	ldr	r2, [pc, #72]	; (2f40 <CLI_NeotrellisSetLed+0x128>)
    2ef6:	9906      	ldr	r1, [sp, #24]
    2ef8:	9805      	ldr	r0, [sp, #20]
    2efa:	4b0d      	ldr	r3, [pc, #52]	; (2f30 <CLI_NeotrellisSetLed+0x118>)
    2efc:	4798      	blx	r3
		return pdFALSE;
    2efe:	e7e7      	b.n	2ed0 <CLI_NeotrellisSetLed+0xb8>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error setting LED: %d\r\n", error);
    2f00:	0003      	movs	r3, r0
    2f02:	4a10      	ldr	r2, [pc, #64]	; (2f44 <CLI_NeotrellisSetLed+0x12c>)
    2f04:	9906      	ldr	r1, [sp, #24]
    2f06:	9805      	ldr	r0, [sp, #20]
    2f08:	4c09      	ldr	r4, [pc, #36]	; (2f30 <CLI_NeotrellisSetLed+0x118>)
    2f0a:	47a0      	blx	r4
		return pdFALSE;
    2f0c:	e7e0      	b.n	2ed0 <CLI_NeotrellisSetLed+0xb8>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error updating LED: %d\r\n", error);
    2f0e:	0003      	movs	r3, r0
    2f10:	4a0d      	ldr	r2, [pc, #52]	; (2f48 <CLI_NeotrellisSetLed+0x130>)
    2f12:	9906      	ldr	r1, [sp, #24]
    2f14:	9805      	ldr	r0, [sp, #20]
    2f16:	4c06      	ldr	r4, [pc, #24]	; (2f30 <CLI_NeotrellisSetLed+0x118>)
    2f18:	47a0      	blx	r4
		return pdFALSE;
    2f1a:	e7d9      	b.n	2ed0 <CLI_NeotrellisSetLed+0xb8>
    2f1c:	000043b1 	.word	0x000043b1
    2f20:	00014925 	.word	0x00014925
    2f24:	00003c51 	.word	0x00003c51
    2f28:	00003c89 	.word	0x00003c89
    2f2c:	00016b54 	.word	0x00016b54
    2f30:	000144d5 	.word	0x000144d5
    2f34:	00016a80 	.word	0x00016a80
    2f38:	00016aa8 	.word	0x00016aa8
    2f3c:	00016ad0 	.word	0x00016ad0
    2f40:	00016af8 	.word	0x00016af8
    2f44:	00016b20 	.word	0x00016b20
    2f48:	00016b38 	.word	0x00016b38

00002f4c <vCommandConsoleTask>:
{
    2f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f4e:	46d6      	mov	lr, sl
    2f50:	464f      	mov	r7, r9
    2f52:	b580      	push	{r7, lr}
    2f54:	b083      	sub	sp, #12
FreeRTOS_CLIRegisterCommand( &xImuGetCommand );
    2f56:	4869      	ldr	r0, [pc, #420]	; (30fc <vCommandConsoleTask+0x1b0>)
    2f58:	4c69      	ldr	r4, [pc, #420]	; (3100 <vCommandConsoleTask+0x1b4>)
    2f5a:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xClearScreen );
    2f5c:	4869      	ldr	r0, [pc, #420]	; (3104 <vCommandConsoleTask+0x1b8>)
    2f5e:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xResetCommand );
    2f60:	4869      	ldr	r0, [pc, #420]	; (3108 <vCommandConsoleTask+0x1bc>)
    2f62:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand( &xNeotrellisTurnLEDCommand );
    2f64:	4869      	ldr	r0, [pc, #420]	; (310c <vCommandConsoleTask+0x1c0>)
    2f66:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand(&xFeedCommand);
    2f68:	4869      	ldr	r0, [pc, #420]	; (3110 <vCommandConsoleTask+0x1c4>)
    2f6a:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand(&xTempGetCommand);
    2f6c:	4869      	ldr	r0, [pc, #420]	; (3114 <vCommandConsoleTask+0x1c8>)
    2f6e:	47a0      	blx	r4
FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
    2f70:	4869      	ldr	r0, [pc, #420]	; (3118 <vCommandConsoleTask+0x1cc>)
    2f72:	47a0      	blx	r4
    SerialConsoleWriteString( pcWelcomeMessage);
    2f74:	4869      	ldr	r0, [pc, #420]	; (311c <vCommandConsoleTask+0x1d0>)
    2f76:	4b6a      	ldr	r3, [pc, #424]	; (3120 <vCommandConsoleTask+0x1d4>)
    2f78:	4798      	blx	r3
	cliCharReadySemaphore = xSemaphoreCreateBinary();
    2f7a:	2203      	movs	r2, #3
    2f7c:	2100      	movs	r1, #0
    2f7e:	2001      	movs	r0, #1
    2f80:	4b68      	ldr	r3, [pc, #416]	; (3124 <vCommandConsoleTask+0x1d8>)
    2f82:	4798      	blx	r3
    2f84:	4b68      	ldr	r3, [pc, #416]	; (3128 <vCommandConsoleTask+0x1dc>)
    2f86:	6018      	str	r0, [r3, #0]
	if(cliCharReadySemaphore == NULL)
    2f88:	2800      	cmp	r0, #0
    2f8a:	d106      	bne.n	2f9a <vCommandConsoleTask+0x4e>
		LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
    2f8c:	4967      	ldr	r1, [pc, #412]	; (312c <vCommandConsoleTask+0x1e0>)
    2f8e:	3003      	adds	r0, #3
    2f90:	4b67      	ldr	r3, [pc, #412]	; (3130 <vCommandConsoleTask+0x1e4>)
    2f92:	4798      	blx	r3
		vTaskSuspend( NULL );
    2f94:	2000      	movs	r0, #0
    2f96:	4b67      	ldr	r3, [pc, #412]	; (3134 <vCommandConsoleTask+0x1e8>)
    2f98:	4798      	blx	r3
            cInputIndex = 0;
    2f9a:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
    2f9c:	4b66      	ldr	r3, [pc, #408]	; (3138 <vCommandConsoleTask+0x1ec>)
    2f9e:	4699      	mov	r9, r3
	xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
    2fa0:	4b61      	ldr	r3, [pc, #388]	; (3128 <vCommandConsoleTask+0x1dc>)
    2fa2:	469a      	mov	sl, r3
    2fa4:	e033      	b.n	300e <vCommandConsoleTask+0xc2>
    2fa6:	2101      	movs	r1, #1
    2fa8:	4249      	negs	r1, r1
    2faa:	4653      	mov	r3, sl
    2fac:	6818      	ldr	r0, [r3, #0]
    2fae:	4b63      	ldr	r3, [pc, #396]	; (313c <vCommandConsoleTask+0x1f0>)
    2fb0:	4798      	blx	r3
	SerialConsoleReadCharacter(character);
    2fb2:	a801      	add	r0, sp, #4
    2fb4:	4b60      	ldr	r3, [pc, #384]	; (3138 <vCommandConsoleTask+0x1ec>)
    2fb6:	4798      	blx	r3
    2fb8:	e02d      	b.n	3016 <vCommandConsoleTask+0xca>
            SerialConsoleWriteString("\r\n");
    2fba:	4861      	ldr	r0, [pc, #388]	; (3140 <vCommandConsoleTask+0x1f4>)
    2fbc:	4b58      	ldr	r3, [pc, #352]	; (3120 <vCommandConsoleTask+0x1d4>)
    2fbe:	4798      	blx	r3
			isEscapeCode = false; pcEscapeCodePos = 0;
    2fc0:	2400      	movs	r4, #0
    2fc2:	4b60      	ldr	r3, [pc, #384]	; (3144 <vCommandConsoleTask+0x1f8>)
    2fc4:	701c      	strb	r4, [r3, #0]
    2fc6:	4b60      	ldr	r3, [pc, #384]	; (3148 <vCommandConsoleTask+0x1fc>)
    2fc8:	701c      	strb	r4, [r3, #0]
			strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI-1);
    2fca:	4d60      	ldr	r5, [pc, #384]	; (314c <vCommandConsoleTask+0x200>)
    2fcc:	2231      	movs	r2, #49	; 0x31
    2fce:	4960      	ldr	r1, [pc, #384]	; (3150 <vCommandConsoleTask+0x204>)
    2fd0:	0028      	movs	r0, r5
    2fd2:	4b60      	ldr	r3, [pc, #384]	; (3154 <vCommandConsoleTask+0x208>)
    2fd4:	4798      	blx	r3
			pcLastCommand[MAX_INPUT_LENGTH_CLI-1] = 0;	//Ensure null termination
    2fd6:	2331      	movs	r3, #49	; 0x31
    2fd8:	54ec      	strb	r4, [r5, r3]
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand
    2fda:	4c5f      	ldr	r4, [pc, #380]	; (3158 <vCommandConsoleTask+0x20c>)
    2fdc:	4e5c      	ldr	r6, [pc, #368]	; (3150 <vCommandConsoleTask+0x204>)
    2fde:	4f5f      	ldr	r7, [pc, #380]	; (315c <vCommandConsoleTask+0x210>)
    2fe0:	2264      	movs	r2, #100	; 0x64
    2fe2:	0021      	movs	r1, r4
    2fe4:	0030      	movs	r0, r6
    2fe6:	47b8      	blx	r7
    2fe8:	0005      	movs	r5, r0
				pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
    2fea:	2200      	movs	r2, #0
    2fec:	2363      	movs	r3, #99	; 0x63
    2fee:	54e2      	strb	r2, [r4, r3]
                SerialConsoleWriteString(pcOutputString);
    2ff0:	0020      	movs	r0, r4
    2ff2:	4b4b      	ldr	r3, [pc, #300]	; (3120 <vCommandConsoleTask+0x1d4>)
    2ff4:	4798      	blx	r3
            } while( xMoreDataToFollow != pdFALSE );
    2ff6:	2d00      	cmp	r5, #0
    2ff8:	d1f2      	bne.n	2fe0 <vCommandConsoleTask+0x94>
            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    2ffa:	2232      	movs	r2, #50	; 0x32
    2ffc:	2100      	movs	r1, #0
    2ffe:	4854      	ldr	r0, [pc, #336]	; (3150 <vCommandConsoleTask+0x204>)
    3000:	4c57      	ldr	r4, [pc, #348]	; (3160 <vCommandConsoleTask+0x214>)
    3002:	47a0      	blx	r4
			memset( pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
    3004:	2264      	movs	r2, #100	; 0x64
    3006:	2100      	movs	r1, #0
    3008:	4853      	ldr	r0, [pc, #332]	; (3158 <vCommandConsoleTask+0x20c>)
    300a:	47a0      	blx	r4
            cInputIndex = 0;
    300c:	2400      	movs	r4, #0
int ret = SerialConsoleReadCharacter(character);
    300e:	a801      	add	r0, sp, #4
    3010:	47c8      	blx	r9
if(ret == -1)
    3012:	1c43      	adds	r3, r0, #1
    3014:	d0c7      	beq.n	2fa6 <vCommandConsoleTask+0x5a>
	if( cRxedChar[0] == '\n' || cRxedChar[0] == '\r'  )
    3016:	466b      	mov	r3, sp
    3018:	791b      	ldrb	r3, [r3, #4]
    301a:	2b0a      	cmp	r3, #10
    301c:	d0cd      	beq.n	2fba <vCommandConsoleTask+0x6e>
    301e:	2b0d      	cmp	r3, #13
    3020:	d0cb      	beq.n	2fba <vCommandConsoleTask+0x6e>
			if (true == isEscapeCode) {
    3022:	4a48      	ldr	r2, [pc, #288]	; (3144 <vCommandConsoleTask+0x1f8>)
    3024:	7812      	ldrb	r2, [r2, #0]
    3026:	2a00      	cmp	r2, #0
    3028:	d03f      	beq.n	30aa <vCommandConsoleTask+0x15e>
				if(pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
    302a:	4a47      	ldr	r2, [pc, #284]	; (3148 <vCommandConsoleTask+0x1fc>)
    302c:	7812      	ldrb	r2, [r2, #0]
    302e:	2a03      	cmp	r2, #3
    3030:	d813      	bhi.n	305a <vCommandConsoleTask+0x10e>
					pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
    3032:	1c51      	adds	r1, r2, #1
    3034:	b2c9      	uxtb	r1, r1
    3036:	4844      	ldr	r0, [pc, #272]	; (3148 <vCommandConsoleTask+0x1fc>)
    3038:	7001      	strb	r1, [r0, #0]
    303a:	484a      	ldr	r0, [pc, #296]	; (3164 <vCommandConsoleTask+0x218>)
    303c:	5483      	strb	r3, [r0, r2]
				if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
    303e:	2901      	cmp	r1, #1
    3040:	d9e5      	bls.n	300e <vCommandConsoleTask+0xc2>
					if(strcasecmp(pcEscapeCodes, "oa"))	{
    3042:	4949      	ldr	r1, [pc, #292]	; (3168 <vCommandConsoleTask+0x21c>)
    3044:	4847      	ldr	r0, [pc, #284]	; (3164 <vCommandConsoleTask+0x218>)
    3046:	4b49      	ldr	r3, [pc, #292]	; (316c <vCommandConsoleTask+0x220>)
    3048:	4798      	blx	r3
    304a:	2800      	cmp	r0, #0
    304c:	d10b      	bne.n	3066 <vCommandConsoleTask+0x11a>
					isEscapeCode = false; pcEscapeCodePos = 0;
    304e:	2300      	movs	r3, #0
    3050:	4a3c      	ldr	r2, [pc, #240]	; (3144 <vCommandConsoleTask+0x1f8>)
    3052:	7013      	strb	r3, [r2, #0]
    3054:	4a3c      	ldr	r2, [pc, #240]	; (3148 <vCommandConsoleTask+0x1fc>)
    3056:	7013      	strb	r3, [r2, #0]
    3058:	e7d9      	b.n	300e <vCommandConsoleTask+0xc2>
					isEscapeCode = false; pcEscapeCodePos = 0;
    305a:	2300      	movs	r3, #0
    305c:	4a39      	ldr	r2, [pc, #228]	; (3144 <vCommandConsoleTask+0x1f8>)
    305e:	7013      	strb	r3, [r2, #0]
    3060:	4a39      	ldr	r2, [pc, #228]	; (3148 <vCommandConsoleTask+0x1fc>)
    3062:	7013      	strb	r3, [r2, #0]
    3064:	e7d3      	b.n	300e <vCommandConsoleTask+0xc2>
                            sprintf(pcInputString, "%c[2K\r>", 27);
    3066:	4c3a      	ldr	r4, [pc, #232]	; (3150 <vCommandConsoleTask+0x204>)
    3068:	221b      	movs	r2, #27
    306a:	4941      	ldr	r1, [pc, #260]	; (3170 <vCommandConsoleTask+0x224>)
    306c:	0020      	movs	r0, r4
    306e:	4b41      	ldr	r3, [pc, #260]	; (3174 <vCommandConsoleTask+0x228>)
    3070:	4798      	blx	r3
				            SerialConsoleWriteString((char*)pcInputString);
    3072:	0020      	movs	r0, r4
    3074:	4b2a      	ldr	r3, [pc, #168]	; (3120 <vCommandConsoleTask+0x1d4>)
    3076:	4798      	blx	r3
                            memset( pcInputString, 0x00, MAX_INPUT_LENGTH_CLI );
    3078:	2232      	movs	r2, #50	; 0x32
    307a:	2100      	movs	r1, #0
    307c:	0020      	movs	r0, r4
    307e:	4b38      	ldr	r3, [pc, #224]	; (3160 <vCommandConsoleTask+0x214>)
    3080:	4798      	blx	r3
						strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1); 	
    3082:	2231      	movs	r2, #49	; 0x31
    3084:	4931      	ldr	r1, [pc, #196]	; (314c <vCommandConsoleTask+0x200>)
    3086:	0020      	movs	r0, r4
    3088:	4b32      	ldr	r3, [pc, #200]	; (3154 <vCommandConsoleTask+0x208>)
    308a:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
    308c:	0020      	movs	r0, r4
    308e:	4b3a      	ldr	r3, [pc, #232]	; (3178 <vCommandConsoleTask+0x22c>)
    3090:	4798      	blx	r3
    3092:	2431      	movs	r4, #49	; 0x31
    3094:	2830      	cmp	r0, #48	; 0x30
    3096:	d803      	bhi.n	30a0 <vCommandConsoleTask+0x154>
    3098:	482c      	ldr	r0, [pc, #176]	; (314c <vCommandConsoleTask+0x200>)
    309a:	4b37      	ldr	r3, [pc, #220]	; (3178 <vCommandConsoleTask+0x22c>)
    309c:	4798      	blx	r3
    309e:	0004      	movs	r4, r0
    30a0:	b2e4      	uxtb	r4, r4
						SerialConsoleWriteString(pcInputString);
    30a2:	482b      	ldr	r0, [pc, #172]	; (3150 <vCommandConsoleTask+0x204>)
    30a4:	4b1e      	ldr	r3, [pc, #120]	; (3120 <vCommandConsoleTask+0x1d4>)
    30a6:	4798      	blx	r3
    30a8:	e7d1      	b.n	304e <vCommandConsoleTask+0x102>
            else if( cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE )
    30aa:	2b08      	cmp	r3, #8
    30ac:	d010      	beq.n	30d0 <vCommandConsoleTask+0x184>
    30ae:	2b7f      	cmp	r3, #127	; 0x7f
    30b0:	d00e      	beq.n	30d0 <vCommandConsoleTask+0x184>
			else if( cRxedChar[0] == ASCII_ESC) {
    30b2:	2b1b      	cmp	r3, #27
    30b4:	d01a      	beq.n	30ec <vCommandConsoleTask+0x1a0>
                if( cInputIndex < MAX_INPUT_LENGTH_CLI )
    30b6:	2c31      	cmp	r4, #49	; 0x31
    30b8:	d803      	bhi.n	30c2 <vCommandConsoleTask+0x176>
                    pcInputString[ cInputIndex ] = cRxedChar[0];
    30ba:	4a25      	ldr	r2, [pc, #148]	; (3150 <vCommandConsoleTask+0x204>)
    30bc:	5513      	strb	r3, [r2, r4]
                    cInputIndex++;
    30be:	3401      	adds	r4, #1
    30c0:	b2e4      	uxtb	r4, r4
					cRxedChar[1] = 0;
    30c2:	2300      	movs	r3, #0
    30c4:	466a      	mov	r2, sp
    30c6:	7153      	strb	r3, [r2, #5]
					SerialConsoleWriteString(&cRxedChar[0]);
    30c8:	a801      	add	r0, sp, #4
    30ca:	4b15      	ldr	r3, [pc, #84]	; (3120 <vCommandConsoleTask+0x1d4>)
    30cc:	4798      	blx	r3
    30ce:	e79e      	b.n	300e <vCommandConsoleTask+0xc2>
				char erase[4] = {0x08, 0x20, 0x08, 0x00};
    30d0:	4b2a      	ldr	r3, [pc, #168]	; (317c <vCommandConsoleTask+0x230>)
    30d2:	681b      	ldr	r3, [r3, #0]
    30d4:	9300      	str	r3, [sp, #0]
				SerialConsoleWriteString(erase);
    30d6:	4668      	mov	r0, sp
    30d8:	4b11      	ldr	r3, [pc, #68]	; (3120 <vCommandConsoleTask+0x1d4>)
    30da:	4798      	blx	r3
                if( cInputIndex > 0 )
    30dc:	2c00      	cmp	r4, #0
    30de:	d096      	beq.n	300e <vCommandConsoleTask+0xc2>
                    cInputIndex--;
    30e0:	3c01      	subs	r4, #1
    30e2:	b2e4      	uxtb	r4, r4
                    pcInputString[ cInputIndex ] = 0;
    30e4:	2200      	movs	r2, #0
    30e6:	4b1a      	ldr	r3, [pc, #104]	; (3150 <vCommandConsoleTask+0x204>)
    30e8:	551a      	strb	r2, [r3, r4]
            {
    30ea:	e790      	b.n	300e <vCommandConsoleTask+0xc2>
				isEscapeCode = true; //Next characters will be code arguments
    30ec:	2201      	movs	r2, #1
    30ee:	4b15      	ldr	r3, [pc, #84]	; (3144 <vCommandConsoleTask+0x1f8>)
    30f0:	701a      	strb	r2, [r3, #0]
				pcEscapeCodePos = 0;
    30f2:	2200      	movs	r2, #0
    30f4:	4b14      	ldr	r3, [pc, #80]	; (3148 <vCommandConsoleTask+0x1fc>)
    30f6:	701a      	strb	r2, [r3, #0]
    30f8:	e789      	b.n	300e <vCommandConsoleTask+0xc2>
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	00016d7c 	.word	0x00016d7c
    3100:	00004255 	.word	0x00004255
    3104:	00016d44 	.word	0x00016d44
    3108:	00016d9c 	.word	0x00016d9c
    310c:	00016d8c 	.word	0x00016d8c
    3110:	00016d6c 	.word	0x00016d6c
    3114:	00016dac 	.word	0x00016dac
    3118:	00016d5c 	.word	0x00016d5c
    311c:	00016cd4 	.word	0x00016cd4
    3120:	00007efd 	.word	0x00007efd
    3124:	00005b19 	.word	0x00005b19
    3128:	20004478 	.word	0x20004478
    312c:	00016d18 	.word	0x00016d18
    3130:	00007fad 	.word	0x00007fad
    3134:	00007279 	.word	0x00007279
    3138:	00007f81 	.word	0x00007f81
    313c:	000065fd 	.word	0x000065fd
    3140:	00016a7c 	.word	0x00016a7c
    3144:	2000087a 	.word	0x2000087a
    3148:	2000087b 	.word	0x2000087b
    314c:	200008b4 	.word	0x200008b4
    3150:	20000880 	.word	0x20000880
    3154:	00014663 	.word	0x00014663
    3158:	200008e8 	.word	0x200008e8
    315c:	00004299 	.word	0x00004299
    3160:	0001427b 	.word	0x0001427b
    3164:	2000087c 	.word	0x2000087c
    3168:	00016d38 	.word	0x00016d38
    316c:	0001457d 	.word	0x0001457d
    3170:	00016d3c 	.word	0x00016d3c
    3174:	00014539 	.word	0x00014539
    3178:	00014633 	.word	0x00014633
    317c:	000169d4 	.word	0x000169d4

00003180 <CliCharReadySemaphoreGiveFromISR>:
{
    3180:	b510      	push	{r4, lr}
	xHigherPriorityTaskWoken = pdFALSE;
    3182:	4c08      	ldr	r4, [pc, #32]	; (31a4 <CliCharReadySemaphoreGiveFromISR+0x24>)
    3184:	2300      	movs	r3, #0
    3186:	6023      	str	r3, [r4, #0]
	xSemaphoreGiveFromISR( cliCharReadySemaphore, &xHigherPriorityTaskWoken );
    3188:	4b07      	ldr	r3, [pc, #28]	; (31a8 <CliCharReadySemaphoreGiveFromISR+0x28>)
    318a:	6818      	ldr	r0, [r3, #0]
    318c:	0021      	movs	r1, r4
    318e:	4b07      	ldr	r3, [pc, #28]	; (31ac <CliCharReadySemaphoreGiveFromISR+0x2c>)
    3190:	4798      	blx	r3
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    3192:	6823      	ldr	r3, [r4, #0]
    3194:	2b00      	cmp	r3, #0
    3196:	d003      	beq.n	31a0 <CliCharReadySemaphoreGiveFromISR+0x20>
    3198:	2280      	movs	r2, #128	; 0x80
    319a:	0552      	lsls	r2, r2, #21
    319c:	4b04      	ldr	r3, [pc, #16]	; (31b0 <CliCharReadySemaphoreGiveFromISR+0x30>)
    319e:	601a      	str	r2, [r3, #0]
}
    31a0:	bd10      	pop	{r4, pc}
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	20000950 	.word	0x20000950
    31a8:	20004478 	.word	0x20004478
    31ac:	000062e1 	.word	0x000062e1
    31b0:	e000ed04 	.word	0xe000ed04

000031b4 <OWSensorsTxComplete>:

//based on https://onlinedocs.microchip.com/pr/GUID-1618003F-992B-4E48-9411-5E5D5D952C06-en-US-3/index.html documents about Dallas One Wire
//FreeRTOS integration based on A08 I2C driver
//assembly and tick based delay, actually allowed everything to work

void OWSensorsTxComplete(void){
    31b4:	b510      	push	{r4, lr}
    31b6:	b082      	sub	sp, #8
				
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    31b8:	2400      	movs	r4, #0
    31ba:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorOWSemaphoreHandle, &xHigherPriorityTaskWoken );
    31bc:	4b07      	ldr	r3, [pc, #28]	; (31dc <OWSensorsTxComplete+0x28>)
    31be:	6818      	ldr	r0, [r3, #0]
    31c0:	a901      	add	r1, sp, #4
    31c2:	4b07      	ldr	r3, [pc, #28]	; (31e0 <OWSensorsTxComplete+0x2c>)
    31c4:	4798      	blx	r3
	sensorTransmitError = false;
    31c6:	4b07      	ldr	r3, [pc, #28]	; (31e4 <OWSensorsTxComplete+0x30>)
    31c8:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    31ca:	9b01      	ldr	r3, [sp, #4]
    31cc:	2b00      	cmp	r3, #0
    31ce:	d003      	beq.n	31d8 <OWSensorsTxComplete+0x24>
    31d0:	2280      	movs	r2, #128	; 0x80
    31d2:	0552      	lsls	r2, r2, #21
    31d4:	4b04      	ldr	r3, [pc, #16]	; (31e8 <OWSensorsTxComplete+0x34>)
    31d6:	601a      	str	r2, [r3, #0]
}
    31d8:	b002      	add	sp, #8
    31da:	bd10      	pop	{r4, pc}
    31dc:	2000447c 	.word	0x2000447c
    31e0:	000062e1 	.word	0x000062e1
    31e4:	20000954 	.word	0x20000954
    31e8:	e000ed04 	.word	0xe000ed04

000031ec <OWSensorsRxComplete>:

void OWSensorsRxComplete(void){
    31ec:	b510      	push	{r4, lr}
    31ee:	b082      	sub	sp, #8
	
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    31f0:	2400      	movs	r4, #0
    31f2:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorOWSemaphoreHandle, &xHigherPriorityTaskWoken );
    31f4:	4b07      	ldr	r3, [pc, #28]	; (3214 <OWSensorsRxComplete+0x28>)
    31f6:	6818      	ldr	r0, [r3, #0]
    31f8:	a901      	add	r1, sp, #4
    31fa:	4b07      	ldr	r3, [pc, #28]	; (3218 <OWSensorsRxComplete+0x2c>)
    31fc:	4798      	blx	r3
	sensorTransmitError = false;
    31fe:	4b07      	ldr	r3, [pc, #28]	; (321c <OWSensorsRxComplete+0x30>)
    3200:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    3202:	9b01      	ldr	r3, [sp, #4]
    3204:	2b00      	cmp	r3, #0
    3206:	d003      	beq.n	3210 <OWSensorsRxComplete+0x24>
    3208:	2280      	movs	r2, #128	; 0x80
    320a:	0552      	lsls	r2, r2, #21
    320c:	4b04      	ldr	r3, [pc, #16]	; (3220 <OWSensorsRxComplete+0x34>)
    320e:	601a      	str	r2, [r3, #0]
}
    3210:	b002      	add	sp, #8
    3212:	bd10      	pop	{r4, pc}
    3214:	2000447c 	.word	0x2000447c
    3218:	000062e1 	.word	0x000062e1
    321c:	20000954 	.word	0x20000954
    3220:	e000ed04 	.word	0xe000ed04

00003224 <OWFreeMutex>:

int32_t OWFreeMutex(void){
    3224:	b510      	push	{r4, lr}
	if (xSemaphoreGive(sensorOWMutexHandle) != pdTRUE) {
    3226:	4b05      	ldr	r3, [pc, #20]	; (323c <OWFreeMutex+0x18>)
    3228:	6818      	ldr	r0, [r3, #0]
    322a:	2300      	movs	r3, #0
    322c:	2200      	movs	r2, #0
    322e:	2100      	movs	r1, #0
    3230:	4c03      	ldr	r4, [pc, #12]	; (3240 <OWFreeMutex+0x1c>)
    3232:	47a0      	blx	r4
    3234:	3801      	subs	r0, #1
    3236:	1e43      	subs	r3, r0, #1
    3238:	4198      	sbcs	r0, r3
		//error
		return 1; 
	}
	//no error
	return 0;
}
    323a:	bd10      	pop	{r4, pc}
    323c:	20004480 	.word	0x20004480
    3240:	00005c55 	.word	0x00005c55

00003244 <OWGetMutex>:

int32_t OWGetMutex(TickType_t waitTime){
    3244:	b510      	push	{r4, lr}
    3246:	0001      	movs	r1, r0
    if (xSemaphoreTake(sensorOWMutexHandle, waitTime) == pdTRUE) {
    3248:	4b03      	ldr	r3, [pc, #12]	; (3258 <OWGetMutex+0x14>)
    324a:	6818      	ldr	r0, [r3, #0]
    324c:	4b03      	ldr	r3, [pc, #12]	; (325c <OWGetMutex+0x18>)
    324e:	4798      	blx	r3
    3250:	3801      	subs	r0, #1
    3252:	1e43      	subs	r3, r0, #1
    3254:	4198      	sbcs	r0, r3
        return 0;
    } else {
        // Failed to acquire mutex within the wait time
        return 1;
    }
}
    3256:	bd10      	pop	{r4, pc}
    3258:	20004480 	.word	0x20004480
    325c:	000065fd 	.word	0x000065fd

00003260 <__delay_us>:
	sensorTransmitError = value;
 }

void __delay_us(uint32_t microseconds) {

	uint32_t iterations = (microseconds * (8000000 / 1000000)) / 2;
    3260:	00c0      	lsls	r0, r0, #3
    3262:	0840      	lsrs	r0, r0, #1

	for (uint32_t i = 0; i < iterations; ++i) {
    3264:	d004      	beq.n	3270 <__delay_us+0x10>
    3266:	2300      	movs	r3, #0
		asm volatile ("nop");  // No operation
    3268:	46c0      	nop			; (mov r8, r8)
	for (uint32_t i = 0; i < iterations; ++i) {
    326a:	3301      	adds	r3, #1
    326c:	4298      	cmp	r0, r3
    326e:	d1fb      	bne.n	3268 <__delay_us+0x8>
	}
}
    3270:	4770      	bx	lr
	...

00003274 <ds18b20_init>:

void ds18b20_init(void) {
    3274:	b510      	push	{r4, lr}
	// Configure DS18B20 pin as input with pull-up
	PORT->Group[0].PINCFG[DS18B20_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    3276:	4b0a      	ldr	r3, [pc, #40]	; (32a0 <ds18b20_init+0x2c>)
    3278:	2106      	movs	r1, #6
    327a:	2254      	movs	r2, #84	; 0x54
    327c:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].DIRCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    327e:	2280      	movs	r2, #128	; 0x80
    3280:	0352      	lsls	r2, r2, #13
    3282:	605a      	str	r2, [r3, #4]

	sensorOWMutexHandle = xSemaphoreCreateMutex();
    3284:	2001      	movs	r0, #1
    3286:	4b07      	ldr	r3, [pc, #28]	; (32a4 <ds18b20_init+0x30>)
    3288:	4798      	blx	r3
    328a:	4b07      	ldr	r3, [pc, #28]	; (32a8 <ds18b20_init+0x34>)
    328c:	6018      	str	r0, [r3, #0]
	sensorOWSemaphoreHandle = xSemaphoreCreateBinary();
    328e:	2203      	movs	r2, #3
    3290:	2100      	movs	r1, #0
    3292:	2001      	movs	r0, #1
    3294:	4b05      	ldr	r3, [pc, #20]	; (32ac <ds18b20_init+0x38>)
    3296:	4798      	blx	r3
    3298:	4b05      	ldr	r3, [pc, #20]	; (32b0 <ds18b20_init+0x3c>)
    329a:	6018      	str	r0, [r3, #0]
}
    329c:	bd10      	pop	{r4, pc}
    329e:	46c0      	nop			; (mov r8, r8)
    32a0:	41004400 	.word	0x41004400
    32a4:	00005f7d 	.word	0x00005f7d
    32a8:	20004480 	.word	0x20004480
    32ac:	00005b19 	.word	0x00005b19
    32b0:	2000447c 	.word	0x2000447c

000032b4 <release_bus>:
	PORT->Group[0].DIRSET.reg = 1U << (DS18B20_PIN & 0x1F);
}

void release_bus(void) {
	// Configure DS18B20 pin as input without pull-up (allow DS18B20 to pull on the line)
	PORT->Group[0].PINCFG[DS18B20_PIN & 0x1F].reg = PORT_PINCFG_INEN;
    32b4:	4b03      	ldr	r3, [pc, #12]	; (32c4 <release_bus+0x10>)
    32b6:	2102      	movs	r1, #2
    32b8:	2254      	movs	r2, #84	; 0x54
    32ba:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].OUTSET.reg = 1U << (DS18B20_PIN & 0x1F);
    32bc:	2280      	movs	r2, #128	; 0x80
    32be:	0352      	lsls	r2, r2, #13
    32c0:	619a      	str	r2, [r3, #24]
}
    32c2:	4770      	bx	lr
    32c4:	41004400 	.word	0x41004400

000032c8 <writebit>:

//Probably could've implemented HAL after realizing that the problem was the delay function
//but better to have lowest delay using masking
void writebit(uint8_t val) {
    32c8:	b570      	push	{r4, r5, r6, lr}
	switch(val) {
    32ca:	2800      	cmp	r0, #0
    32cc:	d002      	beq.n	32d4 <writebit+0xc>
    32ce:	2801      	cmp	r0, #1
    32d0:	d013      	beq.n	32fa <writebit+0x32>
		break;

		default:
		return;
	}
}
    32d2:	bd70      	pop	{r4, r5, r6, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    32d4:	b672      	cpsid	i
	PORT->Group[0].DIRSET.reg = 1U << (DS18B20_PIN & 0x1F);
    32d6:	4c12      	ldr	r4, [pc, #72]	; (3320 <writebit+0x58>)
    32d8:	2580      	movs	r5, #128	; 0x80
    32da:	036d      	lsls	r5, r5, #13
    32dc:	60a5      	str	r5, [r4, #8]
		PORT->Group[0].OUTCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    32de:	6165      	str	r5, [r4, #20]
		__delay_us(DELAYC);
    32e0:	203c      	movs	r0, #60	; 0x3c
    32e2:	4e10      	ldr	r6, [pc, #64]	; (3324 <writebit+0x5c>)
    32e4:	47b0      	blx	r6
		release_bus();
    32e6:	4b10      	ldr	r3, [pc, #64]	; (3328 <writebit+0x60>)
    32e8:	4798      	blx	r3
		__delay_us(DELAYD);
    32ea:	200a      	movs	r0, #10
    32ec:	47b0      	blx	r6
  __ASM volatile ("cpsie i" : : : "memory");
    32ee:	b662      	cpsie	i
		PORT->Group[0].PINCFG[DS18B20_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    32f0:	2206      	movs	r2, #6
    32f2:	2354      	movs	r3, #84	; 0x54
    32f4:	54e2      	strb	r2, [r4, r3]
		PORT->Group[0].DIRCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    32f6:	6065      	str	r5, [r4, #4]
		break;
    32f8:	e7eb      	b.n	32d2 <writebit+0xa>
  __ASM volatile ("cpsid i" : : : "memory");
    32fa:	b672      	cpsid	i
	PORT->Group[0].DIRSET.reg = 1U << (DS18B20_PIN & 0x1F);
    32fc:	4c08      	ldr	r4, [pc, #32]	; (3320 <writebit+0x58>)
    32fe:	2580      	movs	r5, #128	; 0x80
    3300:	036d      	lsls	r5, r5, #13
    3302:	60a5      	str	r5, [r4, #8]
		PORT->Group[0].OUTCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    3304:	6165      	str	r5, [r4, #20]
		__delay_us(DELAYA);
    3306:	2006      	movs	r0, #6
    3308:	4e06      	ldr	r6, [pc, #24]	; (3324 <writebit+0x5c>)
    330a:	47b0      	blx	r6
		release_bus();
    330c:	4b06      	ldr	r3, [pc, #24]	; (3328 <writebit+0x60>)
    330e:	4798      	blx	r3
		__delay_us(DELAYB);
    3310:	2040      	movs	r0, #64	; 0x40
    3312:	47b0      	blx	r6
  __ASM volatile ("cpsie i" : : : "memory");
    3314:	b662      	cpsie	i
		PORT->Group[0].PINCFG[DS18B20_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    3316:	2206      	movs	r2, #6
    3318:	2354      	movs	r3, #84	; 0x54
    331a:	54e2      	strb	r2, [r4, r3]
		PORT->Group[0].DIRCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    331c:	6065      	str	r5, [r4, #4]
		break;
    331e:	e7d8      	b.n	32d2 <writebit+0xa>
    3320:	41004400 	.word	0x41004400
    3324:	00003261 	.word	0x00003261
    3328:	000032b5 	.word	0x000032b5

0000332c <readbit>:

uint8_t readbit(void) {
    332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    332e:	b662      	cpsie	i
	PORT->Group[0].DIRSET.reg = 1U << (DS18B20_PIN & 0x1F);
    3330:	4d0b      	ldr	r5, [pc, #44]	; (3360 <readbit+0x34>)
    3332:	2680      	movs	r6, #128	; 0x80
    3334:	0376      	lsls	r6, r6, #13
    3336:	60ae      	str	r6, [r5, #8]
	uint8_t bit;
	// Enable interrupts
	__enable_irq();
	configure_out();
	PORT->Group[0].OUTCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    3338:	616e      	str	r6, [r5, #20]
	__delay_us(DELAYA);
    333a:	2006      	movs	r0, #6
    333c:	4f09      	ldr	r7, [pc, #36]	; (3364 <readbit+0x38>)
    333e:	47b8      	blx	r7
	release_bus();
    3340:	4b09      	ldr	r3, [pc, #36]	; (3368 <readbit+0x3c>)
    3342:	4798      	blx	r3
	__delay_us(DELAYE);
    3344:	2009      	movs	r0, #9
    3346:	47b8      	blx	r7
	bit = (PORT->Group[0].IN.reg >> (DS18B20_PIN & 0x1F)) & 1U;
    3348:	6a2c      	ldr	r4, [r5, #32]
	__delay_us(DELAYF);
    334a:	2037      	movs	r0, #55	; 0x37
    334c:	47b8      	blx	r7
    334e:	b662      	cpsie	i
	// Enable interrupts
	__enable_irq();
	PORT->Group[0].PINCFG[DS18B20_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    3350:	2206      	movs	r2, #6
    3352:	2354      	movs	r3, #84	; 0x54
    3354:	54ea      	strb	r2, [r5, r3]
	PORT->Group[0].DIRCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    3356:	606e      	str	r6, [r5, #4]
	bit = (PORT->Group[0].IN.reg >> (DS18B20_PIN & 0x1F)) & 1U;
    3358:	02e0      	lsls	r0, r4, #11
	return bit;
    335a:	0fc0      	lsrs	r0, r0, #31
}
    335c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    335e:	46c0      	nop			; (mov r8, r8)
    3360:	41004400 	.word	0x41004400
    3364:	00003261 	.word	0x00003261
    3368:	000032b5 	.word	0x000032b5

0000336c <reset_detect>:

bool reset_detect(void) {
    336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    336e:	b672      	cpsid	i
	PORT->Group[0].DIRSET.reg = 1U << (DS18B20_PIN & 0x1F);
    3370:	4d0c      	ldr	r5, [pc, #48]	; (33a4 <reset_detect+0x38>)
    3372:	2680      	movs	r6, #128	; 0x80
    3374:	0376      	lsls	r6, r6, #13
    3376:	60ae      	str	r6, [r5, #8]
	bool exist;
	// Disable interrupts
	__disable_irq();
	configure_out();
	PORT->Group[0].OUTCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    3378:	616e      	str	r6, [r5, #20]
	__delay_us(DELAYH);
    337a:	20f0      	movs	r0, #240	; 0xf0
    337c:	0040      	lsls	r0, r0, #1
    337e:	4f0a      	ldr	r7, [pc, #40]	; (33a8 <reset_detect+0x3c>)
    3380:	47b8      	blx	r7
	release_bus();
    3382:	4b0a      	ldr	r3, [pc, #40]	; (33ac <reset_detect+0x40>)
    3384:	4798      	blx	r3
	__delay_us(DELAYI);
    3386:	2046      	movs	r0, #70	; 0x46
    3388:	47b8      	blx	r7
	exist = (PORT->Group[0].IN.reg >> (DS18B20_PIN & 0x1F)) & 1U;
    338a:	6a2c      	ldr	r4, [r5, #32]
	__delay_us(DELAYJ);
    338c:	20cd      	movs	r0, #205	; 0xcd
    338e:	0040      	lsls	r0, r0, #1
    3390:	47b8      	blx	r7
  __ASM volatile ("cpsie i" : : : "memory");
    3392:	b662      	cpsie	i
	// Enable interrupts
	__enable_irq();
	PORT->Group[0].PINCFG[DS18B20_PIN & 0x1F].reg = PORT_PINCFG_INEN | PORT_PINCFG_PULLEN;
    3394:	2206      	movs	r2, #6
    3396:	2354      	movs	r3, #84	; 0x54
    3398:	54ea      	strb	r2, [r5, r3]
	PORT->Group[0].DIRCLR.reg = 1U << (DS18B20_PIN & 0x1F);
    339a:	606e      	str	r6, [r5, #4]
	exist = (PORT->Group[0].IN.reg >> (DS18B20_PIN & 0x1F)) & 1U;
    339c:	02e0      	lsls	r0, r4, #11
	return exist;
    339e:	0fc0      	lsrs	r0, r0, #31
}
    33a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33a2:	46c0      	nop			; (mov r8, r8)
    33a4:	41004400 	.word	0x41004400
    33a8:	00003261 	.word	0x00003261
    33ac:	000032b5 	.word	0x000032b5

000033b0 <write_byte>:

void write_byte(uint8_t byte) {
    33b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33b2:	0005      	movs	r5, r0
    33b4:	2408      	movs	r4, #8
	for(int i = 0; i < 8; i++) {
		writebit(byte & 0x01);
    33b6:	2701      	movs	r7, #1
    33b8:	4e05      	ldr	r6, [pc, #20]	; (33d0 <write_byte+0x20>)
    33ba:	0038      	movs	r0, r7
    33bc:	4028      	ands	r0, r5
    33be:	47b0      	blx	r6
		byte >>= 1;
    33c0:	086d      	lsrs	r5, r5, #1
    33c2:	3c01      	subs	r4, #1
	for(int i = 0; i < 8; i++) {
    33c4:	2c00      	cmp	r4, #0
    33c6:	d1f8      	bne.n	33ba <write_byte+0xa>
	}
	OWSensorsTxComplete();
    33c8:	4b02      	ldr	r3, [pc, #8]	; (33d4 <write_byte+0x24>)
    33ca:	4798      	blx	r3
}
    33cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33ce:	46c0      	nop			; (mov r8, r8)
    33d0:	000032c9 	.word	0x000032c9
    33d4:	000031b5 	.word	0x000031b5

000033d8 <read_byte>:

uint8_t read_byte(void) {
    33d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t byte = 0;
	for(int i = 0; i < 8; i++) {
    33da:	2400      	movs	r4, #0
	uint8_t byte = 0;
    33dc:	2500      	movs	r5, #0
		if(readbit()) {
    33de:	4e09      	ldr	r6, [pc, #36]	; (3404 <read_byte+0x2c>)
			//simple shift and or bit into byte
			byte |= (0x01 << i);
    33e0:	2701      	movs	r7, #1
    33e2:	e002      	b.n	33ea <read_byte+0x12>
	for(int i = 0; i < 8; i++) {
    33e4:	3401      	adds	r4, #1
    33e6:	2c08      	cmp	r4, #8
    33e8:	d007      	beq.n	33fa <read_byte+0x22>
		if(readbit()) {
    33ea:	47b0      	blx	r6
    33ec:	2800      	cmp	r0, #0
    33ee:	d0f9      	beq.n	33e4 <read_byte+0xc>
			byte |= (0x01 << i);
    33f0:	003b      	movs	r3, r7
    33f2:	40a3      	lsls	r3, r4
    33f4:	431d      	orrs	r5, r3
    33f6:	b2ed      	uxtb	r5, r5
    33f8:	e7f4      	b.n	33e4 <read_byte+0xc>
		}
	}
	OWSensorsRxComplete();
    33fa:	4b03      	ldr	r3, [pc, #12]	; (3408 <read_byte+0x30>)
    33fc:	4798      	blx	r3
	return byte;
}
    33fe:	0028      	movs	r0, r5
    3400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3402:	46c0      	nop			; (mov r8, r8)
    3404:	0000332d 	.word	0x0000332d
    3408:	000031ed 	.word	0x000031ed

0000340c <OWWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t OWWriteDataWait(uint8_t data, const TickType_t xMaxBlockTime){
    340c:	b570      	push	{r4, r5, r6, lr}
    340e:	0005      	movs	r5, r0
    3410:	000c      	movs	r4, r1
	int32_t ERROR_NONE = 0;

	SemaphoreHandle_t semHandle = NULL;

	//---0. Get Mutex
	error = OWGetMutex(xMaxBlockTime);
    3412:	0008      	movs	r0, r1
    3414:	4b0f      	ldr	r3, [pc, #60]	; (3454 <OWWriteDataWait+0x48>)
    3416:	4798      	blx	r3
	if(ERROR_NONE != error) goto exit;
    3418:	2800      	cmp	r0, #0
    341a:	d000      	beq.n	341e <OWWriteDataWait+0x12>

	exitError0:
	OWFreeMutex();

	return error;
}
    341c:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorOWSemaphoreHandle;
    341e:	4b0e      	ldr	r3, [pc, #56]	; (3458 <OWWriteDataWait+0x4c>)
    3420:	681e      	ldr	r6, [r3, #0]
	write_byte(data);
    3422:	0028      	movs	r0, r5
    3424:	4b0d      	ldr	r3, [pc, #52]	; (345c <OWWriteDataWait+0x50>)
    3426:	4798      	blx	r3
	if(xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE){
    3428:	0021      	movs	r1, r4
    342a:	0030      	movs	r0, r6
    342c:	4b0c      	ldr	r3, [pc, #48]	; (3460 <OWWriteDataWait+0x54>)
    342e:	4798      	blx	r3
    3430:	2801      	cmp	r0, #1
    3432:	d003      	beq.n	343c <OWWriteDataWait+0x30>
	OWFreeMutex();
    3434:	4b0b      	ldr	r3, [pc, #44]	; (3464 <OWWriteDataWait+0x58>)
    3436:	4798      	blx	r3
	return error;
    3438:	2001      	movs	r0, #1
    343a:	e7ef      	b.n	341c <OWWriteDataWait+0x10>
	 return sensorTransmitError;
    343c:	4b0a      	ldr	r3, [pc, #40]	; (3468 <OWWriteDataWait+0x5c>)
		if(OWGetTaskErrorStatus()){
    343e:	781b      	ldrb	r3, [r3, #0]
    3440:	2b00      	cmp	r3, #0
    3442:	d003      	beq.n	344c <OWWriteDataWait+0x40>
	sensorTransmitError = value;
    3444:	2200      	movs	r2, #0
    3446:	4b08      	ldr	r3, [pc, #32]	; (3468 <OWWriteDataWait+0x5c>)
    3448:	701a      	strb	r2, [r3, #0]
    344a:	e7f3      	b.n	3434 <OWWriteDataWait+0x28>
	error |= OWFreeMutex();
    344c:	4b05      	ldr	r3, [pc, #20]	; (3464 <OWWriteDataWait+0x58>)
    344e:	4798      	blx	r3
    3450:	e7e4      	b.n	341c <OWWriteDataWait+0x10>
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	00003245 	.word	0x00003245
    3458:	2000447c 	.word	0x2000447c
    345c:	000033b1 	.word	0x000033b1
    3460:	000065fd 	.word	0x000065fd
    3464:	00003225 	.word	0x00003225
    3468:	20000954 	.word	0x20000954

0000346c <OWReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int8_t OWReadDataWait(const TickType_t delay, const TickType_t xMaxBlockTime){
    346c:	b570      	push	{r4, r5, r6, lr}
    346e:	000d      	movs	r5, r1
	int32_t ERROR_NONE = 0;
	uint8_t byte = 0;
    SemaphoreHandle_t semHandle = NULL;

    //---0. Get Mutex
    error = OWGetMutex(xMaxBlockTime);
    3470:	0008      	movs	r0, r1
    3472:	4b10      	ldr	r3, [pc, #64]	; (34b4 <OWReadDataWait+0x48>)
    3474:	4798      	blx	r3
	uint8_t byte = 0;
    3476:	2400      	movs	r4, #0
    if(ERROR_NONE != error) goto exit;
    3478:	2800      	cmp	r0, #0
    347a:	d001      	beq.n	3480 <OWReadDataWait+0x14>
    //---7. Release Mutex
    OWFreeMutex();
    goto exit;

exit:
    return byte;
    347c:	b260      	sxtb	r0, r4

exitError0:
    OWFreeMutex();
    return error;
    347e:	bd70      	pop	{r4, r5, r6, pc}
	*handle = sensorOWSemaphoreHandle;
    3480:	4b0d      	ldr	r3, [pc, #52]	; (34b8 <OWReadDataWait+0x4c>)
    3482:	681e      	ldr	r6, [r3, #0]
    byte = read_byte();
    3484:	4b0d      	ldr	r3, [pc, #52]	; (34bc <OWReadDataWait+0x50>)
    3486:	4798      	blx	r3
    3488:	0004      	movs	r4, r0
    if( xSemaphoreTake( semHandle, xMaxBlockTime ) != pdTRUE ){
    348a:	0029      	movs	r1, r5
    348c:	0030      	movs	r0, r6
    348e:	4b0c      	ldr	r3, [pc, #48]	; (34c0 <OWReadDataWait+0x54>)
    3490:	4798      	blx	r3
    3492:	2801      	cmp	r0, #1
    3494:	d003      	beq.n	349e <OWReadDataWait+0x32>
    OWFreeMutex();
    3496:	4b0b      	ldr	r3, [pc, #44]	; (34c4 <OWReadDataWait+0x58>)
    3498:	4798      	blx	r3
    return error;
    349a:	2001      	movs	r0, #1
    349c:	e7ef      	b.n	347e <OWReadDataWait+0x12>
	 return sensorTransmitError;
    349e:	4b0a      	ldr	r3, [pc, #40]	; (34c8 <OWReadDataWait+0x5c>)
    if(OWGetTaskErrorStatus()){
    34a0:	781b      	ldrb	r3, [r3, #0]
    34a2:	2b00      	cmp	r3, #0
    34a4:	d003      	beq.n	34ae <OWReadDataWait+0x42>
	sensorTransmitError = value;
    34a6:	2200      	movs	r2, #0
    34a8:	4b07      	ldr	r3, [pc, #28]	; (34c8 <OWReadDataWait+0x5c>)
    34aa:	701a      	strb	r2, [r3, #0]
    34ac:	e7f3      	b.n	3496 <OWReadDataWait+0x2a>
    OWFreeMutex();
    34ae:	4b05      	ldr	r3, [pc, #20]	; (34c4 <OWReadDataWait+0x58>)
    34b0:	4798      	blx	r3
    goto exit;
    34b2:	e7e3      	b.n	347c <OWReadDataWait+0x10>
    34b4:	00003245 	.word	0x00003245
    34b8:	2000447c 	.word	0x2000447c
    34bc:	000033d9 	.word	0x000033d9
    34c0:	000065fd 	.word	0x000065fd
    34c4:	00003225 	.word	0x00003225
    34c8:	20000954 	.word	0x20000954

000034cc <ds18b20_start_conversion>:
#include "FreeRTOS.h"
#include "semphr.h"

static SemaphoreHandle_t OWSemaphore;

void ds18b20_start_conversion(void) {
    34cc:	b570      	push	{r4, r5, r6, lr}
	
	reset_detect();
    34ce:	4b06      	ldr	r3, [pc, #24]	; (34e8 <ds18b20_start_conversion+0x1c>)
    34d0:	4798      	blx	r3
	OWWriteDataWait(DS18B20_CMD_SKIPROM,portMAX_DELAY);
    34d2:	2501      	movs	r5, #1
    34d4:	426d      	negs	r5, r5
    34d6:	0029      	movs	r1, r5
    34d8:	20cc      	movs	r0, #204	; 0xcc
    34da:	4c04      	ldr	r4, [pc, #16]	; (34ec <ds18b20_start_conversion+0x20>)
    34dc:	47a0      	blx	r4
	OWWriteDataWait(DS18B20_CMD_CONVTEMP,portMAX_DELAY);
    34de:	0029      	movs	r1, r5
    34e0:	2044      	movs	r0, #68	; 0x44
    34e2:	47a0      	blx	r4
// 	write_byte(DS18B20_CMD_SKIPROM);
// 	write_byte(DS18B20_CMD_CONVTEMP);
	
}
    34e4:	bd70      	pop	{r4, r5, r6, pc}
    34e6:	46c0      	nop			; (mov r8, r8)
    34e8:	0000336d 	.word	0x0000336d
    34ec:	0000340d 	.word	0x0000340d

000034f0 <ds18b20_read_temp>:

uint16_t ds18b20_read_temp(void) {
    34f0:	b570      	push	{r4, r5, r6, lr}
	reset_detect();
    34f2:	4b0c      	ldr	r3, [pc, #48]	; (3524 <ds18b20_read_temp+0x34>)
    34f4:	4798      	blx	r3
	OWWriteDataWait(DS18B20_CMD_SKIPROM,portMAX_DELAY);
    34f6:	2501      	movs	r5, #1
    34f8:	426d      	negs	r5, r5
    34fa:	0029      	movs	r1, r5
    34fc:	20cc      	movs	r0, #204	; 0xcc
    34fe:	4c0a      	ldr	r4, [pc, #40]	; (3528 <ds18b20_read_temp+0x38>)
    3500:	47a0      	blx	r4
	OWWriteDataWait(DS18B20_CMD_READSCRATCH,portMAX_DELAY);
    3502:	0029      	movs	r1, r5
    3504:	20be      	movs	r0, #190	; 0xbe
    3506:	47a0      	blx	r4
	
	uint8_t lsb = OWReadDataWait(0,portMAX_DELAY);
    3508:	0029      	movs	r1, r5
    350a:	2000      	movs	r0, #0
    350c:	4e07      	ldr	r6, [pc, #28]	; (352c <ds18b20_read_temp+0x3c>)
    350e:	47b0      	blx	r6
    3510:	0004      	movs	r4, r0
	uint8_t msb = OWReadDataWait(0,portMAX_DELAY);
    3512:	0029      	movs	r1, r5
    3514:	2000      	movs	r0, #0
    3516:	47b0      	blx	r6

	uint16_t raw_temp = (msb << 8) | lsb;
    3518:	b2c3      	uxtb	r3, r0
    351a:	021b      	lsls	r3, r3, #8
    351c:	b2e0      	uxtb	r0, r4
	
	return raw_temp;
    351e:	4318      	orrs	r0, r3
    3520:	bd70      	pop	{r4, r5, r6, pc}
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	0000336d 	.word	0x0000336d
    3528:	0000340d 	.word	0x0000340d
    352c:	0000346d 	.word	0x0000346d

00003530 <distUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
    3530:	b500      	push	{lr}
    3532:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    3534:	2300      	movs	r3, #0
    3536:	9301      	str	r3, [sp, #4]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
    3538:	4b06      	ldr	r3, [pc, #24]	; (3554 <distUsartWritecallback+0x24>)
    353a:	6818      	ldr	r0, [r3, #0]
    353c:	a901      	add	r1, sp, #4
    353e:	4b06      	ldr	r3, [pc, #24]	; (3558 <distUsartWritecallback+0x28>)
    3540:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	2b00      	cmp	r3, #0
    3546:	d003      	beq.n	3550 <distUsartWritecallback+0x20>
    3548:	2280      	movs	r2, #128	; 0x80
    354a:	0552      	lsls	r2, r2, #21
    354c:	4b03      	ldr	r3, [pc, #12]	; (355c <distUsartWritecallback+0x2c>)
    354e:	601a      	str	r2, [r3, #0]
}
    3550:	b003      	add	sp, #12
    3552:	bd00      	pop	{pc}
    3554:	20004488 	.word	0x20004488
    3558:	000062e1 	.word	0x000062e1
    355c:	e000ed04 	.word	0xe000ed04

00003560 <distUsartReadcallback>:
// Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
    3560:	b500      	push	{lr}
    3562:	b083      	sub	sp, #12
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    3564:	2300      	movs	r3, #0
    3566:	9301      	str	r3, [sp, #4]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
    3568:	4b06      	ldr	r3, [pc, #24]	; (3584 <distUsartReadcallback+0x24>)
    356a:	6818      	ldr	r0, [r3, #0]
    356c:	a901      	add	r1, sp, #4
    356e:	4b06      	ldr	r3, [pc, #24]	; (3588 <distUsartReadcallback+0x28>)
    3570:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    3572:	9b01      	ldr	r3, [sp, #4]
    3574:	2b00      	cmp	r3, #0
    3576:	d003      	beq.n	3580 <distUsartReadcallback+0x20>
    3578:	2280      	movs	r2, #128	; 0x80
    357a:	0552      	lsls	r2, r2, #21
    357c:	4b03      	ldr	r3, [pc, #12]	; (358c <distUsartReadcallback+0x2c>)
    357e:	601a      	str	r2, [r3, #0]
}
    3580:	b003      	add	sp, #12
    3582:	bd00      	pop	{pc}
    3584:	20004488 	.word	0x20004488
    3588:	000062e1 	.word	0x000062e1
    358c:	e000ed04 	.word	0xe000ed04

00003590 <InitializeDistanceSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeDistanceSensor(void)
{
    3590:	b530      	push	{r4, r5, lr}
    3592:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3594:	2380      	movs	r3, #128	; 0x80
    3596:	05db      	lsls	r3, r3, #23
    3598:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    359a:	2300      	movs	r3, #0
    359c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    359e:	22ff      	movs	r2, #255	; 0xff
    35a0:	4669      	mov	r1, sp
    35a2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    35a4:	2200      	movs	r2, #0
    35a6:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    35a8:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    35aa:	2196      	movs	r1, #150	; 0x96
    35ac:	0189      	lsls	r1, r1, #6
    35ae:	9108      	str	r1, [sp, #32]
	config->receiver_enable  = true;
    35b0:	2101      	movs	r1, #1
    35b2:	2024      	movs	r0, #36	; 0x24
    35b4:	466c      	mov	r4, sp
    35b6:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    35b8:	3001      	adds	r0, #1
    35ba:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    35bc:	3125      	adds	r1, #37	; 0x25
    35be:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    35c0:	3101      	adds	r1, #1
    35c2:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    35c4:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    35c6:	3105      	adds	r1, #5
    35c8:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    35ca:	3101      	adds	r1, #1
    35cc:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
    35ce:	930e      	str	r3, [sp, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    35d0:	930f      	str	r3, [sp, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    35d2:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    35d4:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    35d6:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    35d8:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    35da:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    35dc:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    35de:	2313      	movs	r3, #19
    35e0:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    35e2:	7762      	strb	r2, [r4, #29]
{
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);

    config_usart.baudrate = 9600;
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    35e4:	2380      	movs	r3, #128	; 0x80
    35e6:	035b      	lsls	r3, r3, #13
    35e8:	9303      	str	r3, [sp, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;
    35ea:	4b22      	ldr	r3, [pc, #136]	; (3674 <InitializeDistanceSensor+0xe4>)
    35ec:	930c      	str	r3, [sp, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;
    35ee:	4b22      	ldr	r3, [pc, #136]	; (3678 <InitializeDistanceSensor+0xe8>)
    35f0:	930d      	str	r3, [sp, #52]	; 0x34
    //config_usart.pinmux_pad3 = PINMUX_UNUSED;
	
	//config_usart.pinmux_pad2 = PINMUX_PA20D_SERCOM5_PAD2;
    //config_usart.pinmux_pad3 = PINMUX_PA21D_SERCOM5_PAD3; '

    while (usart_init(&usart_instance_dist, SERCOM5, &config_usart) != STATUS_OK) {
    35f2:	4d22      	ldr	r5, [pc, #136]	; (367c <InitializeDistanceSensor+0xec>)
    35f4:	4c22      	ldr	r4, [pc, #136]	; (3680 <InitializeDistanceSensor+0xf0>)
    35f6:	466a      	mov	r2, sp
    35f8:	4922      	ldr	r1, [pc, #136]	; (3684 <InitializeDistanceSensor+0xf4>)
    35fa:	0028      	movs	r0, r5
    35fc:	47a0      	blx	r4
    35fe:	2800      	cmp	r0, #0
    3600:	d1f9      	bne.n	35f6 <InitializeDistanceSensor+0x66>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3602:	4d1e      	ldr	r5, [pc, #120]	; (367c <InitializeDistanceSensor+0xec>)
    3604:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3606:	0020      	movs	r0, r4
    3608:	4b1f      	ldr	r3, [pc, #124]	; (3688 <InitializeDistanceSensor+0xf8>)
    360a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    360c:	231f      	movs	r3, #31
    360e:	4018      	ands	r0, r3
    3610:	3b1e      	subs	r3, #30
    3612:	4083      	lsls	r3, r0
    3614:	4a1d      	ldr	r2, [pc, #116]	; (368c <InitializeDistanceSensor+0xfc>)
    3616:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3618:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    361a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    361c:	2b00      	cmp	r3, #0
    361e:	d1fc      	bne.n	361a <InitializeDistanceSensor+0x8a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3620:	6823      	ldr	r3, [r4, #0]
    3622:	2202      	movs	r2, #2
    3624:	4313      	orrs	r3, r2
    3626:	6023      	str	r3, [r4, #0]
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
    usart_register_callback(&usart_instance_dist, distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
    3628:	4c14      	ldr	r4, [pc, #80]	; (367c <InitializeDistanceSensor+0xec>)
    362a:	2200      	movs	r2, #0
    362c:	4918      	ldr	r1, [pc, #96]	; (3690 <InitializeDistanceSensor+0x100>)
    362e:	0020      	movs	r0, r4
    3630:	4d18      	ldr	r5, [pc, #96]	; (3694 <InitializeDistanceSensor+0x104>)
    3632:	47a8      	blx	r5
    usart_register_callback(&usart_instance_dist, distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
    3634:	2201      	movs	r2, #1
    3636:	4918      	ldr	r1, [pc, #96]	; (3698 <InitializeDistanceSensor+0x108>)
    3638:	0020      	movs	r0, r4
    363a:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    363c:	2231      	movs	r2, #49	; 0x31
    363e:	5ca3      	ldrb	r3, [r4, r2]
    3640:	2103      	movs	r1, #3
    3642:	430b      	orrs	r3, r1
    3644:	54a3      	strb	r3, [r4, r2]
    sensorDistanceMutexHandle = xSemaphoreCreateMutex();
    3646:	2001      	movs	r0, #1
    3648:	4b14      	ldr	r3, [pc, #80]	; (369c <InitializeDistanceSensor+0x10c>)
    364a:	4798      	blx	r3
    364c:	4c14      	ldr	r4, [pc, #80]	; (36a0 <InitializeDistanceSensor+0x110>)
    364e:	6020      	str	r0, [r4, #0]
    sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
    3650:	2203      	movs	r2, #3
    3652:	2100      	movs	r1, #0
    3654:	2001      	movs	r0, #1
    3656:	4b13      	ldr	r3, [pc, #76]	; (36a4 <InitializeDistanceSensor+0x114>)
    3658:	4798      	blx	r3
    365a:	4b13      	ldr	r3, [pc, #76]	; (36a8 <InitializeDistanceSensor+0x118>)
    365c:	6018      	str	r0, [r3, #0]
    if (NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle) {
    365e:	6823      	ldr	r3, [r4, #0]
    3660:	2b00      	cmp	r3, #0
    3662:	d003      	beq.n	366c <InitializeDistanceSensor+0xdc>
    3664:	2800      	cmp	r0, #0
    3666:	d001      	beq.n	366c <InitializeDistanceSensor+0xdc>
}
    3668:	b011      	add	sp, #68	; 0x44
    366a:	bd30      	pop	{r4, r5, pc}
        SerialConsoleWriteString((char *)"Could not initialize Distance Sensor!");
    366c:	480f      	ldr	r0, [pc, #60]	; (36ac <InitializeDistanceSensor+0x11c>)
    366e:	4b10      	ldr	r3, [pc, #64]	; (36b0 <InitializeDistanceSensor+0x120>)
    3670:	4798      	blx	r3
}
    3672:	e7f9      	b.n	3668 <InitializeDistanceSensor+0xd8>
    3674:	00220003 	.word	0x00220003
    3678:	00230003 	.word	0x00230003
    367c:	20004490 	.word	0x20004490
    3680:	0000d451 	.word	0x0000d451
    3684:	42001c00 	.word	0x42001c00
    3688:	0000cccd 	.word	0x0000cccd
    368c:	e000e100 	.word	0xe000e100
    3690:	00003531 	.word	0x00003531
    3694:	0000d821 	.word	0x0000d821
    3698:	00003561 	.word	0x00003561
    369c:	00005f7d 	.word	0x00005f7d
    36a0:	2000448c 	.word	0x2000448c
    36a4:	00005b19 	.word	0x00005b19
    36a8:	20004488 	.word	0x20004488
    36ac:	00016dbc 	.word	0x00016dbc
    36b0:	00007efd 	.word	0x00007efd

000036b4 <DistanceSensorGetDistance>:
{
    36b4:	b570      	push	{r4, r5, r6, lr}
    36b6:	0006      	movs	r6, r0
    36b8:	000d      	movs	r5, r1
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
    int32_t error = ERROR_NONE;
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
    36ba:	4b1f      	ldr	r3, [pc, #124]	; (3738 <DistanceSensorGetDistance+0x84>)
    36bc:	6818      	ldr	r0, [r3, #0]
    36be:	2196      	movs	r1, #150	; 0x96
    36c0:	0049      	lsls	r1, r1, #1
    36c2:	4b1e      	ldr	r3, [pc, #120]	; (373c <DistanceSensorGetDistance+0x88>)
    36c4:	4798      	blx	r3
    36c6:	2801      	cmp	r0, #1
    36c8:	d12d      	bne.n	3726 <DistanceSensorGetDistance+0x72>
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
    36ca:	491d      	ldr	r1, [pc, #116]	; (3740 <DistanceSensorGetDistance+0x8c>)
    36cc:	2355      	movs	r3, #85	; 0x55
    36ce:	700b      	strb	r3, [r1, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
    36d0:	2201      	movs	r2, #1
    36d2:	481c      	ldr	r0, [pc, #112]	; (3744 <DistanceSensorGetDistance+0x90>)
    36d4:	4b1c      	ldr	r3, [pc, #112]	; (3748 <DistanceSensorGetDistance+0x94>)
    36d6:	4798      	blx	r3
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
    36d8:	2400      	movs	r4, #0
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
    36da:	2800      	cmp	r0, #0
    36dc:	d008      	beq.n	36f0 <DistanceSensorGetDistance+0x3c>
    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
    36de:	4b16      	ldr	r3, [pc, #88]	; (3738 <DistanceSensorGetDistance+0x84>)
    36e0:	6818      	ldr	r0, [r3, #0]
    36e2:	2300      	movs	r3, #0
    36e4:	2200      	movs	r2, #0
    36e6:	2100      	movs	r1, #0
    36e8:	4d18      	ldr	r5, [pc, #96]	; (374c <DistanceSensorGetDistance+0x98>)
    36ea:	47a8      	blx	r5
}
    36ec:	0020      	movs	r0, r4
    36ee:	bd70      	pop	{r4, r5, r6, pc}
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
    36f0:	4b17      	ldr	r3, [pc, #92]	; (3750 <DistanceSensorGetDistance+0x9c>)
    36f2:	6818      	ldr	r0, [r3, #0]
    36f4:	0029      	movs	r1, r5
    36f6:	4b11      	ldr	r3, [pc, #68]	; (373c <DistanceSensorGetDistance+0x88>)
    36f8:	4798      	blx	r3
    36fa:	2801      	cmp	r0, #1
    36fc:	d116      	bne.n	372c <DistanceSensorGetDistance+0x78>
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
    36fe:	2202      	movs	r2, #2
    3700:	4914      	ldr	r1, [pc, #80]	; (3754 <DistanceSensorGetDistance+0xa0>)
    3702:	4810      	ldr	r0, [pc, #64]	; (3744 <DistanceSensorGetDistance+0x90>)
    3704:	4b14      	ldr	r3, [pc, #80]	; (3758 <DistanceSensorGetDistance+0xa4>)
    3706:	4798      	blx	r3
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
    3708:	4b11      	ldr	r3, [pc, #68]	; (3750 <DistanceSensorGetDistance+0x9c>)
    370a:	6818      	ldr	r0, [r3, #0]
    370c:	0029      	movs	r1, r5
    370e:	4b0b      	ldr	r3, [pc, #44]	; (373c <DistanceSensorGetDistance+0x88>)
    3710:	4798      	blx	r3
    3712:	2801      	cmp	r0, #1
    3714:	d10d      	bne.n	3732 <DistanceSensorGetDistance+0x7e>
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
    3716:	490f      	ldr	r1, [pc, #60]	; (3754 <DistanceSensorGetDistance+0xa0>)
    3718:	780a      	ldrb	r2, [r1, #0]
    371a:	0212      	lsls	r2, r2, #8
    371c:	784b      	ldrb	r3, [r1, #1]
    371e:	189b      	adds	r3, r3, r2
    3720:	8033      	strh	r3, [r6, #0]
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
    3722:	2400      	movs	r4, #0
    3724:	e7db      	b.n	36de <DistanceSensorGetDistance+0x2a>
        error = ERROR_NOT_READY;
    3726:	241d      	movs	r4, #29
    3728:	4264      	negs	r4, r4
    372a:	e7d8      	b.n	36de <DistanceSensorGetDistance+0x2a>
        error = ERR_TIMEOUT;
    372c:	2403      	movs	r4, #3
    372e:	4264      	negs	r4, r4
    3730:	e7d5      	b.n	36de <DistanceSensorGetDistance+0x2a>
        error = ERR_TIMEOUT;
    3732:	2403      	movs	r4, #3
    3734:	4264      	negs	r4, r4
    3736:	e7d2      	b.n	36de <DistanceSensorGetDistance+0x2a>
    3738:	2000448c 	.word	0x2000448c
    373c:	000065fd 	.word	0x000065fd
    3740:	20004486 	.word	0x20004486
    3744:	20004490 	.word	0x20004490
    3748:	0000d839 	.word	0x0000d839
    374c:	00005c55 	.word	0x00005c55
    3750:	20004488 	.word	0x20004488
    3754:	20004484 	.word	0x20004484
    3758:	0000d859 	.word	0x0000d859

0000375c <I2cSensorsTxComplete>:
				and is currently waiting for a notification that it has finished.
 * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsTxComplete(struct i2c_master_module *const module){
    375c:	b510      	push	{r4, lr}
    375e:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;			
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    3760:	2400      	movs	r4, #0
    3762:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    3764:	4b07      	ldr	r3, [pc, #28]	; (3784 <I2cSensorsTxComplete+0x28>)
    3766:	6818      	ldr	r0, [r3, #0]
    3768:	a901      	add	r1, sp, #4
    376a:	4b07      	ldr	r3, [pc, #28]	; (3788 <I2cSensorsTxComplete+0x2c>)
    376c:	4798      	blx	r3
	sensorTransmitError = false;
    376e:	4b07      	ldr	r3, [pc, #28]	; (378c <I2cSensorsTxComplete+0x30>)
    3770:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    3772:	9b01      	ldr	r3, [sp, #4]
    3774:	2b00      	cmp	r3, #0
    3776:	d003      	beq.n	3780 <I2cSensorsTxComplete+0x24>
    3778:	2280      	movs	r2, #128	; 0x80
    377a:	0552      	lsls	r2, r2, #21
    377c:	4b04      	ldr	r3, [pc, #16]	; (3790 <I2cSensorsTxComplete+0x34>)
    377e:	601a      	str	r2, [r3, #0]
}
    3780:	b002      	add	sp, #8
    3782:	bd10      	pop	{r4, pc}
    3784:	200044c8 	.word	0x200044c8
    3788:	000062e1 	.word	0x000062e1
    378c:	20000955 	.word	0x20000955
    3790:	e000ed04 	.word	0xe000ed04

00003794 <I2cSensorsRxComplete>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsRxComplete(struct i2c_master_module *const module){
    3794:	b510      	push	{r4, lr}
    3796:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.rxDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    3798:	2400      	movs	r4, #0
    379a:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    379c:	4b07      	ldr	r3, [pc, #28]	; (37bc <I2cSensorsRxComplete+0x28>)
    379e:	6818      	ldr	r0, [r3, #0]
    37a0:	a901      	add	r1, sp, #4
    37a2:	4b07      	ldr	r3, [pc, #28]	; (37c0 <I2cSensorsRxComplete+0x2c>)
    37a4:	4798      	blx	r3
	sensorTransmitError = false;
    37a6:	4b07      	ldr	r3, [pc, #28]	; (37c4 <I2cSensorsRxComplete+0x30>)
    37a8:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    37aa:	9b01      	ldr	r3, [sp, #4]
    37ac:	2b00      	cmp	r3, #0
    37ae:	d003      	beq.n	37b8 <I2cSensorsRxComplete+0x24>
    37b0:	2280      	movs	r2, #128	; 0x80
    37b2:	0552      	lsls	r2, r2, #21
    37b4:	4b04      	ldr	r3, [pc, #16]	; (37c8 <I2cSensorsRxComplete+0x34>)
    37b6:	601a      	str	r2, [r3, #0]
}
    37b8:	b002      	add	sp, #8
    37ba:	bd10      	pop	{r4, pc}
    37bc:	200044c8 	.word	0x200044c8
    37c0:	000062e1 	.word	0x000062e1
    37c4:	20000955 	.word	0x20000955
    37c8:	e000ed04 	.word	0xe000ed04

000037cc <I2cSensorsError>:
					and is currently waiting for a notification that it has finished.
 * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
 * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
 * @note        
 *****************************************************************************/
void I2cSensorsError(struct i2c_master_module *const module){
    37cc:	b510      	push	{r4, lr}
    37ce:	b082      	sub	sp, #8
	
	I2cSensorBusState.i2cState = I2C_BUS_READY;
	I2cSensorBusState.txDoneFlag = true;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
    37d0:	2400      	movs	r4, #0
    37d2:	9401      	str	r4, [sp, #4]
	
	xSemaphoreGiveFromISR( sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken );
    37d4:	4b07      	ldr	r3, [pc, #28]	; (37f4 <I2cSensorsError+0x28>)
    37d6:	6818      	ldr	r0, [r3, #0]
    37d8:	a901      	add	r1, sp, #4
    37da:	4b07      	ldr	r3, [pc, #28]	; (37f8 <I2cSensorsError+0x2c>)
    37dc:	4798      	blx	r3
	sensorTransmitError = false;
    37de:	4b07      	ldr	r3, [pc, #28]	; (37fc <I2cSensorsError+0x30>)
    37e0:	701c      	strb	r4, [r3, #0]
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
    37e2:	9b01      	ldr	r3, [sp, #4]
    37e4:	2b00      	cmp	r3, #0
    37e6:	d003      	beq.n	37f0 <I2cSensorsError+0x24>
    37e8:	2280      	movs	r2, #128	; 0x80
    37ea:	0552      	lsls	r2, r2, #21
    37ec:	4b04      	ldr	r3, [pc, #16]	; (3800 <I2cSensorsError+0x34>)
    37ee:	601a      	str	r2, [r3, #0]
}
    37f0:	b002      	add	sp, #8
    37f2:	bd10      	pop	{r4, pc}
    37f4:	200044c8 	.word	0x200044c8
    37f8:	000062e1 	.word	0x000062e1
    37fc:	20000955 	.word	0x20000955
    3800:	e000ed04 	.word	0xe000ed04

00003804 <I2cDriverRegisterSensorBusCallbacks>:



void I2cDriverRegisterSensorBusCallbacks(void)
{
    3804:	b570      	push	{r4, r5, r6, lr}
	/* Register callback function. */
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    3806:	4c0c      	ldr	r4, [pc, #48]	; (3838 <I2cDriverRegisterSensorBusCallbacks+0x34>)
    3808:	2200      	movs	r2, #0
    380a:	490c      	ldr	r1, [pc, #48]	; (383c <I2cDriverRegisterSensorBusCallbacks+0x38>)
    380c:	0020      	movs	r0, r4
    380e:	4d0c      	ldr	r5, [pc, #48]	; (3840 <I2cDriverRegisterSensorBusCallbacks+0x3c>)
    3810:	47a8      	blx	r5
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
    3812:	7e63      	ldrb	r3, [r4, #25]
    3814:	2201      	movs	r2, #1
    3816:	4313      	orrs	r3, r2
    3818:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_WRITE_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
    381a:	490a      	ldr	r1, [pc, #40]	; (3844 <I2cDriverRegisterSensorBusCallbacks+0x40>)
    381c:	0020      	movs	r0, r4
    381e:	47a8      	blx	r5
    3820:	7e63      	ldrb	r3, [r4, #25]
    3822:	2202      	movs	r2, #2
    3824:	4313      	orrs	r3, r2
    3826:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_READ_COMPLETE);
	
	i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError,I2C_MASTER_CALLBACK_ERROR);
    3828:	4907      	ldr	r1, [pc, #28]	; (3848 <I2cDriverRegisterSensorBusCallbacks+0x44>)
    382a:	0020      	movs	r0, r4
    382c:	47a8      	blx	r5
    382e:	7e63      	ldrb	r3, [r4, #25]
    3830:	2204      	movs	r2, #4
    3832:	4313      	orrs	r3, r2
    3834:	7663      	strb	r3, [r4, #25]
	i2c_master_enable_callback(&i2cSensorBusInstance,I2C_MASTER_CALLBACK_ERROR);
}
    3836:	bd70      	pop	{r4, r5, r6, pc}
    3838:	20004308 	.word	0x20004308
    383c:	0000375d 	.word	0x0000375d
    3840:	00002999 	.word	0x00002999
    3844:	00003795 	.word	0x00003795
    3848:	000037cd 	.word	0x000037cd

0000384c <I2cInitializeDriver>:
 * @fn			int32_t I2cInitializeDriver(void)
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note        
 *****************************************************************************/
 int32_t I2cInitializeDriver(void){
    384c:	b570      	push	{r4, r5, r6, lr}
    384e:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    3850:	ab01      	add	r3, sp, #4
    3852:	2264      	movs	r2, #100	; 0x64
    3854:	9201      	str	r2, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    3856:	4a33      	ldr	r2, [pc, #204]	; (3924 <I2cInitializeDriver+0xd8>)
    3858:	9202      	str	r2, [sp, #8]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    385a:	2200      	movs	r2, #0
    385c:	9203      	str	r2, [sp, #12]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    385e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
    3860:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    3862:	2180      	movs	r1, #128	; 0x80
    3864:	0389      	lsls	r1, r1, #14
    3866:	9105      	str	r1, [sp, #20]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    3868:	2101      	movs	r1, #1
    386a:	4249      	negs	r1, r1
    386c:	8299      	strh	r1, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    386e:	3125      	adds	r1, #37	; 0x25
    3870:	545a      	strb	r2, [r3, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    3872:	920b      	str	r2, [sp, #44]	; 0x2c
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    3874:	3108      	adds	r1, #8
    3876:	545a      	strb	r2, [r3, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    3878:	3101      	adds	r1, #1
    387a:	545a      	strb	r2, [r3, r1]
	config->master_scl_low_extend_timeout  = false;
    387c:	3101      	adds	r1, #1
    387e:	545a      	strb	r2, [r3, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    3880:	32d7      	adds	r2, #215	; 0xd7
    3882:	861a      	strh	r2, [r3, #48]	; 0x30
	config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
    3884:	4a28      	ldr	r2, [pc, #160]	; (3928 <I2cInitializeDriver+0xdc>)
    3886:	9208      	str	r2, [sp, #32]
	config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
    3888:	4a28      	ldr	r2, [pc, #160]	; (392c <I2cInitializeDriver+0xe0>)
    388a:	9209      	str	r2, [sp, #36]	; 0x24
	config_i2c_master.buffer_timeout = 1000;
    388c:	22fa      	movs	r2, #250	; 0xfa
    388e:	0092      	lsls	r2, r2, #2
    3890:	82da      	strh	r2, [r3, #22]
    3892:	2403      	movs	r4, #3
		errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
    3894:	4d26      	ldr	r5, [pc, #152]	; (3930 <I2cInitializeDriver+0xe4>)
    3896:	4e27      	ldr	r6, [pc, #156]	; (3934 <I2cInitializeDriver+0xe8>)
    3898:	aa01      	add	r2, sp, #4
    389a:	4927      	ldr	r1, [pc, #156]	; (3938 <I2cInitializeDriver+0xec>)
    389c:	0028      	movs	r0, r5
    389e:	47b0      	blx	r6
		if(STATUS_OK == errCodeAsf){
    38a0:	2800      	cmp	r0, #0
    38a2:	d006      	beq.n	38b2 <I2cInitializeDriver+0x66>
			i2c_master_reset(&i2cSensorBusInstance);
    38a4:	4822      	ldr	r0, [pc, #136]	; (3930 <I2cInitializeDriver+0xe4>)
    38a6:	4b25      	ldr	r3, [pc, #148]	; (393c <I2cInitializeDriver+0xf0>)
    38a8:	4798      	blx	r3
    38aa:	3c01      	subs	r4, #1
    38ac:	b2e4      	uxtb	r4, r4
	for(uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--){
    38ae:	2c00      	cmp	r4, #0
    38b0:	d1f2      	bne.n	3898 <I2cInitializeDriver+0x4c>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38b2:	4b1f      	ldr	r3, [pc, #124]	; (3930 <I2cInitializeDriver+0xe4>)
    38b4:	681c      	ldr	r4, [r3, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    38b6:	2207      	movs	r2, #7
    38b8:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    38ba:	421a      	tst	r2, r3
    38bc:	d1fc      	bne.n	38b8 <I2cInitializeDriver+0x6c>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    38be:	6823      	ldr	r3, [r4, #0]
    38c0:	2202      	movs	r2, #2
    38c2:	4313      	orrs	r3, r2
    38c4:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    38c6:	4d1a      	ldr	r5, [pc, #104]	; (3930 <I2cInitializeDriver+0xe4>)
    38c8:	6828      	ldr	r0, [r5, #0]
    38ca:	4b1d      	ldr	r3, [pc, #116]	; (3940 <I2cInitializeDriver+0xf4>)
    38cc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    38ce:	231f      	movs	r3, #31
    38d0:	4018      	ands	r0, r3
    38d2:	3b1e      	subs	r3, #30
    38d4:	4083      	lsls	r3, r0
    38d6:	4a1b      	ldr	r2, [pc, #108]	; (3944 <I2cInitializeDriver+0xf8>)
    38d8:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    38da:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    38dc:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    38de:	2110      	movs	r1, #16
    38e0:	8b62      	ldrh	r2, [r4, #26]
    38e2:	420a      	tst	r2, r1
    38e4:	d104      	bne.n	38f0 <I2cInitializeDriver+0xa4>
		timeout_counter++;
    38e6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    38e8:	4283      	cmp	r3, r0
    38ea:	d3f9      	bcc.n	38e0 <I2cInitializeDriver+0x94>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    38ec:	2310      	movs	r3, #16
    38ee:	8363      	strh	r3, [r4, #26]


	error = I2cDriverConfigureSensorBus();
	if(STATUS_OK != error) goto exit;
	
	I2cDriverRegisterSensorBusCallbacks();
    38f0:	4b15      	ldr	r3, [pc, #84]	; (3948 <I2cInitializeDriver+0xfc>)
    38f2:	4798      	blx	r3
	
		
	sensorI2cMutexHandle = xSemaphoreCreateMutex();
    38f4:	2001      	movs	r0, #1
    38f6:	4b15      	ldr	r3, [pc, #84]	; (394c <I2cInitializeDriver+0x100>)
    38f8:	4798      	blx	r3
    38fa:	4c15      	ldr	r4, [pc, #84]	; (3950 <I2cInitializeDriver+0x104>)
    38fc:	6020      	str	r0, [r4, #0]
	
	sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
    38fe:	2203      	movs	r2, #3
    3900:	2100      	movs	r1, #0
    3902:	2001      	movs	r0, #1
    3904:	4b13      	ldr	r3, [pc, #76]	; (3954 <I2cInitializeDriver+0x108>)
    3906:	4798      	blx	r3
    3908:	4b13      	ldr	r3, [pc, #76]	; (3958 <I2cInitializeDriver+0x10c>)
    390a:	6018      	str	r0, [r3, #0]
	//xSemaphoreGive(sensorI2cSemaphoreHandle);

	
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    390c:	6823      	ldr	r3, [r4, #0]
    390e:	2b00      	cmp	r3, #0
    3910:	d004      	beq.n	391c <I2cInitializeDriver+0xd0>
	error = I2cDriverConfigureSensorBus();
    3912:	2300      	movs	r3, #0
	if(NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle){
    3914:	2800      	cmp	r0, #0
    3916:	d102      	bne.n	391e <I2cInitializeDriver+0xd2>
		error = STATUS_SUSPEND;	//Could not initialize mutex!
    3918:	3306      	adds	r3, #6
    391a:	e000      	b.n	391e <I2cInitializeDriver+0xd2>
    391c:	2306      	movs	r3, #6
		goto exit;
	}

	exit:
	return error;		
}
    391e:	0018      	movs	r0, r3
    3920:	b00e      	add	sp, #56	; 0x38
    3922:	bd70      	pop	{r4, r5, r6, pc}
    3924:	00000d48 	.word	0x00000d48
    3928:	00080002 	.word	0x00080002
    392c:	00090002 	.word	0x00090002
    3930:	20004308 	.word	0x20004308
    3934:	00003d9d 	.word	0x00003d9d
    3938:	42000800 	.word	0x42000800
    393c:	00004095 	.word	0x00004095
    3940:	0000cccd 	.word	0x0000cccd
    3944:	e000e100 	.word	0xe000e100
    3948:	00003805 	.word	0x00003805
    394c:	00005f7d 	.word	0x00005f7d
    3950:	200044c4 	.word	0x200044c4
    3954:	00005b19 	.word	0x00005b19
    3958:	200044c8 	.word	0x200044c8

0000395c <I2cWriteData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/

int32_t I2cWriteData(I2C_Data *data){
    395c:	b510      	push	{r4, lr}
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    395e:	2800      	cmp	r0, #0
    3960:	d012      	beq.n	3988 <I2cWriteData+0x2c>
    3962:	6843      	ldr	r3, [r0, #4]
    3964:	2b00      	cmp	r3, #0
    3966:	d012      	beq.n	398e <I2cWriteData+0x32>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
    3968:	490a      	ldr	r1, [pc, #40]	; (3994 <I2cWriteData+0x38>)
    396a:	7802      	ldrb	r2, [r0, #0]
    396c:	800a      	strh	r2, [r1, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
    396e:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenOut;
    3970:	89c3      	ldrh	r3, [r0, #14]
    3972:	804b      	strh	r3, [r1, #2]
	
	//Write

	 hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    3974:	4808      	ldr	r0, [pc, #32]	; (3998 <I2cWriteData+0x3c>)
    3976:	4b09      	ldr	r3, [pc, #36]	; (399c <I2cWriteData+0x40>)
    3978:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    397a:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
    397c:	2800      	cmp	r0, #0
    397e:	d101      	bne.n	3984 <I2cWriteData+0x28>
		goto exit;
	}
	
	exit:
	return error;
}
    3980:	0018      	movs	r0, r3
    3982:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
    3984:	3b06      	subs	r3, #6
    3986:	e7fb      	b.n	3980 <I2cWriteData+0x24>
		error = ERR_INVALID_ARG;
    3988:	2308      	movs	r3, #8
    398a:	425b      	negs	r3, r3
    398c:	e7f8      	b.n	3980 <I2cWriteData+0x24>
    398e:	2308      	movs	r3, #8
    3990:	425b      	negs	r3, r3
    3992:	e7f5      	b.n	3980 <I2cWriteData+0x24>
    3994:	200044cc 	.word	0x200044cc
    3998:	20004308 	.word	0x20004308
    399c:	000029d5 	.word	0x000029d5

000039a0 <I2cReadData>:
 * @details     
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        
 *****************************************************************************/
int32_t I2cReadData(I2C_Data *data){
    39a0:	b510      	push	{r4, lr}
	struct i2c_master_packet *writePacket = NULL;
	struct i2c_master_packet *readPacket = NULL;
	
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
    39a2:	2800      	cmp	r0, #0
    39a4:	d013      	beq.n	39ce <I2cReadData+0x2e>
    39a6:	6843      	ldr	r3, [r0, #4]
    39a8:	2b00      	cmp	r3, #0
    39aa:	d013      	beq.n	39d4 <I2cReadData+0x34>
		error = ERR_INVALID_ARG;
		goto exit;
	}

	//Prepare to read
	sensorPacketWrite.address = data->address;
    39ac:	490b      	ldr	r1, [pc, #44]	; (39dc <I2cReadData+0x3c>)
    39ae:	7803      	ldrb	r3, [r0, #0]
    39b0:	800b      	strh	r3, [r1, #0]
	sensorPacketWrite.data = data->msgIn;
    39b2:	6883      	ldr	r3, [r0, #8]
    39b4:	604b      	str	r3, [r1, #4]
	sensorPacketWrite.data_length = data->lenIn;
    39b6:	8983      	ldrh	r3, [r0, #12]
    39b8:	804b      	strh	r3, [r1, #2]
	
	//Read

	hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
    39ba:	4809      	ldr	r0, [pc, #36]	; (39e0 <I2cReadData+0x40>)
    39bc:	4b09      	ldr	r3, [pc, #36]	; (39e4 <I2cReadData+0x44>)
    39be:	4798      	blx	r3
	int32_t error = ERROR_NONE;
    39c0:	2300      	movs	r3, #0
	
	if(STATUS_OK != hwError)
    39c2:	2800      	cmp	r0, #0
    39c4:	d101      	bne.n	39ca <I2cReadData+0x2a>
		goto exit;
	}
	
	exit:
	return error;
}
    39c6:	0018      	movs	r0, r3
    39c8:	bd10      	pop	{r4, pc}
		error = ERROR_IO;
    39ca:	3b06      	subs	r3, #6
    39cc:	e7fb      	b.n	39c6 <I2cReadData+0x26>
		error = ERR_INVALID_ARG;
    39ce:	2308      	movs	r3, #8
    39d0:	425b      	negs	r3, r3
    39d2:	e7f8      	b.n	39c6 <I2cReadData+0x26>
    39d4:	2308      	movs	r3, #8
    39d6:	425b      	negs	r3, r3
    39d8:	e7f5      	b.n	39c6 <I2cReadData+0x26>
    39da:	46c0      	nop			; (mov r8, r8)
    39dc:	200044cc 	.word	0x200044cc
    39e0:	20004308 	.word	0x20004308
    39e4:	000029b1 	.word	0x000029b1

000039e8 <I2cFreeMutex>:
 * @details     
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (ERROR_NONE) if the bus is ready, (ERROR_NOT_INITIALIZED) if it is busy.
 * @note        STUDENTS TO FILL OUT!
 *****************************************************************************/
int32_t I2cFreeMutex(void){
    39e8:	b510      	push	{r4, lr}
	if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
    39ea:	4b07      	ldr	r3, [pc, #28]	; (3a08 <I2cFreeMutex+0x20>)
    39ec:	6818      	ldr	r0, [r3, #0]
    39ee:	2300      	movs	r3, #0
    39f0:	2200      	movs	r2, #0
    39f2:	2100      	movs	r1, #0
    39f4:	4c05      	ldr	r4, [pc, #20]	; (3a0c <I2cFreeMutex+0x24>)
    39f6:	47a0      	blx	r4
    39f8:	2801      	cmp	r0, #1
    39fa:	d101      	bne.n	3a00 <I2cFreeMutex+0x18>

		return ERROR_NOT_INITIALIZED; 
	}
	return ERROR_NONE;
    39fc:	2000      	movs	r0, #0
}
    39fe:	bd10      	pop	{r4, pc}
		return ERROR_NOT_INITIALIZED; 
    3a00:	2014      	movs	r0, #20
    3a02:	4240      	negs	r0, r0
    3a04:	e7fb      	b.n	39fe <I2cFreeMutex+0x16>
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	200044c4 	.word	0x200044c4
    3a0c:	00005c55 	.word	0x00005c55

00003a10 <I2cGetMutex>:
 * @details     
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (ERROR_NONE) if we got the mutex, (ERROR_NOT_READY) if we time out before we got it
 * @note        
 *****************************************************************************/
int32_t I2cGetMutex(TickType_t waitTime){
    3a10:	b510      	push	{r4, lr}
    3a12:	0001      	movs	r1, r0
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) == pdTRUE) {
    3a14:	4b05      	ldr	r3, [pc, #20]	; (3a2c <I2cGetMutex+0x1c>)
    3a16:	6818      	ldr	r0, [r3, #0]
    3a18:	4b05      	ldr	r3, [pc, #20]	; (3a30 <I2cGetMutex+0x20>)
    3a1a:	4798      	blx	r3
        // Mutex acquired successfully
        return ERROR_NONE;
    3a1c:	2300      	movs	r3, #0
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) == pdTRUE) {
    3a1e:	2801      	cmp	r0, #1
    3a20:	d101      	bne.n	3a26 <I2cGetMutex+0x16>
    } else {
        // Failed to acquire mutex within the wait time
        return ERROR_NOT_READY;
    }
}
    3a22:	0018      	movs	r0, r3
    3a24:	bd10      	pop	{r4, pc}
        return ERROR_NOT_READY;
    3a26:	3b1d      	subs	r3, #29
    3a28:	e7fb      	b.n	3a22 <I2cGetMutex+0x12>
    3a2a:	46c0      	nop			; (mov r8, r8)
    3a2c:	200044c4 	.word	0x200044c4
    3a30:	000065fd 	.word	0x000065fd

00003a34 <I2cWriteDataWait>:
				the delay an I2C device needs to make a measurement.
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error.
 * @note        
 *****************************************************************************/
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime){
    3a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a36:	0006      	movs	r6, r0
    3a38:	000d      	movs	r5, r1
	int32_t error = ERROR_NONE;
	SemaphoreHandle_t semHandle = NULL;

	//---0. Get Mutex
	error = I2cGetMutex(xMaxBlockTime);
    3a3a:	0008      	movs	r0, r1
    3a3c:	4b12      	ldr	r3, [pc, #72]	; (3a88 <I2cWriteDataWait+0x54>)
    3a3e:	4798      	blx	r3
    3a40:	1e04      	subs	r4, r0, #0
	if(ERROR_NONE != error) goto exit;
    3a42:	d001      	beq.n	3a48 <I2cWriteDataWait+0x14>

	exitError0:
	I2cFreeMutex();

	return error;
}
    3a44:	0020      	movs	r0, r4
    3a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
    3a48:	4b10      	ldr	r3, [pc, #64]	; (3a8c <I2cWriteDataWait+0x58>)
    3a4a:	681f      	ldr	r7, [r3, #0]
	error = I2cWriteData(data);
    3a4c:	0030      	movs	r0, r6
    3a4e:	4b10      	ldr	r3, [pc, #64]	; (3a90 <I2cWriteDataWait+0x5c>)
    3a50:	4798      	blx	r3
    3a52:	1e04      	subs	r4, r0, #0
	if (ERROR_NONE != error){
    3a54:	d107      	bne.n	3a66 <I2cWriteDataWait+0x32>
	if(xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE){
    3a56:	0029      	movs	r1, r5
    3a58:	0038      	movs	r0, r7
    3a5a:	4b0e      	ldr	r3, [pc, #56]	; (3a94 <I2cWriteDataWait+0x60>)
    3a5c:	4798      	blx	r3
    3a5e:	2801      	cmp	r0, #1
    3a60:	d004      	beq.n	3a6c <I2cWriteDataWait+0x38>
		error = ERR_TIMEOUT;
    3a62:	2403      	movs	r4, #3
    3a64:	4264      	negs	r4, r4
	I2cFreeMutex();
    3a66:	4b0c      	ldr	r3, [pc, #48]	; (3a98 <I2cWriteDataWait+0x64>)
    3a68:	4798      	blx	r3
	return error;
    3a6a:	e7eb      	b.n	3a44 <I2cWriteDataWait+0x10>
	 return sensorTransmitError;
    3a6c:	4b0b      	ldr	r3, [pc, #44]	; (3a9c <I2cWriteDataWait+0x68>)
		if(I2cGetTaskErrorStatus()){
    3a6e:	781b      	ldrb	r3, [r3, #0]
    3a70:	2b00      	cmp	r3, #0
    3a72:	d004      	beq.n	3a7e <I2cWriteDataWait+0x4a>
	sensorTransmitError = value;
    3a74:	2200      	movs	r2, #0
    3a76:	4b09      	ldr	r3, [pc, #36]	; (3a9c <I2cWriteDataWait+0x68>)
    3a78:	701a      	strb	r2, [r3, #0]
				error = ERROR_ABORTED;
    3a7a:	3c03      	subs	r4, #3
    3a7c:	e7f3      	b.n	3a66 <I2cWriteDataWait+0x32>
	error |= I2cFreeMutex();
    3a7e:	4b06      	ldr	r3, [pc, #24]	; (3a98 <I2cWriteDataWait+0x64>)
    3a80:	4798      	blx	r3
    3a82:	0004      	movs	r4, r0
    3a84:	e7de      	b.n	3a44 <I2cWriteDataWait+0x10>
    3a86:	46c0      	nop			; (mov r8, r8)
    3a88:	00003a11 	.word	0x00003a11
    3a8c:	200044c8 	.word	0x200044c8
    3a90:	0000395d 	.word	0x0000395d
    3a94:	000065fd 	.word	0x000065fd
    3a98:	000039e9 	.word	0x000039e9
    3a9c:	20000955 	.word	0x20000955

00003aa0 <I2cReadDataWait>:
 * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!      
				students to fill!
 *****************************************************************************/
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
    3aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aa2:	b083      	sub	sp, #12
    3aa4:	0006      	movs	r6, r0
    3aa6:	9101      	str	r1, [sp, #4]
    3aa8:	0015      	movs	r5, r2
    int32_t error = ERROR_NONE;
    SemaphoreHandle_t semHandle = NULL;

    //---0. Get Mutex
    error = I2cGetMutex(xMaxBlockTime);
    3aaa:	0010      	movs	r0, r2
    3aac:	4b21      	ldr	r3, [pc, #132]	; (3b34 <I2cReadDataWait+0x94>)
    3aae:	4798      	blx	r3
    3ab0:	1e04      	subs	r4, r0, #0
    if(ERROR_NONE != error) goto exit;
    3ab2:	d002      	beq.n	3aba <I2cReadDataWait+0x1a>
    return error;

exitError0:
    I2cFreeMutex();
    return error;
}
    3ab4:	0020      	movs	r0, r4
    3ab6:	b003      	add	sp, #12
    3ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*handle = sensorI2cSemaphoreHandle;
    3aba:	4b1f      	ldr	r3, [pc, #124]	; (3b38 <I2cReadDataWait+0x98>)
    3abc:	681f      	ldr	r7, [r3, #0]
    error = I2cWriteData(data);
    3abe:	0030      	movs	r0, r6
    3ac0:	4b1e      	ldr	r3, [pc, #120]	; (3b3c <I2cReadDataWait+0x9c>)
    3ac2:	4798      	blx	r3
    3ac4:	1e04      	subs	r4, r0, #0
    if (ERROR_NONE != error){
    3ac6:	d107      	bne.n	3ad8 <I2cReadDataWait+0x38>
    if( xSemaphoreTake( semHandle, xMaxBlockTime ) != pdTRUE ){
    3ac8:	0029      	movs	r1, r5
    3aca:	0038      	movs	r0, r7
    3acc:	4b1c      	ldr	r3, [pc, #112]	; (3b40 <I2cReadDataWait+0xa0>)
    3ace:	4798      	blx	r3
    3ad0:	2801      	cmp	r0, #1
    3ad2:	d004      	beq.n	3ade <I2cReadDataWait+0x3e>
        error = ERR_TIMEOUT;
    3ad4:	2403      	movs	r4, #3
    3ad6:	4264      	negs	r4, r4
    I2cFreeMutex();
    3ad8:	4b1a      	ldr	r3, [pc, #104]	; (3b44 <I2cReadDataWait+0xa4>)
    3ada:	4798      	blx	r3
    return error;
    3adc:	e7ea      	b.n	3ab4 <I2cReadDataWait+0x14>
	 return sensorTransmitError;
    3ade:	4b1a      	ldr	r3, [pc, #104]	; (3b48 <I2cReadDataWait+0xa8>)
    if(I2cGetTaskErrorStatus()){
    3ae0:	781b      	ldrb	r3, [r3, #0]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d110      	bne.n	3b08 <I2cReadDataWait+0x68>
    if(delay > 0) {
    3ae6:	9b01      	ldr	r3, [sp, #4]
    3ae8:	2b00      	cmp	r3, #0
    3aea:	d112      	bne.n	3b12 <I2cReadDataWait+0x72>
    error = I2cReadData(data);
    3aec:	0030      	movs	r0, r6
    3aee:	4b17      	ldr	r3, [pc, #92]	; (3b4c <I2cReadDataWait+0xac>)
    3af0:	4798      	blx	r3
    3af2:	1e04      	subs	r4, r0, #0
    if(ERROR_NONE != error){
    3af4:	d1f0      	bne.n	3ad8 <I2cReadDataWait+0x38>
    if( xSemaphoreTake( semHandle, xMaxBlockTime ) != pdTRUE ){
    3af6:	0029      	movs	r1, r5
    3af8:	0038      	movs	r0, r7
    3afa:	4b11      	ldr	r3, [pc, #68]	; (3b40 <I2cReadDataWait+0xa0>)
    3afc:	4798      	blx	r3
    3afe:	2801      	cmp	r0, #1
    3b00:	d00b      	beq.n	3b1a <I2cReadDataWait+0x7a>
        error = ERR_TIMEOUT;
    3b02:	2403      	movs	r4, #3
    3b04:	4264      	negs	r4, r4
    3b06:	e7e7      	b.n	3ad8 <I2cReadDataWait+0x38>
	sensorTransmitError = value;
    3b08:	2200      	movs	r2, #0
    3b0a:	4b0f      	ldr	r3, [pc, #60]	; (3b48 <I2cReadDataWait+0xa8>)
    3b0c:	701a      	strb	r2, [r3, #0]
        error = ERROR_I2C_HANG_RESET;
    3b0e:	3c21      	subs	r4, #33	; 0x21
    3b10:	e7e2      	b.n	3ad8 <I2cReadDataWait+0x38>
        vTaskDelay(delay);
    3b12:	0018      	movs	r0, r3
    3b14:	4b0e      	ldr	r3, [pc, #56]	; (3b50 <I2cReadDataWait+0xb0>)
    3b16:	4798      	blx	r3
    3b18:	e7e8      	b.n	3aec <I2cReadDataWait+0x4c>
	 return sensorTransmitError;
    3b1a:	4b0b      	ldr	r3, [pc, #44]	; (3b48 <I2cReadDataWait+0xa8>)
    if(I2cGetTaskErrorStatus()){
    3b1c:	781b      	ldrb	r3, [r3, #0]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d004      	beq.n	3b2c <I2cReadDataWait+0x8c>
	sensorTransmitError = value;
    3b22:	2200      	movs	r2, #0
    3b24:	4b08      	ldr	r3, [pc, #32]	; (3b48 <I2cReadDataWait+0xa8>)
    3b26:	701a      	strb	r2, [r3, #0]
        error = ERROR_I2C_HANG_RESET;
    3b28:	3c21      	subs	r4, #33	; 0x21
    3b2a:	e7d5      	b.n	3ad8 <I2cReadDataWait+0x38>
    I2cFreeMutex();
    3b2c:	4b05      	ldr	r3, [pc, #20]	; (3b44 <I2cReadDataWait+0xa4>)
    3b2e:	4798      	blx	r3
    goto exit;
    3b30:	e7c0      	b.n	3ab4 <I2cReadDataWait+0x14>
    3b32:	46c0      	nop			; (mov r8, r8)
    3b34:	00003a11 	.word	0x00003a11
    3b38:	200044c8 	.word	0x200044c8
    3b3c:	0000395d 	.word	0x0000395d
    3b40:	000065fd 	.word	0x000065fd
    3b44:	000039e9 	.word	0x000039e9
    3b48:	20000955 	.word	0x20000955
    3b4c:	000039a1 	.word	0x000039a1
    3b50:	000070d9 	.word	0x000070d9

00003b54 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cReadDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
    3b54:	b510      	push	{r4, lr}
    3b56:	b086      	sub	sp, #24
    // Declare a structure to hold I2C read parameters.
    I2C_Data i2cDataToRead;
	
    // Allocate an array for the outgoing data, which is just the register.
    uint8_t outputData[1] = {reg};
    3b58:	ac01      	add	r4, sp, #4
    3b5a:	7021      	strb	r1, [r4, #0]

    // Configure the I2C read parameters.
    i2cDataToRead.msgOut = outputData;
    3b5c:	a802      	add	r0, sp, #8
    3b5e:	6044      	str	r4, [r0, #4]
    i2cDataToRead.msgIn = bufp;
    3b60:	6082      	str	r2, [r0, #8]
    i2cDataToRead.lenOut = 1;
    3b62:	2201      	movs	r2, #1
    3b64:	81c2      	strh	r2, [r0, #14]
    i2cDataToRead.lenIn = len;
    3b66:	8183      	strh	r3, [r0, #12]
    i2cDataToRead.address = LSM6DSO_I2C_ADD_H;
    3b68:	326a      	adds	r2, #106	; 0x6a
    3b6a:	7002      	strb	r2, [r0, #0]

    return I2cReadDataWait(&i2cDataToRead, len, 100); // The timeout is set to 100 ticks.
    3b6c:	3a07      	subs	r2, #7
    3b6e:	0019      	movs	r1, r3
    3b70:	4b01      	ldr	r3, [pc, #4]	; (3b78 <platform_read+0x24>)
    3b72:	4798      	blx	r3
}
    3b74:	b006      	add	sp, #24
    3b76:	bd10      	pop	{r4, pc}
    3b78:	00003aa1 	.word	0x00003aa1

00003b7c <platform_write>:
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
    3b7c:	b5b0      	push	{r4, r5, r7, lr}
    3b7e:	b084      	sub	sp, #16
    3b80:	af00      	add	r7, sp, #0
    3b82:	0014      	movs	r4, r2
    uint8_t dataToWrite[len + 1];
    3b84:	1c5d      	adds	r5, r3, #1
    3b86:	0018      	movs	r0, r3
    3b88:	3008      	adds	r0, #8
    3b8a:	08c0      	lsrs	r0, r0, #3
    3b8c:	00c0      	lsls	r0, r0, #3
    3b8e:	466a      	mov	r2, sp
    3b90:	1a12      	subs	r2, r2, r0
    3b92:	4695      	mov	sp, r2
    dataToWrite[0] = reg;
    3b94:	7011      	strb	r1, [r2, #0]
    memcpy(&dataToWrite[1], bufp, len);
    3b96:	1c50      	adds	r0, r2, #1
    3b98:	001a      	movs	r2, r3
    3b9a:	0021      	movs	r1, r4
    3b9c:	4b06      	ldr	r3, [pc, #24]	; (3bb8 <platform_write+0x3c>)
    3b9e:	4798      	blx	r3
    i2cDataToWrite.address = LSM6DSO_I2C_ADD_H;
    3ba0:	236b      	movs	r3, #107	; 0x6b
    3ba2:	703b      	strb	r3, [r7, #0]
    i2cDataToWrite.msgOut = dataToWrite;
    3ba4:	466b      	mov	r3, sp
    3ba6:	607b      	str	r3, [r7, #4]
    i2cDataToWrite.lenOut = len + 1;
    3ba8:	81fd      	strh	r5, [r7, #14]
    return I2cWriteDataWait(&i2cDataToWrite, 100);
    3baa:	2164      	movs	r1, #100	; 0x64
    3bac:	0038      	movs	r0, r7
    3bae:	4b03      	ldr	r3, [pc, #12]	; (3bbc <platform_write+0x40>)
    3bb0:	4798      	blx	r3
}
    3bb2:	46bd      	mov	sp, r7
    3bb4:	b004      	add	sp, #16
    3bb6:	bdb0      	pop	{r4, r5, r7, pc}
    3bb8:	00014245 	.word	0x00014245
    3bbc:	00003a35 	.word	0x00003a35

00003bc0 <lsm6dso_read_reg>:
{
    3bc0:	b570      	push	{r4, r5, r6, lr}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    3bc2:	6885      	ldr	r5, [r0, #8]
    3bc4:	6844      	ldr	r4, [r0, #4]
    3bc6:	0028      	movs	r0, r5
    3bc8:	47a0      	blx	r4
}
    3bca:	bd70      	pop	{r4, r5, r6, pc}

00003bcc <lsm6dso_from_fs2_to_mg>:
{
    3bcc:	b510      	push	{r4, lr}
  return ((float_t)lsb) * 0.061f;
    3bce:	4b03      	ldr	r3, [pc, #12]	; (3bdc <lsm6dso_from_fs2_to_mg+0x10>)
    3bd0:	4798      	blx	r3
    3bd2:	4903      	ldr	r1, [pc, #12]	; (3be0 <lsm6dso_from_fs2_to_mg+0x14>)
    3bd4:	4b03      	ldr	r3, [pc, #12]	; (3be4 <lsm6dso_from_fs2_to_mg+0x18>)
    3bd6:	4798      	blx	r3
}
    3bd8:	bd10      	pop	{r4, pc}
    3bda:	46c0      	nop			; (mov r8, r8)
    3bdc:	0001269d 	.word	0x0001269d
    3be0:	3d79db23 	.word	0x3d79db23
    3be4:	000120e5 	.word	0x000120e5

00003be8 <lsm6dso_xl_flag_data_ready_get>:
{
    3be8:	b570      	push	{r4, r5, r6, lr}
    3bea:	b082      	sub	sp, #8
    3bec:	000d      	movs	r5, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
    3bee:	ac01      	add	r4, sp, #4
    3bf0:	2301      	movs	r3, #1
    3bf2:	0022      	movs	r2, r4
    3bf4:	211e      	movs	r1, #30
    3bf6:	4e04      	ldr	r6, [pc, #16]	; (3c08 <lsm6dso_xl_flag_data_ready_get+0x20>)
    3bf8:	47b0      	blx	r6
  *val = reg.xlda;
    3bfa:	7823      	ldrb	r3, [r4, #0]
    3bfc:	07db      	lsls	r3, r3, #31
    3bfe:	0fdb      	lsrs	r3, r3, #31
    3c00:	702b      	strb	r3, [r5, #0]
}
    3c02:	b002      	add	sp, #8
    3c04:	bd70      	pop	{r4, r5, r6, pc}
    3c06:	46c0      	nop			; (mov r8, r8)
    3c08:	00003bc1 	.word	0x00003bc1

00003c0c <lsm6dso_acceleration_raw_get>:
{
    3c0c:	b530      	push	{r4, r5, lr}
    3c0e:	b083      	sub	sp, #12
    3c10:	000c      	movs	r4, r1
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
    3c12:	2306      	movs	r3, #6
    3c14:	466a      	mov	r2, sp
    3c16:	2128      	movs	r1, #40	; 0x28
    3c18:	4d0a      	ldr	r5, [pc, #40]	; (3c44 <lsm6dso_acceleration_raw_get+0x38>)
    3c1a:	47a8      	blx	r5
  val[0] = (val[0] * 256) + (int16_t)buff[0];
    3c1c:	466b      	mov	r3, sp
    3c1e:	785a      	ldrb	r2, [r3, #1]
    3c20:	0212      	lsls	r2, r2, #8
    3c22:	781b      	ldrb	r3, [r3, #0]
    3c24:	189b      	adds	r3, r3, r2
    3c26:	8023      	strh	r3, [r4, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
    3c28:	466b      	mov	r3, sp
    3c2a:	78da      	ldrb	r2, [r3, #3]
    3c2c:	0212      	lsls	r2, r2, #8
    3c2e:	789b      	ldrb	r3, [r3, #2]
    3c30:	189b      	adds	r3, r3, r2
    3c32:	8063      	strh	r3, [r4, #2]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
    3c34:	466b      	mov	r3, sp
    3c36:	795a      	ldrb	r2, [r3, #5]
    3c38:	0212      	lsls	r2, r2, #8
    3c3a:	791b      	ldrb	r3, [r3, #4]
    3c3c:	189b      	adds	r3, r3, r2
    3c3e:	80a3      	strh	r3, [r4, #4]
}
    3c40:	b003      	add	sp, #12
    3c42:	bd30      	pop	{r4, r5, pc}
    3c44:	00003bc1 	.word	0x00003bc1

00003c48 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
return &dev_ctx;
}
    3c48:	4800      	ldr	r0, [pc, #0]	; (3c4c <GetImuStruct+0x4>)
    3c4a:	4770      	bx	lr
    3c4c:	200000c8 	.word	0x200000c8

00003c50 <SeesawSetLed>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
	FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*****************************************************************************/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
    3c50:	b530      	push	{r4, r5, lr}
    3c52:	b083      	sub	sp, #12
	uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
    3c54:	240e      	movs	r4, #14
    3c56:	466d      	mov	r5, sp
    3c58:	702c      	strb	r4, [r5, #0]
    3c5a:	3c0a      	subs	r4, #10
    3c5c:	706c      	strb	r4, [r5, #1]
    3c5e:	712a      	strb	r2, [r5, #4]
    3c60:	7169      	strb	r1, [r5, #5]
    3c62:	71ab      	strb	r3, [r5, #6]
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};

	uint16_t offset = 3 * key; //RGB LED
    3c64:	0043      	lsls	r3, r0, #1
    3c66:	18c0      	adds	r0, r0, r3
	write_buffer1[2] = (offset >> 8);
    3c68:	0a03      	lsrs	r3, r0, #8
    3c6a:	70ab      	strb	r3, [r5, #2]
	write_buffer1[3] = (offset);
    3c6c:	70e8      	strb	r0, [r5, #3]

	seesawData.msgOut = &write_buffer1;
    3c6e:	4804      	ldr	r0, [pc, #16]	; (3c80 <SeesawSetLed+0x30>)
    3c70:	6045      	str	r5, [r0, #4]
	seesawData.lenOut = sizeof(write_buffer1);
    3c72:	2307      	movs	r3, #7
    3c74:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    3c76:	2164      	movs	r1, #100	; 0x64
    3c78:	4b02      	ldr	r3, [pc, #8]	; (3c84 <SeesawSetLed+0x34>)
    3c7a:	4798      	blx	r3
	return error;

}
    3c7c:	b003      	add	sp, #12
    3c7e:	bd30      	pop	{r4, r5, pc}
    3c80:	200044d8 	.word	0x200044d8
    3c84:	00003a35 	.word	0x00003a35

00003c88 <SeesawOrderLedUpdate>:
* @return		Returns zero if no I2C errors occurred. Other number in case of error
* @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*****************************************************************************/
int32_t SeesawOrderLedUpdate(void)
{
    3c88:	b500      	push	{lr}
    3c8a:	b083      	sub	sp, #12
	uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
    3c8c:	ab01      	add	r3, sp, #4
    3c8e:	4a06      	ldr	r2, [pc, #24]	; (3ca8 <SeesawOrderLedUpdate+0x20>)
    3c90:	8892      	ldrh	r2, [r2, #4]
    3c92:	801a      	strh	r2, [r3, #0]

	seesawData.msgOut = &orderBuffer;
    3c94:	4805      	ldr	r0, [pc, #20]	; (3cac <SeesawOrderLedUpdate+0x24>)
    3c96:	6043      	str	r3, [r0, #4]
	seesawData.lenOut = sizeof(orderBuffer);
    3c98:	2302      	movs	r3, #2
    3c9a:	81c3      	strh	r3, [r0, #14]
	int error = I2cWriteDataWait(&seesawData, 100);
    3c9c:	2164      	movs	r1, #100	; 0x64
    3c9e:	4b04      	ldr	r3, [pc, #16]	; (3cb0 <SeesawOrderLedUpdate+0x28>)
    3ca0:	4798      	blx	r3
	return error;
}
    3ca2:	b003      	add	sp, #12
    3ca4:	bd00      	pop	{pc}
    3ca6:	46c0      	nop			; (mov r8, r8)
    3ca8:	00016de4 	.word	0x00016de4
    3cac:	200044d8 	.word	0x200044d8
    3cb0:	00003a35 	.word	0x00003a35

00003cb4 <configure_tcc_for_pwm>:
#define SERVO_PWM_MUX MUX_PA10E_TCC1_WO0

struct tcc_module tcc_instance;
struct tcc_config config_tcc;

void configure_tcc_for_pwm(void) {
    3cb4:	b570      	push	{r4, r5, r6, lr}
	tcc_get_config_defaults(&config_tcc, SERVO_PWM_MODULE);
    3cb6:	4e12      	ldr	r6, [pc, #72]	; (3d00 <configure_tcc_for_pwm+0x4c>)
    3cb8:	4c12      	ldr	r4, [pc, #72]	; (3d04 <configure_tcc_for_pwm+0x50>)
    3cba:	0031      	movs	r1, r6
    3cbc:	0020      	movs	r0, r4
    3cbe:	4b12      	ldr	r3, [pc, #72]	; (3d08 <configure_tcc_for_pwm+0x54>)
    3cc0:	4798      	blx	r3

	config_tcc.counter.clock_source = GCLK_GENERATOR_0;
    3cc2:	2300      	movs	r3, #0
    3cc4:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.period = 1000000;
    3cc6:	4a11      	ldr	r2, [pc, #68]	; (3d0c <configure_tcc_for_pwm+0x58>)
    3cc8:	6062      	str	r2, [r4, #4]
	config_tcc.counter.clock_prescaler = TCC_CTRLA_PRESCALER_DIV16;
    3cca:	72e3      	strb	r3, [r4, #11]
	config_tcc.compare.match[SERVO_PWM_CHANNEL] = 20000;
    3ccc:	4a10      	ldr	r2, [pc, #64]	; (3d10 <configure_tcc_for_pwm+0x5c>)
    3cce:	61e2      	str	r2, [r4, #28]
	config_tcc.compare.wave_polarity[SERVO_PWM_CHANNEL] = 0;
    3cd0:	7523      	strb	r3, [r4, #20]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    3cd2:	2202      	movs	r2, #2
    3cd4:	7622      	strb	r2, [r4, #24]
	config_tcc.compare.wave_ramp = TCC_RAMP_RAMP1;
    3cd6:	7663      	strb	r3, [r4, #25]

	tcc_init(&tcc_instance, SERVO_PWM_MODULE, &config_tcc);
    3cd8:	4d0e      	ldr	r5, [pc, #56]	; (3d14 <configure_tcc_for_pwm+0x60>)
    3cda:	0022      	movs	r2, r4
    3cdc:	0031      	movs	r1, r6
    3cde:	0028      	movs	r0, r5
    3ce0:	4b0d      	ldr	r3, [pc, #52]	; (3d18 <configure_tcc_for_pwm+0x64>)
    3ce2:	4798      	blx	r3
	return (module_inst->hw->SYNCBUSY.reg > 0);
    3ce4:	682b      	ldr	r3, [r5, #0]
    3ce6:	689a      	ldr	r2, [r3, #8]

	// Ensure that the synchronization is complete before enabling the TCC
	while (tcc_is_syncing(&tcc_instance)) {
    3ce8:	2a00      	cmp	r2, #0
    3cea:	d1fc      	bne.n	3ce6 <configure_tcc_for_pwm+0x32>
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    3cec:	2102      	movs	r1, #2
    3cee:	689a      	ldr	r2, [r3, #8]
    3cf0:	4211      	tst	r1, r2
    3cf2:	d1fc      	bne.n	3cee <configure_tcc_for_pwm+0x3a>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    3cf4:	681a      	ldr	r2, [r3, #0]
    3cf6:	2102      	movs	r1, #2
    3cf8:	430a      	orrs	r2, r1
    3cfa:	601a      	str	r2, [r3, #0]
	}

	tcc_enable(&tcc_instance);
}
    3cfc:	bd70      	pop	{r4, r5, r6, pc}
    3cfe:	46c0      	nop			; (mov r8, r8)
    3d00:	42002400 	.word	0x42002400
    3d04:	20004528 	.word	0x20004528
    3d08:	0000e225 	.word	0x0000e225
    3d0c:	000f4240 	.word	0x000f4240
    3d10:	00004e20 	.word	0x00004e20
    3d14:	200044e8 	.word	0x200044e8
    3d18:	0000e371 	.word	0x0000e371

00003d1c <configure_pwm_pin>:

void configure_pwm_pin(void) {
    3d1c:	b500      	push	{lr}
    3d1e:	b083      	sub	sp, #12
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3d20:	a901      	add	r1, sp, #4
    3d22:	2301      	movs	r3, #1
    3d24:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3d26:	2200      	movs	r2, #0
    3d28:	70ca      	strb	r2, [r1, #3]
	struct system_pinmux_config pinmux_config;

	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SERVO_PWM_MUX;
    3d2a:	3204      	adds	r2, #4
    3d2c:	700a      	strb	r2, [r1, #0]
	pinmux_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3d2e:	704b      	strb	r3, [r1, #1]

	// Use the correct function to set the pin configuration
	system_pinmux_pin_set_config(SERVO_PWM_PIN, &pinmux_config);
    3d30:	200a      	movs	r0, #10
    3d32:	4b02      	ldr	r3, [pc, #8]	; (3d3c <configure_pwm_pin+0x20>)
    3d34:	4798      	blx	r3
}
    3d36:	b003      	add	sp, #12
    3d38:	bd00      	pop	{pc}
    3d3a:	46c0      	nop			; (mov r8, r8)
    3d3c:	0000e11d 	.word	0x0000e11d

00003d40 <servo_set>:

// Moves the servo to a specified position in degrees
void servo_set(uint32_t degrees) {
    3d40:	b510      	push	{r4, lr}
    3d42:	0002      	movs	r2, r0
	tcc_set_compare_value(&tcc_instance, SERVO_PWM_CHANNEL, degrees);
    3d44:	4c04      	ldr	r4, [pc, #16]	; (3d58 <servo_set+0x18>)
    3d46:	2100      	movs	r1, #0
    3d48:	0020      	movs	r0, r4
    3d4a:	4b04      	ldr	r3, [pc, #16]	; (3d5c <servo_set+0x1c>)
    3d4c:	4798      	blx	r3
	return (module_inst->hw->SYNCBUSY.reg > 0);
    3d4e:	6822      	ldr	r2, [r4, #0]
    3d50:	6893      	ldr	r3, [r2, #8]
	// Ensure that the synchronization is complete before proceeding
	while (tcc_is_syncing(&tcc_instance)) {
    3d52:	2b00      	cmp	r3, #0
    3d54:	d1fc      	bne.n	3d50 <servo_set+0x10>

	}
	
}
    3d56:	bd10      	pop	{r4, pc}
    3d58:	200044e8 	.word	0x200044e8
    3d5c:	0000e77d 	.word	0x0000e77d

00003d60 <configure_clocks>:

void configure_clocks(void) {
    3d60:	b500      	push	{lr}
    3d62:	b085      	sub	sp, #20
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    3d64:	a901      	add	r1, sp, #4
    3d66:	2301      	movs	r3, #1
    3d68:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    3d6a:	2300      	movs	r3, #0
    3d6c:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    3d6e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3d70:	724b      	strb	r3, [r1, #9]
	struct system_gclk_gen_config gclk_config;

	system_gclk_gen_get_config_defaults(&gclk_config);

	gclk_config.source_clock = SYSTEM_CLOCK_SOURCE_DFLL;
    3d72:	3307      	adds	r3, #7
    3d74:	700b      	strb	r3, [r1, #0]
	gclk_config.division_factor = 1;

	// Use the correct function to set the GCLK configuration
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_config);
    3d76:	2000      	movs	r0, #0
    3d78:	4b03      	ldr	r3, [pc, #12]	; (3d88 <configure_clocks+0x28>)
    3d7a:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_0);
    3d7c:	2000      	movs	r0, #0
    3d7e:	4b03      	ldr	r3, [pc, #12]	; (3d8c <configure_clocks+0x2c>)
    3d80:	4798      	blx	r3
}
    3d82:	b005      	add	sp, #20
    3d84:	bd00      	pop	{pc}
    3d86:	46c0      	nop			; (mov r8, r8)
    3d88:	0000dde1 	.word	0x0000dde1
    3d8c:	0000de99 	.word	0x0000de99

00003d90 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3d90:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3d92:	2207      	movs	r2, #7
    3d94:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    3d96:	421a      	tst	r2, r3
    3d98:	d1fc      	bne.n	3d94 <_i2c_master_wait_for_sync+0x4>
}
    3d9a:	4770      	bx	lr

00003d9c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d9e:	46d6      	mov	lr, sl
    3da0:	464f      	mov	r7, r9
    3da2:	4646      	mov	r6, r8
    3da4:	b5c0      	push	{r6, r7, lr}
    3da6:	b08a      	sub	sp, #40	; 0x28
    3da8:	0006      	movs	r6, r0
    3daa:	000f      	movs	r7, r1
    3dac:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    3dae:	6031      	str	r1, [r6, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3db0:	0008      	movs	r0, r1
    3db2:	4ba0      	ldr	r3, [pc, #640]	; (4034 <i2c_master_init+0x298>)
    3db4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3db6:	4aa0      	ldr	r2, [pc, #640]	; (4038 <i2c_master_init+0x29c>)
    3db8:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3dba:	1c85      	adds	r5, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3dbc:	2301      	movs	r3, #1
    3dbe:	40ab      	lsls	r3, r5
    3dc0:	430b      	orrs	r3, r1
    3dc2:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3dc4:	a909      	add	r1, sp, #36	; 0x24
    3dc6:	7b23      	ldrb	r3, [r4, #12]
    3dc8:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3dca:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3dcc:	b2c5      	uxtb	r5, r0
    3dce:	0028      	movs	r0, r5
    3dd0:	4b9a      	ldr	r3, [pc, #616]	; (403c <i2c_master_init+0x2a0>)
    3dd2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3dd4:	0028      	movs	r0, r5
    3dd6:	4b9a      	ldr	r3, [pc, #616]	; (4040 <i2c_master_init+0x2a4>)
    3dd8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3dda:	7b20      	ldrb	r0, [r4, #12]
    3ddc:	2100      	movs	r1, #0
    3dde:	4b99      	ldr	r3, [pc, #612]	; (4044 <i2c_master_init+0x2a8>)
    3de0:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3de2:	683b      	ldr	r3, [r7, #0]
		return STATUS_ERR_DENIED;
    3de4:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3de6:	079b      	lsls	r3, r3, #30
    3de8:	d505      	bpl.n	3df6 <i2c_master_init+0x5a>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    3dea:	b00a      	add	sp, #40	; 0x28
    3dec:	bc1c      	pop	{r2, r3, r4}
    3dee:	4690      	mov	r8, r2
    3df0:	4699      	mov	r9, r3
    3df2:	46a2      	mov	sl, r4
    3df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3df6:	683b      	ldr	r3, [r7, #0]
		return STATUS_BUSY;
    3df8:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3dfa:	07db      	lsls	r3, r3, #31
    3dfc:	d4f5      	bmi.n	3dea <i2c_master_init+0x4e>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3dfe:	6830      	ldr	r0, [r6, #0]
    3e00:	4b8c      	ldr	r3, [pc, #560]	; (4034 <i2c_master_init+0x298>)
    3e02:	4699      	mov	r9, r3
    3e04:	4798      	blx	r3
    3e06:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    3e08:	498f      	ldr	r1, [pc, #572]	; (4048 <i2c_master_init+0x2ac>)
    3e0a:	4b90      	ldr	r3, [pc, #576]	; (404c <i2c_master_init+0x2b0>)
    3e0c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3e0e:	00ad      	lsls	r5, r5, #2
    3e10:	4b8f      	ldr	r3, [pc, #572]	; (4050 <i2c_master_init+0x2b4>)
    3e12:	50ee      	str	r6, [r5, r3]
	module->registered_callback = 0;
    3e14:	2300      	movs	r3, #0
    3e16:	7633      	strb	r3, [r6, #24]
	module->enabled_callback = 0;
    3e18:	7673      	strb	r3, [r6, #25]
	module->buffer_length = 0;
    3e1a:	2500      	movs	r5, #0
    3e1c:	8373      	strh	r3, [r6, #26]
	module->buffer_remaining = 0;
    3e1e:	83b3      	strh	r3, [r6, #28]
	module->status = STATUS_OK;
    3e20:	2225      	movs	r2, #37	; 0x25
    3e22:	54b5      	strb	r5, [r6, r2]
	module->buffer = NULL;
    3e24:	6233      	str	r3, [r6, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    3e26:	3314      	adds	r3, #20
    3e28:	603b      	str	r3, [r7, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e2a:	6833      	ldr	r3, [r6, #0]
    3e2c:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3e2e:	0018      	movs	r0, r3
    3e30:	47c8      	blx	r9
    3e32:	4681      	mov	r9, r0
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3e34:	2380      	movs	r3, #128	; 0x80
    3e36:	aa08      	add	r2, sp, #32
    3e38:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3e3a:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3e3c:	2301      	movs	r3, #1
    3e3e:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    3e40:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    3e42:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    3e44:	6a27      	ldr	r7, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    3e46:	2800      	cmp	r0, #0
    3e48:	d100      	bne.n	3e4c <i2c_master_init+0xb0>
    3e4a:	e0af      	b.n	3fac <i2c_master_init+0x210>
	pin_conf.mux_position = pad0 & 0xFFFF;
    3e4c:	ab08      	add	r3, sp, #32
    3e4e:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3e50:	2302      	movs	r3, #2
    3e52:	aa08      	add	r2, sp, #32
    3e54:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    3e56:	0c00      	lsrs	r0, r0, #16
    3e58:	b2c0      	uxtb	r0, r0
    3e5a:	0011      	movs	r1, r2
    3e5c:	4b7d      	ldr	r3, [pc, #500]	; (4054 <i2c_master_init+0x2b8>)
    3e5e:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    3e60:	2f00      	cmp	r7, #0
    3e62:	d100      	bne.n	3e66 <i2c_master_init+0xca>
    3e64:	e0a7      	b.n	3fb6 <i2c_master_init+0x21a>
	pin_conf.mux_position = pad1 & 0xFFFF;
    3e66:	ab08      	add	r3, sp, #32
    3e68:	701f      	strb	r7, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3e6a:	2302      	movs	r3, #2
    3e6c:	aa08      	add	r2, sp, #32
    3e6e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3e70:	0c3f      	lsrs	r7, r7, #16
    3e72:	b2f8      	uxtb	r0, r7
    3e74:	0011      	movs	r1, r2
    3e76:	4b77      	ldr	r3, [pc, #476]	; (4054 <i2c_master_init+0x2b8>)
    3e78:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3e7a:	8aa3      	ldrh	r3, [r4, #20]
    3e7c:	80f3      	strh	r3, [r6, #6]
	module->buffer_timeout = config->buffer_timeout;
    3e7e:	8ae3      	ldrh	r3, [r4, #22]
    3e80:	8133      	strh	r3, [r6, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    3e82:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3e84:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    3e86:	2b00      	cmp	r3, #0
    3e88:	d104      	bne.n	3e94 <i2c_master_init+0xf8>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3e8a:	4b73      	ldr	r3, [pc, #460]	; (4058 <i2c_master_init+0x2bc>)
    3e8c:	789b      	ldrb	r3, [r3, #2]
    3e8e:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3e90:	0fdb      	lsrs	r3, r3, #31
    3e92:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    3e94:	68a1      	ldr	r1, [r4, #8]
    3e96:	6923      	ldr	r3, [r4, #16]
    3e98:	430b      	orrs	r3, r1
    3e9a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    3e9c:	2224      	movs	r2, #36	; 0x24
    3e9e:	5ca2      	ldrb	r2, [r4, r2]
    3ea0:	2a00      	cmp	r2, #0
    3ea2:	d002      	beq.n	3eaa <i2c_master_init+0x10e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3ea4:	2280      	movs	r2, #128	; 0x80
    3ea6:	05d2      	lsls	r2, r2, #23
    3ea8:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    3eaa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3eac:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    3eae:	222c      	movs	r2, #44	; 0x2c
    3eb0:	5ca2      	ldrb	r2, [r4, r2]
    3eb2:	2a00      	cmp	r2, #0
    3eb4:	d103      	bne.n	3ebe <i2c_master_init+0x122>
    3eb6:	2280      	movs	r2, #128	; 0x80
    3eb8:	0492      	lsls	r2, r2, #18
    3eba:	4291      	cmp	r1, r2
    3ebc:	d102      	bne.n	3ec4 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3ebe:	2280      	movs	r2, #128	; 0x80
    3ec0:	0512      	lsls	r2, r2, #20
    3ec2:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    3ec4:	222d      	movs	r2, #45	; 0x2d
    3ec6:	5ca2      	ldrb	r2, [r4, r2]
    3ec8:	2a00      	cmp	r2, #0
    3eca:	d002      	beq.n	3ed2 <i2c_master_init+0x136>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3ecc:	2280      	movs	r2, #128	; 0x80
    3ece:	0412      	lsls	r2, r2, #16
    3ed0:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    3ed2:	222e      	movs	r2, #46	; 0x2e
    3ed4:	5ca2      	ldrb	r2, [r4, r2]
    3ed6:	2a00      	cmp	r2, #0
    3ed8:	d002      	beq.n	3ee0 <i2c_master_init+0x144>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3eda:	2280      	movs	r2, #128	; 0x80
    3edc:	03d2      	lsls	r2, r2, #15
    3ede:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3ee0:	4642      	mov	r2, r8
    3ee2:	6812      	ldr	r2, [r2, #0]
    3ee4:	4313      	orrs	r3, r2
    3ee6:	4642      	mov	r2, r8
    3ee8:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3eea:	2380      	movs	r3, #128	; 0x80
    3eec:	005b      	lsls	r3, r3, #1
    3eee:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3ef0:	4648      	mov	r0, r9
    3ef2:	3014      	adds	r0, #20
    3ef4:	b2c0      	uxtb	r0, r0
    3ef6:	4b59      	ldr	r3, [pc, #356]	; (405c <i2c_master_init+0x2c0>)
    3ef8:	4798      	blx	r3
    3efa:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    3efc:	23fa      	movs	r3, #250	; 0xfa
    3efe:	009b      	lsls	r3, r3, #2
    3f00:	6822      	ldr	r2, [r4, #0]
    3f02:	435a      	muls	r2, r3
    3f04:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3f06:	6863      	ldr	r3, [r4, #4]
    3f08:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    3f0a:	4d55      	ldr	r5, [pc, #340]	; (4060 <i2c_master_init+0x2c4>)
    3f0c:	47a8      	blx	r5
    3f0e:	9000      	str	r0, [sp, #0]
    3f10:	9101      	str	r1, [sp, #4]
    3f12:	464b      	mov	r3, r9
    3f14:	0058      	lsls	r0, r3, #1
    3f16:	47a8      	blx	r5
    3f18:	9002      	str	r0, [sp, #8]
    3f1a:	9103      	str	r1, [sp, #12]
    3f1c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    3f1e:	47a8      	blx	r5
    3f20:	9004      	str	r0, [sp, #16]
    3f22:	9105      	str	r1, [sp, #20]
    3f24:	4f4f      	ldr	r7, [pc, #316]	; (4064 <i2c_master_init+0x2c8>)
    3f26:	4a50      	ldr	r2, [pc, #320]	; (4068 <i2c_master_init+0x2cc>)
    3f28:	4b50      	ldr	r3, [pc, #320]	; (406c <i2c_master_init+0x2d0>)
    3f2a:	9800      	ldr	r0, [sp, #0]
    3f2c:	9901      	ldr	r1, [sp, #4]
    3f2e:	47b8      	blx	r7
    3f30:	0002      	movs	r2, r0
    3f32:	000b      	movs	r3, r1
    3f34:	9804      	ldr	r0, [sp, #16]
    3f36:	9905      	ldr	r1, [sp, #20]
    3f38:	47b8      	blx	r7
    3f3a:	4e4d      	ldr	r6, [pc, #308]	; (4070 <i2c_master_init+0x2d4>)
    3f3c:	2200      	movs	r2, #0
    3f3e:	4b4d      	ldr	r3, [pc, #308]	; (4074 <i2c_master_init+0x2d8>)
    3f40:	47b0      	blx	r6
    3f42:	9004      	str	r0, [sp, #16]
    3f44:	9105      	str	r1, [sp, #20]
    3f46:	4648      	mov	r0, r9
    3f48:	47a8      	blx	r5
    3f4a:	0002      	movs	r2, r0
    3f4c:	000b      	movs	r3, r1
    3f4e:	9804      	ldr	r0, [sp, #16]
    3f50:	9905      	ldr	r1, [sp, #20]
    3f52:	47b8      	blx	r7
    3f54:	0002      	movs	r2, r0
    3f56:	000b      	movs	r3, r1
    3f58:	4d47      	ldr	r5, [pc, #284]	; (4078 <i2c_master_init+0x2dc>)
    3f5a:	9800      	ldr	r0, [sp, #0]
    3f5c:	9901      	ldr	r1, [sp, #4]
    3f5e:	47a8      	blx	r5
    3f60:	9a02      	ldr	r2, [sp, #8]
    3f62:	9b03      	ldr	r3, [sp, #12]
    3f64:	47b0      	blx	r6
    3f66:	2200      	movs	r2, #0
    3f68:	4b44      	ldr	r3, [pc, #272]	; (407c <i2c_master_init+0x2e0>)
    3f6a:	47a8      	blx	r5
    3f6c:	9a02      	ldr	r2, [sp, #8]
    3f6e:	9b03      	ldr	r3, [sp, #12]
    3f70:	4d43      	ldr	r5, [pc, #268]	; (4080 <i2c_master_init+0x2e4>)
    3f72:	47a8      	blx	r5
    3f74:	4b43      	ldr	r3, [pc, #268]	; (4084 <i2c_master_init+0x2e8>)
    3f76:	4798      	blx	r3
    3f78:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    3f7a:	2380      	movs	r3, #128	; 0x80
    3f7c:	049b      	lsls	r3, r3, #18
    3f7e:	68a2      	ldr	r2, [r4, #8]
    3f80:	429a      	cmp	r2, r3
    3f82:	d01e      	beq.n	3fc2 <i2c_master_init+0x226>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3f84:	0003      	movs	r3, r0
    3f86:	2040      	movs	r0, #64	; 0x40
    3f88:	2dff      	cmp	r5, #255	; 0xff
    3f8a:	d900      	bls.n	3f8e <i2c_master_init+0x1f2>
    3f8c:	e72d      	b.n	3dea <i2c_master_init+0x4e>
	int32_t tmp_baudlow_hs = 0;
    3f8e:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    3f90:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3f92:	25ff      	movs	r5, #255	; 0xff
    3f94:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3f96:	0624      	lsls	r4, r4, #24
    3f98:	4325      	orrs	r5, r4
    3f9a:	0400      	lsls	r0, r0, #16
    3f9c:	23ff      	movs	r3, #255	; 0xff
    3f9e:	041b      	lsls	r3, r3, #16
    3fa0:	4018      	ands	r0, r3
    3fa2:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3fa4:	4643      	mov	r3, r8
    3fa6:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    3fa8:	2000      	movs	r0, #0
    3faa:	e71e      	b.n	3dea <i2c_master_init+0x4e>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3fac:	2100      	movs	r1, #0
    3fae:	4640      	mov	r0, r8
    3fb0:	4b35      	ldr	r3, [pc, #212]	; (4088 <i2c_master_init+0x2ec>)
    3fb2:	4798      	blx	r3
    3fb4:	e74a      	b.n	3e4c <i2c_master_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3fb6:	2101      	movs	r1, #1
    3fb8:	4640      	mov	r0, r8
    3fba:	4b33      	ldr	r3, [pc, #204]	; (4088 <i2c_master_init+0x2ec>)
    3fbc:	4798      	blx	r3
    3fbe:	0007      	movs	r7, r0
    3fc0:	e751      	b.n	3e66 <i2c_master_init+0xca>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3fc2:	26fa      	movs	r6, #250	; 0xfa
    3fc4:	00b6      	lsls	r6, r6, #2
    3fc6:	4653      	mov	r3, sl
    3fc8:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3fca:	9800      	ldr	r0, [sp, #0]
    3fcc:	9901      	ldr	r1, [sp, #4]
    3fce:	0002      	movs	r2, r0
    3fd0:	000b      	movs	r3, r1
    3fd2:	4c27      	ldr	r4, [pc, #156]	; (4070 <i2c_master_init+0x2d4>)
    3fd4:	47a0      	blx	r4
    3fd6:	9000      	str	r0, [sp, #0]
    3fd8:	9101      	str	r1, [sp, #4]
    3fda:	0030      	movs	r0, r6
    3fdc:	4b20      	ldr	r3, [pc, #128]	; (4060 <i2c_master_init+0x2c4>)
    3fde:	4798      	blx	r3
    3fe0:	2200      	movs	r2, #0
    3fe2:	4b2a      	ldr	r3, [pc, #168]	; (408c <i2c_master_init+0x2f0>)
    3fe4:	47b8      	blx	r7
    3fe6:	0002      	movs	r2, r0
    3fe8:	000b      	movs	r3, r1
    3fea:	9800      	ldr	r0, [sp, #0]
    3fec:	9901      	ldr	r1, [sp, #4]
    3fee:	4c24      	ldr	r4, [pc, #144]	; (4080 <i2c_master_init+0x2e4>)
    3ff0:	47a0      	blx	r4
    3ff2:	2200      	movs	r2, #0
    3ff4:	4b21      	ldr	r3, [pc, #132]	; (407c <i2c_master_init+0x2e0>)
    3ff6:	4c20      	ldr	r4, [pc, #128]	; (4078 <i2c_master_init+0x2dc>)
    3ff8:	47a0      	blx	r4
    3ffa:	4b22      	ldr	r3, [pc, #136]	; (4084 <i2c_master_init+0x2e8>)
    3ffc:	4798      	blx	r3
    3ffe:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    4000:	d00c      	beq.n	401c <i2c_master_init+0x280>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    4002:	0031      	movs	r1, r6
    4004:	9807      	ldr	r0, [sp, #28]
    4006:	4b22      	ldr	r3, [pc, #136]	; (4090 <i2c_master_init+0x2f4>)
    4008:	4798      	blx	r3
    400a:	3802      	subs	r0, #2
    400c:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    400e:	002b      	movs	r3, r5
    4010:	2dff      	cmp	r5, #255	; 0xff
    4012:	d80c      	bhi.n	402e <i2c_master_init+0x292>
    4014:	28ff      	cmp	r0, #255	; 0xff
    4016:	d9bc      	bls.n	3f92 <i2c_master_init+0x1f6>
    4018:	2040      	movs	r0, #64	; 0x40
    401a:	e6e6      	b.n	3dea <i2c_master_init+0x4e>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    401c:	0071      	lsls	r1, r6, #1
    401e:	1e48      	subs	r0, r1, #1
    4020:	9b07      	ldr	r3, [sp, #28]
    4022:	469c      	mov	ip, r3
    4024:	4460      	add	r0, ip
    4026:	4b1a      	ldr	r3, [pc, #104]	; (4090 <i2c_master_init+0x2f4>)
    4028:	4798      	blx	r3
    402a:	3801      	subs	r0, #1
    402c:	e7ef      	b.n	400e <i2c_master_init+0x272>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    402e:	2040      	movs	r0, #64	; 0x40
    4030:	e6db      	b.n	3dea <i2c_master_init+0x4e>
    4032:	46c0      	nop			; (mov r8, r8)
    4034:	0000cc55 	.word	0x0000cc55
    4038:	40000400 	.word	0x40000400
    403c:	0000dff5 	.word	0x0000dff5
    4040:	0000df69 	.word	0x0000df69
    4044:	0000ca91 	.word	0x0000ca91
    4048:	000029f9 	.word	0x000029f9
    404c:	0000cc91 	.word	0x0000cc91
    4050:	20005bcc 	.word	0x20005bcc
    4054:	0000e11d 	.word	0x0000e11d
    4058:	41002000 	.word	0x41002000
    405c:	0000e011 	.word	0x0000e011
    4060:	00013f59 	.word	0x00013f59
    4064:	000133c5 	.word	0x000133c5
    4068:	e826d695 	.word	0xe826d695
    406c:	3e112e0b 	.word	0x3e112e0b
    4070:	0001273d 	.word	0x0001273d
    4074:	40240000 	.word	0x40240000
    4078:	000138c5 	.word	0x000138c5
    407c:	3ff00000 	.word	0x3ff00000
    4080:	00012d5d 	.word	0x00012d5d
    4084:	00013ef1 	.word	0x00013ef1
    4088:	0000cadd 	.word	0x0000cadd
    408c:	40080000 	.word	0x40080000
    4090:	00011d75 	.word	0x00011d75

00004094 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    4094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4096:	46ce      	mov	lr, r9
    4098:	4647      	mov	r7, r8
    409a:	b580      	push	{r7, lr}
    409c:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    409e:	6803      	ldr	r3, [r0, #0]
    40a0:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    40a2:	4e14      	ldr	r6, [pc, #80]	; (40f4 <i2c_master_reset+0x60>)
    40a4:	47b0      	blx	r6
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    40a6:	6825      	ldr	r5, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    40a8:	0028      	movs	r0, r5
    40aa:	4b13      	ldr	r3, [pc, #76]	; (40f8 <i2c_master_reset+0x64>)
    40ac:	4698      	mov	r8, r3
    40ae:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    40b0:	231f      	movs	r3, #31
    40b2:	4018      	ands	r0, r3
    40b4:	2701      	movs	r7, #1
    40b6:	0039      	movs	r1, r7
    40b8:	4081      	lsls	r1, r0
    40ba:	3361      	adds	r3, #97	; 0x61
    40bc:	4a0f      	ldr	r2, [pc, #60]	; (40fc <i2c_master_reset+0x68>)
    40be:	50d1      	str	r1, [r2, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    40c0:	0020      	movs	r0, r4
    40c2:	47b0      	blx	r6

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    40c4:	2383      	movs	r3, #131	; 0x83
    40c6:	752b      	strb	r3, [r5, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    40c8:	762b      	strb	r3, [r5, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    40ca:	682b      	ldr	r3, [r5, #0]
    40cc:	2202      	movs	r2, #2
    40ce:	4393      	bics	r3, r2
    40d0:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    40d2:	4b0b      	ldr	r3, [pc, #44]	; (4100 <i2c_master_reset+0x6c>)
    40d4:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    40d6:	6820      	ldr	r0, [r4, #0]
    40d8:	47c0      	blx	r8
    40da:	4b0a      	ldr	r3, [pc, #40]	; (4104 <i2c_master_reset+0x70>)
    40dc:	4798      	blx	r3
	cpu_irq_leave_critical();
    40de:	4b0a      	ldr	r3, [pc, #40]	; (4108 <i2c_master_reset+0x74>)
    40e0:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    40e2:	0020      	movs	r0, r4
    40e4:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    40e6:	464b      	mov	r3, r9
    40e8:	601f      	str	r7, [r3, #0]
}
    40ea:	bc0c      	pop	{r2, r3}
    40ec:	4690      	mov	r8, r2
    40ee:	4699      	mov	r9, r3
    40f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	00003d91 	.word	0x00003d91
    40f8:	0000cccd 	.word	0x0000cccd
    40fc:	e000e100 	.word	0xe000e100
    4100:	0000c441 	.word	0x0000c441
    4104:	0000e045 	.word	0x0000e045
    4108:	0000c481 	.word	0x0000c481

0000410c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    410c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    410e:	7e1a      	ldrb	r2, [r3, #24]
    4110:	0792      	lsls	r2, r2, #30
    4112:	d507      	bpl.n	4124 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4114:	2202      	movs	r2, #2
    4116:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    4118:	8b5b      	ldrh	r3, [r3, #26]
    411a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    411c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    411e:	17db      	asrs	r3, r3, #31
    4120:	4018      	ands	r0, r3
}
    4122:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    4124:	8b5a      	ldrh	r2, [r3, #26]
    4126:	0752      	lsls	r2, r2, #29
    4128:	d506      	bpl.n	4138 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    412a:	6859      	ldr	r1, [r3, #4]
    412c:	22c0      	movs	r2, #192	; 0xc0
    412e:	0292      	lsls	r2, r2, #10
    4130:	430a      	orrs	r2, r1
    4132:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    4134:	2018      	movs	r0, #24
    4136:	e7f4      	b.n	4122 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    4138:	2000      	movs	r0, #0
    413a:	e7f2      	b.n	4122 <_i2c_master_address_response+0x16>

0000413c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    413c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    413e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    4140:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4142:	2401      	movs	r4, #1
    4144:	2502      	movs	r5, #2
    4146:	7e11      	ldrb	r1, [r2, #24]
    4148:	4221      	tst	r1, r4
    414a:	d10b      	bne.n	4164 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    414c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    414e:	4229      	tst	r1, r5
    4150:	d106      	bne.n	4160 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    4152:	3301      	adds	r3, #1
    4154:	b29b      	uxth	r3, r3
    4156:	8901      	ldrh	r1, [r0, #8]
    4158:	4299      	cmp	r1, r3
    415a:	d8f4      	bhi.n	4146 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    415c:	2012      	movs	r0, #18
    415e:	e002      	b.n	4166 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    4160:	2000      	movs	r0, #0
    4162:	e000      	b.n	4166 <_i2c_master_wait_for_bus+0x2a>
    4164:	2000      	movs	r0, #0
}
    4166:	bd30      	pop	{r4, r5, pc}

00004168 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    4168:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    416a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    416c:	6862      	ldr	r2, [r4, #4]
    416e:	2380      	movs	r3, #128	; 0x80
    4170:	02db      	lsls	r3, r3, #11
    4172:	4313      	orrs	r3, r2
    4174:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    4176:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4178:	4b02      	ldr	r3, [pc, #8]	; (4184 <_i2c_master_send_hs_master_code+0x1c>)
    417a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    417c:	2301      	movs	r3, #1
    417e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    4180:	bd10      	pop	{r4, pc}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	0000413d 	.word	0x0000413d

00004188 <_tc_interrupt_handler>:
    4188:	b570      	push	{r4, r5, r6, lr}
    418a:	0080      	lsls	r0, r0, #2
    418c:	4b16      	ldr	r3, [pc, #88]	; (41e8 <_tc_interrupt_handler+0x60>)
    418e:	58c4      	ldr	r4, [r0, r3]
    4190:	6823      	ldr	r3, [r4, #0]
    4192:	7b9d      	ldrb	r5, [r3, #14]
    4194:	7e22      	ldrb	r2, [r4, #24]
    4196:	7e63      	ldrb	r3, [r4, #25]
    4198:	4013      	ands	r3, r2
    419a:	401d      	ands	r5, r3
    419c:	07eb      	lsls	r3, r5, #31
    419e:	d406      	bmi.n	41ae <_tc_interrupt_handler+0x26>
    41a0:	07ab      	lsls	r3, r5, #30
    41a2:	d40b      	bmi.n	41bc <_tc_interrupt_handler+0x34>
    41a4:	06eb      	lsls	r3, r5, #27
    41a6:	d410      	bmi.n	41ca <_tc_interrupt_handler+0x42>
    41a8:	06ab      	lsls	r3, r5, #26
    41aa:	d415      	bmi.n	41d8 <_tc_interrupt_handler+0x50>
    41ac:	bd70      	pop	{r4, r5, r6, pc}
    41ae:	0020      	movs	r0, r4
    41b0:	68a3      	ldr	r3, [r4, #8]
    41b2:	4798      	blx	r3
    41b4:	2301      	movs	r3, #1
    41b6:	6822      	ldr	r2, [r4, #0]
    41b8:	7393      	strb	r3, [r2, #14]
    41ba:	e7f1      	b.n	41a0 <_tc_interrupt_handler+0x18>
    41bc:	0020      	movs	r0, r4
    41be:	68e3      	ldr	r3, [r4, #12]
    41c0:	4798      	blx	r3
    41c2:	2302      	movs	r3, #2
    41c4:	6822      	ldr	r2, [r4, #0]
    41c6:	7393      	strb	r3, [r2, #14]
    41c8:	e7ec      	b.n	41a4 <_tc_interrupt_handler+0x1c>
    41ca:	0020      	movs	r0, r4
    41cc:	6923      	ldr	r3, [r4, #16]
    41ce:	4798      	blx	r3
    41d0:	2310      	movs	r3, #16
    41d2:	6822      	ldr	r2, [r4, #0]
    41d4:	7393      	strb	r3, [r2, #14]
    41d6:	e7e7      	b.n	41a8 <_tc_interrupt_handler+0x20>
    41d8:	0020      	movs	r0, r4
    41da:	6963      	ldr	r3, [r4, #20]
    41dc:	4798      	blx	r3
    41de:	6823      	ldr	r3, [r4, #0]
    41e0:	2220      	movs	r2, #32
    41e2:	739a      	strb	r2, [r3, #14]
    41e4:	e7e2      	b.n	41ac <_tc_interrupt_handler+0x24>
    41e6:	46c0      	nop			; (mov r8, r8)
    41e8:	200045cc 	.word	0x200045cc

000041ec <TC3_Handler>:
    41ec:	b510      	push	{r4, lr}
    41ee:	2000      	movs	r0, #0
    41f0:	4b01      	ldr	r3, [pc, #4]	; (41f8 <TC3_Handler+0xc>)
    41f2:	4798      	blx	r3
    41f4:	bd10      	pop	{r4, pc}
    41f6:	46c0      	nop			; (mov r8, r8)
    41f8:	00004189 	.word	0x00004189

000041fc <TC4_Handler>:
    41fc:	b510      	push	{r4, lr}
    41fe:	2001      	movs	r0, #1
    4200:	4b01      	ldr	r3, [pc, #4]	; (4208 <TC4_Handler+0xc>)
    4202:	4798      	blx	r3
    4204:	bd10      	pop	{r4, pc}
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	00004189 	.word	0x00004189

0000420c <TC5_Handler>:
    420c:	b510      	push	{r4, lr}
    420e:	2002      	movs	r0, #2
    4210:	4b01      	ldr	r3, [pc, #4]	; (4218 <TC5_Handler+0xc>)
    4212:	4798      	blx	r3
    4214:	bd10      	pop	{r4, pc}
    4216:	46c0      	nop			; (mov r8, r8)
    4218:	00004189 	.word	0x00004189

0000421c <prvHelpCommand>:
    421c:	b570      	push	{r4, r5, r6, lr}
    421e:	000a      	movs	r2, r1
    4220:	4b09      	ldr	r3, [pc, #36]	; (4248 <prvHelpCommand+0x2c>)
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	2b00      	cmp	r3, #0
    4226:	d00a      	beq.n	423e <prvHelpCommand+0x22>
    4228:	4c07      	ldr	r4, [pc, #28]	; (4248 <prvHelpCommand+0x2c>)
    422a:	6825      	ldr	r5, [r4, #0]
    422c:	682b      	ldr	r3, [r5, #0]
    422e:	6859      	ldr	r1, [r3, #4]
    4230:	4b06      	ldr	r3, [pc, #24]	; (424c <prvHelpCommand+0x30>)
    4232:	4798      	blx	r3
    4234:	6868      	ldr	r0, [r5, #4]
    4236:	6020      	str	r0, [r4, #0]
    4238:	1e43      	subs	r3, r0, #1
    423a:	4198      	sbcs	r0, r3
    423c:	bd70      	pop	{r4, r5, r6, pc}
    423e:	4904      	ldr	r1, [pc, #16]	; (4250 <prvHelpCommand+0x34>)
    4240:	4b01      	ldr	r3, [pc, #4]	; (4248 <prvHelpCommand+0x2c>)
    4242:	6019      	str	r1, [r3, #0]
    4244:	e7f0      	b.n	4228 <prvHelpCommand+0xc>
    4246:	46c0      	nop			; (mov r8, r8)
    4248:	2000095c 	.word	0x2000095c
    424c:	00014663 	.word	0x00014663
    4250:	200000d8 	.word	0x200000d8

00004254 <FreeRTOS_CLIRegisterCommand>:
    4254:	b570      	push	{r4, r5, r6, lr}
    4256:	1e05      	subs	r5, r0, #0
    4258:	d006      	beq.n	4268 <FreeRTOS_CLIRegisterCommand+0x14>
    425a:	2008      	movs	r0, #8
    425c:	4b0a      	ldr	r3, [pc, #40]	; (4288 <FreeRTOS_CLIRegisterCommand+0x34>)
    425e:	4798      	blx	r3
    4260:	1e04      	subs	r4, r0, #0
    4262:	d103      	bne.n	426c <FreeRTOS_CLIRegisterCommand+0x18>
    4264:	b672      	cpsid	i
    4266:	e7fe      	b.n	4266 <FreeRTOS_CLIRegisterCommand+0x12>
    4268:	b672      	cpsid	i
    426a:	e7fe      	b.n	426a <FreeRTOS_CLIRegisterCommand+0x16>
    426c:	4b07      	ldr	r3, [pc, #28]	; (428c <FreeRTOS_CLIRegisterCommand+0x38>)
    426e:	4798      	blx	r3
    4270:	6025      	str	r5, [r4, #0]
    4272:	2300      	movs	r3, #0
    4274:	6063      	str	r3, [r4, #4]
    4276:	4b06      	ldr	r3, [pc, #24]	; (4290 <FreeRTOS_CLIRegisterCommand+0x3c>)
    4278:	681a      	ldr	r2, [r3, #0]
    427a:	6054      	str	r4, [r2, #4]
    427c:	601c      	str	r4, [r3, #0]
    427e:	4b05      	ldr	r3, [pc, #20]	; (4294 <FreeRTOS_CLIRegisterCommand+0x40>)
    4280:	4798      	blx	r3
    4282:	2001      	movs	r0, #1
    4284:	bd70      	pop	{r4, r5, r6, pc}
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	00005765 	.word	0x00005765
    428c:	000056a1 	.word	0x000056a1
    4290:	200000d4 	.word	0x200000d4
    4294:	000056b9 	.word	0x000056b9

00004298 <FreeRTOS_CLIProcessCommand>:
    4298:	b5f0      	push	{r4, r5, r6, r7, lr}
    429a:	46de      	mov	lr, fp
    429c:	4657      	mov	r7, sl
    429e:	464e      	mov	r6, r9
    42a0:	4645      	mov	r5, r8
    42a2:	b5e0      	push	{r5, r6, r7, lr}
    42a4:	b083      	sub	sp, #12
    42a6:	0006      	movs	r6, r0
    42a8:	9100      	str	r1, [sp, #0]
    42aa:	9201      	str	r2, [sp, #4]
    42ac:	4b39      	ldr	r3, [pc, #228]	; (4394 <FreeRTOS_CLIProcessCommand+0xfc>)
    42ae:	681b      	ldr	r3, [r3, #0]
    42b0:	2b00      	cmp	r3, #0
    42b2:	d011      	beq.n	42d8 <FreeRTOS_CLIProcessCommand+0x40>
    42b4:	681b      	ldr	r3, [r3, #0]
    42b6:	689b      	ldr	r3, [r3, #8]
    42b8:	0032      	movs	r2, r6
    42ba:	9901      	ldr	r1, [sp, #4]
    42bc:	9800      	ldr	r0, [sp, #0]
    42be:	4798      	blx	r3
    42c0:	2800      	cmp	r0, #0
    42c2:	d102      	bne.n	42ca <FreeRTOS_CLIProcessCommand+0x32>
    42c4:	2200      	movs	r2, #0
    42c6:	4b33      	ldr	r3, [pc, #204]	; (4394 <FreeRTOS_CLIProcessCommand+0xfc>)
    42c8:	601a      	str	r2, [r3, #0]
    42ca:	b003      	add	sp, #12
    42cc:	bc3c      	pop	{r2, r3, r4, r5}
    42ce:	4690      	mov	r8, r2
    42d0:	4699      	mov	r9, r3
    42d2:	46a2      	mov	sl, r4
    42d4:	46ab      	mov	fp, r5
    42d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42d8:	4c2f      	ldr	r4, [pc, #188]	; (4398 <FreeRTOS_CLIProcessCommand+0x100>)
    42da:	4b2e      	ldr	r3, [pc, #184]	; (4394 <FreeRTOS_CLIProcessCommand+0xfc>)
    42dc:	601c      	str	r4, [r3, #0]
    42de:	4b2f      	ldr	r3, [pc, #188]	; (439c <FreeRTOS_CLIProcessCommand+0x104>)
    42e0:	4699      	mov	r9, r3
    42e2:	2320      	movs	r3, #32
    42e4:	4698      	mov	r8, r3
    42e6:	4b2e      	ldr	r3, [pc, #184]	; (43a0 <FreeRTOS_CLIProcessCommand+0x108>)
    42e8:	469b      	mov	fp, r3
    42ea:	4b2a      	ldr	r3, [pc, #168]	; (4394 <FreeRTOS_CLIProcessCommand+0xfc>)
    42ec:	469a      	mov	sl, r3
    42ee:	e00a      	b.n	4306 <FreeRTOS_CLIProcessCommand+0x6e>
    42f0:	0002      	movs	r2, r0
    42f2:	0029      	movs	r1, r5
    42f4:	0030      	movs	r0, r6
    42f6:	47d8      	blx	fp
    42f8:	2800      	cmp	r0, #0
    42fa:	d00d      	beq.n	4318 <FreeRTOS_CLIProcessCommand+0x80>
    42fc:	6864      	ldr	r4, [r4, #4]
    42fe:	4653      	mov	r3, sl
    4300:	601c      	str	r4, [r3, #0]
    4302:	2c00      	cmp	r4, #0
    4304:	d03e      	beq.n	4384 <FreeRTOS_CLIProcessCommand+0xec>
    4306:	6827      	ldr	r7, [r4, #0]
    4308:	683d      	ldr	r5, [r7, #0]
    430a:	0028      	movs	r0, r5
    430c:	47c8      	blx	r9
    430e:	5c33      	ldrb	r3, [r6, r0]
    4310:	4642      	mov	r2, r8
    4312:	4393      	bics	r3, r2
    4314:	d1f2      	bne.n	42fc <FreeRTOS_CLIProcessCommand+0x64>
    4316:	e7eb      	b.n	42f0 <FreeRTOS_CLIProcessCommand+0x58>
    4318:	7b3f      	ldrb	r7, [r7, #12]
    431a:	b27f      	sxtb	r7, r7
    431c:	2f00      	cmp	r7, #0
    431e:	db2d      	blt.n	437c <FreeRTOS_CLIProcessCommand+0xe4>
    4320:	7833      	ldrb	r3, [r6, #0]
    4322:	2b00      	cmp	r3, #0
    4324:	d028      	beq.n	4378 <FreeRTOS_CLIProcessCommand+0xe0>
    4326:	0032      	movs	r2, r6
    4328:	2500      	movs	r5, #0
    432a:	2100      	movs	r1, #0
    432c:	2401      	movs	r4, #1
    432e:	e008      	b.n	4342 <FreeRTOS_CLIProcessCommand+0xaa>
    4330:	2901      	cmp	r1, #1
    4332:	d00a      	beq.n	434a <FreeRTOS_CLIProcessCommand+0xb2>
    4334:	3501      	adds	r5, #1
    4336:	b26d      	sxtb	r5, r5
    4338:	0021      	movs	r1, r4
    433a:	3201      	adds	r2, #1
    433c:	7813      	ldrb	r3, [r2, #0]
    433e:	2b00      	cmp	r3, #0
    4340:	d005      	beq.n	434e <FreeRTOS_CLIProcessCommand+0xb6>
    4342:	2b20      	cmp	r3, #32
    4344:	d0f4      	beq.n	4330 <FreeRTOS_CLIProcessCommand+0x98>
    4346:	0001      	movs	r1, r0
    4348:	e7f7      	b.n	433a <FreeRTOS_CLIProcessCommand+0xa2>
    434a:	0021      	movs	r1, r4
    434c:	e7f5      	b.n	433a <FreeRTOS_CLIProcessCommand+0xa2>
    434e:	2901      	cmp	r1, #1
    4350:	d00f      	beq.n	4372 <FreeRTOS_CLIProcessCommand+0xda>
    4352:	4b10      	ldr	r3, [pc, #64]	; (4394 <FreeRTOS_CLIProcessCommand+0xfc>)
    4354:	681b      	ldr	r3, [r3, #0]
    4356:	2b00      	cmp	r3, #0
    4358:	d014      	beq.n	4384 <FreeRTOS_CLIProcessCommand+0xec>
    435a:	42af      	cmp	r7, r5
    435c:	d0aa      	beq.n	42b4 <FreeRTOS_CLIProcessCommand+0x1c>
    435e:	9a01      	ldr	r2, [sp, #4]
    4360:	4910      	ldr	r1, [pc, #64]	; (43a4 <FreeRTOS_CLIProcessCommand+0x10c>)
    4362:	9800      	ldr	r0, [sp, #0]
    4364:	4b10      	ldr	r3, [pc, #64]	; (43a8 <FreeRTOS_CLIProcessCommand+0x110>)
    4366:	4798      	blx	r3
    4368:	2200      	movs	r2, #0
    436a:	4b0a      	ldr	r3, [pc, #40]	; (4394 <FreeRTOS_CLIProcessCommand+0xfc>)
    436c:	601a      	str	r2, [r3, #0]
    436e:	2000      	movs	r0, #0
    4370:	e7ab      	b.n	42ca <FreeRTOS_CLIProcessCommand+0x32>
    4372:	3d01      	subs	r5, #1
    4374:	b26d      	sxtb	r5, r5
    4376:	e7ec      	b.n	4352 <FreeRTOS_CLIProcessCommand+0xba>
    4378:	2500      	movs	r5, #0
    437a:	e7ea      	b.n	4352 <FreeRTOS_CLIProcessCommand+0xba>
    437c:	4b05      	ldr	r3, [pc, #20]	; (4394 <FreeRTOS_CLIProcessCommand+0xfc>)
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	2b00      	cmp	r3, #0
    4382:	d197      	bne.n	42b4 <FreeRTOS_CLIProcessCommand+0x1c>
    4384:	9a01      	ldr	r2, [sp, #4]
    4386:	4909      	ldr	r1, [pc, #36]	; (43ac <FreeRTOS_CLIProcessCommand+0x114>)
    4388:	9800      	ldr	r0, [sp, #0]
    438a:	4b07      	ldr	r3, [pc, #28]	; (43a8 <FreeRTOS_CLIProcessCommand+0x110>)
    438c:	4798      	blx	r3
    438e:	2000      	movs	r0, #0
    4390:	e79b      	b.n	42ca <FreeRTOS_CLIProcessCommand+0x32>
    4392:	46c0      	nop			; (mov r8, r8)
    4394:	20000958 	.word	0x20000958
    4398:	200000d8 	.word	0x200000d8
    439c:	00014633 	.word	0x00014633
    43a0:	00014641 	.word	0x00014641
    43a4:	00016dec 	.word	0x00016dec
    43a8:	00014663 	.word	0x00014663
    43ac:	00016e44 	.word	0x00016e44

000043b0 <FreeRTOS_CLIGetParameter>:
    43b0:	b530      	push	{r4, r5, lr}
    43b2:	2300      	movs	r3, #0
    43b4:	6013      	str	r3, [r2, #0]
    43b6:	2400      	movs	r4, #0
    43b8:	2900      	cmp	r1, #0
    43ba:	d10a      	bne.n	43d2 <FreeRTOS_CLIGetParameter+0x22>
    43bc:	2000      	movs	r0, #0
    43be:	e027      	b.n	4410 <FreeRTOS_CLIGetParameter+0x60>
    43c0:	3001      	adds	r0, #1
    43c2:	7803      	ldrb	r3, [r0, #0]
    43c4:	2b20      	cmp	r3, #32
    43c6:	d0fb      	beq.n	43c0 <FreeRTOS_CLIGetParameter+0x10>
    43c8:	2b00      	cmp	r3, #0
    43ca:	d020      	beq.n	440e <FreeRTOS_CLIGetParameter+0x5e>
    43cc:	3401      	adds	r4, #1
    43ce:	42a1      	cmp	r1, r4
    43d0:	d00b      	beq.n	43ea <FreeRTOS_CLIGetParameter+0x3a>
    43d2:	7803      	ldrb	r3, [r0, #0]
    43d4:	2b00      	cmp	r3, #0
    43d6:	d01e      	beq.n	4416 <FreeRTOS_CLIGetParameter+0x66>
    43d8:	2b20      	cmp	r3, #32
    43da:	d0f1      	beq.n	43c0 <FreeRTOS_CLIGetParameter+0x10>
    43dc:	3001      	adds	r0, #1
    43de:	7803      	ldrb	r3, [r0, #0]
    43e0:	2b00      	cmp	r3, #0
    43e2:	d018      	beq.n	4416 <FreeRTOS_CLIGetParameter+0x66>
    43e4:	2b20      	cmp	r3, #32
    43e6:	d1f9      	bne.n	43dc <FreeRTOS_CLIGetParameter+0x2c>
    43e8:	e7ea      	b.n	43c0 <FreeRTOS_CLIGetParameter+0x10>
    43ea:	7803      	ldrb	r3, [r0, #0]
    43ec:	2120      	movs	r1, #32
    43ee:	438b      	bics	r3, r1
    43f0:	d00f      	beq.n	4412 <FreeRTOS_CLIGetParameter+0x62>
    43f2:	0004      	movs	r4, r0
    43f4:	2520      	movs	r5, #32
    43f6:	6813      	ldr	r3, [r2, #0]
    43f8:	3301      	adds	r3, #1
    43fa:	6013      	str	r3, [r2, #0]
    43fc:	3401      	adds	r4, #1
    43fe:	7821      	ldrb	r1, [r4, #0]
    4400:	43a9      	bics	r1, r5
    4402:	d1f8      	bne.n	43f6 <FreeRTOS_CLIGetParameter+0x46>
    4404:	1e5a      	subs	r2, r3, #1
    4406:	4193      	sbcs	r3, r2
    4408:	425b      	negs	r3, r3
    440a:	4018      	ands	r0, r3
    440c:	e000      	b.n	4410 <FreeRTOS_CLIGetParameter+0x60>
    440e:	2000      	movs	r0, #0
    4410:	bd30      	pop	{r4, r5, pc}
    4412:	2000      	movs	r0, #0
    4414:	e7fc      	b.n	4410 <FreeRTOS_CLIGetParameter+0x60>
    4416:	7803      	ldrb	r3, [r0, #0]
    4418:	e7d6      	b.n	43c8 <FreeRTOS_CLIGetParameter+0x18>
	...

0000441c <prvTraceGetQueueType>:
    441c:	b510      	push	{r4, lr}
    441e:	4b01      	ldr	r3, [pc, #4]	; (4424 <prvTraceGetQueueType+0x8>)
    4420:	4798      	blx	r3
    4422:	bd10      	pop	{r4, pc}
    4424:	00006955 	.word	0x00006955

00004428 <prvTraceGetTaskNumberLow16>:
    4428:	b510      	push	{r4, lr}
    442a:	4b02      	ldr	r3, [pc, #8]	; (4434 <prvTraceGetTaskNumberLow16+0xc>)
    442c:	4798      	blx	r3
    442e:	b280      	uxth	r0, r0
    4430:	bd10      	pop	{r4, pc}
    4432:	46c0      	nop			; (mov r8, r8)
    4434:	000075a5 	.word	0x000075a5

00004438 <prvTraceGetTaskNumberHigh16>:
    4438:	b510      	push	{r4, lr}
    443a:	4b02      	ldr	r3, [pc, #8]	; (4444 <prvTraceGetTaskNumberHigh16+0xc>)
    443c:	4798      	blx	r3
    443e:	0c00      	lsrs	r0, r0, #16
    4440:	bd10      	pop	{r4, pc}
    4442:	46c0      	nop			; (mov r8, r8)
    4444:	000075a5 	.word	0x000075a5

00004448 <prvTraceSetTaskNumberLow16>:
    4448:	b570      	push	{r4, r5, r6, lr}
    444a:	0004      	movs	r4, r0
    444c:	000d      	movs	r5, r1
    444e:	4b04      	ldr	r3, [pc, #16]	; (4460 <prvTraceSetTaskNumberLow16+0x18>)
    4450:	4798      	blx	r3
    4452:	0c01      	lsrs	r1, r0, #16
    4454:	0409      	lsls	r1, r1, #16
    4456:	4329      	orrs	r1, r5
    4458:	0020      	movs	r0, r4
    445a:	4b02      	ldr	r3, [pc, #8]	; (4464 <prvTraceSetTaskNumberLow16+0x1c>)
    445c:	4798      	blx	r3
    445e:	bd70      	pop	{r4, r5, r6, pc}
    4460:	000075a5 	.word	0x000075a5
    4464:	000075b1 	.word	0x000075b1

00004468 <prvTraceSetTaskNumberHigh16>:
    4468:	b570      	push	{r4, r5, r6, lr}
    446a:	0004      	movs	r4, r0
    446c:	000d      	movs	r5, r1
    446e:	4b05      	ldr	r3, [pc, #20]	; (4484 <prvTraceSetTaskNumberHigh16+0x1c>)
    4470:	4798      	blx	r3
    4472:	0401      	lsls	r1, r0, #16
    4474:	0c09      	lsrs	r1, r1, #16
    4476:	042d      	lsls	r5, r5, #16
    4478:	4329      	orrs	r1, r5
    447a:	0020      	movs	r0, r4
    447c:	4b02      	ldr	r3, [pc, #8]	; (4488 <prvTraceSetTaskNumberHigh16+0x20>)
    447e:	4798      	blx	r3
    4480:	bd70      	pop	{r4, r5, r6, pc}
    4482:	46c0      	nop			; (mov r8, r8)
    4484:	000075a5 	.word	0x000075a5
    4488:	000075b1 	.word	0x000075b1

0000448c <prvTraceGetQueueNumberLow16>:
    448c:	b510      	push	{r4, lr}
    448e:	4b02      	ldr	r3, [pc, #8]	; (4498 <prvTraceGetQueueNumberLow16+0xc>)
    4490:	4798      	blx	r3
    4492:	b280      	uxth	r0, r0
    4494:	bd10      	pop	{r4, pc}
    4496:	46c0      	nop			; (mov r8, r8)
    4498:	0000694d 	.word	0x0000694d

0000449c <prvTraceGetQueueNumberHigh16>:
    449c:	b510      	push	{r4, lr}
    449e:	4b02      	ldr	r3, [pc, #8]	; (44a8 <prvTraceGetQueueNumberHigh16+0xc>)
    44a0:	4798      	blx	r3
    44a2:	0c00      	lsrs	r0, r0, #16
    44a4:	bd10      	pop	{r4, pc}
    44a6:	46c0      	nop			; (mov r8, r8)
    44a8:	0000694d 	.word	0x0000694d

000044ac <prvTraceSetQueueNumberLow16>:
    44ac:	b570      	push	{r4, r5, r6, lr}
    44ae:	0004      	movs	r4, r0
    44b0:	000d      	movs	r5, r1
    44b2:	4b04      	ldr	r3, [pc, #16]	; (44c4 <prvTraceSetQueueNumberLow16+0x18>)
    44b4:	4798      	blx	r3
    44b6:	0c01      	lsrs	r1, r0, #16
    44b8:	0409      	lsls	r1, r1, #16
    44ba:	4329      	orrs	r1, r5
    44bc:	0020      	movs	r0, r4
    44be:	4b02      	ldr	r3, [pc, #8]	; (44c8 <prvTraceSetQueueNumberLow16+0x1c>)
    44c0:	4798      	blx	r3
    44c2:	bd70      	pop	{r4, r5, r6, pc}
    44c4:	0000694d 	.word	0x0000694d
    44c8:	00006951 	.word	0x00006951

000044cc <prvTraceSetQueueNumberHigh16>:
    44cc:	b570      	push	{r4, r5, r6, lr}
    44ce:	0004      	movs	r4, r0
    44d0:	000d      	movs	r5, r1
    44d2:	4b05      	ldr	r3, [pc, #20]	; (44e8 <prvTraceSetQueueNumberHigh16+0x1c>)
    44d4:	4798      	blx	r3
    44d6:	0401      	lsls	r1, r0, #16
    44d8:	0c09      	lsrs	r1, r1, #16
    44da:	042d      	lsls	r5, r5, #16
    44dc:	4329      	orrs	r1, r5
    44de:	0020      	movs	r0, r4
    44e0:	4b02      	ldr	r3, [pc, #8]	; (44ec <prvTraceSetQueueNumberHigh16+0x20>)
    44e2:	4798      	blx	r3
    44e4:	bd70      	pop	{r4, r5, r6, pc}
    44e6:	46c0      	nop			; (mov r8, r8)
    44e8:	0000694d 	.word	0x0000694d
    44ec:	00006951 	.word	0x00006951

000044f0 <prvTraceGetCurrentTaskHandle>:
    44f0:	b510      	push	{r4, lr}
    44f2:	4b01      	ldr	r3, [pc, #4]	; (44f8 <prvTraceGetCurrentTaskHandle+0x8>)
    44f4:	4798      	blx	r3
    44f6:	bd10      	pop	{r4, pc}
    44f8:	000075b9 	.word	0x000075b9

000044fc <vTraceEnable>:
    44fc:	b510      	push	{r4, lr}
    44fe:	0004      	movs	r4, r0
    4500:	4b09      	ldr	r3, [pc, #36]	; (4528 <vTraceEnable+0x2c>)
    4502:	4798      	blx	r3
    4504:	2c01      	cmp	r4, #1
    4506:	d004      	beq.n	4512 <vTraceEnable+0x16>
    4508:	2c02      	cmp	r4, #2
    450a:	d005      	beq.n	4518 <vTraceEnable+0x1c>
    450c:	2c00      	cmp	r4, #0
    450e:	d107      	bne.n	4520 <vTraceEnable+0x24>
    4510:	bd10      	pop	{r4, pc}
    4512:	4b06      	ldr	r3, [pc, #24]	; (452c <vTraceEnable+0x30>)
    4514:	4798      	blx	r3
    4516:	e7fb      	b.n	4510 <vTraceEnable+0x14>
    4518:	4805      	ldr	r0, [pc, #20]	; (4530 <vTraceEnable+0x34>)
    451a:	4b06      	ldr	r3, [pc, #24]	; (4534 <vTraceEnable+0x38>)
    451c:	4798      	blx	r3
    451e:	e7f7      	b.n	4510 <vTraceEnable+0x14>
    4520:	4805      	ldr	r0, [pc, #20]	; (4538 <vTraceEnable+0x3c>)
    4522:	4b04      	ldr	r3, [pc, #16]	; (4534 <vTraceEnable+0x38>)
    4524:	4798      	blx	r3
    4526:	e7f3      	b.n	4510 <vTraceEnable+0x14>
    4528:	00004721 	.word	0x00004721
    452c:	00005501 	.word	0x00005501
    4530:	00017200 	.word	0x00017200
    4534:	000048f9 	.word	0x000048f9
    4538:	00017240 	.word	0x00017240

0000453c <vTraceInitObjectPropertyTable>:
    453c:	b510      	push	{r4, lr}
    453e:	4b2f      	ldr	r3, [pc, #188]	; (45fc <vTraceInitObjectPropertyTable+0xc0>)
    4540:	681b      	ldr	r3, [r3, #0]
    4542:	2209      	movs	r2, #9
    4544:	65da      	str	r2, [r3, #92]	; 0x5c
    4546:	3201      	adds	r2, #1
    4548:	2164      	movs	r1, #100	; 0x64
    454a:	545a      	strb	r2, [r3, r1]
    454c:	3101      	adds	r1, #1
    454e:	545a      	strb	r2, [r3, r1]
    4550:	3101      	adds	r1, #1
    4552:	545a      	strb	r2, [r3, r1]
    4554:	3205      	adds	r2, #5
    4556:	3101      	adds	r1, #1
    4558:	545a      	strb	r2, [r3, r1]
    455a:	3962      	subs	r1, #98	; 0x62
    455c:	2068      	movs	r0, #104	; 0x68
    455e:	5419      	strb	r1, [r3, r0]
    4560:	3001      	adds	r0, #1
    4562:	5419      	strb	r1, [r3, r0]
    4564:	3001      	adds	r0, #1
    4566:	5419      	strb	r1, [r3, r0]
    4568:	3001      	adds	r0, #1
    456a:	5419      	strb	r1, [r3, r0]
    456c:	3001      	adds	r0, #1
    456e:	5419      	strb	r1, [r3, r0]
    4570:	316b      	adds	r1, #107	; 0x6b
    4572:	545a      	strb	r2, [r3, r1]
    4574:	3101      	adds	r1, #1
    4576:	545a      	strb	r2, [r3, r1]
    4578:	3101      	adds	r1, #1
    457a:	545a      	strb	r2, [r3, r1]
    457c:	3101      	adds	r1, #1
    457e:	545a      	strb	r2, [r3, r1]
    4580:	3101      	adds	r1, #1
    4582:	545a      	strb	r2, [r3, r1]
    4584:	3101      	adds	r1, #1
    4586:	545a      	strb	r2, [r3, r1]
    4588:	3101      	adds	r1, #1
    458a:	545a      	strb	r2, [r3, r1]
    458c:	3101      	adds	r1, #1
    458e:	545a      	strb	r2, [r3, r1]
    4590:	3101      	adds	r1, #1
    4592:	545a      	strb	r2, [r3, r1]
    4594:	3968      	subs	r1, #104	; 0x68
    4596:	326d      	adds	r2, #109	; 0x6d
    4598:	5499      	strb	r1, [r3, r2]
    459a:	3201      	adds	r2, #1
    459c:	5499      	strb	r1, [r3, r2]
    459e:	3201      	adds	r2, #1
    45a0:	5499      	strb	r1, [r3, r2]
    45a2:	3a6b      	subs	r2, #107	; 0x6b
    45a4:	3013      	adds	r0, #19
    45a6:	541a      	strb	r2, [r3, r0]
    45a8:	2411      	movs	r4, #17
    45aa:	3001      	adds	r0, #1
    45ac:	541c      	strb	r4, [r3, r0]
    45ae:	3001      	adds	r0, #1
    45b0:	5419      	strb	r1, [r3, r0]
    45b2:	3172      	adds	r1, #114	; 0x72
    45b4:	545a      	strb	r2, [r3, r1]
    45b6:	3101      	adds	r1, #1
    45b8:	545a      	strb	r2, [r3, r1]
    45ba:	3101      	adds	r1, #1
    45bc:	545a      	strb	r2, [r3, r1]
    45be:	2100      	movs	r1, #0
    45c0:	3275      	adds	r2, #117	; 0x75
    45c2:	5299      	strh	r1, [r3, r2]
    45c4:	31a0      	adds	r1, #160	; 0xa0
    45c6:	3202      	adds	r2, #2
    45c8:	5299      	strh	r1, [r3, r2]
    45ca:	31a0      	adds	r1, #160	; 0xa0
    45cc:	3202      	adds	r2, #2
    45ce:	5299      	strh	r1, [r3, r2]
    45d0:	31a0      	adds	r1, #160	; 0xa0
    45d2:	3202      	adds	r2, #2
    45d4:	5299      	strh	r1, [r3, r2]
    45d6:	490a      	ldr	r1, [pc, #40]	; (4600 <vTraceInitObjectPropertyTable+0xc4>)
    45d8:	3202      	adds	r2, #2
    45da:	5299      	strh	r1, [r3, r2]
    45dc:	4909      	ldr	r1, [pc, #36]	; (4604 <vTraceInitObjectPropertyTable+0xc8>)
    45de:	3202      	adds	r2, #2
    45e0:	5299      	strh	r1, [r3, r2]
    45e2:	4909      	ldr	r1, [pc, #36]	; (4608 <vTraceInitObjectPropertyTable+0xcc>)
    45e4:	3202      	adds	r2, #2
    45e6:	5299      	strh	r1, [r3, r2]
    45e8:	4908      	ldr	r1, [pc, #32]	; (460c <vTraceInitObjectPropertyTable+0xd0>)
    45ea:	3202      	adds	r2, #2
    45ec:	5299      	strh	r1, [r3, r2]
    45ee:	315f      	adds	r1, #95	; 0x5f
    45f0:	3202      	adds	r2, #2
    45f2:	5299      	strh	r1, [r3, r2]
    45f4:	4a06      	ldr	r2, [pc, #24]	; (4610 <vTraceInitObjectPropertyTable+0xd4>)
    45f6:	661a      	str	r2, [r3, #96]	; 0x60
    45f8:	bd10      	pop	{r4, pc}
    45fa:	46c0      	nop			; (mov r8, r8)
    45fc:	20000960 	.word	0x20000960
    4600:	000002fd 	.word	0x000002fd
    4604:	00000352 	.word	0x00000352
    4608:	000003a2 	.word	0x000003a2
    460c:	00000401 	.word	0x00000401
    4610:	000004bf 	.word	0x000004bf

00004614 <vTraceInitObjectHandleStack>:
    4614:	4b17      	ldr	r3, [pc, #92]	; (4674 <vTraceInitObjectHandleStack+0x60>)
    4616:	2200      	movs	r2, #0
    4618:	825a      	strh	r2, [r3, #18]
    461a:	801a      	strh	r2, [r3, #0]
    461c:	320a      	adds	r2, #10
    461e:	829a      	strh	r2, [r3, #20]
    4620:	805a      	strh	r2, [r3, #2]
    4622:	320a      	adds	r2, #10
    4624:	82da      	strh	r2, [r3, #22]
    4626:	809a      	strh	r2, [r3, #4]
    4628:	320a      	adds	r2, #10
    462a:	831a      	strh	r2, [r3, #24]
    462c:	80da      	strh	r2, [r3, #6]
    462e:	320f      	adds	r2, #15
    4630:	835a      	strh	r2, [r3, #26]
    4632:	811a      	strh	r2, [r3, #8]
    4634:	3205      	adds	r2, #5
    4636:	839a      	strh	r2, [r3, #28]
    4638:	815a      	strh	r2, [r3, #10]
    463a:	3205      	adds	r2, #5
    463c:	83da      	strh	r2, [r3, #30]
    463e:	819a      	strh	r2, [r3, #12]
    4640:	3205      	adds	r2, #5
    4642:	841a      	strh	r2, [r3, #32]
    4644:	81da      	strh	r2, [r3, #14]
    4646:	3205      	adds	r2, #5
    4648:	845a      	strh	r2, [r3, #34]	; 0x22
    464a:	821a      	strh	r2, [r3, #16]
    464c:	3a38      	subs	r2, #56	; 0x38
    464e:	849a      	strh	r2, [r3, #36]	; 0x24
    4650:	320a      	adds	r2, #10
    4652:	84da      	strh	r2, [r3, #38]	; 0x26
    4654:	320a      	adds	r2, #10
    4656:	851a      	strh	r2, [r3, #40]	; 0x28
    4658:	320f      	adds	r2, #15
    465a:	855a      	strh	r2, [r3, #42]	; 0x2a
    465c:	3205      	adds	r2, #5
    465e:	859a      	strh	r2, [r3, #44]	; 0x2c
    4660:	3205      	adds	r2, #5
    4662:	85da      	strh	r2, [r3, #46]	; 0x2e
    4664:	3205      	adds	r2, #5
    4666:	861a      	strh	r2, [r3, #48]	; 0x30
    4668:	3205      	adds	r2, #5
    466a:	865a      	strh	r2, [r3, #50]	; 0x32
    466c:	3205      	adds	r2, #5
    466e:	869a      	strh	r2, [r3, #52]	; 0x34
    4670:	4770      	bx	lr
    4672:	46c0      	nop			; (mov r8, r8)
    4674:	2000097c 	.word	0x2000097c

00004678 <pszTraceGetErrorNotEnoughHandles>:
    4678:	2808      	cmp	r0, #8
    467a:	d813      	bhi.n	46a4 <pszTraceGetErrorNotEnoughHandles+0x2c>
    467c:	0080      	lsls	r0, r0, #2
    467e:	4b0b      	ldr	r3, [pc, #44]	; (46ac <pszTraceGetErrorNotEnoughHandles+0x34>)
    4680:	581b      	ldr	r3, [r3, r0]
    4682:	469f      	mov	pc, r3
    4684:	480a      	ldr	r0, [pc, #40]	; (46b0 <pszTraceGetErrorNotEnoughHandles+0x38>)
    4686:	e010      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    4688:	480a      	ldr	r0, [pc, #40]	; (46b4 <pszTraceGetErrorNotEnoughHandles+0x3c>)
    468a:	e00e      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    468c:	480a      	ldr	r0, [pc, #40]	; (46b8 <pszTraceGetErrorNotEnoughHandles+0x40>)
    468e:	e00c      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    4690:	480a      	ldr	r0, [pc, #40]	; (46bc <pszTraceGetErrorNotEnoughHandles+0x44>)
    4692:	e00a      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    4694:	480a      	ldr	r0, [pc, #40]	; (46c0 <pszTraceGetErrorNotEnoughHandles+0x48>)
    4696:	e008      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    4698:	480a      	ldr	r0, [pc, #40]	; (46c4 <pszTraceGetErrorNotEnoughHandles+0x4c>)
    469a:	e006      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    469c:	480a      	ldr	r0, [pc, #40]	; (46c8 <pszTraceGetErrorNotEnoughHandles+0x50>)
    469e:	e004      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    46a0:	480a      	ldr	r0, [pc, #40]	; (46cc <pszTraceGetErrorNotEnoughHandles+0x54>)
    46a2:	e002      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    46a4:	480a      	ldr	r0, [pc, #40]	; (46d0 <pszTraceGetErrorNotEnoughHandles+0x58>)
    46a6:	e000      	b.n	46aa <pszTraceGetErrorNotEnoughHandles+0x32>
    46a8:	480a      	ldr	r0, [pc, #40]	; (46d4 <pszTraceGetErrorNotEnoughHandles+0x5c>)
    46aa:	4770      	bx	lr
    46ac:	00016edc 	.word	0x00016edc
    46b0:	00016f48 	.word	0x00016f48
    46b4:	00016f90 	.word	0x00016f90
    46b8:	00016fe4 	.word	0x00016fe4
    46bc:	00017030 	.word	0x00017030
    46c0:	0001707c 	.word	0x0001707c
    46c4:	000170c8 	.word	0x000170c8
    46c8:	0001711c 	.word	0x0001711c
    46cc:	00017174 	.word	0x00017174
    46d0:	000171d0 	.word	0x000171d0
    46d4:	00016f00 	.word	0x00016f00

000046d8 <prvStrncpy>:
    46d8:	b510      	push	{r4, lr}
    46da:	2a00      	cmp	r2, #0
    46dc:	d00d      	beq.n	46fa <prvStrncpy+0x22>
    46de:	780b      	ldrb	r3, [r1, #0]
    46e0:	7003      	strb	r3, [r0, #0]
    46e2:	780b      	ldrb	r3, [r1, #0]
    46e4:	2b00      	cmp	r3, #0
    46e6:	d008      	beq.n	46fa <prvStrncpy+0x22>
    46e8:	2300      	movs	r3, #0
    46ea:	3301      	adds	r3, #1
    46ec:	429a      	cmp	r2, r3
    46ee:	d004      	beq.n	46fa <prvStrncpy+0x22>
    46f0:	5ccc      	ldrb	r4, [r1, r3]
    46f2:	54c4      	strb	r4, [r0, r3]
    46f4:	5ccc      	ldrb	r4, [r1, r3]
    46f6:	2c00      	cmp	r4, #0
    46f8:	d1f7      	bne.n	46ea <prvStrncpy+0x12>
    46fa:	bd10      	pop	{r4, pc}

000046fc <vTraceStop>:
    46fc:	b510      	push	{r4, lr}
    46fe:	4b06      	ldr	r3, [pc, #24]	; (4718 <vTraceStop+0x1c>)
    4700:	681b      	ldr	r3, [r3, #0]
    4702:	2b00      	cmp	r3, #0
    4704:	d001      	beq.n	470a <vTraceStop+0xe>
    4706:	2200      	movs	r2, #0
    4708:	631a      	str	r2, [r3, #48]	; 0x30
    470a:	4b04      	ldr	r3, [pc, #16]	; (471c <vTraceStop+0x20>)
    470c:	681b      	ldr	r3, [r3, #0]
    470e:	2b00      	cmp	r3, #0
    4710:	d000      	beq.n	4714 <vTraceStop+0x18>
    4712:	4798      	blx	r3
    4714:	bd10      	pop	{r4, pc}
    4716:	46c0      	nop			; (mov r8, r8)
    4718:	20000960 	.word	0x20000960
    471c:	20000a28 	.word	0x20000a28

00004720 <prvTraceInitTraceData>:
    4720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4722:	46de      	mov	lr, fp
    4724:	4657      	mov	r7, sl
    4726:	464e      	mov	r6, r9
    4728:	4645      	mov	r5, r8
    472a:	b5e0      	push	{r5, r6, r7, lr}
    472c:	4b51      	ldr	r3, [pc, #324]	; (4874 <prvTraceInitTraceData+0x154>)
    472e:	681b      	ldr	r3, [r3, #0]
    4730:	2b00      	cmp	r3, #0
    4732:	d100      	bne.n	4736 <prvTraceInitTraceData+0x16>
    4734:	e099      	b.n	486a <prvTraceInitTraceData+0x14a>
    4736:	781b      	ldrb	r3, [r3, #0]
    4738:	2b01      	cmp	r3, #1
    473a:	d100      	bne.n	473e <prvTraceInitTraceData+0x1e>
    473c:	e08f      	b.n	485e <prvTraceInitTraceData+0x13e>
    473e:	4b4e      	ldr	r3, [pc, #312]	; (4878 <prvTraceInitTraceData+0x158>)
    4740:	681a      	ldr	r2, [r3, #0]
    4742:	4b4e      	ldr	r3, [pc, #312]	; (487c <prvTraceInitTraceData+0x15c>)
    4744:	601a      	str	r2, [r3, #0]
    4746:	4c4b      	ldr	r4, [pc, #300]	; (4874 <prvTraceInitTraceData+0x154>)
    4748:	4d4d      	ldr	r5, [pc, #308]	; (4880 <prvTraceInitTraceData+0x160>)
    474a:	002a      	movs	r2, r5
    474c:	2100      	movs	r1, #0
    474e:	6820      	ldr	r0, [r4, #0]
    4750:	4b4c      	ldr	r3, [pc, #304]	; (4884 <prvTraceInitTraceData+0x164>)
    4752:	4798      	blx	r3
    4754:	6823      	ldr	r3, [r4, #0]
    4756:	4a4c      	ldr	r2, [pc, #304]	; (4888 <prvTraceInitTraceData+0x168>)
    4758:	819a      	strh	r2, [r3, #12]
    475a:	2205      	movs	r2, #5
    475c:	739a      	strb	r2, [r3, #14]
    475e:	2200      	movs	r2, #0
    4760:	73da      	strb	r2, [r3, #15]
    4762:	611d      	str	r5, [r3, #16]
    4764:	21c8      	movs	r1, #200	; 0xc8
    4766:	0049      	lsls	r1, r1, #1
    4768:	6199      	str	r1, [r3, #24]
    476a:	4948      	ldr	r1, [pc, #288]	; (488c <prvTraceInitTraceData+0x16c>)
    476c:	6559      	str	r1, [r3, #84]	; 0x54
    476e:	659a      	str	r2, [r3, #88]	; 0x58
    4770:	635a      	str	r2, [r3, #52]	; 0x34
    4772:	4b47      	ldr	r3, [pc, #284]	; (4890 <prvTraceInitTraceData+0x170>)
    4774:	4798      	blx	r3
    4776:	6820      	ldr	r0, [r4, #0]
    4778:	4a46      	ldr	r2, [pc, #280]	; (4894 <prvTraceInitTraceData+0x174>)
    477a:	4b47      	ldr	r3, [pc, #284]	; (4898 <prvTraceInitTraceData+0x178>)
    477c:	50c2      	str	r2, [r0, r3]
    477e:	22c8      	movs	r2, #200	; 0xc8
    4780:	0092      	lsls	r2, r2, #2
    4782:	3304      	adds	r3, #4
    4784:	50c2      	str	r2, [r0, r3]
    4786:	4b45      	ldr	r3, [pc, #276]	; (489c <prvTraceInitTraceData+0x17c>)
    4788:	2201      	movs	r2, #1
    478a:	50c2      	str	r2, [r0, r3]
    478c:	4a44      	ldr	r2, [pc, #272]	; (48a0 <prvTraceInitTraceData+0x180>)
    478e:	2391      	movs	r3, #145	; 0x91
    4790:	011b      	lsls	r3, r3, #4
    4792:	50c2      	str	r2, [r0, r3]
    4794:	4b43      	ldr	r3, [pc, #268]	; (48a4 <prvTraceInitTraceData+0x184>)
    4796:	469c      	mov	ip, r3
    4798:	4460      	add	r0, ip
    479a:	2250      	movs	r2, #80	; 0x50
    479c:	4942      	ldr	r1, [pc, #264]	; (48a8 <prvTraceInitTraceData+0x188>)
    479e:	4b43      	ldr	r3, [pc, #268]	; (48ac <prvTraceInitTraceData+0x18c>)
    47a0:	4798      	blx	r3
    47a2:	6823      	ldr	r3, [r4, #0]
    47a4:	4942      	ldr	r1, [pc, #264]	; (48b0 <prvTraceInitTraceData+0x190>)
    47a6:	4a43      	ldr	r2, [pc, #268]	; (48b4 <prvTraceInitTraceData+0x194>)
    47a8:	5099      	str	r1, [r3, r2]
    47aa:	210a      	movs	r1, #10
    47ac:	4a42      	ldr	r2, [pc, #264]	; (48b8 <prvTraceInitTraceData+0x198>)
    47ae:	5499      	strb	r1, [r3, r2]
    47b0:	3101      	adds	r1, #1
    47b2:	4a42      	ldr	r2, [pc, #264]	; (48bc <prvTraceInitTraceData+0x19c>)
    47b4:	5499      	strb	r1, [r3, r2]
    47b6:	3101      	adds	r1, #1
    47b8:	4a41      	ldr	r2, [pc, #260]	; (48c0 <prvTraceInitTraceData+0x1a0>)
    47ba:	5499      	strb	r1, [r3, r2]
    47bc:	3101      	adds	r1, #1
    47be:	4a41      	ldr	r2, [pc, #260]	; (48c4 <prvTraceInitTraceData+0x1a4>)
    47c0:	5499      	strb	r1, [r3, r2]
    47c2:	3201      	adds	r2, #1
    47c4:	3164      	adds	r1, #100	; 0x64
    47c6:	5499      	strb	r1, [r3, r2]
    47c8:	2572      	movs	r5, #114	; 0x72
    47ca:	4a3f      	ldr	r2, [pc, #252]	; (48c8 <prvTraceInitTraceData+0x1a8>)
    47cc:	549d      	strb	r5, [r3, r2]
    47ce:	2673      	movs	r6, #115	; 0x73
    47d0:	4a3e      	ldr	r2, [pc, #248]	; (48cc <prvTraceInitTraceData+0x1ac>)
    47d2:	549e      	strb	r6, [r3, r2]
    47d4:	2774      	movs	r7, #116	; 0x74
    47d6:	4a3e      	ldr	r2, [pc, #248]	; (48d0 <prvTraceInitTraceData+0x1b0>)
    47d8:	549f      	strb	r7, [r3, r2]
    47da:	22f1      	movs	r2, #241	; 0xf1
    47dc:	4690      	mov	r8, r2
    47de:	4a3d      	ldr	r2, [pc, #244]	; (48d4 <prvTraceInitTraceData+0x1b4>)
    47e0:	4641      	mov	r1, r8
    47e2:	5499      	strb	r1, [r3, r2]
    47e4:	22f2      	movs	r2, #242	; 0xf2
    47e6:	4691      	mov	r9, r2
    47e8:	4a3b      	ldr	r2, [pc, #236]	; (48d8 <prvTraceInitTraceData+0x1b8>)
    47ea:	4649      	mov	r1, r9
    47ec:	5499      	strb	r1, [r3, r2]
    47ee:	22f3      	movs	r2, #243	; 0xf3
    47f0:	4692      	mov	sl, r2
    47f2:	4a3a      	ldr	r2, [pc, #232]	; (48dc <prvTraceInitTraceData+0x1bc>)
    47f4:	4651      	mov	r1, sl
    47f6:	5499      	strb	r1, [r3, r2]
    47f8:	22f4      	movs	r2, #244	; 0xf4
    47fa:	4693      	mov	fp, r2
    47fc:	4a38      	ldr	r2, [pc, #224]	; (48e0 <prvTraceInitTraceData+0x1c0>)
    47fe:	4659      	mov	r1, fp
    4800:	5499      	strb	r1, [r3, r2]
    4802:	4b38      	ldr	r3, [pc, #224]	; (48e4 <prvTraceInitTraceData+0x1c4>)
    4804:	4798      	blx	r3
    4806:	6823      	ldr	r3, [r4, #0]
    4808:	465a      	mov	r2, fp
    480a:	72da      	strb	r2, [r3, #11]
    480c:	4652      	mov	r2, sl
    480e:	729a      	strb	r2, [r3, #10]
    4810:	464a      	mov	r2, r9
    4812:	725a      	strb	r2, [r3, #9]
    4814:	4642      	mov	r2, r8
    4816:	721a      	strb	r2, [r3, #8]
    4818:	71df      	strb	r7, [r3, #7]
    481a:	719e      	strb	r6, [r3, #6]
    481c:	715d      	strb	r5, [r3, #5]
    481e:	2271      	movs	r2, #113	; 0x71
    4820:	711a      	strb	r2, [r3, #4]
    4822:	2204      	movs	r2, #4
    4824:	70da      	strb	r2, [r3, #3]
    4826:	2303      	movs	r3, #3
    4828:	6822      	ldr	r2, [r4, #0]
    482a:	7093      	strb	r3, [r2, #2]
    482c:	3b01      	subs	r3, #1
    482e:	6822      	ldr	r2, [r4, #0]
    4830:	7053      	strb	r3, [r2, #1]
    4832:	6823      	ldr	r3, [r4, #0]
    4834:	2201      	movs	r2, #1
    4836:	701a      	strb	r2, [r3, #0]
    4838:	4b2b      	ldr	r3, [pc, #172]	; (48e8 <prvTraceInitTraceData+0x1c8>)
    483a:	6819      	ldr	r1, [r3, #0]
    483c:	2900      	cmp	r1, #0
    483e:	d00e      	beq.n	485e <prvTraceInitTraceData+0x13e>
    4840:	4c0c      	ldr	r4, [pc, #48]	; (4874 <prvTraceInitTraceData+0x154>)
    4842:	6823      	ldr	r3, [r4, #0]
    4844:	4a17      	ldr	r2, [pc, #92]	; (48a4 <prvTraceInitTraceData+0x184>)
    4846:	4694      	mov	ip, r2
    4848:	4463      	add	r3, ip
    484a:	0018      	movs	r0, r3
    484c:	2250      	movs	r2, #80	; 0x50
    484e:	4b17      	ldr	r3, [pc, #92]	; (48ac <prvTraceInitTraceData+0x18c>)
    4850:	4798      	blx	r3
    4852:	6822      	ldr	r2, [r4, #0]
    4854:	2101      	movs	r1, #1
    4856:	4b25      	ldr	r3, [pc, #148]	; (48ec <prvTraceInitTraceData+0x1cc>)
    4858:	50d1      	str	r1, [r2, r3]
    485a:	4b25      	ldr	r3, [pc, #148]	; (48f0 <prvTraceInitTraceData+0x1d0>)
    485c:	4798      	blx	r3
    485e:	bc3c      	pop	{r2, r3, r4, r5}
    4860:	4690      	mov	r8, r2
    4862:	4699      	mov	r9, r3
    4864:	46a2      	mov	sl, r4
    4866:	46ab      	mov	fp, r5
    4868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    486a:	4a22      	ldr	r2, [pc, #136]	; (48f4 <prvTraceInitTraceData+0x1d4>)
    486c:	4b01      	ldr	r3, [pc, #4]	; (4874 <prvTraceInitTraceData+0x154>)
    486e:	601a      	str	r2, [r3, #0]
    4870:	e765      	b.n	473e <prvTraceInitTraceData+0x1e>
    4872:	46c0      	nop			; (mov r8, r8)
    4874:	20000960 	.word	0x20000960
    4878:	e000e018 	.word	0xe000e018
    487c:	20005590 	.word	0x20005590
    4880:	00000fb8 	.word	0x00000fb8
    4884:	0001427b 	.word	0x0001427b
    4888:	00001aa1 	.word	0x00001aa1
    488c:	f0f0f0f0 	.word	0xf0f0f0f0
    4890:	0000453d 	.word	0x0000453d
    4894:	f1f1f1f1 	.word	0xf1f1f1f1
    4898:	0000055c 	.word	0x0000055c
    489c:	00000564 	.word	0x00000564
    48a0:	f2f2f2f2 	.word	0xf2f2f2f2
    48a4:	00000914 	.word	0x00000914
    48a8:	00017440 	.word	0x00017440
    48ac:	000046d9 	.word	0x000046d9
    48b0:	f3f3f3f3 	.word	0xf3f3f3f3
    48b4:	00000964 	.word	0x00000964
    48b8:	00000fac 	.word	0x00000fac
    48bc:	00000fad 	.word	0x00000fad
    48c0:	00000fae 	.word	0x00000fae
    48c4:	00000faf 	.word	0x00000faf
    48c8:	00000fb1 	.word	0x00000fb1
    48cc:	00000fb2 	.word	0x00000fb2
    48d0:	00000fb3 	.word	0x00000fb3
    48d4:	00000fb4 	.word	0x00000fb4
    48d8:	00000fb5 	.word	0x00000fb5
    48dc:	00000fb6 	.word	0x00000fb6
    48e0:	00000fb7 	.word	0x00000fb7
    48e4:	00004615 	.word	0x00004615
    48e8:	20000a18 	.word	0x20000a18
    48ec:	0000090c 	.word	0x0000090c
    48f0:	000046fd 	.word	0x000046fd
    48f4:	200045d8 	.word	0x200045d8

000048f8 <prvTraceError>:
    48f8:	b510      	push	{r4, lr}
    48fa:	0004      	movs	r4, r0
    48fc:	4b0e      	ldr	r3, [pc, #56]	; (4938 <prvTraceError+0x40>)
    48fe:	681b      	ldr	r3, [r3, #0]
    4900:	2b00      	cmp	r3, #0
    4902:	d001      	beq.n	4908 <prvTraceError+0x10>
    4904:	4b0d      	ldr	r3, [pc, #52]	; (493c <prvTraceError+0x44>)
    4906:	4798      	blx	r3
    4908:	4b0d      	ldr	r3, [pc, #52]	; (4940 <prvTraceError+0x48>)
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	2b00      	cmp	r3, #0
    490e:	d000      	beq.n	4912 <prvTraceError+0x1a>
    4910:	bd10      	pop	{r4, pc}
    4912:	4b0b      	ldr	r3, [pc, #44]	; (4940 <prvTraceError+0x48>)
    4914:	601c      	str	r4, [r3, #0]
    4916:	4b08      	ldr	r3, [pc, #32]	; (4938 <prvTraceError+0x40>)
    4918:	6818      	ldr	r0, [r3, #0]
    491a:	2800      	cmp	r0, #0
    491c:	d0f8      	beq.n	4910 <prvTraceError+0x18>
    491e:	4b09      	ldr	r3, [pc, #36]	; (4944 <prvTraceError+0x4c>)
    4920:	469c      	mov	ip, r3
    4922:	4460      	add	r0, ip
    4924:	2250      	movs	r2, #80	; 0x50
    4926:	0021      	movs	r1, r4
    4928:	4b07      	ldr	r3, [pc, #28]	; (4948 <prvTraceError+0x50>)
    492a:	4798      	blx	r3
    492c:	4b02      	ldr	r3, [pc, #8]	; (4938 <prvTraceError+0x40>)
    492e:	681a      	ldr	r2, [r3, #0]
    4930:	2101      	movs	r1, #1
    4932:	4b06      	ldr	r3, [pc, #24]	; (494c <prvTraceError+0x54>)
    4934:	50d1      	str	r1, [r2, r3]
    4936:	e7eb      	b.n	4910 <prvTraceError+0x18>
    4938:	20000960 	.word	0x20000960
    493c:	000046fd 	.word	0x000046fd
    4940:	20000a18 	.word	0x20000a18
    4944:	00000914 	.word	0x00000914
    4948:	000046d9 	.word	0x000046d9
    494c:	0000090c 	.word	0x0000090c

00004950 <prvTraceNextFreeEventBufferSlot>:
    4950:	b510      	push	{r4, lr}
    4952:	4b0b      	ldr	r3, [pc, #44]	; (4980 <prvTraceNextFreeEventBufferSlot+0x30>)
    4954:	6818      	ldr	r0, [r3, #0]
    4956:	6b03      	ldr	r3, [r0, #48]	; 0x30
    4958:	2b00      	cmp	r3, #0
    495a:	d00f      	beq.n	497c <prvTraceNextFreeEventBufferSlot+0x2c>
    495c:	69c3      	ldr	r3, [r0, #28]
    495e:	2290      	movs	r2, #144	; 0x90
    4960:	32ff      	adds	r2, #255	; 0xff
    4962:	4293      	cmp	r3, r2
    4964:	d805      	bhi.n	4972 <prvTraceNextFreeEventBufferSlot+0x22>
    4966:	009b      	lsls	r3, r3, #2
    4968:	4a06      	ldr	r2, [pc, #24]	; (4984 <prvTraceNextFreeEventBufferSlot+0x34>)
    496a:	4694      	mov	ip, r2
    496c:	4463      	add	r3, ip
    496e:	18c0      	adds	r0, r0, r3
    4970:	bd10      	pop	{r4, pc}
    4972:	4805      	ldr	r0, [pc, #20]	; (4988 <prvTraceNextFreeEventBufferSlot+0x38>)
    4974:	4b05      	ldr	r3, [pc, #20]	; (498c <prvTraceNextFreeEventBufferSlot+0x3c>)
    4976:	4798      	blx	r3
    4978:	2000      	movs	r0, #0
    497a:	e7f9      	b.n	4970 <prvTraceNextFreeEventBufferSlot+0x20>
    497c:	2000      	movs	r0, #0
    497e:	e7f7      	b.n	4970 <prvTraceNextFreeEventBufferSlot+0x20>
    4980:	20000960 	.word	0x20000960
    4984:	00000968 	.word	0x00000968
    4988:	00017454 	.word	0x00017454
    498c:	000048f9 	.word	0x000048f9

00004990 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
    4990:	b5f0      	push	{r4, r5, r6, r7, lr}
    4992:	46c6      	mov	lr, r8
    4994:	b500      	push	{lr}
    4996:	2800      	cmp	r0, #0
    4998:	d006      	beq.n	49a8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x18>
    499a:	0007      	movs	r7, r0
    499c:	2500      	movs	r5, #0
    499e:	2800      	cmp	r0, #0
    49a0:	d005      	beq.n	49ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    49a2:	4b23      	ldr	r3, [pc, #140]	; (4a30 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa0>)
    49a4:	4698      	mov	r8, r3
    49a6:	e00a      	b.n	49be <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x2e>
    49a8:	4822      	ldr	r0, [pc, #136]	; (4a34 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa4>)
    49aa:	4b23      	ldr	r3, [pc, #140]	; (4a38 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xa8>)
    49ac:	4798      	blx	r3
    49ae:	bc04      	pop	{r2}
    49b0:	4690      	mov	r8, r2
    49b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49b4:	2a01      	cmp	r2, #1
    49b6:	d020      	beq.n	49fa <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x6a>
    49b8:	3501      	adds	r5, #1
    49ba:	42bd      	cmp	r5, r7
    49bc:	d2f7      	bcs.n	49ae <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
    49be:	4643      	mov	r3, r8
    49c0:	681c      	ldr	r4, [r3, #0]
    49c2:	69e3      	ldr	r3, [r4, #28]
    49c4:	18eb      	adds	r3, r5, r3
    49c6:	009e      	lsls	r6, r3, #2
    49c8:	19a2      	adds	r2, r4, r6
    49ca:	491c      	ldr	r1, [pc, #112]	; (4a3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    49cc:	468c      	mov	ip, r1
    49ce:	4462      	add	r2, ip
    49d0:	7812      	ldrb	r2, [r2, #0]
    49d2:	0011      	movs	r1, r2
    49d4:	3167      	adds	r1, #103	; 0x67
    49d6:	b2c9      	uxtb	r1, r1
    49d8:	290e      	cmp	r1, #14
    49da:	d8eb      	bhi.n	49b4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x24>
    49dc:	3268      	adds	r2, #104	; 0x68
    49de:	b2d2      	uxtb	r2, r2
    49e0:	18d3      	adds	r3, r2, r3
    49e2:	69a1      	ldr	r1, [r4, #24]
    49e4:	428b      	cmp	r3, r1
    49e6:	d2e7      	bcs.n	49b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    49e8:	3201      	adds	r2, #1
    49ea:	0092      	lsls	r2, r2, #2
    49ec:	4663      	mov	r3, ip
    49ee:	18f0      	adds	r0, r6, r3
    49f0:	1820      	adds	r0, r4, r0
    49f2:	2100      	movs	r1, #0
    49f4:	4b12      	ldr	r3, [pc, #72]	; (4a40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    49f6:	4798      	blx	r3
    49f8:	e7de      	b.n	49b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    49fa:	3301      	adds	r3, #1
    49fc:	69a2      	ldr	r2, [r4, #24]
    49fe:	4293      	cmp	r3, r2
    4a00:	d207      	bcs.n	4a12 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x82>
    4a02:	4b0e      	ldr	r3, [pc, #56]	; (4a3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    4a04:	18f0      	adds	r0, r6, r3
    4a06:	1820      	adds	r0, r4, r0
    4a08:	2208      	movs	r2, #8
    4a0a:	2100      	movs	r1, #0
    4a0c:	4b0c      	ldr	r3, [pc, #48]	; (4a40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    4a0e:	4798      	blx	r3
    4a10:	e7d2      	b.n	49b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    4a12:	4b0a      	ldr	r3, [pc, #40]	; (4a3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    4a14:	18e0      	adds	r0, r4, r3
    4a16:	2204      	movs	r2, #4
    4a18:	2100      	movs	r1, #0
    4a1a:	4b09      	ldr	r3, [pc, #36]	; (4a40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    4a1c:	4798      	blx	r3
    4a1e:	4b07      	ldr	r3, [pc, #28]	; (4a3c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xac>)
    4a20:	18f0      	adds	r0, r6, r3
    4a22:	1820      	adds	r0, r4, r0
    4a24:	2204      	movs	r2, #4
    4a26:	2100      	movs	r1, #0
    4a28:	4b05      	ldr	r3, [pc, #20]	; (4a40 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb0>)
    4a2a:	4798      	blx	r3
    4a2c:	e7c4      	b.n	49b8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
    4a2e:	46c0      	nop			; (mov r8, r8)
    4a30:	20000960 	.word	0x20000960
    4a34:	00017274 	.word	0x00017274
    4a38:	000048f9 	.word	0x000048f9
    4a3c:	00000968 	.word	0x00000968
    4a40:	0001427b 	.word	0x0001427b

00004a44 <prvTraceUpdateCounters>:
    4a44:	b510      	push	{r4, lr}
    4a46:	4b0b      	ldr	r3, [pc, #44]	; (4a74 <prvTraceUpdateCounters+0x30>)
    4a48:	681b      	ldr	r3, [r3, #0]
    4a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    4a4c:	2a00      	cmp	r2, #0
    4a4e:	d010      	beq.n	4a72 <prvTraceUpdateCounters+0x2e>
    4a50:	695a      	ldr	r2, [r3, #20]
    4a52:	3201      	adds	r2, #1
    4a54:	615a      	str	r2, [r3, #20]
    4a56:	69da      	ldr	r2, [r3, #28]
    4a58:	3201      	adds	r2, #1
    4a5a:	61da      	str	r2, [r3, #28]
    4a5c:	2190      	movs	r1, #144	; 0x90
    4a5e:	31ff      	adds	r1, #255	; 0xff
    4a60:	428a      	cmp	r2, r1
    4a62:	d903      	bls.n	4a6c <prvTraceUpdateCounters+0x28>
    4a64:	2201      	movs	r2, #1
    4a66:	621a      	str	r2, [r3, #32]
    4a68:	2200      	movs	r2, #0
    4a6a:	61da      	str	r2, [r3, #28]
    4a6c:	2001      	movs	r0, #1
    4a6e:	4b02      	ldr	r3, [pc, #8]	; (4a78 <prvTraceUpdateCounters+0x34>)
    4a70:	4798      	blx	r3
    4a72:	bd10      	pop	{r4, pc}
    4a74:	20000960 	.word	0x20000960
    4a78:	00004991 	.word	0x00004991

00004a7c <prvTraceGetParam>:
    4a7c:	b570      	push	{r4, r5, r6, lr}
    4a7e:	0004      	movs	r4, r0
    4a80:	000d      	movs	r5, r1
    4a82:	28ff      	cmp	r0, #255	; 0xff
    4a84:	d002      	beq.n	4a8c <prvTraceGetParam+0x10>
    4a86:	4b0d      	ldr	r3, [pc, #52]	; (4abc <prvTraceGetParam+0x40>)
    4a88:	4298      	cmp	r0, r3
    4a8a:	d103      	bne.n	4a94 <prvTraceGetParam+0x18>
    4a8c:	42ac      	cmp	r4, r5
    4a8e:	d305      	bcc.n	4a9c <prvTraceGetParam+0x20>
    4a90:	0028      	movs	r0, r5
    4a92:	bd70      	pop	{r4, r5, r6, pc}
    4a94:	480a      	ldr	r0, [pc, #40]	; (4ac0 <prvTraceGetParam+0x44>)
    4a96:	4b0b      	ldr	r3, [pc, #44]	; (4ac4 <prvTraceGetParam+0x48>)
    4a98:	4798      	blx	r3
    4a9a:	e7f9      	b.n	4a90 <prvTraceGetParam+0x14>
    4a9c:	4b0a      	ldr	r3, [pc, #40]	; (4ac8 <prvTraceGetParam+0x4c>)
    4a9e:	4798      	blx	r3
    4aa0:	2800      	cmp	r0, #0
    4aa2:	d009      	beq.n	4ab8 <prvTraceGetParam+0x3c>
    4aa4:	2301      	movs	r3, #1
    4aa6:	7003      	strb	r3, [r0, #0]
    4aa8:	002b      	movs	r3, r5
    4aaa:	43a3      	bics	r3, r4
    4aac:	0a1a      	lsrs	r2, r3, #8
    4aae:	7042      	strb	r2, [r0, #1]
    4ab0:	0c1b      	lsrs	r3, r3, #16
    4ab2:	8043      	strh	r3, [r0, #2]
    4ab4:	4b05      	ldr	r3, [pc, #20]	; (4acc <prvTraceGetParam+0x50>)
    4ab6:	4798      	blx	r3
    4ab8:	4025      	ands	r5, r4
    4aba:	e7e9      	b.n	4a90 <prvTraceGetParam+0x14>
    4abc:	0000ffff 	.word	0x0000ffff
    4ac0:	00017378 	.word	0x00017378
    4ac4:	000048f9 	.word	0x000048f9
    4ac8:	00004951 	.word	0x00004951
    4acc:	00004a45 	.word	0x00004a45

00004ad0 <uiIndexOfObject>:
    4ad0:	b510      	push	{r4, lr}
    4ad2:	2908      	cmp	r1, #8
    4ad4:	d814      	bhi.n	4b00 <uiIndexOfObject+0x30>
    4ad6:	2800      	cmp	r0, #0
    4ad8:	d017      	beq.n	4b0a <uiIndexOfObject+0x3a>
    4ada:	4b0e      	ldr	r3, [pc, #56]	; (4b14 <uiIndexOfObject+0x44>)
    4adc:	681a      	ldr	r2, [r3, #0]
    4ade:	1853      	adds	r3, r2, r1
    4ae0:	3364      	adds	r3, #100	; 0x64
    4ae2:	781b      	ldrb	r3, [r3, #0]
    4ae4:	4283      	cmp	r3, r0
    4ae6:	d310      	bcc.n	4b0a <uiIndexOfObject+0x3a>
    4ae8:	1853      	adds	r3, r2, r1
    4aea:	337c      	adds	r3, #124	; 0x7c
    4aec:	781b      	ldrb	r3, [r3, #0]
    4aee:	3801      	subs	r0, #1
    4af0:	4358      	muls	r0, r3
    4af2:	3140      	adds	r1, #64	; 0x40
    4af4:	0049      	lsls	r1, r1, #1
    4af6:	1851      	adds	r1, r2, r1
    4af8:	890b      	ldrh	r3, [r1, #8]
    4afa:	18c0      	adds	r0, r0, r3
    4afc:	b280      	uxth	r0, r0
    4afe:	e008      	b.n	4b12 <uiIndexOfObject+0x42>
    4b00:	4805      	ldr	r0, [pc, #20]	; (4b18 <uiIndexOfObject+0x48>)
    4b02:	4b06      	ldr	r3, [pc, #24]	; (4b1c <uiIndexOfObject+0x4c>)
    4b04:	4798      	blx	r3
    4b06:	2000      	movs	r0, #0
    4b08:	e003      	b.n	4b12 <uiIndexOfObject+0x42>
    4b0a:	4805      	ldr	r0, [pc, #20]	; (4b20 <uiIndexOfObject+0x50>)
    4b0c:	4b03      	ldr	r3, [pc, #12]	; (4b1c <uiIndexOfObject+0x4c>)
    4b0e:	4798      	blx	r3
    4b10:	2000      	movs	r0, #0
    4b12:	bd10      	pop	{r4, pc}
    4b14:	20000960 	.word	0x20000960
    4b18:	00017a08 	.word	0x00017a08
    4b1c:	000048f9 	.word	0x000048f9
    4b20:	00017a48 	.word	0x00017a48

00004b24 <prvMarkObjectAsUsed>:
    4b24:	b510      	push	{r4, lr}
    4b26:	000b      	movs	r3, r1
    4b28:	0001      	movs	r1, r0
    4b2a:	0018      	movs	r0, r3
    4b2c:	4b04      	ldr	r3, [pc, #16]	; (4b40 <prvMarkObjectAsUsed+0x1c>)
    4b2e:	4798      	blx	r3
    4b30:	4b04      	ldr	r3, [pc, #16]	; (4b44 <prvMarkObjectAsUsed+0x20>)
    4b32:	681b      	ldr	r3, [r3, #0]
    4b34:	1818      	adds	r0, r3, r0
    4b36:	309c      	adds	r0, #156	; 0x9c
    4b38:	2301      	movs	r3, #1
    4b3a:	7003      	strb	r3, [r0, #0]
    4b3c:	bd10      	pop	{r4, pc}
    4b3e:	46c0      	nop			; (mov r8, r8)
    4b40:	00004ad1 	.word	0x00004ad1
    4b44:	20000960 	.word	0x20000960

00004b48 <prvTraceSetPriorityProperty>:
    4b48:	b570      	push	{r4, r5, r6, lr}
    4b4a:	0004      	movs	r4, r0
    4b4c:	0008      	movs	r0, r1
    4b4e:	0015      	movs	r5, r2
    4b50:	2c08      	cmp	r4, #8
    4b52:	d813      	bhi.n	4b7c <prvTraceSetPriorityProperty+0x34>
    4b54:	4b0d      	ldr	r3, [pc, #52]	; (4b8c <prvTraceSetPriorityProperty+0x44>)
    4b56:	681b      	ldr	r3, [r3, #0]
    4b58:	191b      	adds	r3, r3, r4
    4b5a:	3364      	adds	r3, #100	; 0x64
    4b5c:	781b      	ldrb	r3, [r3, #0]
    4b5e:	428b      	cmp	r3, r1
    4b60:	d310      	bcc.n	4b84 <prvTraceSetPriorityProperty+0x3c>
    4b62:	0021      	movs	r1, r4
    4b64:	4b0a      	ldr	r3, [pc, #40]	; (4b90 <prvTraceSetPriorityProperty+0x48>)
    4b66:	4798      	blx	r3
    4b68:	4b08      	ldr	r3, [pc, #32]	; (4b8c <prvTraceSetPriorityProperty+0x44>)
    4b6a:	681b      	ldr	r3, [r3, #0]
    4b6c:	191c      	adds	r4, r3, r4
    4b6e:	3470      	adds	r4, #112	; 0x70
    4b70:	7822      	ldrb	r2, [r4, #0]
    4b72:	181b      	adds	r3, r3, r0
    4b74:	189b      	adds	r3, r3, r2
    4b76:	339d      	adds	r3, #157	; 0x9d
    4b78:	701d      	strb	r5, [r3, #0]
    4b7a:	bd70      	pop	{r4, r5, r6, pc}
    4b7c:	4805      	ldr	r0, [pc, #20]	; (4b94 <prvTraceSetPriorityProperty+0x4c>)
    4b7e:	4b06      	ldr	r3, [pc, #24]	; (4b98 <prvTraceSetPriorityProperty+0x50>)
    4b80:	4798      	blx	r3
    4b82:	e7fa      	b.n	4b7a <prvTraceSetPriorityProperty+0x32>
    4b84:	4805      	ldr	r0, [pc, #20]	; (4b9c <prvTraceSetPriorityProperty+0x54>)
    4b86:	4b04      	ldr	r3, [pc, #16]	; (4b98 <prvTraceSetPriorityProperty+0x50>)
    4b88:	4798      	blx	r3
    4b8a:	e7f6      	b.n	4b7a <prvTraceSetPriorityProperty+0x32>
    4b8c:	20000960 	.word	0x20000960
    4b90:	00004ad1 	.word	0x00004ad1
    4b94:	00017590 	.word	0x00017590
    4b98:	000048f9 	.word	0x000048f9
    4b9c:	000175dc 	.word	0x000175dc

00004ba0 <prvTraceGetPriorityProperty>:
    4ba0:	b510      	push	{r4, lr}
    4ba2:	0004      	movs	r4, r0
    4ba4:	0008      	movs	r0, r1
    4ba6:	2c08      	cmp	r4, #8
    4ba8:	d813      	bhi.n	4bd2 <prvTraceGetPriorityProperty+0x32>
    4baa:	4b0f      	ldr	r3, [pc, #60]	; (4be8 <prvTraceGetPriorityProperty+0x48>)
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	191b      	adds	r3, r3, r4
    4bb0:	3364      	adds	r3, #100	; 0x64
    4bb2:	781b      	ldrb	r3, [r3, #0]
    4bb4:	428b      	cmp	r3, r1
    4bb6:	d311      	bcc.n	4bdc <prvTraceGetPriorityProperty+0x3c>
    4bb8:	0021      	movs	r1, r4
    4bba:	4b0c      	ldr	r3, [pc, #48]	; (4bec <prvTraceGetPriorityProperty+0x4c>)
    4bbc:	4798      	blx	r3
    4bbe:	4b0a      	ldr	r3, [pc, #40]	; (4be8 <prvTraceGetPriorityProperty+0x48>)
    4bc0:	681b      	ldr	r3, [r3, #0]
    4bc2:	191c      	adds	r4, r3, r4
    4bc4:	3470      	adds	r4, #112	; 0x70
    4bc6:	7822      	ldrb	r2, [r4, #0]
    4bc8:	181b      	adds	r3, r3, r0
    4bca:	189b      	adds	r3, r3, r2
    4bcc:	339d      	adds	r3, #157	; 0x9d
    4bce:	7818      	ldrb	r0, [r3, #0]
    4bd0:	bd10      	pop	{r4, pc}
    4bd2:	4807      	ldr	r0, [pc, #28]	; (4bf0 <prvTraceGetPriorityProperty+0x50>)
    4bd4:	4b07      	ldr	r3, [pc, #28]	; (4bf4 <prvTraceGetPriorityProperty+0x54>)
    4bd6:	4798      	blx	r3
    4bd8:	2000      	movs	r0, #0
    4bda:	e7f9      	b.n	4bd0 <prvTraceGetPriorityProperty+0x30>
    4bdc:	4806      	ldr	r0, [pc, #24]	; (4bf8 <prvTraceGetPriorityProperty+0x58>)
    4bde:	4b05      	ldr	r3, [pc, #20]	; (4bf4 <prvTraceGetPriorityProperty+0x54>)
    4be0:	4798      	blx	r3
    4be2:	2000      	movs	r0, #0
    4be4:	e7f4      	b.n	4bd0 <prvTraceGetPriorityProperty+0x30>
    4be6:	46c0      	nop			; (mov r8, r8)
    4be8:	20000960 	.word	0x20000960
    4bec:	00004ad1 	.word	0x00004ad1
    4bf0:	000173b4 	.word	0x000173b4
    4bf4:	000048f9 	.word	0x000048f9
    4bf8:	00017400 	.word	0x00017400

00004bfc <prvTraceSetObjectState>:
    4bfc:	b570      	push	{r4, r5, r6, lr}
    4bfe:	0004      	movs	r4, r0
    4c00:	0008      	movs	r0, r1
    4c02:	0015      	movs	r5, r2
    4c04:	2c08      	cmp	r4, #8
    4c06:	d813      	bhi.n	4c30 <prvTraceSetObjectState+0x34>
    4c08:	4b0d      	ldr	r3, [pc, #52]	; (4c40 <prvTraceSetObjectState+0x44>)
    4c0a:	681b      	ldr	r3, [r3, #0]
    4c0c:	191b      	adds	r3, r3, r4
    4c0e:	3364      	adds	r3, #100	; 0x64
    4c10:	781b      	ldrb	r3, [r3, #0]
    4c12:	428b      	cmp	r3, r1
    4c14:	d310      	bcc.n	4c38 <prvTraceSetObjectState+0x3c>
    4c16:	0021      	movs	r1, r4
    4c18:	4b0a      	ldr	r3, [pc, #40]	; (4c44 <prvTraceSetObjectState+0x48>)
    4c1a:	4798      	blx	r3
    4c1c:	4b08      	ldr	r3, [pc, #32]	; (4c40 <prvTraceSetObjectState+0x44>)
    4c1e:	681b      	ldr	r3, [r3, #0]
    4c20:	191c      	adds	r4, r3, r4
    4c22:	3470      	adds	r4, #112	; 0x70
    4c24:	7822      	ldrb	r2, [r4, #0]
    4c26:	181b      	adds	r3, r3, r0
    4c28:	189b      	adds	r3, r3, r2
    4c2a:	339c      	adds	r3, #156	; 0x9c
    4c2c:	701d      	strb	r5, [r3, #0]
    4c2e:	bd70      	pop	{r4, r5, r6, pc}
    4c30:	4805      	ldr	r0, [pc, #20]	; (4c48 <prvTraceSetObjectState+0x4c>)
    4c32:	4b06      	ldr	r3, [pc, #24]	; (4c4c <prvTraceSetObjectState+0x50>)
    4c34:	4798      	blx	r3
    4c36:	e7fa      	b.n	4c2e <prvTraceSetObjectState+0x32>
    4c38:	4805      	ldr	r0, [pc, #20]	; (4c50 <prvTraceSetObjectState+0x54>)
    4c3a:	4b04      	ldr	r3, [pc, #16]	; (4c4c <prvTraceSetObjectState+0x50>)
    4c3c:	4798      	blx	r3
    4c3e:	e7f6      	b.n	4c2e <prvTraceSetObjectState+0x32>
    4c40:	20000960 	.word	0x20000960
    4c44:	00004ad1 	.word	0x00004ad1
    4c48:	00017510 	.word	0x00017510
    4c4c:	000048f9 	.word	0x000048f9
    4c50:	00017554 	.word	0x00017554

00004c54 <prvTraceSetTaskInstanceFinished>:
    4c54:	b510      	push	{r4, lr}
    4c56:	4b0b      	ldr	r3, [pc, #44]	; (4c84 <prvTraceSetTaskInstanceFinished+0x30>)
    4c58:	681a      	ldr	r2, [r3, #0]
    4c5a:	2367      	movs	r3, #103	; 0x67
    4c5c:	5cd3      	ldrb	r3, [r2, r3]
    4c5e:	4283      	cmp	r3, r0
    4c60:	d30c      	bcc.n	4c7c <prvTraceSetTaskInstanceFinished+0x28>
    4c62:	2103      	movs	r1, #3
    4c64:	4b08      	ldr	r3, [pc, #32]	; (4c88 <prvTraceSetTaskInstanceFinished+0x34>)
    4c66:	4798      	blx	r3
    4c68:	4b06      	ldr	r3, [pc, #24]	; (4c84 <prvTraceSetTaskInstanceFinished+0x30>)
    4c6a:	681b      	ldr	r3, [r3, #0]
    4c6c:	2273      	movs	r2, #115	; 0x73
    4c6e:	5c9a      	ldrb	r2, [r3, r2]
    4c70:	181b      	adds	r3, r3, r0
    4c72:	189b      	adds	r3, r3, r2
    4c74:	339c      	adds	r3, #156	; 0x9c
    4c76:	2200      	movs	r2, #0
    4c78:	701a      	strb	r2, [r3, #0]
    4c7a:	bd10      	pop	{r4, pc}
    4c7c:	4803      	ldr	r0, [pc, #12]	; (4c8c <prvTraceSetTaskInstanceFinished+0x38>)
    4c7e:	4b04      	ldr	r3, [pc, #16]	; (4c90 <prvTraceSetTaskInstanceFinished+0x3c>)
    4c80:	4798      	blx	r3
    4c82:	e7fa      	b.n	4c7a <prvTraceSetTaskInstanceFinished+0x26>
    4c84:	20000960 	.word	0x20000960
    4c88:	00004ad1 	.word	0x00004ad1
    4c8c:	0001761c 	.word	0x0001761c
    4c90:	000048f9 	.word	0x000048f9

00004c94 <prvTraceGetObjectHandle>:
    4c94:	b570      	push	{r4, r5, r6, lr}
    4c96:	4b2d      	ldr	r3, [pc, #180]	; (4d4c <prvTraceGetObjectHandle+0xb8>)
    4c98:	681b      	ldr	r3, [r3, #0]
    4c9a:	2b00      	cmp	r3, #0
    4c9c:	d046      	beq.n	4d2c <prvTraceGetObjectHandle+0x98>
    4c9e:	2808      	cmp	r0, #8
    4ca0:	d849      	bhi.n	4d36 <prvTraceGetObjectHandle+0xa2>
    4ca2:	f3ef 8410 	mrs	r4, PRIMASK
    4ca6:	2301      	movs	r3, #1
    4ca8:	f383 8810 	msr	PRIMASK, r3
    4cac:	4a28      	ldr	r2, [pc, #160]	; (4d50 <prvTraceGetObjectHandle+0xbc>)
    4cae:	6813      	ldr	r3, [r2, #0]
    4cb0:	3301      	adds	r3, #1
    4cb2:	6013      	str	r3, [r2, #0]
    4cb4:	4a27      	ldr	r2, [pc, #156]	; (4d54 <prvTraceGetObjectHandle+0xc0>)
    4cb6:	0043      	lsls	r3, r0, #1
    4cb8:	5a9b      	ldrh	r3, [r3, r2]
    4cba:	18d2      	adds	r2, r2, r3
    4cbc:	3248      	adds	r2, #72	; 0x48
    4cbe:	7812      	ldrb	r2, [r2, #0]
    4cc0:	2a00      	cmp	r2, #0
    4cc2:	d10a      	bne.n	4cda <prvTraceGetObjectHandle+0x46>
    4cc4:	4923      	ldr	r1, [pc, #140]	; (4d54 <prvTraceGetObjectHandle+0xc0>)
    4cc6:	18cd      	adds	r5, r1, r3
    4cc8:	3548      	adds	r5, #72	; 0x48
    4cca:	1c5a      	adds	r2, r3, #1
    4ccc:	0006      	movs	r6, r0
    4cce:	3608      	adds	r6, #8
    4cd0:	0076      	lsls	r6, r6, #1
    4cd2:	1989      	adds	r1, r1, r6
    4cd4:	8849      	ldrh	r1, [r1, #2]
    4cd6:	1a52      	subs	r2, r2, r1
    4cd8:	702a      	strb	r2, [r5, #0]
    4cda:	0001      	movs	r1, r0
    4cdc:	3110      	adds	r1, #16
    4cde:	0049      	lsls	r1, r1, #1
    4ce0:	4a1c      	ldr	r2, [pc, #112]	; (4d54 <prvTraceGetObjectHandle+0xc0>)
    4ce2:	1852      	adds	r2, r2, r1
    4ce4:	8892      	ldrh	r2, [r2, #4]
    4ce6:	429a      	cmp	r2, r3
    4ce8:	d32a      	bcc.n	4d40 <prvTraceGetObjectHandle+0xac>
    4cea:	491a      	ldr	r1, [pc, #104]	; (4d54 <prvTraceGetObjectHandle+0xc0>)
    4cec:	18ca      	adds	r2, r1, r3
    4cee:	3248      	adds	r2, #72	; 0x48
    4cf0:	7812      	ldrb	r2, [r2, #0]
    4cf2:	3301      	adds	r3, #1
    4cf4:	b29b      	uxth	r3, r3
    4cf6:	0045      	lsls	r5, r0, #1
    4cf8:	526b      	strh	r3, [r5, r1]
    4cfa:	0005      	movs	r5, r0
    4cfc:	3508      	adds	r5, #8
    4cfe:	006d      	lsls	r5, r5, #1
    4d00:	194d      	adds	r5, r1, r5
    4d02:	886d      	ldrh	r5, [r5, #2]
    4d04:	1b5b      	subs	r3, r3, r5
    4d06:	0005      	movs	r5, r0
    4d08:	3518      	adds	r5, #24
    4d0a:	006d      	lsls	r5, r5, #1
    4d0c:	1949      	adds	r1, r1, r5
    4d0e:	88c9      	ldrh	r1, [r1, #6]
    4d10:	428b      	cmp	r3, r1
    4d12:	dd03      	ble.n	4d1c <prvTraceGetObjectHandle+0x88>
    4d14:	490f      	ldr	r1, [pc, #60]	; (4d54 <prvTraceGetObjectHandle+0xc0>)
    4d16:	1948      	adds	r0, r1, r5
    4d18:	b2db      	uxtb	r3, r3
    4d1a:	80c3      	strh	r3, [r0, #6]
    4d1c:	490c      	ldr	r1, [pc, #48]	; (4d50 <prvTraceGetObjectHandle+0xbc>)
    4d1e:	680b      	ldr	r3, [r1, #0]
    4d20:	3b01      	subs	r3, #1
    4d22:	600b      	str	r3, [r1, #0]
    4d24:	f384 8810 	msr	PRIMASK, r4
    4d28:	0010      	movs	r0, r2
    4d2a:	bd70      	pop	{r4, r5, r6, pc}
    4d2c:	480a      	ldr	r0, [pc, #40]	; (4d58 <prvTraceGetObjectHandle+0xc4>)
    4d2e:	4b0b      	ldr	r3, [pc, #44]	; (4d5c <prvTraceGetObjectHandle+0xc8>)
    4d30:	4798      	blx	r3
    4d32:	2200      	movs	r2, #0
    4d34:	e7f8      	b.n	4d28 <prvTraceGetObjectHandle+0x94>
    4d36:	480a      	ldr	r0, [pc, #40]	; (4d60 <prvTraceGetObjectHandle+0xcc>)
    4d38:	4b08      	ldr	r3, [pc, #32]	; (4d5c <prvTraceGetObjectHandle+0xc8>)
    4d3a:	4798      	blx	r3
    4d3c:	2200      	movs	r2, #0
    4d3e:	e7f3      	b.n	4d28 <prvTraceGetObjectHandle+0x94>
    4d40:	4b08      	ldr	r3, [pc, #32]	; (4d64 <prvTraceGetObjectHandle+0xd0>)
    4d42:	4798      	blx	r3
    4d44:	4b05      	ldr	r3, [pc, #20]	; (4d5c <prvTraceGetObjectHandle+0xc8>)
    4d46:	4798      	blx	r3
    4d48:	2200      	movs	r2, #0
    4d4a:	e7e7      	b.n	4d1c <prvTraceGetObjectHandle+0x88>
    4d4c:	20000960 	.word	0x20000960
    4d50:	20000a10 	.word	0x20000a10
    4d54:	2000097c 	.word	0x2000097c
    4d58:	00017b0c 	.word	0x00017b0c
    4d5c:	000048f9 	.word	0x000048f9
    4d60:	00017330 	.word	0x00017330
    4d64:	00004679 	.word	0x00004679

00004d68 <prvTraceSetObjectName>:
    4d68:	b570      	push	{r4, r5, r6, lr}
    4d6a:	0004      	movs	r4, r0
    4d6c:	0008      	movs	r0, r1
    4d6e:	1e15      	subs	r5, r2, #0
    4d70:	d012      	beq.n	4d98 <prvTraceSetObjectName+0x30>
    4d72:	2c08      	cmp	r4, #8
    4d74:	d814      	bhi.n	4da0 <prvTraceSetObjectName+0x38>
    4d76:	2900      	cmp	r1, #0
    4d78:	d016      	beq.n	4da8 <prvTraceSetObjectName+0x40>
    4d7a:	4b16      	ldr	r3, [pc, #88]	; (4dd4 <prvTraceSetObjectName+0x6c>)
    4d7c:	681b      	ldr	r3, [r3, #0]
    4d7e:	191b      	adds	r3, r3, r4
    4d80:	3364      	adds	r3, #100	; 0x64
    4d82:	781b      	ldrb	r3, [r3, #0]
    4d84:	428b      	cmp	r3, r1
    4d86:	d313      	bcc.n	4db0 <prvTraceSetObjectName+0x48>
    4d88:	0021      	movs	r1, r4
    4d8a:	4b13      	ldr	r3, [pc, #76]	; (4dd8 <prvTraceSetObjectName+0x70>)
    4d8c:	4798      	blx	r3
    4d8e:	4b13      	ldr	r3, [pc, #76]	; (4ddc <prvTraceSetObjectName+0x74>)
    4d90:	681b      	ldr	r3, [r3, #0]
    4d92:	2b00      	cmp	r3, #0
    4d94:	d012      	beq.n	4dbc <prvTraceSetObjectName+0x54>
    4d96:	bd70      	pop	{r4, r5, r6, pc}
    4d98:	4811      	ldr	r0, [pc, #68]	; (4de0 <prvTraceSetObjectName+0x78>)
    4d9a:	4b12      	ldr	r3, [pc, #72]	; (4de4 <prvTraceSetObjectName+0x7c>)
    4d9c:	4798      	blx	r3
    4d9e:	e7fa      	b.n	4d96 <prvTraceSetObjectName+0x2e>
    4da0:	4811      	ldr	r0, [pc, #68]	; (4de8 <prvTraceSetObjectName+0x80>)
    4da2:	4b10      	ldr	r3, [pc, #64]	; (4de4 <prvTraceSetObjectName+0x7c>)
    4da4:	4798      	blx	r3
    4da6:	e7f6      	b.n	4d96 <prvTraceSetObjectName+0x2e>
    4da8:	4810      	ldr	r0, [pc, #64]	; (4dec <prvTraceSetObjectName+0x84>)
    4daa:	4b0e      	ldr	r3, [pc, #56]	; (4de4 <prvTraceSetObjectName+0x7c>)
    4dac:	4798      	blx	r3
    4dae:	e7f2      	b.n	4d96 <prvTraceSetObjectName+0x2e>
    4db0:	0020      	movs	r0, r4
    4db2:	4b0f      	ldr	r3, [pc, #60]	; (4df0 <prvTraceSetObjectName+0x88>)
    4db4:	4798      	blx	r3
    4db6:	4b0b      	ldr	r3, [pc, #44]	; (4de4 <prvTraceSetObjectName+0x7c>)
    4db8:	4798      	blx	r3
    4dba:	e7ec      	b.n	4d96 <prvTraceSetObjectName+0x2e>
    4dbc:	4b05      	ldr	r3, [pc, #20]	; (4dd4 <prvTraceSetObjectName+0x6c>)
    4dbe:	681b      	ldr	r3, [r3, #0]
    4dc0:	191c      	adds	r4, r3, r4
    4dc2:	3470      	adds	r4, #112	; 0x70
    4dc4:	7822      	ldrb	r2, [r4, #0]
    4dc6:	309c      	adds	r0, #156	; 0x9c
    4dc8:	1818      	adds	r0, r3, r0
    4dca:	0029      	movs	r1, r5
    4dcc:	4b09      	ldr	r3, [pc, #36]	; (4df4 <prvTraceSetObjectName+0x8c>)
    4dce:	4798      	blx	r3
    4dd0:	e7e1      	b.n	4d96 <prvTraceSetObjectName+0x2e>
    4dd2:	46c0      	nop			; (mov r8, r8)
    4dd4:	20000960 	.word	0x20000960
    4dd8:	00004ad1 	.word	0x00004ad1
    4ddc:	20000a18 	.word	0x20000a18
    4de0:	0001747c 	.word	0x0001747c
    4de4:	000048f9 	.word	0x000048f9
    4de8:	000174b0 	.word	0x000174b0
    4dec:	000174e0 	.word	0x000174e0
    4df0:	00004679 	.word	0x00004679
    4df4:	000046d9 	.word	0x000046d9

00004df8 <prvTracePortGetTimeStamp>:
    4df8:	b570      	push	{r4, r5, r6, lr}
    4dfa:	4b1e      	ldr	r3, [pc, #120]	; (4e74 <prvTracePortGetTimeStamp+0x7c>)
    4dfc:	681b      	ldr	r3, [r3, #0]
    4dfe:	2b01      	cmp	r3, #1
    4e00:	d02b      	beq.n	4e5a <prvTracePortGetTimeStamp+0x62>
    4e02:	4b1d      	ldr	r3, [pc, #116]	; (4e78 <prvTracePortGetTimeStamp+0x80>)
    4e04:	6819      	ldr	r1, [r3, #0]
    4e06:	4b1d      	ldr	r3, [pc, #116]	; (4e7c <prvTracePortGetTimeStamp+0x84>)
    4e08:	681b      	ldr	r3, [r3, #0]
    4e0a:	3101      	adds	r1, #1
    4e0c:	1ac9      	subs	r1, r1, r3
    4e0e:	4b1c      	ldr	r3, [pc, #112]	; (4e80 <prvTracePortGetTimeStamp+0x88>)
    4e10:	681b      	ldr	r3, [r3, #0]
    4e12:	4a1c      	ldr	r2, [pc, #112]	; (4e84 <prvTracePortGetTimeStamp+0x8c>)
    4e14:	6814      	ldr	r4, [r2, #0]
    4e16:	43e2      	mvns	r2, r4
    4e18:	42da      	cmn	r2, r3
    4e1a:	d424      	bmi.n	4e66 <prvTracePortGetTimeStamp+0x6e>
    4e1c:	4a1a      	ldr	r2, [pc, #104]	; (4e88 <prvTracePortGetTimeStamp+0x90>)
    4e1e:	6814      	ldr	r4, [r2, #0]
    4e20:	42a1      	cmp	r1, r4
    4e22:	41a4      	sbcs	r4, r4
    4e24:	4264      	negs	r4, r4
    4e26:	191c      	adds	r4, r3, r4
    4e28:	2800      	cmp	r0, #0
    4e2a:	d01f      	beq.n	4e6c <prvTracePortGetTimeStamp+0x74>
    4e2c:	4d12      	ldr	r5, [pc, #72]	; (4e78 <prvTracePortGetTimeStamp+0x80>)
    4e2e:	682b      	ldr	r3, [r5, #0]
    4e30:	3301      	adds	r3, #1
    4e32:	089b      	lsrs	r3, r3, #2
    4e34:	4363      	muls	r3, r4
    4e36:	001a      	movs	r2, r3
    4e38:	4e14      	ldr	r6, [pc, #80]	; (4e8c <prvTracePortGetTimeStamp+0x94>)
    4e3a:	6033      	str	r3, [r6, #0]
    4e3c:	682d      	ldr	r5, [r5, #0]
    4e3e:	3501      	adds	r5, #1
    4e40:	2303      	movs	r3, #3
    4e42:	402b      	ands	r3, r5
    4e44:	4363      	muls	r3, r4
    4e46:	185b      	adds	r3, r3, r1
    4e48:	089b      	lsrs	r3, r3, #2
    4e4a:	189b      	adds	r3, r3, r2
    4e4c:	6033      	str	r3, [r6, #0]
    4e4e:	4a0c      	ldr	r2, [pc, #48]	; (4e80 <prvTracePortGetTimeStamp+0x88>)
    4e50:	6014      	str	r4, [r2, #0]
    4e52:	6003      	str	r3, [r0, #0]
    4e54:	4b0c      	ldr	r3, [pc, #48]	; (4e88 <prvTracePortGetTimeStamp+0x90>)
    4e56:	6019      	str	r1, [r3, #0]
    4e58:	bd70      	pop	{r4, r5, r6, pc}
    4e5a:	2800      	cmp	r0, #0
    4e5c:	d0fc      	beq.n	4e58 <prvTracePortGetTimeStamp+0x60>
    4e5e:	4b0b      	ldr	r3, [pc, #44]	; (4e8c <prvTracePortGetTimeStamp+0x94>)
    4e60:	681b      	ldr	r3, [r3, #0]
    4e62:	6003      	str	r3, [r0, #0]
    4e64:	e7f8      	b.n	4e58 <prvTracePortGetTimeStamp+0x60>
    4e66:	42a3      	cmp	r3, r4
    4e68:	d1de      	bne.n	4e28 <prvTracePortGetTimeStamp+0x30>
    4e6a:	e7d7      	b.n	4e1c <prvTracePortGetTimeStamp+0x24>
    4e6c:	4b04      	ldr	r3, [pc, #16]	; (4e80 <prvTracePortGetTimeStamp+0x88>)
    4e6e:	601c      	str	r4, [r3, #0]
    4e70:	e7f0      	b.n	4e54 <prvTracePortGetTimeStamp+0x5c>
    4e72:	46c0      	nop			; (mov r8, r8)
    4e74:	20000a1c 	.word	0x20000a1c
    4e78:	e000e014 	.word	0xe000e014
    4e7c:	e000e018 	.word	0xe000e018
    4e80:	20000978 	.word	0x20000978
    4e84:	20000a24 	.word	0x20000a24
    4e88:	20000970 	.word	0x20000970
    4e8c:	20000974 	.word	0x20000974

00004e90 <prvTraceGetDTS>:
    4e90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e92:	b083      	sub	sp, #12
    4e94:	0005      	movs	r5, r0
    4e96:	2300      	movs	r3, #0
    4e98:	9301      	str	r3, [sp, #4]
    4e9a:	28ff      	cmp	r0, #255	; 0xff
    4e9c:	d002      	beq.n	4ea4 <prvTraceGetDTS+0x14>
    4e9e:	4b39      	ldr	r3, [pc, #228]	; (4f84 <prvTraceGetDTS+0xf4>)
    4ea0:	4298      	cmp	r0, r3
    4ea2:	d135      	bne.n	4f10 <prvTraceGetDTS+0x80>
    4ea4:	4b38      	ldr	r3, [pc, #224]	; (4f88 <prvTraceGetDTS+0xf8>)
    4ea6:	681c      	ldr	r4, [r3, #0]
    4ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d105      	bne.n	4eba <prvTraceGetDTS+0x2a>
    4eae:	4b37      	ldr	r3, [pc, #220]	; (4f8c <prvTraceGetDTS+0xfc>)
    4eb0:	681b      	ldr	r3, [r3, #0]
    4eb2:	2b00      	cmp	r3, #0
    4eb4:	d031      	beq.n	4f1a <prvTraceGetDTS+0x8a>
    4eb6:	089b      	lsrs	r3, r3, #2
    4eb8:	6263      	str	r3, [r4, #36]	; 0x24
    4eba:	a801      	add	r0, sp, #4
    4ebc:	4b34      	ldr	r3, [pc, #208]	; (4f90 <prvTraceGetDTS+0x100>)
    4ebe:	4798      	blx	r3
    4ec0:	9b01      	ldr	r3, [sp, #4]
    4ec2:	4a34      	ldr	r2, [pc, #208]	; (4f94 <prvTraceGetDTS+0x104>)
    4ec4:	6811      	ldr	r1, [r2, #0]
    4ec6:	1a5c      	subs	r4, r3, r1
    4ec8:	6013      	str	r3, [r2, #0]
    4eca:	4a2f      	ldr	r2, [pc, #188]	; (4f88 <prvTraceGetDTS+0xf8>)
    4ecc:	6816      	ldr	r6, [r2, #0]
    4ece:	6a77      	ldr	r7, [r6, #36]	; 0x24
    4ed0:	2f00      	cmp	r7, #0
    4ed2:	d032      	beq.n	4f3a <prvTraceGetDTS+0xaa>
    4ed4:	42bc      	cmp	r4, r7
    4ed6:	d92c      	bls.n	4f32 <prvTraceGetDTS+0xa2>
    4ed8:	0039      	movs	r1, r7
    4eda:	0020      	movs	r0, r4
    4edc:	4b2e      	ldr	r3, [pc, #184]	; (4f98 <prvTraceGetDTS+0x108>)
    4ede:	4798      	blx	r3
    4ee0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4ee2:	469c      	mov	ip, r3
    4ee4:	4460      	add	r0, ip
    4ee6:	62f0      	str	r0, [r6, #44]	; 0x2c
    4ee8:	0039      	movs	r1, r7
    4eea:	0020      	movs	r0, r4
    4eec:	4b2b      	ldr	r3, [pc, #172]	; (4f9c <prvTraceGetDTS+0x10c>)
    4eee:	4798      	blx	r3
    4ef0:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4ef2:	469c      	mov	ip, r3
    4ef4:	4461      	add	r1, ip
    4ef6:	62b1      	str	r1, [r6, #40]	; 0x28
    4ef8:	4b23      	ldr	r3, [pc, #140]	; (4f88 <prvTraceGetDTS+0xf8>)
    4efa:	681b      	ldr	r3, [r3, #0]
    4efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4efe:	6a59      	ldr	r1, [r3, #36]	; 0x24
    4f00:	428a      	cmp	r2, r1
    4f02:	d31b      	bcc.n	4f3c <prvTraceGetDTS+0xac>
    4f04:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4f06:	3001      	adds	r0, #1
    4f08:	62d8      	str	r0, [r3, #44]	; 0x2c
    4f0a:	1a52      	subs	r2, r2, r1
    4f0c:	629a      	str	r2, [r3, #40]	; 0x28
    4f0e:	e015      	b.n	4f3c <prvTraceGetDTS+0xac>
    4f10:	4823      	ldr	r0, [pc, #140]	; (4fa0 <prvTraceGetDTS+0x110>)
    4f12:	4b24      	ldr	r3, [pc, #144]	; (4fa4 <prvTraceGetDTS+0x114>)
    4f14:	4798      	blx	r3
    4f16:	2000      	movs	r0, #0
    4f18:	e014      	b.n	4f44 <prvTraceGetDTS+0xb4>
    4f1a:	4b23      	ldr	r3, [pc, #140]	; (4fa8 <prvTraceGetDTS+0x118>)
    4f1c:	681a      	ldr	r2, [r3, #0]
    4f1e:	4b23      	ldr	r3, [pc, #140]	; (4fac <prvTraceGetDTS+0x11c>)
    4f20:	681b      	ldr	r3, [r3, #0]
    4f22:	429a      	cmp	r2, r3
    4f24:	d0c9      	beq.n	4eba <prvTraceGetDTS+0x2a>
    4f26:	2000      	movs	r0, #0
    4f28:	4b21      	ldr	r3, [pc, #132]	; (4fb0 <prvTraceGetDTS+0x120>)
    4f2a:	4798      	blx	r3
    4f2c:	0880      	lsrs	r0, r0, #2
    4f2e:	6260      	str	r0, [r4, #36]	; 0x24
    4f30:	e7c3      	b.n	4eba <prvTraceGetDTS+0x2a>
    4f32:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4f34:	191b      	adds	r3, r3, r4
    4f36:	62b3      	str	r3, [r6, #40]	; 0x28
    4f38:	e7de      	b.n	4ef8 <prvTraceGetDTS+0x68>
    4f3a:	62b3      	str	r3, [r6, #40]	; 0x28
    4f3c:	42ac      	cmp	r4, r5
    4f3e:	d803      	bhi.n	4f48 <prvTraceGetDTS+0xb8>
    4f40:	0020      	movs	r0, r4
    4f42:	4028      	ands	r0, r5
    4f44:	b003      	add	sp, #12
    4f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f48:	4b1a      	ldr	r3, [pc, #104]	; (4fb4 <prvTraceGetDTS+0x124>)
    4f4a:	4798      	blx	r3
    4f4c:	2800      	cmp	r0, #0
    4f4e:	d0f7      	beq.n	4f40 <prvTraceGetDTS+0xb0>
    4f50:	4b0c      	ldr	r3, [pc, #48]	; (4f84 <prvTraceGetDTS+0xf4>)
    4f52:	429d      	cmp	r5, r3
    4f54:	d007      	beq.n	4f66 <prvTraceGetDTS+0xd6>
    4f56:	2dff      	cmp	r5, #255	; 0xff
    4f58:	d00c      	beq.n	4f74 <prvTraceGetDTS+0xe4>
    4f5a:	4817      	ldr	r0, [pc, #92]	; (4fb8 <prvTraceGetDTS+0x128>)
    4f5c:	4b11      	ldr	r3, [pc, #68]	; (4fa4 <prvTraceGetDTS+0x114>)
    4f5e:	4798      	blx	r3
    4f60:	4b16      	ldr	r3, [pc, #88]	; (4fbc <prvTraceGetDTS+0x12c>)
    4f62:	4798      	blx	r3
    4f64:	e7ec      	b.n	4f40 <prvTraceGetDTS+0xb0>
    4f66:	23a9      	movs	r3, #169	; 0xa9
    4f68:	7003      	strb	r3, [r0, #0]
    4f6a:	0c23      	lsrs	r3, r4, #16
    4f6c:	8043      	strh	r3, [r0, #2]
    4f6e:	2300      	movs	r3, #0
    4f70:	7043      	strb	r3, [r0, #1]
    4f72:	e7f5      	b.n	4f60 <prvTraceGetDTS+0xd0>
    4f74:	23a8      	movs	r3, #168	; 0xa8
    4f76:	7003      	strb	r3, [r0, #0]
    4f78:	0a23      	lsrs	r3, r4, #8
    4f7a:	8043      	strh	r3, [r0, #2]
    4f7c:	0e23      	lsrs	r3, r4, #24
    4f7e:	7043      	strb	r3, [r0, #1]
    4f80:	e7ee      	b.n	4f60 <prvTraceGetDTS+0xd0>
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	0000ffff 	.word	0x0000ffff
    4f88:	20000960 	.word	0x20000960
    4f8c:	20000a14 	.word	0x20000a14
    4f90:	00004df9 	.word	0x00004df9
    4f94:	20000a0c 	.word	0x20000a0c
    4f98:	00011d75 	.word	0x00011d75
    4f9c:	00011e81 	.word	0x00011e81
    4fa0:	000172cc 	.word	0x000172cc
    4fa4:	000048f9 	.word	0x000048f9
    4fa8:	e000e018 	.word	0xe000e018
    4fac:	20005590 	.word	0x20005590
    4fb0:	0000dedd 	.word	0x0000dedd
    4fb4:	00004951 	.word	0x00004951
    4fb8:	0001730c 	.word	0x0001730c
    4fbc:	00004a45 	.word	0x00004a45

00004fc0 <prvTraceStoreTaskReady>:
    4fc0:	b570      	push	{r4, r5, r6, lr}
    4fc2:	1e04      	subs	r4, r0, #0
    4fc4:	d01d      	beq.n	5002 <prvTraceStoreTaskReady+0x42>
    4fc6:	4b1b      	ldr	r3, [pc, #108]	; (5034 <prvTraceStoreTaskReady+0x74>)
    4fc8:	681b      	ldr	r3, [r3, #0]
    4fca:	2b00      	cmp	r3, #0
    4fcc:	d019      	beq.n	5002 <prvTraceStoreTaskReady+0x42>
    4fce:	280f      	cmp	r0, #15
    4fd0:	d818      	bhi.n	5004 <prvTraceStoreTaskReady+0x44>
    4fd2:	4b19      	ldr	r3, [pc, #100]	; (5038 <prvTraceStoreTaskReady+0x78>)
    4fd4:	681b      	ldr	r3, [r3, #0]
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d118      	bne.n	500c <prvTraceStoreTaskReady+0x4c>
    4fda:	f3ef 8510 	mrs	r5, PRIMASK
    4fde:	2301      	movs	r3, #1
    4fe0:	f383 8810 	msr	PRIMASK, r3
    4fe4:	4a14      	ldr	r2, [pc, #80]	; (5038 <prvTraceStoreTaskReady+0x78>)
    4fe6:	6813      	ldr	r3, [r2, #0]
    4fe8:	3301      	adds	r3, #1
    4fea:	6013      	str	r3, [r2, #0]
    4fec:	4b13      	ldr	r3, [pc, #76]	; (503c <prvTraceStoreTaskReady+0x7c>)
    4fee:	681b      	ldr	r3, [r3, #0]
    4ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	d10e      	bne.n	5014 <prvTraceStoreTaskReady+0x54>
    4ff6:	4a10      	ldr	r2, [pc, #64]	; (5038 <prvTraceStoreTaskReady+0x78>)
    4ff8:	6813      	ldr	r3, [r2, #0]
    4ffa:	3b01      	subs	r3, #1
    4ffc:	6013      	str	r3, [r2, #0]
    4ffe:	f385 8810 	msr	PRIMASK, r5
    5002:	bd70      	pop	{r4, r5, r6, pc}
    5004:	480e      	ldr	r0, [pc, #56]	; (5040 <prvTraceStoreTaskReady+0x80>)
    5006:	4b0f      	ldr	r3, [pc, #60]	; (5044 <prvTraceStoreTaskReady+0x84>)
    5008:	4798      	blx	r3
    500a:	e7fa      	b.n	5002 <prvTraceStoreTaskReady+0x42>
    500c:	480e      	ldr	r0, [pc, #56]	; (5048 <prvTraceStoreTaskReady+0x88>)
    500e:	4b0d      	ldr	r3, [pc, #52]	; (5044 <prvTraceStoreTaskReady+0x84>)
    5010:	4798      	blx	r3
    5012:	e7f6      	b.n	5002 <prvTraceStoreTaskReady+0x42>
    5014:	480d      	ldr	r0, [pc, #52]	; (504c <prvTraceStoreTaskReady+0x8c>)
    5016:	4b0e      	ldr	r3, [pc, #56]	; (5050 <prvTraceStoreTaskReady+0x90>)
    5018:	4798      	blx	r3
    501a:	0006      	movs	r6, r0
    501c:	4b0d      	ldr	r3, [pc, #52]	; (5054 <prvTraceStoreTaskReady+0x94>)
    501e:	4798      	blx	r3
    5020:	2800      	cmp	r0, #0
    5022:	d0e8      	beq.n	4ff6 <prvTraceStoreTaskReady+0x36>
    5024:	2302      	movs	r3, #2
    5026:	7003      	strb	r3, [r0, #0]
    5028:	8046      	strh	r6, [r0, #2]
    502a:	7044      	strb	r4, [r0, #1]
    502c:	4b0a      	ldr	r3, [pc, #40]	; (5058 <prvTraceStoreTaskReady+0x98>)
    502e:	4798      	blx	r3
    5030:	e7e1      	b.n	4ff6 <prvTraceStoreTaskReady+0x36>
    5032:	46c0      	nop			; (mov r8, r8)
    5034:	200000ec 	.word	0x200000ec
    5038:	20000a10 	.word	0x20000a10
    503c:	20000960 	.word	0x20000960
    5040:	0001790c 	.word	0x0001790c
    5044:	000048f9 	.word	0x000048f9
    5048:	0001794c 	.word	0x0001794c
    504c:	0000ffff 	.word	0x0000ffff
    5050:	00004e91 	.word	0x00004e91
    5054:	00004951 	.word	0x00004951
    5058:	00004a45 	.word	0x00004a45

0000505c <vTraceStoreMemMangEvent>:
    505c:	b5f0      	push	{r4, r5, r6, r7, lr}
    505e:	b083      	sub	sp, #12
    5060:	9000      	str	r0, [sp, #0]
    5062:	000c      	movs	r4, r1
    5064:	4b28      	ldr	r3, [pc, #160]	; (5108 <vTraceStoreMemMangEvent+0xac>)
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	2b00      	cmp	r3, #0
    506a:	d01d      	beq.n	50a8 <vTraceStoreMemMangEvent+0x4c>
    506c:	17d3      	asrs	r3, r2, #31
    506e:	18d6      	adds	r6, r2, r3
    5070:	405e      	eors	r6, r3
    5072:	f3ef 8510 	mrs	r5, PRIMASK
    5076:	2301      	movs	r3, #1
    5078:	f383 8810 	msr	PRIMASK, r3
    507c:	4923      	ldr	r1, [pc, #140]	; (510c <vTraceStoreMemMangEvent+0xb0>)
    507e:	680b      	ldr	r3, [r1, #0]
    5080:	3301      	adds	r3, #1
    5082:	600b      	str	r3, [r1, #0]
    5084:	2c00      	cmp	r4, #0
    5086:	d004      	beq.n	5092 <vTraceStoreMemMangEvent+0x36>
    5088:	4b21      	ldr	r3, [pc, #132]	; (5110 <vTraceStoreMemMangEvent+0xb4>)
    508a:	6819      	ldr	r1, [r3, #0]
    508c:	468c      	mov	ip, r1
    508e:	4462      	add	r2, ip
    5090:	601a      	str	r2, [r3, #0]
    5092:	4b1d      	ldr	r3, [pc, #116]	; (5108 <vTraceStoreMemMangEvent+0xac>)
    5094:	681b      	ldr	r3, [r3, #0]
    5096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5098:	2b00      	cmp	r3, #0
    509a:	d107      	bne.n	50ac <vTraceStoreMemMangEvent+0x50>
    509c:	4a1b      	ldr	r2, [pc, #108]	; (510c <vTraceStoreMemMangEvent+0xb0>)
    509e:	6813      	ldr	r3, [r2, #0]
    50a0:	3b01      	subs	r3, #1
    50a2:	6013      	str	r3, [r2, #0]
    50a4:	f385 8810 	msr	PRIMASK, r5
    50a8:	b003      	add	sp, #12
    50aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50ac:	20ff      	movs	r0, #255	; 0xff
    50ae:	4b19      	ldr	r3, [pc, #100]	; (5114 <vTraceStoreMemMangEvent+0xb8>)
    50b0:	4798      	blx	r3
    50b2:	9001      	str	r0, [sp, #4]
    50b4:	0031      	movs	r1, r6
    50b6:	4818      	ldr	r0, [pc, #96]	; (5118 <vTraceStoreMemMangEvent+0xbc>)
    50b8:	4b18      	ldr	r3, [pc, #96]	; (511c <vTraceStoreMemMangEvent+0xc0>)
    50ba:	4798      	blx	r3
    50bc:	0006      	movs	r6, r0
    50be:	4b18      	ldr	r3, [pc, #96]	; (5120 <vTraceStoreMemMangEvent+0xc4>)
    50c0:	4798      	blx	r3
    50c2:	1e07      	subs	r7, r0, #0
    50c4:	d0ea      	beq.n	509c <vTraceStoreMemMangEvent+0x40>
    50c6:	466b      	mov	r3, sp
    50c8:	791b      	ldrb	r3, [r3, #4]
    50ca:	7043      	strb	r3, [r0, #1]
    50cc:	2300      	movs	r3, #0
    50ce:	7003      	strb	r3, [r0, #0]
    50d0:	8046      	strh	r6, [r0, #2]
    50d2:	4b14      	ldr	r3, [pc, #80]	; (5124 <vTraceStoreMemMangEvent+0xc8>)
    50d4:	4798      	blx	r3
    50d6:	0021      	movs	r1, r4
    50d8:	480f      	ldr	r0, [pc, #60]	; (5118 <vTraceStoreMemMangEvent+0xbc>)
    50da:	4b10      	ldr	r3, [pc, #64]	; (511c <vTraceStoreMemMangEvent+0xc0>)
    50dc:	4798      	blx	r3
    50de:	0006      	movs	r6, r0
    50e0:	4b0f      	ldr	r3, [pc, #60]	; (5120 <vTraceStoreMemMangEvent+0xc4>)
    50e2:	4798      	blx	r3
    50e4:	2800      	cmp	r0, #0
    50e6:	d0d9      	beq.n	509c <vTraceStoreMemMangEvent+0x40>
    50e8:	8046      	strh	r6, [r0, #2]
    50ea:	2300      	movs	r3, #0
    50ec:	7043      	strb	r3, [r0, #1]
    50ee:	466b      	mov	r3, sp
    50f0:	781c      	ldrb	r4, [r3, #0]
    50f2:	1c63      	adds	r3, r4, #1
    50f4:	7003      	strb	r3, [r0, #0]
    50f6:	703c      	strb	r4, [r7, #0]
    50f8:	4b0a      	ldr	r3, [pc, #40]	; (5124 <vTraceStoreMemMangEvent+0xc8>)
    50fa:	4798      	blx	r3
    50fc:	4b02      	ldr	r3, [pc, #8]	; (5108 <vTraceStoreMemMangEvent+0xac>)
    50fe:	681b      	ldr	r3, [r3, #0]
    5100:	4a03      	ldr	r2, [pc, #12]	; (5110 <vTraceStoreMemMangEvent+0xb4>)
    5102:	6812      	ldr	r2, [r2, #0]
    5104:	651a      	str	r2, [r3, #80]	; 0x50
    5106:	e7c9      	b.n	509c <vTraceStoreMemMangEvent+0x40>
    5108:	20000960 	.word	0x20000960
    510c:	20000a10 	.word	0x20000a10
    5110:	20000968 	.word	0x20000968
    5114:	00004e91 	.word	0x00004e91
    5118:	0000ffff 	.word	0x0000ffff
    511c:	00004a7d 	.word	0x00004a7d
    5120:	00004951 	.word	0x00004951
    5124:	00004a45 	.word	0x00004a45

00005128 <prvTraceStoreKernelCall>:
    5128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    512a:	0005      	movs	r5, r0
    512c:	0014      	movs	r4, r2
    512e:	28fe      	cmp	r0, #254	; 0xfe
    5130:	d825      	bhi.n	517e <prvTraceStoreKernelCall+0x56>
    5132:	2908      	cmp	r1, #8
    5134:	d827      	bhi.n	5186 <prvTraceStoreKernelCall+0x5e>
    5136:	4b21      	ldr	r3, [pc, #132]	; (51bc <prvTraceStoreKernelCall+0x94>)
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	1859      	adds	r1, r3, r1
    513c:	3164      	adds	r1, #100	; 0x64
    513e:	780b      	ldrb	r3, [r1, #0]
    5140:	4293      	cmp	r3, r2
    5142:	d324      	bcc.n	518e <prvTraceStoreKernelCall+0x66>
    5144:	4b1e      	ldr	r3, [pc, #120]	; (51c0 <prvTraceStoreKernelCall+0x98>)
    5146:	681b      	ldr	r3, [r3, #0]
    5148:	2b00      	cmp	r3, #0
    514a:	d124      	bne.n	5196 <prvTraceStoreKernelCall+0x6e>
    514c:	4b1d      	ldr	r3, [pc, #116]	; (51c4 <prvTraceStoreKernelCall+0x9c>)
    514e:	781b      	ldrb	r3, [r3, #0]
    5150:	2b00      	cmp	r3, #0
    5152:	d013      	beq.n	517c <prvTraceStoreKernelCall+0x54>
    5154:	f3ef 8610 	mrs	r6, PRIMASK
    5158:	2301      	movs	r3, #1
    515a:	f383 8810 	msr	PRIMASK, r3
    515e:	4a18      	ldr	r2, [pc, #96]	; (51c0 <prvTraceStoreKernelCall+0x98>)
    5160:	6813      	ldr	r3, [r2, #0]
    5162:	3301      	adds	r3, #1
    5164:	6013      	str	r3, [r2, #0]
    5166:	4b15      	ldr	r3, [pc, #84]	; (51bc <prvTraceStoreKernelCall+0x94>)
    5168:	681b      	ldr	r3, [r3, #0]
    516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    516c:	2b00      	cmp	r3, #0
    516e:	d116      	bne.n	519e <prvTraceStoreKernelCall+0x76>
    5170:	4a13      	ldr	r2, [pc, #76]	; (51c0 <prvTraceStoreKernelCall+0x98>)
    5172:	6813      	ldr	r3, [r2, #0]
    5174:	3b01      	subs	r3, #1
    5176:	6013      	str	r3, [r2, #0]
    5178:	f386 8810 	msr	PRIMASK, r6
    517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    517e:	4812      	ldr	r0, [pc, #72]	; (51c8 <prvTraceStoreKernelCall+0xa0>)
    5180:	4b12      	ldr	r3, [pc, #72]	; (51cc <prvTraceStoreKernelCall+0xa4>)
    5182:	4798      	blx	r3
    5184:	e7fa      	b.n	517c <prvTraceStoreKernelCall+0x54>
    5186:	4812      	ldr	r0, [pc, #72]	; (51d0 <prvTraceStoreKernelCall+0xa8>)
    5188:	4b10      	ldr	r3, [pc, #64]	; (51cc <prvTraceStoreKernelCall+0xa4>)
    518a:	4798      	blx	r3
    518c:	e7f6      	b.n	517c <prvTraceStoreKernelCall+0x54>
    518e:	4811      	ldr	r0, [pc, #68]	; (51d4 <prvTraceStoreKernelCall+0xac>)
    5190:	4b0e      	ldr	r3, [pc, #56]	; (51cc <prvTraceStoreKernelCall+0xa4>)
    5192:	4798      	blx	r3
    5194:	e7f2      	b.n	517c <prvTraceStoreKernelCall+0x54>
    5196:	4810      	ldr	r0, [pc, #64]	; (51d8 <prvTraceStoreKernelCall+0xb0>)
    5198:	4b0c      	ldr	r3, [pc, #48]	; (51cc <prvTraceStoreKernelCall+0xa4>)
    519a:	4798      	blx	r3
    519c:	e7ee      	b.n	517c <prvTraceStoreKernelCall+0x54>
    519e:	480f      	ldr	r0, [pc, #60]	; (51dc <prvTraceStoreKernelCall+0xb4>)
    51a0:	4b0f      	ldr	r3, [pc, #60]	; (51e0 <prvTraceStoreKernelCall+0xb8>)
    51a2:	4798      	blx	r3
    51a4:	0007      	movs	r7, r0
    51a6:	4b0f      	ldr	r3, [pc, #60]	; (51e4 <prvTraceStoreKernelCall+0xbc>)
    51a8:	4798      	blx	r3
    51aa:	2800      	cmp	r0, #0
    51ac:	d0e0      	beq.n	5170 <prvTraceStoreKernelCall+0x48>
    51ae:	8047      	strh	r7, [r0, #2]
    51b0:	7005      	strb	r5, [r0, #0]
    51b2:	7044      	strb	r4, [r0, #1]
    51b4:	4b0c      	ldr	r3, [pc, #48]	; (51e8 <prvTraceStoreKernelCall+0xc0>)
    51b6:	4798      	blx	r3
    51b8:	e7da      	b.n	5170 <prvTraceStoreKernelCall+0x48>
    51ba:	46c0      	nop			; (mov r8, r8)
    51bc:	20000960 	.word	0x20000960
    51c0:	20000a10 	.word	0x20000a10
    51c4:	20000964 	.word	0x20000964
    51c8:	00017664 	.word	0x00017664
    51cc:	000048f9 	.word	0x000048f9
    51d0:	0001769c 	.word	0x0001769c
    51d4:	000176e4 	.word	0x000176e4
    51d8:	0001772c 	.word	0x0001772c
    51dc:	0000ffff 	.word	0x0000ffff
    51e0:	00004e91 	.word	0x00004e91
    51e4:	00004951 	.word	0x00004951
    51e8:	00004a45 	.word	0x00004a45

000051ec <prvTraceStoreKernelCallWithParam>:
    51ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    51ee:	46c6      	mov	lr, r8
    51f0:	b500      	push	{lr}
    51f2:	0006      	movs	r6, r0
    51f4:	0014      	movs	r4, r2
    51f6:	001d      	movs	r5, r3
    51f8:	28fe      	cmp	r0, #254	; 0xfe
    51fa:	d827      	bhi.n	524c <prvTraceStoreKernelCallWithParam+0x60>
    51fc:	2908      	cmp	r1, #8
    51fe:	d829      	bhi.n	5254 <prvTraceStoreKernelCallWithParam+0x68>
    5200:	4b24      	ldr	r3, [pc, #144]	; (5294 <prvTraceStoreKernelCallWithParam+0xa8>)
    5202:	681b      	ldr	r3, [r3, #0]
    5204:	1859      	adds	r1, r3, r1
    5206:	3164      	adds	r1, #100	; 0x64
    5208:	780b      	ldrb	r3, [r1, #0]
    520a:	4293      	cmp	r3, r2
    520c:	d326      	bcc.n	525c <prvTraceStoreKernelCallWithParam+0x70>
    520e:	4b22      	ldr	r3, [pc, #136]	; (5298 <prvTraceStoreKernelCallWithParam+0xac>)
    5210:	681b      	ldr	r3, [r3, #0]
    5212:	2b00      	cmp	r3, #0
    5214:	d126      	bne.n	5264 <prvTraceStoreKernelCallWithParam+0x78>
    5216:	f3ef 8810 	mrs	r8, PRIMASK
    521a:	2301      	movs	r3, #1
    521c:	f383 8810 	msr	PRIMASK, r3
    5220:	4a1d      	ldr	r2, [pc, #116]	; (5298 <prvTraceStoreKernelCallWithParam+0xac>)
    5222:	6813      	ldr	r3, [r2, #0]
    5224:	3301      	adds	r3, #1
    5226:	6013      	str	r3, [r2, #0]
    5228:	4b1a      	ldr	r3, [pc, #104]	; (5294 <prvTraceStoreKernelCallWithParam+0xa8>)
    522a:	681b      	ldr	r3, [r3, #0]
    522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    522e:	2b00      	cmp	r3, #0
    5230:	d003      	beq.n	523a <prvTraceStoreKernelCallWithParam+0x4e>
    5232:	4b1a      	ldr	r3, [pc, #104]	; (529c <prvTraceStoreKernelCallWithParam+0xb0>)
    5234:	781b      	ldrb	r3, [r3, #0]
    5236:	2b00      	cmp	r3, #0
    5238:	d118      	bne.n	526c <prvTraceStoreKernelCallWithParam+0x80>
    523a:	4a17      	ldr	r2, [pc, #92]	; (5298 <prvTraceStoreKernelCallWithParam+0xac>)
    523c:	6813      	ldr	r3, [r2, #0]
    523e:	3b01      	subs	r3, #1
    5240:	6013      	str	r3, [r2, #0]
    5242:	f388 8810 	msr	PRIMASK, r8
    5246:	bc04      	pop	{r2}
    5248:	4690      	mov	r8, r2
    524a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    524c:	4814      	ldr	r0, [pc, #80]	; (52a0 <prvTraceStoreKernelCallWithParam+0xb4>)
    524e:	4b15      	ldr	r3, [pc, #84]	; (52a4 <prvTraceStoreKernelCallWithParam+0xb8>)
    5250:	4798      	blx	r3
    5252:	e7f8      	b.n	5246 <prvTraceStoreKernelCallWithParam+0x5a>
    5254:	4814      	ldr	r0, [pc, #80]	; (52a8 <prvTraceStoreKernelCallWithParam+0xbc>)
    5256:	4b13      	ldr	r3, [pc, #76]	; (52a4 <prvTraceStoreKernelCallWithParam+0xb8>)
    5258:	4798      	blx	r3
    525a:	e7f4      	b.n	5246 <prvTraceStoreKernelCallWithParam+0x5a>
    525c:	4813      	ldr	r0, [pc, #76]	; (52ac <prvTraceStoreKernelCallWithParam+0xc0>)
    525e:	4b11      	ldr	r3, [pc, #68]	; (52a4 <prvTraceStoreKernelCallWithParam+0xb8>)
    5260:	4798      	blx	r3
    5262:	e7f0      	b.n	5246 <prvTraceStoreKernelCallWithParam+0x5a>
    5264:	4812      	ldr	r0, [pc, #72]	; (52b0 <prvTraceStoreKernelCallWithParam+0xc4>)
    5266:	4b0f      	ldr	r3, [pc, #60]	; (52a4 <prvTraceStoreKernelCallWithParam+0xb8>)
    5268:	4798      	blx	r3
    526a:	e7ec      	b.n	5246 <prvTraceStoreKernelCallWithParam+0x5a>
    526c:	20ff      	movs	r0, #255	; 0xff
    526e:	4b11      	ldr	r3, [pc, #68]	; (52b4 <prvTraceStoreKernelCallWithParam+0xc8>)
    5270:	4798      	blx	r3
    5272:	0007      	movs	r7, r0
    5274:	0029      	movs	r1, r5
    5276:	20ff      	movs	r0, #255	; 0xff
    5278:	4b0f      	ldr	r3, [pc, #60]	; (52b8 <prvTraceStoreKernelCallWithParam+0xcc>)
    527a:	4798      	blx	r3
    527c:	0005      	movs	r5, r0
    527e:	4b0f      	ldr	r3, [pc, #60]	; (52bc <prvTraceStoreKernelCallWithParam+0xd0>)
    5280:	4798      	blx	r3
    5282:	2800      	cmp	r0, #0
    5284:	d0d9      	beq.n	523a <prvTraceStoreKernelCallWithParam+0x4e>
    5286:	70c7      	strb	r7, [r0, #3]
    5288:	7006      	strb	r6, [r0, #0]
    528a:	7044      	strb	r4, [r0, #1]
    528c:	7085      	strb	r5, [r0, #2]
    528e:	4b0c      	ldr	r3, [pc, #48]	; (52c0 <prvTraceStoreKernelCallWithParam+0xd4>)
    5290:	4798      	blx	r3
    5292:	e7d2      	b.n	523a <prvTraceStoreKernelCallWithParam+0x4e>
    5294:	20000960 	.word	0x20000960
    5298:	20000a10 	.word	0x20000a10
    529c:	20000964 	.word	0x20000964
    52a0:	000177f4 	.word	0x000177f4
    52a4:	000048f9 	.word	0x000048f9
    52a8:	00017834 	.word	0x00017834
    52ac:	00017884 	.word	0x00017884
    52b0:	000178d4 	.word	0x000178d4
    52b4:	00004e91 	.word	0x00004e91
    52b8:	00004a7d 	.word	0x00004a7d
    52bc:	00004951 	.word	0x00004951
    52c0:	00004a45 	.word	0x00004a45

000052c4 <prvTraceStoreKernelCallWithNumericParamOnly>:
    52c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52c6:	0004      	movs	r4, r0
    52c8:	000d      	movs	r5, r1
    52ca:	28fe      	cmp	r0, #254	; 0xfe
    52cc:	d81c      	bhi.n	5308 <prvTraceStoreKernelCallWithNumericParamOnly+0x44>
    52ce:	4b1c      	ldr	r3, [pc, #112]	; (5340 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    52d0:	681b      	ldr	r3, [r3, #0]
    52d2:	2b00      	cmp	r3, #0
    52d4:	d11c      	bne.n	5310 <prvTraceStoreKernelCallWithNumericParamOnly+0x4c>
    52d6:	f3ef 8610 	mrs	r6, PRIMASK
    52da:	2301      	movs	r3, #1
    52dc:	f383 8810 	msr	PRIMASK, r3
    52e0:	4a17      	ldr	r2, [pc, #92]	; (5340 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    52e2:	6813      	ldr	r3, [r2, #0]
    52e4:	3301      	adds	r3, #1
    52e6:	6013      	str	r3, [r2, #0]
    52e8:	4b16      	ldr	r3, [pc, #88]	; (5344 <prvTraceStoreKernelCallWithNumericParamOnly+0x80>)
    52ea:	681b      	ldr	r3, [r3, #0]
    52ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    52ee:	2b00      	cmp	r3, #0
    52f0:	d003      	beq.n	52fa <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    52f2:	4b15      	ldr	r3, [pc, #84]	; (5348 <prvTraceStoreKernelCallWithNumericParamOnly+0x84>)
    52f4:	781b      	ldrb	r3, [r3, #0]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d10e      	bne.n	5318 <prvTraceStoreKernelCallWithNumericParamOnly+0x54>
    52fa:	4a11      	ldr	r2, [pc, #68]	; (5340 <prvTraceStoreKernelCallWithNumericParamOnly+0x7c>)
    52fc:	6813      	ldr	r3, [r2, #0]
    52fe:	3b01      	subs	r3, #1
    5300:	6013      	str	r3, [r2, #0]
    5302:	f386 8810 	msr	PRIMASK, r6
    5306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5308:	4810      	ldr	r0, [pc, #64]	; (534c <prvTraceStoreKernelCallWithNumericParamOnly+0x88>)
    530a:	4b11      	ldr	r3, [pc, #68]	; (5350 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    530c:	4798      	blx	r3
    530e:	e7fa      	b.n	5306 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
    5310:	4810      	ldr	r0, [pc, #64]	; (5354 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>)
    5312:	4b0f      	ldr	r3, [pc, #60]	; (5350 <prvTraceStoreKernelCallWithNumericParamOnly+0x8c>)
    5314:	4798      	blx	r3
    5316:	e7f6      	b.n	5306 <prvTraceStoreKernelCallWithNumericParamOnly+0x42>
    5318:	20ff      	movs	r0, #255	; 0xff
    531a:	4b0f      	ldr	r3, [pc, #60]	; (5358 <prvTraceStoreKernelCallWithNumericParamOnly+0x94>)
    531c:	4798      	blx	r3
    531e:	0007      	movs	r7, r0
    5320:	0029      	movs	r1, r5
    5322:	480e      	ldr	r0, [pc, #56]	; (535c <prvTraceStoreKernelCallWithNumericParamOnly+0x98>)
    5324:	4b0e      	ldr	r3, [pc, #56]	; (5360 <prvTraceStoreKernelCallWithNumericParamOnly+0x9c>)
    5326:	4798      	blx	r3
    5328:	0005      	movs	r5, r0
    532a:	4b0e      	ldr	r3, [pc, #56]	; (5364 <prvTraceStoreKernelCallWithNumericParamOnly+0xa0>)
    532c:	4798      	blx	r3
    532e:	2800      	cmp	r0, #0
    5330:	d0e3      	beq.n	52fa <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    5332:	7047      	strb	r7, [r0, #1]
    5334:	7004      	strb	r4, [r0, #0]
    5336:	8045      	strh	r5, [r0, #2]
    5338:	4b0b      	ldr	r3, [pc, #44]	; (5368 <prvTraceStoreKernelCallWithNumericParamOnly+0xa4>)
    533a:	4798      	blx	r3
    533c:	e7dd      	b.n	52fa <prvTraceStoreKernelCallWithNumericParamOnly+0x36>
    533e:	46c0      	nop			; (mov r8, r8)
    5340:	20000a10 	.word	0x20000a10
    5344:	20000960 	.word	0x20000960
    5348:	20000964 	.word	0x20000964
    534c:	00017764 	.word	0x00017764
    5350:	000048f9 	.word	0x000048f9
    5354:	000177bc 	.word	0x000177bc
    5358:	00004e91 	.word	0x00004e91
    535c:	0000ffff 	.word	0x0000ffff
    5360:	00004a7d 	.word	0x00004a7d
    5364:	00004951 	.word	0x00004951
    5368:	00004a45 	.word	0x00004a45

0000536c <prvTraceStoreTaskswitch>:
    536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    536e:	0004      	movs	r4, r0
    5370:	280f      	cmp	r0, #15
    5372:	d818      	bhi.n	53a6 <prvTraceStoreTaskswitch+0x3a>
    5374:	f3ef 8510 	mrs	r5, PRIMASK
    5378:	2301      	movs	r3, #1
    537a:	f383 8810 	msr	PRIMASK, r3
    537e:	4a26      	ldr	r2, [pc, #152]	; (5418 <prvTraceStoreTaskswitch+0xac>)
    5380:	6813      	ldr	r3, [r2, #0]
    5382:	3301      	adds	r3, #1
    5384:	6013      	str	r3, [r2, #0]
    5386:	4b25      	ldr	r3, [pc, #148]	; (541c <prvTraceStoreTaskswitch+0xb0>)
    5388:	781b      	ldrb	r3, [r3, #0]
    538a:	4283      	cmp	r3, r0
    538c:	d004      	beq.n	5398 <prvTraceStoreTaskswitch+0x2c>
    538e:	4b24      	ldr	r3, [pc, #144]	; (5420 <prvTraceStoreTaskswitch+0xb4>)
    5390:	681b      	ldr	r3, [r3, #0]
    5392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5394:	2b00      	cmp	r3, #0
    5396:	d10a      	bne.n	53ae <prvTraceStoreTaskswitch+0x42>
    5398:	4a1f      	ldr	r2, [pc, #124]	; (5418 <prvTraceStoreTaskswitch+0xac>)
    539a:	6813      	ldr	r3, [r2, #0]
    539c:	3b01      	subs	r3, #1
    539e:	6013      	str	r3, [r2, #0]
    53a0:	f385 8810 	msr	PRIMASK, r5
    53a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53a6:	481f      	ldr	r0, [pc, #124]	; (5424 <prvTraceStoreTaskswitch+0xb8>)
    53a8:	4b1f      	ldr	r3, [pc, #124]	; (5428 <prvTraceStoreTaskswitch+0xbc>)
    53aa:	4798      	blx	r3
    53ac:	e7fa      	b.n	53a4 <prvTraceStoreTaskswitch+0x38>
    53ae:	2200      	movs	r2, #0
    53b0:	4b1e      	ldr	r3, [pc, #120]	; (542c <prvTraceStoreTaskswitch+0xc0>)
    53b2:	601a      	str	r2, [r3, #0]
    53b4:	481e      	ldr	r0, [pc, #120]	; (5430 <prvTraceStoreTaskswitch+0xc4>)
    53b6:	4b1f      	ldr	r3, [pc, #124]	; (5434 <prvTraceStoreTaskswitch+0xc8>)
    53b8:	4798      	blx	r3
    53ba:	0007      	movs	r7, r0
    53bc:	4b17      	ldr	r3, [pc, #92]	; (541c <prvTraceStoreTaskswitch+0xb0>)
    53be:	701c      	strb	r4, [r3, #0]
    53c0:	4b1d      	ldr	r3, [pc, #116]	; (5438 <prvTraceStoreTaskswitch+0xcc>)
    53c2:	4798      	blx	r3
    53c4:	1e06      	subs	r6, r0, #0
    53c6:	d0e7      	beq.n	5398 <prvTraceStoreTaskswitch+0x2c>
    53c8:	4b14      	ldr	r3, [pc, #80]	; (541c <prvTraceStoreTaskswitch+0xb0>)
    53ca:	7818      	ldrb	r0, [r3, #0]
    53cc:	4b14      	ldr	r3, [pc, #80]	; (5420 <prvTraceStoreTaskswitch+0xb4>)
    53ce:	681a      	ldr	r2, [r3, #0]
    53d0:	2367      	movs	r3, #103	; 0x67
    53d2:	5cd3      	ldrb	r3, [r2, r3]
    53d4:	4283      	cmp	r3, r0
    53d6:	d30f      	bcc.n	53f8 <prvTraceStoreTaskswitch+0x8c>
    53d8:	2103      	movs	r1, #3
    53da:	4b18      	ldr	r3, [pc, #96]	; (543c <prvTraceStoreTaskswitch+0xd0>)
    53dc:	4798      	blx	r3
    53de:	4b10      	ldr	r3, [pc, #64]	; (5420 <prvTraceStoreTaskswitch+0xb4>)
    53e0:	681b      	ldr	r3, [r3, #0]
    53e2:	2273      	movs	r2, #115	; 0x73
    53e4:	5c9a      	ldrb	r2, [r3, r2]
    53e6:	181b      	adds	r3, r3, r0
    53e8:	189b      	adds	r3, r3, r2
    53ea:	339c      	adds	r3, #156	; 0x9c
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2b01      	cmp	r3, #1
    53f0:	d105      	bne.n	53fe <prvTraceStoreTaskswitch+0x92>
    53f2:	3306      	adds	r3, #6
    53f4:	7033      	strb	r3, [r6, #0]
    53f6:	e004      	b.n	5402 <prvTraceStoreTaskswitch+0x96>
    53f8:	4811      	ldr	r0, [pc, #68]	; (5440 <prvTraceStoreTaskswitch+0xd4>)
    53fa:	4b0b      	ldr	r3, [pc, #44]	; (5428 <prvTraceStoreTaskswitch+0xbc>)
    53fc:	4798      	blx	r3
    53fe:	2306      	movs	r3, #6
    5400:	7033      	strb	r3, [r6, #0]
    5402:	8077      	strh	r7, [r6, #2]
    5404:	7074      	strb	r4, [r6, #1]
    5406:	4b05      	ldr	r3, [pc, #20]	; (541c <prvTraceStoreTaskswitch+0xb0>)
    5408:	7819      	ldrb	r1, [r3, #0]
    540a:	2201      	movs	r2, #1
    540c:	2003      	movs	r0, #3
    540e:	4b0d      	ldr	r3, [pc, #52]	; (5444 <prvTraceStoreTaskswitch+0xd8>)
    5410:	4798      	blx	r3
    5412:	4b0d      	ldr	r3, [pc, #52]	; (5448 <prvTraceStoreTaskswitch+0xdc>)
    5414:	4798      	blx	r3
    5416:	e7bf      	b.n	5398 <prvTraceStoreTaskswitch+0x2c>
    5418:	20000a10 	.word	0x20000a10
    541c:	20000964 	.word	0x20000964
    5420:	20000960 	.word	0x20000960
    5424:	00017984 	.word	0x00017984
    5428:	000048f9 	.word	0x000048f9
    542c:	2000096c 	.word	0x2000096c
    5430:	0000ffff 	.word	0x0000ffff
    5434:	00004e91 	.word	0x00004e91
    5438:	00004951 	.word	0x00004951
    543c:	00004ad1 	.word	0x00004ad1
    5440:	000179cc 	.word	0x000179cc
    5444:	00004bfd 	.word	0x00004bfd
    5448:	00004a45 	.word	0x00004a45

0000544c <uiTraceStart>:
    544c:	b570      	push	{r4, r5, r6, lr}
    544e:	4b20      	ldr	r3, [pc, #128]	; (54d0 <uiTraceStart+0x84>)
    5450:	681b      	ldr	r3, [r3, #0]
    5452:	2b00      	cmp	r3, #0
    5454:	d00a      	beq.n	546c <uiTraceStart+0x20>
    5456:	6b18      	ldr	r0, [r3, #48]	; 0x30
    5458:	2801      	cmp	r0, #1
    545a:	d006      	beq.n	546a <uiTraceStart+0x1e>
    545c:	4b1d      	ldr	r3, [pc, #116]	; (54d4 <uiTraceStart+0x88>)
    545e:	681b      	ldr	r3, [r3, #0]
    5460:	2b00      	cmp	r3, #0
    5462:	d008      	beq.n	5476 <uiTraceStart+0x2a>
    5464:	4b1a      	ldr	r3, [pc, #104]	; (54d0 <uiTraceStart+0x84>)
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	6b18      	ldr	r0, [r3, #48]	; 0x30
    546a:	bd70      	pop	{r4, r5, r6, pc}
    546c:	481a      	ldr	r0, [pc, #104]	; (54d8 <uiTraceStart+0x8c>)
    546e:	4b1b      	ldr	r3, [pc, #108]	; (54dc <uiTraceStart+0x90>)
    5470:	4798      	blx	r3
    5472:	2000      	movs	r0, #0
    5474:	e7f9      	b.n	546a <uiTraceStart+0x1e>
    5476:	f3ef 8510 	mrs	r5, PRIMASK
    547a:	2201      	movs	r2, #1
    547c:	f382 8810 	msr	PRIMASK, r2
    5480:	4917      	ldr	r1, [pc, #92]	; (54e0 <uiTraceStart+0x94>)
    5482:	680b      	ldr	r3, [r1, #0]
    5484:	3301      	adds	r3, #1
    5486:	600b      	str	r3, [r1, #0]
    5488:	4b11      	ldr	r3, [pc, #68]	; (54d0 <uiTraceStart+0x84>)
    548a:	681b      	ldr	r3, [r3, #0]
    548c:	631a      	str	r2, [r3, #48]	; 0x30
    548e:	4b15      	ldr	r3, [pc, #84]	; (54e4 <uiTraceStart+0x98>)
    5490:	4798      	blx	r3
    5492:	4b15      	ldr	r3, [pc, #84]	; (54e8 <uiTraceStart+0x9c>)
    5494:	4798      	blx	r3
    5496:	b2c4      	uxtb	r4, r0
    5498:	2c00      	cmp	r4, #0
    549a:	d009      	beq.n	54b0 <uiTraceStart+0x64>
    549c:	0020      	movs	r0, r4
    549e:	4b13      	ldr	r3, [pc, #76]	; (54ec <uiTraceStart+0xa0>)
    54a0:	4798      	blx	r3
    54a2:	4a0f      	ldr	r2, [pc, #60]	; (54e0 <uiTraceStart+0x94>)
    54a4:	6813      	ldr	r3, [r2, #0]
    54a6:	3b01      	subs	r3, #1
    54a8:	6013      	str	r3, [r2, #0]
    54aa:	f385 8810 	msr	PRIMASK, r5
    54ae:	e7d9      	b.n	5464 <uiTraceStart+0x18>
    54b0:	2003      	movs	r0, #3
    54b2:	4b0f      	ldr	r3, [pc, #60]	; (54f0 <uiTraceStart+0xa4>)
    54b4:	4798      	blx	r3
    54b6:	0006      	movs	r6, r0
    54b8:	0004      	movs	r4, r0
    54ba:	4a0e      	ldr	r2, [pc, #56]	; (54f4 <uiTraceStart+0xa8>)
    54bc:	0001      	movs	r1, r0
    54be:	2003      	movs	r0, #3
    54c0:	4b0d      	ldr	r3, [pc, #52]	; (54f8 <uiTraceStart+0xac>)
    54c2:	4798      	blx	r3
    54c4:	2200      	movs	r2, #0
    54c6:	0031      	movs	r1, r6
    54c8:	2003      	movs	r0, #3
    54ca:	4b0c      	ldr	r3, [pc, #48]	; (54fc <uiTraceStart+0xb0>)
    54cc:	4798      	blx	r3
    54ce:	e7e5      	b.n	549c <uiTraceStart+0x50>
    54d0:	20000960 	.word	0x20000960
    54d4:	20000a18 	.word	0x20000a18
    54d8:	00017a88 	.word	0x00017a88
    54dc:	000048f9 	.word	0x000048f9
    54e0:	20000a10 	.word	0x20000a10
    54e4:	000044f1 	.word	0x000044f1
    54e8:	00004429 	.word	0x00004429
    54ec:	0000536d 	.word	0x0000536d
    54f0:	00004c95 	.word	0x00004c95
    54f4:	00017acc 	.word	0x00017acc
    54f8:	00004d69 	.word	0x00004d69
    54fc:	00004b49 	.word	0x00004b49

00005500 <vTraceStart>:
    5500:	b510      	push	{r4, lr}
    5502:	4b01      	ldr	r3, [pc, #4]	; (5508 <vTraceStart+0x8>)
    5504:	4798      	blx	r3
    5506:	bd10      	pop	{r4, pc}
    5508:	0000544d 	.word	0x0000544d

0000550c <vListInitialise>:
    550c:	0003      	movs	r3, r0
    550e:	3308      	adds	r3, #8
    5510:	6043      	str	r3, [r0, #4]
    5512:	2201      	movs	r2, #1
    5514:	4252      	negs	r2, r2
    5516:	6082      	str	r2, [r0, #8]
    5518:	60c3      	str	r3, [r0, #12]
    551a:	6103      	str	r3, [r0, #16]
    551c:	2300      	movs	r3, #0
    551e:	6003      	str	r3, [r0, #0]
    5520:	4770      	bx	lr

00005522 <vListInitialiseItem>:
    5522:	2300      	movs	r3, #0
    5524:	6103      	str	r3, [r0, #16]
    5526:	4770      	bx	lr

00005528 <vListInsertEnd>:
    5528:	6843      	ldr	r3, [r0, #4]
    552a:	604b      	str	r3, [r1, #4]
    552c:	689a      	ldr	r2, [r3, #8]
    552e:	608a      	str	r2, [r1, #8]
    5530:	689a      	ldr	r2, [r3, #8]
    5532:	6051      	str	r1, [r2, #4]
    5534:	6099      	str	r1, [r3, #8]
    5536:	6108      	str	r0, [r1, #16]
    5538:	6803      	ldr	r3, [r0, #0]
    553a:	3301      	adds	r3, #1
    553c:	6003      	str	r3, [r0, #0]
    553e:	4770      	bx	lr

00005540 <vListInsert>:
    5540:	b530      	push	{r4, r5, lr}
    5542:	680c      	ldr	r4, [r1, #0]
    5544:	0002      	movs	r2, r0
    5546:	3208      	adds	r2, #8
    5548:	1c63      	adds	r3, r4, #1
    554a:	d102      	bne.n	5552 <vListInsert+0x12>
    554c:	6902      	ldr	r2, [r0, #16]
    554e:	e004      	b.n	555a <vListInsert+0x1a>
    5550:	001a      	movs	r2, r3
    5552:	6853      	ldr	r3, [r2, #4]
    5554:	681d      	ldr	r5, [r3, #0]
    5556:	42ac      	cmp	r4, r5
    5558:	d2fa      	bcs.n	5550 <vListInsert+0x10>
    555a:	6853      	ldr	r3, [r2, #4]
    555c:	604b      	str	r3, [r1, #4]
    555e:	6099      	str	r1, [r3, #8]
    5560:	608a      	str	r2, [r1, #8]
    5562:	6051      	str	r1, [r2, #4]
    5564:	6108      	str	r0, [r1, #16]
    5566:	6803      	ldr	r3, [r0, #0]
    5568:	3301      	adds	r3, #1
    556a:	6003      	str	r3, [r0, #0]
    556c:	bd30      	pop	{r4, r5, pc}

0000556e <uxListRemove>:
    556e:	6903      	ldr	r3, [r0, #16]
    5570:	6842      	ldr	r2, [r0, #4]
    5572:	6881      	ldr	r1, [r0, #8]
    5574:	6091      	str	r1, [r2, #8]
    5576:	6882      	ldr	r2, [r0, #8]
    5578:	6841      	ldr	r1, [r0, #4]
    557a:	6051      	str	r1, [r2, #4]
    557c:	685a      	ldr	r2, [r3, #4]
    557e:	4290      	cmp	r0, r2
    5580:	d006      	beq.n	5590 <uxListRemove+0x22>
    5582:	2200      	movs	r2, #0
    5584:	6102      	str	r2, [r0, #16]
    5586:	681a      	ldr	r2, [r3, #0]
    5588:	3a01      	subs	r2, #1
    558a:	601a      	str	r2, [r3, #0]
    558c:	6818      	ldr	r0, [r3, #0]
    558e:	4770      	bx	lr
    5590:	6882      	ldr	r2, [r0, #8]
    5592:	605a      	str	r2, [r3, #4]
    5594:	e7f5      	b.n	5582 <uxListRemove+0x14>
	...

00005598 <prvTaskExitError>:
    5598:	b082      	sub	sp, #8
    559a:	2300      	movs	r3, #0
    559c:	9301      	str	r3, [sp, #4]
    559e:	4b06      	ldr	r3, [pc, #24]	; (55b8 <prvTaskExitError+0x20>)
    55a0:	681b      	ldr	r3, [r3, #0]
    55a2:	3301      	adds	r3, #1
    55a4:	d001      	beq.n	55aa <prvTaskExitError+0x12>
    55a6:	b672      	cpsid	i
    55a8:	e7fe      	b.n	55a8 <prvTaskExitError+0x10>
    55aa:	b672      	cpsid	i
    55ac:	9b01      	ldr	r3, [sp, #4]
    55ae:	2b00      	cmp	r3, #0
    55b0:	d0fc      	beq.n	55ac <prvTaskExitError+0x14>
    55b2:	b002      	add	sp, #8
    55b4:	4770      	bx	lr
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	200000f0 	.word	0x200000f0
    55bc:	00000000 	.word	0x00000000

000055c0 <vPortStartFirstTask>:
    55c0:	4a0b      	ldr	r2, [pc, #44]	; (55f0 <pxCurrentTCBConst2>)
    55c2:	6813      	ldr	r3, [r2, #0]
    55c4:	6818      	ldr	r0, [r3, #0]
    55c6:	3020      	adds	r0, #32
    55c8:	f380 8809 	msr	PSP, r0
    55cc:	2002      	movs	r0, #2
    55ce:	f380 8814 	msr	CONTROL, r0
    55d2:	f3bf 8f6f 	isb	sy
    55d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    55d8:	46ae      	mov	lr, r5
    55da:	bc08      	pop	{r3}
    55dc:	bc04      	pop	{r2}
    55de:	b662      	cpsie	i
    55e0:	4718      	bx	r3
    55e2:	46c0      	nop			; (mov r8, r8)
    55e4:	46c0      	nop			; (mov r8, r8)
    55e6:	46c0      	nop			; (mov r8, r8)
    55e8:	46c0      	nop			; (mov r8, r8)
    55ea:	46c0      	nop			; (mov r8, r8)
    55ec:	46c0      	nop			; (mov r8, r8)
    55ee:	46c0      	nop			; (mov r8, r8)

000055f0 <pxCurrentTCBConst2>:
    55f0:	20003cfc 	.word	0x20003cfc

000055f4 <pxPortInitialiseStack>:
    55f4:	b510      	push	{r4, lr}
    55f6:	1f03      	subs	r3, r0, #4
    55f8:	2480      	movs	r4, #128	; 0x80
    55fa:	0464      	lsls	r4, r4, #17
    55fc:	601c      	str	r4, [r3, #0]
    55fe:	3b04      	subs	r3, #4
    5600:	6019      	str	r1, [r3, #0]
    5602:	3b04      	subs	r3, #4
    5604:	4902      	ldr	r1, [pc, #8]	; (5610 <pxPortInitialiseStack+0x1c>)
    5606:	6019      	str	r1, [r3, #0]
    5608:	3b14      	subs	r3, #20
    560a:	601a      	str	r2, [r3, #0]
    560c:	3840      	subs	r0, #64	; 0x40
    560e:	bd10      	pop	{r4, pc}
    5610:	00005599 	.word	0x00005599

00005614 <SVC_Handler>:
    5614:	4770      	bx	lr
	...

00005618 <xPortStartScheduler>:
    5618:	b570      	push	{r4, r5, r6, lr}
    561a:	4b13      	ldr	r3, [pc, #76]	; (5668 <xPortStartScheduler+0x50>)
    561c:	6819      	ldr	r1, [r3, #0]
    561e:	22ff      	movs	r2, #255	; 0xff
    5620:	0412      	lsls	r2, r2, #16
    5622:	430a      	orrs	r2, r1
    5624:	601a      	str	r2, [r3, #0]
    5626:	6819      	ldr	r1, [r3, #0]
    5628:	22ff      	movs	r2, #255	; 0xff
    562a:	0612      	lsls	r2, r2, #24
    562c:	430a      	orrs	r2, r1
    562e:	601a      	str	r2, [r3, #0]
    5630:	4d0e      	ldr	r5, [pc, #56]	; (566c <xPortStartScheduler+0x54>)
    5632:	2400      	movs	r4, #0
    5634:	602c      	str	r4, [r5, #0]
    5636:	4b0e      	ldr	r3, [pc, #56]	; (5670 <xPortStartScheduler+0x58>)
    5638:	601c      	str	r4, [r3, #0]
    563a:	2000      	movs	r0, #0
    563c:	4b0d      	ldr	r3, [pc, #52]	; (5674 <xPortStartScheduler+0x5c>)
    563e:	4798      	blx	r3
    5640:	21fa      	movs	r1, #250	; 0xfa
    5642:	0089      	lsls	r1, r1, #2
    5644:	4b0c      	ldr	r3, [pc, #48]	; (5678 <xPortStartScheduler+0x60>)
    5646:	4798      	blx	r3
    5648:	3801      	subs	r0, #1
    564a:	4b0c      	ldr	r3, [pc, #48]	; (567c <xPortStartScheduler+0x64>)
    564c:	6018      	str	r0, [r3, #0]
    564e:	2307      	movs	r3, #7
    5650:	602b      	str	r3, [r5, #0]
    5652:	4b0b      	ldr	r3, [pc, #44]	; (5680 <xPortStartScheduler+0x68>)
    5654:	601c      	str	r4, [r3, #0]
    5656:	4b0b      	ldr	r3, [pc, #44]	; (5684 <xPortStartScheduler+0x6c>)
    5658:	4798      	blx	r3
    565a:	4b0b      	ldr	r3, [pc, #44]	; (5688 <xPortStartScheduler+0x70>)
    565c:	4798      	blx	r3
    565e:	4b0b      	ldr	r3, [pc, #44]	; (568c <xPortStartScheduler+0x74>)
    5660:	4798      	blx	r3
    5662:	2000      	movs	r0, #0
    5664:	bd70      	pop	{r4, r5, r6, pc}
    5666:	46c0      	nop			; (mov r8, r8)
    5668:	e000ed20 	.word	0xe000ed20
    566c:	e000e010 	.word	0xe000e010
    5670:	e000e018 	.word	0xe000e018
    5674:	0000dedd 	.word	0x0000dedd
    5678:	00011d75 	.word	0x00011d75
    567c:	e000e014 	.word	0xe000e014
    5680:	200000f0 	.word	0x200000f0
    5684:	000055c1 	.word	0x000055c1
    5688:	00007179 	.word	0x00007179
    568c:	00005599 	.word	0x00005599

00005690 <vPortYield>:
    5690:	2280      	movs	r2, #128	; 0x80
    5692:	0552      	lsls	r2, r2, #21
    5694:	4b01      	ldr	r3, [pc, #4]	; (569c <vPortYield+0xc>)
    5696:	601a      	str	r2, [r3, #0]
    5698:	4770      	bx	lr
    569a:	46c0      	nop			; (mov r8, r8)
    569c:	e000ed04 	.word	0xe000ed04

000056a0 <vPortEnterCritical>:
    56a0:	b672      	cpsid	i
    56a2:	4a04      	ldr	r2, [pc, #16]	; (56b4 <vPortEnterCritical+0x14>)
    56a4:	6813      	ldr	r3, [r2, #0]
    56a6:	3301      	adds	r3, #1
    56a8:	6013      	str	r3, [r2, #0]
    56aa:	f3bf 8f4f 	dsb	sy
    56ae:	f3bf 8f6f 	isb	sy
    56b2:	4770      	bx	lr
    56b4:	200000f0 	.word	0x200000f0

000056b8 <vPortExitCritical>:
    56b8:	4b06      	ldr	r3, [pc, #24]	; (56d4 <vPortExitCritical+0x1c>)
    56ba:	681b      	ldr	r3, [r3, #0]
    56bc:	2b00      	cmp	r3, #0
    56be:	d101      	bne.n	56c4 <vPortExitCritical+0xc>
    56c0:	b672      	cpsid	i
    56c2:	e7fe      	b.n	56c2 <vPortExitCritical+0xa>
    56c4:	3b01      	subs	r3, #1
    56c6:	4a03      	ldr	r2, [pc, #12]	; (56d4 <vPortExitCritical+0x1c>)
    56c8:	6013      	str	r3, [r2, #0]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d100      	bne.n	56d0 <vPortExitCritical+0x18>
    56ce:	b662      	cpsie	i
    56d0:	4770      	bx	lr
    56d2:	46c0      	nop			; (mov r8, r8)
    56d4:	200000f0 	.word	0x200000f0

000056d8 <ulSetInterruptMaskFromISR>:
    56d8:	f3ef 8010 	mrs	r0, PRIMASK
    56dc:	b672      	cpsid	i
    56de:	4770      	bx	lr

000056e0 <vClearInterruptMaskFromISR>:
    56e0:	f380 8810 	msr	PRIMASK, r0
    56e4:	4770      	bx	lr
	...

000056f0 <PendSV_Handler>:
    56f0:	f3ef 8009 	mrs	r0, PSP
    56f4:	4b0e      	ldr	r3, [pc, #56]	; (5730 <pxCurrentTCBConst>)
    56f6:	681a      	ldr	r2, [r3, #0]
    56f8:	3820      	subs	r0, #32
    56fa:	6010      	str	r0, [r2, #0]
    56fc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    56fe:	4644      	mov	r4, r8
    5700:	464d      	mov	r5, r9
    5702:	4656      	mov	r6, sl
    5704:	465f      	mov	r7, fp
    5706:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    5708:	b508      	push	{r3, lr}
    570a:	b672      	cpsid	i
    570c:	f001 fd34 	bl	7178 <vTaskSwitchContext>
    5710:	b662      	cpsie	i
    5712:	bc0c      	pop	{r2, r3}
    5714:	6811      	ldr	r1, [r2, #0]
    5716:	6808      	ldr	r0, [r1, #0]
    5718:	3010      	adds	r0, #16
    571a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    571c:	46a0      	mov	r8, r4
    571e:	46a9      	mov	r9, r5
    5720:	46b2      	mov	sl, r6
    5722:	46bb      	mov	fp, r7
    5724:	f380 8809 	msr	PSP, r0
    5728:	3820      	subs	r0, #32
    572a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    572c:	4718      	bx	r3
    572e:	46c0      	nop			; (mov r8, r8)

00005730 <pxCurrentTCBConst>:
    5730:	20003cfc 	.word	0x20003cfc

00005734 <SysTick_Handler>:
    5734:	b510      	push	{r4, lr}
    5736:	4b07      	ldr	r3, [pc, #28]	; (5754 <SysTick_Handler+0x20>)
    5738:	4798      	blx	r3
    573a:	0004      	movs	r4, r0
    573c:	4b06      	ldr	r3, [pc, #24]	; (5758 <SysTick_Handler+0x24>)
    573e:	4798      	blx	r3
    5740:	2800      	cmp	r0, #0
    5742:	d003      	beq.n	574c <SysTick_Handler+0x18>
    5744:	2280      	movs	r2, #128	; 0x80
    5746:	0552      	lsls	r2, r2, #21
    5748:	4b04      	ldr	r3, [pc, #16]	; (575c <SysTick_Handler+0x28>)
    574a:	601a      	str	r2, [r3, #0]
    574c:	0020      	movs	r0, r4
    574e:	4b04      	ldr	r3, [pc, #16]	; (5760 <SysTick_Handler+0x2c>)
    5750:	4798      	blx	r3
    5752:	bd10      	pop	{r4, pc}
    5754:	000056d9 	.word	0x000056d9
    5758:	00006e21 	.word	0x00006e21
    575c:	e000ed04 	.word	0xe000ed04
    5760:	000056e1 	.word	0x000056e1

00005764 <pvPortMalloc>:
    5764:	b570      	push	{r4, r5, r6, lr}
    5766:	0004      	movs	r4, r0
    5768:	0743      	lsls	r3, r0, #29
    576a:	d002      	beq.n	5772 <pvPortMalloc+0xe>
    576c:	2307      	movs	r3, #7
    576e:	439c      	bics	r4, r3
    5770:	3408      	adds	r4, #8
    5772:	4b18      	ldr	r3, [pc, #96]	; (57d4 <pvPortMalloc+0x70>)
    5774:	4798      	blx	r3
    5776:	4b18      	ldr	r3, [pc, #96]	; (57d8 <pvPortMalloc+0x74>)
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	2b00      	cmp	r3, #0
    577c:	d017      	beq.n	57ae <pvPortMalloc+0x4a>
    577e:	4b17      	ldr	r3, [pc, #92]	; (57dc <pvPortMalloc+0x78>)
    5780:	681a      	ldr	r2, [r3, #0]
    5782:	18a3      	adds	r3, r4, r2
    5784:	4916      	ldr	r1, [pc, #88]	; (57e0 <pvPortMalloc+0x7c>)
    5786:	428b      	cmp	r3, r1
    5788:	d818      	bhi.n	57bc <pvPortMalloc+0x58>
    578a:	429a      	cmp	r2, r3
    578c:	d216      	bcs.n	57bc <pvPortMalloc+0x58>
    578e:	4912      	ldr	r1, [pc, #72]	; (57d8 <pvPortMalloc+0x74>)
    5790:	680d      	ldr	r5, [r1, #0]
    5792:	18ad      	adds	r5, r5, r2
    5794:	4a11      	ldr	r2, [pc, #68]	; (57dc <pvPortMalloc+0x78>)
    5796:	6013      	str	r3, [r2, #0]
    5798:	2d00      	cmp	r5, #0
    579a:	d00f      	beq.n	57bc <pvPortMalloc+0x58>
    579c:	0022      	movs	r2, r4
    579e:	0029      	movs	r1, r5
    57a0:	2094      	movs	r0, #148	; 0x94
    57a2:	4b10      	ldr	r3, [pc, #64]	; (57e4 <pvPortMalloc+0x80>)
    57a4:	4798      	blx	r3
    57a6:	4b10      	ldr	r3, [pc, #64]	; (57e8 <pvPortMalloc+0x84>)
    57a8:	4798      	blx	r3
    57aa:	0028      	movs	r0, r5
    57ac:	bd70      	pop	{r4, r5, r6, pc}
    57ae:	2207      	movs	r2, #7
    57b0:	4b0e      	ldr	r3, [pc, #56]	; (57ec <pvPortMalloc+0x88>)
    57b2:	3308      	adds	r3, #8
    57b4:	4393      	bics	r3, r2
    57b6:	4a08      	ldr	r2, [pc, #32]	; (57d8 <pvPortMalloc+0x74>)
    57b8:	6013      	str	r3, [r2, #0]
    57ba:	e7e0      	b.n	577e <pvPortMalloc+0x1a>
    57bc:	0022      	movs	r2, r4
    57be:	2100      	movs	r1, #0
    57c0:	20e8      	movs	r0, #232	; 0xe8
    57c2:	4b08      	ldr	r3, [pc, #32]	; (57e4 <pvPortMalloc+0x80>)
    57c4:	4798      	blx	r3
    57c6:	4b08      	ldr	r3, [pc, #32]	; (57e8 <pvPortMalloc+0x84>)
    57c8:	4798      	blx	r3
    57ca:	4b09      	ldr	r3, [pc, #36]	; (57f0 <pvPortMalloc+0x8c>)
    57cc:	4798      	blx	r3
    57ce:	2500      	movs	r5, #0
    57d0:	e7eb      	b.n	57aa <pvPortMalloc+0x46>
    57d2:	46c0      	nop			; (mov r8, r8)
    57d4:	00006e05 	.word	0x00006e05
    57d8:	20000a2c 	.word	0x20000a2c
    57dc:	20003cf8 	.word	0x20003cf8
    57e0:	000032bf 	.word	0x000032bf
    57e4:	0000505d 	.word	0x0000505d
    57e8:	00006fad 	.word	0x00006fad
    57ec:	20000a30 	.word	0x20000a30
    57f0:	00011d4d 	.word	0x00011d4d

000057f4 <vPortFree>:
    57f4:	2800      	cmp	r0, #0
    57f6:	d001      	beq.n	57fc <vPortFree+0x8>
    57f8:	b672      	cpsid	i
    57fa:	e7fe      	b.n	57fa <vPortFree+0x6>
    57fc:	4770      	bx	lr
	...

00005800 <xPortGetFreeHeapSize>:
    5800:	4b02      	ldr	r3, [pc, #8]	; (580c <xPortGetFreeHeapSize+0xc>)
    5802:	681b      	ldr	r3, [r3, #0]
    5804:	20cb      	movs	r0, #203	; 0xcb
    5806:	0180      	lsls	r0, r0, #6
    5808:	1ac0      	subs	r0, r0, r3
    580a:	4770      	bx	lr
    580c:	20003cf8 	.word	0x20003cf8

00005810 <prvIsQueueEmpty>:
    5810:	b510      	push	{r4, lr}
    5812:	0004      	movs	r4, r0
    5814:	4b03      	ldr	r3, [pc, #12]	; (5824 <prvIsQueueEmpty+0x14>)
    5816:	4798      	blx	r3
    5818:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    581a:	4b03      	ldr	r3, [pc, #12]	; (5828 <prvIsQueueEmpty+0x18>)
    581c:	4798      	blx	r3
    581e:	4260      	negs	r0, r4
    5820:	4160      	adcs	r0, r4
    5822:	bd10      	pop	{r4, pc}
    5824:	000056a1 	.word	0x000056a1
    5828:	000056b9 	.word	0x000056b9

0000582c <prvCopyDataToQueue>:
    582c:	b570      	push	{r4, r5, r6, lr}
    582e:	0004      	movs	r4, r0
    5830:	0016      	movs	r6, r2
    5832:	6b85      	ldr	r5, [r0, #56]	; 0x38
    5834:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5836:	2a00      	cmp	r2, #0
    5838:	d10b      	bne.n	5852 <prvCopyDataToQueue+0x26>
    583a:	2000      	movs	r0, #0
    583c:	6823      	ldr	r3, [r4, #0]
    583e:	4283      	cmp	r3, r0
    5840:	d104      	bne.n	584c <prvCopyDataToQueue+0x20>
    5842:	6860      	ldr	r0, [r4, #4]
    5844:	4b16      	ldr	r3, [pc, #88]	; (58a0 <prvCopyDataToQueue+0x74>)
    5846:	4798      	blx	r3
    5848:	2300      	movs	r3, #0
    584a:	6063      	str	r3, [r4, #4]
    584c:	3501      	adds	r5, #1
    584e:	63a5      	str	r5, [r4, #56]	; 0x38
    5850:	bd70      	pop	{r4, r5, r6, pc}
    5852:	2e00      	cmp	r6, #0
    5854:	d10e      	bne.n	5874 <prvCopyDataToQueue+0x48>
    5856:	6880      	ldr	r0, [r0, #8]
    5858:	4b12      	ldr	r3, [pc, #72]	; (58a4 <prvCopyDataToQueue+0x78>)
    585a:	4798      	blx	r3
    585c:	68a3      	ldr	r3, [r4, #8]
    585e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    5860:	4694      	mov	ip, r2
    5862:	4463      	add	r3, ip
    5864:	60a3      	str	r3, [r4, #8]
    5866:	2000      	movs	r0, #0
    5868:	6862      	ldr	r2, [r4, #4]
    586a:	4293      	cmp	r3, r2
    586c:	d3ee      	bcc.n	584c <prvCopyDataToQueue+0x20>
    586e:	6823      	ldr	r3, [r4, #0]
    5870:	60a3      	str	r3, [r4, #8]
    5872:	e7eb      	b.n	584c <prvCopyDataToQueue+0x20>
    5874:	68c0      	ldr	r0, [r0, #12]
    5876:	4b0b      	ldr	r3, [pc, #44]	; (58a4 <prvCopyDataToQueue+0x78>)
    5878:	4798      	blx	r3
    587a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    587c:	425b      	negs	r3, r3
    587e:	68e2      	ldr	r2, [r4, #12]
    5880:	18d2      	adds	r2, r2, r3
    5882:	60e2      	str	r2, [r4, #12]
    5884:	6821      	ldr	r1, [r4, #0]
    5886:	428a      	cmp	r2, r1
    5888:	d203      	bcs.n	5892 <prvCopyDataToQueue+0x66>
    588a:	6862      	ldr	r2, [r4, #4]
    588c:	4694      	mov	ip, r2
    588e:	4463      	add	r3, ip
    5890:	60e3      	str	r3, [r4, #12]
    5892:	2000      	movs	r0, #0
    5894:	2e02      	cmp	r6, #2
    5896:	d1d9      	bne.n	584c <prvCopyDataToQueue+0x20>
    5898:	4285      	cmp	r5, r0
    589a:	d0d7      	beq.n	584c <prvCopyDataToQueue+0x20>
    589c:	3d01      	subs	r5, #1
    589e:	e7d5      	b.n	584c <prvCopyDataToQueue+0x20>
    58a0:	000076fd 	.word	0x000076fd
    58a4:	00014245 	.word	0x00014245

000058a8 <prvNotifyQueueSetContainer>:
    58a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    58aa:	46ce      	mov	lr, r9
    58ac:	4647      	mov	r7, r8
    58ae:	b580      	push	{r7, lr}
    58b0:	b083      	sub	sp, #12
    58b2:	9001      	str	r0, [sp, #4]
    58b4:	9100      	str	r1, [sp, #0]
    58b6:	6c84      	ldr	r4, [r0, #72]	; 0x48
    58b8:	2c00      	cmp	r4, #0
    58ba:	d005      	beq.n	58c8 <prvNotifyQueueSetContainer+0x20>
    58bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    58be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    58c0:	429a      	cmp	r2, r3
    58c2:	d303      	bcc.n	58cc <prvNotifyQueueSetContainer+0x24>
    58c4:	b672      	cpsid	i
    58c6:	e7fe      	b.n	58c6 <prvNotifyQueueSetContainer+0x1e>
    58c8:	b672      	cpsid	i
    58ca:	e7fe      	b.n	58ca <prvNotifyQueueSetContainer+0x22>
    58cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    58ce:	2600      	movs	r6, #0
    58d0:	4293      	cmp	r3, r2
    58d2:	d805      	bhi.n	58e0 <prvNotifyQueueSetContainer+0x38>
    58d4:	0030      	movs	r0, r6
    58d6:	b003      	add	sp, #12
    58d8:	bc0c      	pop	{r2, r3}
    58da:	4690      	mov	r8, r2
    58dc:	4699      	mov	r9, r3
    58de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    58e0:	2345      	movs	r3, #69	; 0x45
    58e2:	5ce5      	ldrb	r5, [r4, r3]
    58e4:	b26d      	sxtb	r5, r5
    58e6:	4b2c      	ldr	r3, [pc, #176]	; (5998 <prvNotifyQueueSetContainer+0xf0>)
    58e8:	4798      	blx	r3
    58ea:	4b2c      	ldr	r3, [pc, #176]	; (599c <prvNotifyQueueSetContainer+0xf4>)
    58ec:	4798      	blx	r3
    58ee:	4b2c      	ldr	r3, [pc, #176]	; (59a0 <prvNotifyQueueSetContainer+0xf8>)
    58f0:	881b      	ldrh	r3, [r3, #0]
    58f2:	4203      	tst	r3, r0
    58f4:	d01e      	beq.n	5934 <prvNotifyQueueSetContainer+0x8c>
    58f6:	0020      	movs	r0, r4
    58f8:	4b2a      	ldr	r3, [pc, #168]	; (59a4 <prvNotifyQueueSetContainer+0xfc>)
    58fa:	4798      	blx	r3
    58fc:	4b28      	ldr	r3, [pc, #160]	; (59a0 <prvNotifyQueueSetContainer+0xf8>)
    58fe:	881b      	ldrh	r3, [r3, #0]
    5900:	4203      	tst	r3, r0
    5902:	d017      	beq.n	5934 <prvNotifyQueueSetContainer+0x8c>
    5904:	3625      	adds	r6, #37	; 0x25
    5906:	9b00      	ldr	r3, [sp, #0]
    5908:	2b00      	cmp	r3, #0
    590a:	d106      	bne.n	591a <prvNotifyQueueSetContainer+0x72>
    590c:	0020      	movs	r0, r4
    590e:	4b26      	ldr	r3, [pc, #152]	; (59a8 <prvNotifyQueueSetContainer+0x100>)
    5910:	4798      	blx	r3
    5912:	4b26      	ldr	r3, [pc, #152]	; (59ac <prvNotifyQueueSetContainer+0x104>)
    5914:	5c1e      	ldrb	r6, [r3, r0]
    5916:	3620      	adds	r6, #32
    5918:	b2f6      	uxtb	r6, r6
    591a:	0020      	movs	r0, r4
    591c:	4b22      	ldr	r3, [pc, #136]	; (59a8 <prvNotifyQueueSetContainer+0x100>)
    591e:	4798      	blx	r3
    5920:	4b22      	ldr	r3, [pc, #136]	; (59ac <prvNotifyQueueSetContainer+0x104>)
    5922:	5c1f      	ldrb	r7, [r3, r0]
    5924:	0020      	movs	r0, r4
    5926:	4b22      	ldr	r3, [pc, #136]	; (59b0 <prvNotifyQueueSetContainer+0x108>)
    5928:	4798      	blx	r3
    592a:	b2c2      	uxtb	r2, r0
    592c:	0039      	movs	r1, r7
    592e:	0030      	movs	r0, r6
    5930:	4b20      	ldr	r3, [pc, #128]	; (59b4 <prvNotifyQueueSetContainer+0x10c>)
    5932:	4798      	blx	r3
    5934:	0020      	movs	r0, r4
    5936:	4f1c      	ldr	r7, [pc, #112]	; (59a8 <prvNotifyQueueSetContainer+0x100>)
    5938:	47b8      	blx	r7
    593a:	4e1c      	ldr	r6, [pc, #112]	; (59ac <prvNotifyQueueSetContainer+0x104>)
    593c:	5c33      	ldrb	r3, [r6, r0]
    593e:	4698      	mov	r8, r3
    5940:	0020      	movs	r0, r4
    5942:	4b1b      	ldr	r3, [pc, #108]	; (59b0 <prvNotifyQueueSetContainer+0x108>)
    5944:	4798      	blx	r3
    5946:	b2c3      	uxtb	r3, r0
    5948:	4699      	mov	r9, r3
    594a:	0020      	movs	r0, r4
    594c:	47b8      	blx	r7
    594e:	5c33      	ldrb	r3, [r6, r0]
    5950:	2b02      	cmp	r3, #2
    5952:	d019      	beq.n	5988 <prvNotifyQueueSetContainer+0xe0>
    5954:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5956:	3201      	adds	r2, #1
    5958:	b2d2      	uxtb	r2, r2
    595a:	4649      	mov	r1, r9
    595c:	4640      	mov	r0, r8
    595e:	4b16      	ldr	r3, [pc, #88]	; (59b8 <prvNotifyQueueSetContainer+0x110>)
    5960:	4798      	blx	r3
    5962:	9a00      	ldr	r2, [sp, #0]
    5964:	a901      	add	r1, sp, #4
    5966:	0020      	movs	r0, r4
    5968:	4b14      	ldr	r3, [pc, #80]	; (59bc <prvNotifyQueueSetContainer+0x114>)
    596a:	4798      	blx	r3
    596c:	0006      	movs	r6, r0
    596e:	1c6b      	adds	r3, r5, #1
    5970:	d10c      	bne.n	598c <prvNotifyQueueSetContainer+0xe4>
    5972:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5974:	2b00      	cmp	r3, #0
    5976:	d0ad      	beq.n	58d4 <prvNotifyQueueSetContainer+0x2c>
    5978:	0020      	movs	r0, r4
    597a:	3024      	adds	r0, #36	; 0x24
    597c:	4b10      	ldr	r3, [pc, #64]	; (59c0 <prvNotifyQueueSetContainer+0x118>)
    597e:	4798      	blx	r3
    5980:	2800      	cmp	r0, #0
    5982:	d0a7      	beq.n	58d4 <prvNotifyQueueSetContainer+0x2c>
    5984:	2601      	movs	r6, #1
    5986:	e7a5      	b.n	58d4 <prvNotifyQueueSetContainer+0x2c>
    5988:	2200      	movs	r2, #0
    598a:	e7e6      	b.n	595a <prvNotifyQueueSetContainer+0xb2>
    598c:	3501      	adds	r5, #1
    598e:	b26d      	sxtb	r5, r5
    5990:	2345      	movs	r3, #69	; 0x45
    5992:	54e5      	strb	r5, [r4, r3]
    5994:	e79e      	b.n	58d4 <prvNotifyQueueSetContainer+0x2c>
    5996:	46c0      	nop			; (mov r8, r8)
    5998:	000044f1 	.word	0x000044f1
    599c:	00004439 	.word	0x00004439
    59a0:	200000e8 	.word	0x200000e8
    59a4:	0000449d 	.word	0x0000449d
    59a8:	0000441d 	.word	0x0000441d
    59ac:	200000e0 	.word	0x200000e0
    59b0:	0000448d 	.word	0x0000448d
    59b4:	00005129 	.word	0x00005129
    59b8:	00004bfd 	.word	0x00004bfd
    59bc:	0000582d 	.word	0x0000582d
    59c0:	0000745d 	.word	0x0000745d

000059c4 <prvCopyDataFromQueue>:
    59c4:	b510      	push	{r4, lr}
    59c6:	000c      	movs	r4, r1
    59c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    59ca:	2a00      	cmp	r2, #0
    59cc:	d00b      	beq.n	59e6 <prvCopyDataFromQueue+0x22>
    59ce:	68c3      	ldr	r3, [r0, #12]
    59d0:	189b      	adds	r3, r3, r2
    59d2:	60c3      	str	r3, [r0, #12]
    59d4:	6841      	ldr	r1, [r0, #4]
    59d6:	428b      	cmp	r3, r1
    59d8:	d301      	bcc.n	59de <prvCopyDataFromQueue+0x1a>
    59da:	6803      	ldr	r3, [r0, #0]
    59dc:	60c3      	str	r3, [r0, #12]
    59de:	68c1      	ldr	r1, [r0, #12]
    59e0:	0020      	movs	r0, r4
    59e2:	4b01      	ldr	r3, [pc, #4]	; (59e8 <prvCopyDataFromQueue+0x24>)
    59e4:	4798      	blx	r3
    59e6:	bd10      	pop	{r4, pc}
    59e8:	00014245 	.word	0x00014245

000059ec <prvUnlockQueue>:
    59ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59ee:	0007      	movs	r7, r0
    59f0:	4b25      	ldr	r3, [pc, #148]	; (5a88 <prvUnlockQueue+0x9c>)
    59f2:	4798      	blx	r3
    59f4:	2345      	movs	r3, #69	; 0x45
    59f6:	5cfc      	ldrb	r4, [r7, r3]
    59f8:	b264      	sxtb	r4, r4
    59fa:	2c00      	cmp	r4, #0
    59fc:	dd1c      	ble.n	5a38 <prvUnlockQueue+0x4c>
    59fe:	4e23      	ldr	r6, [pc, #140]	; (5a8c <prvUnlockQueue+0xa0>)
    5a00:	4d23      	ldr	r5, [pc, #140]	; (5a90 <prvUnlockQueue+0xa4>)
    5a02:	e00b      	b.n	5a1c <prvUnlockQueue+0x30>
    5a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a06:	2b00      	cmp	r3, #0
    5a08:	d016      	beq.n	5a38 <prvUnlockQueue+0x4c>
    5a0a:	0038      	movs	r0, r7
    5a0c:	3024      	adds	r0, #36	; 0x24
    5a0e:	47a8      	blx	r5
    5a10:	2800      	cmp	r0, #0
    5a12:	d10e      	bne.n	5a32 <prvUnlockQueue+0x46>
    5a14:	3c01      	subs	r4, #1
    5a16:	b264      	sxtb	r4, r4
    5a18:	2c00      	cmp	r4, #0
    5a1a:	d00d      	beq.n	5a38 <prvUnlockQueue+0x4c>
    5a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5a1e:	2b00      	cmp	r3, #0
    5a20:	d0f0      	beq.n	5a04 <prvUnlockQueue+0x18>
    5a22:	2100      	movs	r1, #0
    5a24:	0038      	movs	r0, r7
    5a26:	47b0      	blx	r6
    5a28:	2800      	cmp	r0, #0
    5a2a:	d0f3      	beq.n	5a14 <prvUnlockQueue+0x28>
    5a2c:	4b19      	ldr	r3, [pc, #100]	; (5a94 <prvUnlockQueue+0xa8>)
    5a2e:	4798      	blx	r3
    5a30:	e7f0      	b.n	5a14 <prvUnlockQueue+0x28>
    5a32:	4b18      	ldr	r3, [pc, #96]	; (5a94 <prvUnlockQueue+0xa8>)
    5a34:	4798      	blx	r3
    5a36:	e7ed      	b.n	5a14 <prvUnlockQueue+0x28>
    5a38:	22ff      	movs	r2, #255	; 0xff
    5a3a:	2345      	movs	r3, #69	; 0x45
    5a3c:	54fa      	strb	r2, [r7, r3]
    5a3e:	4b16      	ldr	r3, [pc, #88]	; (5a98 <prvUnlockQueue+0xac>)
    5a40:	4798      	blx	r3
    5a42:	4b11      	ldr	r3, [pc, #68]	; (5a88 <prvUnlockQueue+0x9c>)
    5a44:	4798      	blx	r3
    5a46:	2344      	movs	r3, #68	; 0x44
    5a48:	5cfc      	ldrb	r4, [r7, r3]
    5a4a:	b264      	sxtb	r4, r4
    5a4c:	2c00      	cmp	r4, #0
    5a4e:	dd14      	ble.n	5a7a <prvUnlockQueue+0x8e>
    5a50:	693b      	ldr	r3, [r7, #16]
    5a52:	2b00      	cmp	r3, #0
    5a54:	d011      	beq.n	5a7a <prvUnlockQueue+0x8e>
    5a56:	003d      	movs	r5, r7
    5a58:	3510      	adds	r5, #16
    5a5a:	4e0d      	ldr	r6, [pc, #52]	; (5a90 <prvUnlockQueue+0xa4>)
    5a5c:	e006      	b.n	5a6c <prvUnlockQueue+0x80>
    5a5e:	3c01      	subs	r4, #1
    5a60:	b264      	sxtb	r4, r4
    5a62:	2c00      	cmp	r4, #0
    5a64:	d009      	beq.n	5a7a <prvUnlockQueue+0x8e>
    5a66:	693b      	ldr	r3, [r7, #16]
    5a68:	2b00      	cmp	r3, #0
    5a6a:	d006      	beq.n	5a7a <prvUnlockQueue+0x8e>
    5a6c:	0028      	movs	r0, r5
    5a6e:	47b0      	blx	r6
    5a70:	2800      	cmp	r0, #0
    5a72:	d0f4      	beq.n	5a5e <prvUnlockQueue+0x72>
    5a74:	4b07      	ldr	r3, [pc, #28]	; (5a94 <prvUnlockQueue+0xa8>)
    5a76:	4798      	blx	r3
    5a78:	e7f1      	b.n	5a5e <prvUnlockQueue+0x72>
    5a7a:	22ff      	movs	r2, #255	; 0xff
    5a7c:	2344      	movs	r3, #68	; 0x44
    5a7e:	54fa      	strb	r2, [r7, r3]
    5a80:	4b05      	ldr	r3, [pc, #20]	; (5a98 <prvUnlockQueue+0xac>)
    5a82:	4798      	blx	r3
    5a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	000056a1 	.word	0x000056a1
    5a8c:	000058a9 	.word	0x000058a9
    5a90:	0000745d 	.word	0x0000745d
    5a94:	00007599 	.word	0x00007599
    5a98:	000056b9 	.word	0x000056b9

00005a9c <xQueueGenericReset>:
    5a9c:	b570      	push	{r4, r5, r6, lr}
    5a9e:	0004      	movs	r4, r0
    5aa0:	000d      	movs	r5, r1
    5aa2:	2800      	cmp	r0, #0
    5aa4:	d021      	beq.n	5aea <xQueueGenericReset+0x4e>
    5aa6:	4b17      	ldr	r3, [pc, #92]	; (5b04 <xQueueGenericReset+0x68>)
    5aa8:	4798      	blx	r3
    5aaa:	6822      	ldr	r2, [r4, #0]
    5aac:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5aae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5ab0:	434b      	muls	r3, r1
    5ab2:	18d0      	adds	r0, r2, r3
    5ab4:	6060      	str	r0, [r4, #4]
    5ab6:	2000      	movs	r0, #0
    5ab8:	63a0      	str	r0, [r4, #56]	; 0x38
    5aba:	60a2      	str	r2, [r4, #8]
    5abc:	1a5b      	subs	r3, r3, r1
    5abe:	18d3      	adds	r3, r2, r3
    5ac0:	60e3      	str	r3, [r4, #12]
    5ac2:	23ff      	movs	r3, #255	; 0xff
    5ac4:	2244      	movs	r2, #68	; 0x44
    5ac6:	54a3      	strb	r3, [r4, r2]
    5ac8:	3201      	adds	r2, #1
    5aca:	54a3      	strb	r3, [r4, r2]
    5acc:	2d00      	cmp	r5, #0
    5ace:	d111      	bne.n	5af4 <xQueueGenericReset+0x58>
    5ad0:	6923      	ldr	r3, [r4, #16]
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d005      	beq.n	5ae2 <xQueueGenericReset+0x46>
    5ad6:	0020      	movs	r0, r4
    5ad8:	3010      	adds	r0, #16
    5ada:	4b0b      	ldr	r3, [pc, #44]	; (5b08 <xQueueGenericReset+0x6c>)
    5adc:	4798      	blx	r3
    5ade:	2800      	cmp	r0, #0
    5ae0:	d105      	bne.n	5aee <xQueueGenericReset+0x52>
    5ae2:	4b0a      	ldr	r3, [pc, #40]	; (5b0c <xQueueGenericReset+0x70>)
    5ae4:	4798      	blx	r3
    5ae6:	2001      	movs	r0, #1
    5ae8:	bd70      	pop	{r4, r5, r6, pc}
    5aea:	b672      	cpsid	i
    5aec:	e7fe      	b.n	5aec <xQueueGenericReset+0x50>
    5aee:	4b08      	ldr	r3, [pc, #32]	; (5b10 <xQueueGenericReset+0x74>)
    5af0:	4798      	blx	r3
    5af2:	e7f6      	b.n	5ae2 <xQueueGenericReset+0x46>
    5af4:	0020      	movs	r0, r4
    5af6:	3010      	adds	r0, #16
    5af8:	4d06      	ldr	r5, [pc, #24]	; (5b14 <xQueueGenericReset+0x78>)
    5afa:	47a8      	blx	r5
    5afc:	0020      	movs	r0, r4
    5afe:	3024      	adds	r0, #36	; 0x24
    5b00:	47a8      	blx	r5
    5b02:	e7ee      	b.n	5ae2 <xQueueGenericReset+0x46>
    5b04:	000056a1 	.word	0x000056a1
    5b08:	0000745d 	.word	0x0000745d
    5b0c:	000056b9 	.word	0x000056b9
    5b10:	00005691 	.word	0x00005691
    5b14:	0000550d 	.word	0x0000550d

00005b18 <xQueueGenericCreate>:
    5b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b1a:	0006      	movs	r6, r0
    5b1c:	000d      	movs	r5, r1
    5b1e:	0017      	movs	r7, r2
    5b20:	2800      	cmp	r0, #0
    5b22:	d101      	bne.n	5b28 <xQueueGenericCreate+0x10>
    5b24:	b672      	cpsid	i
    5b26:	e7fe      	b.n	5b26 <xQueueGenericCreate+0xe>
    5b28:	0008      	movs	r0, r1
    5b2a:	4370      	muls	r0, r6
    5b2c:	3054      	adds	r0, #84	; 0x54
    5b2e:	4b38      	ldr	r3, [pc, #224]	; (5c10 <xQueueGenericCreate+0xf8>)
    5b30:	4798      	blx	r3
    5b32:	1e04      	subs	r4, r0, #0
    5b34:	d05b      	beq.n	5bee <xQueueGenericCreate+0xd6>
    5b36:	2d00      	cmp	r5, #0
    5b38:	d13b      	bne.n	5bb2 <xQueueGenericCreate+0x9a>
    5b3a:	6020      	str	r0, [r4, #0]
    5b3c:	63e6      	str	r6, [r4, #60]	; 0x3c
    5b3e:	6425      	str	r5, [r4, #64]	; 0x40
    5b40:	2101      	movs	r1, #1
    5b42:	0020      	movs	r0, r4
    5b44:	4b33      	ldr	r3, [pc, #204]	; (5c14 <xQueueGenericCreate+0xfc>)
    5b46:	4798      	blx	r3
    5b48:	2350      	movs	r3, #80	; 0x50
    5b4a:	54e7      	strb	r7, [r4, r3]
    5b4c:	2300      	movs	r3, #0
    5b4e:	64a3      	str	r3, [r4, #72]	; 0x48
    5b50:	0020      	movs	r0, r4
    5b52:	4e31      	ldr	r6, [pc, #196]	; (5c18 <xQueueGenericCreate+0x100>)
    5b54:	47b0      	blx	r6
    5b56:	4d31      	ldr	r5, [pc, #196]	; (5c1c <xQueueGenericCreate+0x104>)
    5b58:	5c28      	ldrb	r0, [r5, r0]
    5b5a:	4b31      	ldr	r3, [pc, #196]	; (5c20 <xQueueGenericCreate+0x108>)
    5b5c:	4798      	blx	r3
    5b5e:	b281      	uxth	r1, r0
    5b60:	0020      	movs	r0, r4
    5b62:	4b30      	ldr	r3, [pc, #192]	; (5c24 <xQueueGenericCreate+0x10c>)
    5b64:	4798      	blx	r3
    5b66:	4b30      	ldr	r3, [pc, #192]	; (5c28 <xQueueGenericCreate+0x110>)
    5b68:	8819      	ldrh	r1, [r3, #0]
    5b6a:	0020      	movs	r0, r4
    5b6c:	4b2f      	ldr	r3, [pc, #188]	; (5c2c <xQueueGenericCreate+0x114>)
    5b6e:	4798      	blx	r3
    5b70:	0020      	movs	r0, r4
    5b72:	47b0      	blx	r6
    5b74:	5c2d      	ldrb	r5, [r5, r0]
    5b76:	0020      	movs	r0, r4
    5b78:	4b2d      	ldr	r3, [pc, #180]	; (5c30 <xQueueGenericCreate+0x118>)
    5b7a:	4798      	blx	r3
    5b7c:	b2c1      	uxtb	r1, r0
    5b7e:	0028      	movs	r0, r5
    5b80:	4b2c      	ldr	r3, [pc, #176]	; (5c34 <xQueueGenericCreate+0x11c>)
    5b82:	4798      	blx	r3
    5b84:	4b2c      	ldr	r3, [pc, #176]	; (5c38 <xQueueGenericCreate+0x120>)
    5b86:	4798      	blx	r3
    5b88:	4b2c      	ldr	r3, [pc, #176]	; (5c3c <xQueueGenericCreate+0x124>)
    5b8a:	4798      	blx	r3
    5b8c:	4b2c      	ldr	r3, [pc, #176]	; (5c40 <xQueueGenericCreate+0x128>)
    5b8e:	881b      	ldrh	r3, [r3, #0]
    5b90:	4203      	tst	r3, r0
    5b92:	d112      	bne.n	5bba <xQueueGenericCreate+0xa2>
    5b94:	0020      	movs	r0, r4
    5b96:	4b20      	ldr	r3, [pc, #128]	; (5c18 <xQueueGenericCreate+0x100>)
    5b98:	4798      	blx	r3
    5b9a:	4b20      	ldr	r3, [pc, #128]	; (5c1c <xQueueGenericCreate+0x104>)
    5b9c:	5c1d      	ldrb	r5, [r3, r0]
    5b9e:	0020      	movs	r0, r4
    5ba0:	4b23      	ldr	r3, [pc, #140]	; (5c30 <xQueueGenericCreate+0x118>)
    5ba2:	4798      	blx	r3
    5ba4:	b2c1      	uxtb	r1, r0
    5ba6:	2200      	movs	r2, #0
    5ba8:	0028      	movs	r0, r5
    5baa:	4b26      	ldr	r3, [pc, #152]	; (5c44 <xQueueGenericCreate+0x12c>)
    5bac:	4798      	blx	r3
    5bae:	0020      	movs	r0, r4
    5bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5bb2:	0003      	movs	r3, r0
    5bb4:	3354      	adds	r3, #84	; 0x54
    5bb6:	6003      	str	r3, [r0, #0]
    5bb8:	e7c0      	b.n	5b3c <xQueueGenericCreate+0x24>
    5bba:	0020      	movs	r0, r4
    5bbc:	4b22      	ldr	r3, [pc, #136]	; (5c48 <xQueueGenericCreate+0x130>)
    5bbe:	4798      	blx	r3
    5bc0:	4b1f      	ldr	r3, [pc, #124]	; (5c40 <xQueueGenericCreate+0x128>)
    5bc2:	881b      	ldrh	r3, [r3, #0]
    5bc4:	4203      	tst	r3, r0
    5bc6:	d0e5      	beq.n	5b94 <xQueueGenericCreate+0x7c>
    5bc8:	0020      	movs	r0, r4
    5bca:	4f13      	ldr	r7, [pc, #76]	; (5c18 <xQueueGenericCreate+0x100>)
    5bcc:	47b8      	blx	r7
    5bce:	4e13      	ldr	r6, [pc, #76]	; (5c1c <xQueueGenericCreate+0x104>)
    5bd0:	5c35      	ldrb	r5, [r6, r0]
    5bd2:	3518      	adds	r5, #24
    5bd4:	b2ed      	uxtb	r5, r5
    5bd6:	0020      	movs	r0, r4
    5bd8:	47b8      	blx	r7
    5bda:	5c36      	ldrb	r6, [r6, r0]
    5bdc:	0020      	movs	r0, r4
    5bde:	4b14      	ldr	r3, [pc, #80]	; (5c30 <xQueueGenericCreate+0x118>)
    5be0:	4798      	blx	r3
    5be2:	b2c2      	uxtb	r2, r0
    5be4:	0031      	movs	r1, r6
    5be6:	0028      	movs	r0, r5
    5be8:	4b18      	ldr	r3, [pc, #96]	; (5c4c <xQueueGenericCreate+0x134>)
    5bea:	4798      	blx	r3
    5bec:	e7d2      	b.n	5b94 <xQueueGenericCreate+0x7c>
    5bee:	4b12      	ldr	r3, [pc, #72]	; (5c38 <xQueueGenericCreate+0x120>)
    5bf0:	4798      	blx	r3
    5bf2:	4b12      	ldr	r3, [pc, #72]	; (5c3c <xQueueGenericCreate+0x124>)
    5bf4:	4798      	blx	r3
    5bf6:	4b12      	ldr	r3, [pc, #72]	; (5c40 <xQueueGenericCreate+0x128>)
    5bf8:	881b      	ldrh	r3, [r3, #0]
    5bfa:	4203      	tst	r3, r0
    5bfc:	d0d7      	beq.n	5bae <xQueueGenericCreate+0x96>
    5bfe:	4b07      	ldr	r3, [pc, #28]	; (5c1c <xQueueGenericCreate+0x104>)
    5c00:	5dd8      	ldrb	r0, [r3, r7]
    5c02:	3040      	adds	r0, #64	; 0x40
    5c04:	b2c0      	uxtb	r0, r0
    5c06:	2100      	movs	r1, #0
    5c08:	4b11      	ldr	r3, [pc, #68]	; (5c50 <xQueueGenericCreate+0x138>)
    5c0a:	4798      	blx	r3
    5c0c:	e7cf      	b.n	5bae <xQueueGenericCreate+0x96>
    5c0e:	46c0      	nop			; (mov r8, r8)
    5c10:	00005765 	.word	0x00005765
    5c14:	00005a9d 	.word	0x00005a9d
    5c18:	0000441d 	.word	0x0000441d
    5c1c:	200000e0 	.word	0x200000e0
    5c20:	00004c95 	.word	0x00004c95
    5c24:	000044ad 	.word	0x000044ad
    5c28:	200000e6 	.word	0x200000e6
    5c2c:	000044cd 	.word	0x000044cd
    5c30:	0000448d 	.word	0x0000448d
    5c34:	00004b25 	.word	0x00004b25
    5c38:	000044f1 	.word	0x000044f1
    5c3c:	00004439 	.word	0x00004439
    5c40:	200000e8 	.word	0x200000e8
    5c44:	00004bfd 	.word	0x00004bfd
    5c48:	0000449d 	.word	0x0000449d
    5c4c:	00005129 	.word	0x00005129
    5c50:	000052c5 	.word	0x000052c5

00005c54 <xQueueGenericSend>:
    5c54:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c56:	46ce      	mov	lr, r9
    5c58:	4647      	mov	r7, r8
    5c5a:	b580      	push	{r7, lr}
    5c5c:	b085      	sub	sp, #20
    5c5e:	0004      	movs	r4, r0
    5c60:	9100      	str	r1, [sp, #0]
    5c62:	9201      	str	r2, [sp, #4]
    5c64:	001d      	movs	r5, r3
    5c66:	2800      	cmp	r0, #0
    5c68:	d00d      	beq.n	5c86 <xQueueGenericSend+0x32>
    5c6a:	9b00      	ldr	r3, [sp, #0]
    5c6c:	2b00      	cmp	r3, #0
    5c6e:	d00c      	beq.n	5c8a <xQueueGenericSend+0x36>
    5c70:	2d02      	cmp	r5, #2
    5c72:	d00f      	beq.n	5c94 <xQueueGenericSend+0x40>
    5c74:	4bab      	ldr	r3, [pc, #684]	; (5f24 <xQueueGenericSend+0x2d0>)
    5c76:	4798      	blx	r3
    5c78:	2800      	cmp	r0, #0
    5c7a:	d110      	bne.n	5c9e <xQueueGenericSend+0x4a>
    5c7c:	9b01      	ldr	r3, [sp, #4]
    5c7e:	2b00      	cmp	r3, #0
    5c80:	d010      	beq.n	5ca4 <xQueueGenericSend+0x50>
    5c82:	b672      	cpsid	i
    5c84:	e7fe      	b.n	5c84 <xQueueGenericSend+0x30>
    5c86:	b672      	cpsid	i
    5c88:	e7fe      	b.n	5c88 <xQueueGenericSend+0x34>
    5c8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5c8c:	2b00      	cmp	r3, #0
    5c8e:	d0ef      	beq.n	5c70 <xQueueGenericSend+0x1c>
    5c90:	b672      	cpsid	i
    5c92:	e7fe      	b.n	5c92 <xQueueGenericSend+0x3e>
    5c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5c96:	2b01      	cmp	r3, #1
    5c98:	d0ec      	beq.n	5c74 <xQueueGenericSend+0x20>
    5c9a:	b672      	cpsid	i
    5c9c:	e7fe      	b.n	5c9c <xQueueGenericSend+0x48>
    5c9e:	2700      	movs	r7, #0
    5ca0:	4ea1      	ldr	r6, [pc, #644]	; (5f28 <xQueueGenericSend+0x2d4>)
    5ca2:	e0bc      	b.n	5e1e <xQueueGenericSend+0x1ca>
    5ca4:	2700      	movs	r7, #0
    5ca6:	e7fb      	b.n	5ca0 <xQueueGenericSend+0x4c>
    5ca8:	4ba0      	ldr	r3, [pc, #640]	; (5f2c <xQueueGenericSend+0x2d8>)
    5caa:	4798      	blx	r3
    5cac:	4ba0      	ldr	r3, [pc, #640]	; (5f30 <xQueueGenericSend+0x2dc>)
    5cae:	4798      	blx	r3
    5cb0:	4ba0      	ldr	r3, [pc, #640]	; (5f34 <xQueueGenericSend+0x2e0>)
    5cb2:	881b      	ldrh	r3, [r3, #0]
    5cb4:	4203      	tst	r3, r0
    5cb6:	d01d      	beq.n	5cf4 <xQueueGenericSend+0xa0>
    5cb8:	0020      	movs	r0, r4
    5cba:	4b9f      	ldr	r3, [pc, #636]	; (5f38 <xQueueGenericSend+0x2e4>)
    5cbc:	4798      	blx	r3
    5cbe:	4b9d      	ldr	r3, [pc, #628]	; (5f34 <xQueueGenericSend+0x2e0>)
    5cc0:	881b      	ldrh	r3, [r3, #0]
    5cc2:	4203      	tst	r3, r0
    5cc4:	d016      	beq.n	5cf4 <xQueueGenericSend+0xa0>
    5cc6:	2725      	movs	r7, #37	; 0x25
    5cc8:	2d00      	cmp	r5, #0
    5cca:	d106      	bne.n	5cda <xQueueGenericSend+0x86>
    5ccc:	0020      	movs	r0, r4
    5cce:	4b9b      	ldr	r3, [pc, #620]	; (5f3c <xQueueGenericSend+0x2e8>)
    5cd0:	4798      	blx	r3
    5cd2:	4b9b      	ldr	r3, [pc, #620]	; (5f40 <xQueueGenericSend+0x2ec>)
    5cd4:	5c1f      	ldrb	r7, [r3, r0]
    5cd6:	3720      	adds	r7, #32
    5cd8:	b2ff      	uxtb	r7, r7
    5cda:	0020      	movs	r0, r4
    5cdc:	4b97      	ldr	r3, [pc, #604]	; (5f3c <xQueueGenericSend+0x2e8>)
    5cde:	4798      	blx	r3
    5ce0:	4b97      	ldr	r3, [pc, #604]	; (5f40 <xQueueGenericSend+0x2ec>)
    5ce2:	5c1e      	ldrb	r6, [r3, r0]
    5ce4:	0020      	movs	r0, r4
    5ce6:	4b97      	ldr	r3, [pc, #604]	; (5f44 <xQueueGenericSend+0x2f0>)
    5ce8:	4798      	blx	r3
    5cea:	b2c2      	uxtb	r2, r0
    5cec:	0031      	movs	r1, r6
    5cee:	0038      	movs	r0, r7
    5cf0:	4b95      	ldr	r3, [pc, #596]	; (5f48 <xQueueGenericSend+0x2f4>)
    5cf2:	4798      	blx	r3
    5cf4:	0020      	movs	r0, r4
    5cf6:	4e91      	ldr	r6, [pc, #580]	; (5f3c <xQueueGenericSend+0x2e8>)
    5cf8:	47b0      	blx	r6
    5cfa:	4f91      	ldr	r7, [pc, #580]	; (5f40 <xQueueGenericSend+0x2ec>)
    5cfc:	5c3b      	ldrb	r3, [r7, r0]
    5cfe:	4698      	mov	r8, r3
    5d00:	0020      	movs	r0, r4
    5d02:	4b90      	ldr	r3, [pc, #576]	; (5f44 <xQueueGenericSend+0x2f0>)
    5d04:	4798      	blx	r3
    5d06:	b2c3      	uxtb	r3, r0
    5d08:	4699      	mov	r9, r3
    5d0a:	0020      	movs	r0, r4
    5d0c:	47b0      	blx	r6
    5d0e:	5c3b      	ldrb	r3, [r7, r0]
    5d10:	2b02      	cmp	r3, #2
    5d12:	d01f      	beq.n	5d54 <xQueueGenericSend+0x100>
    5d14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5d16:	3201      	adds	r2, #1
    5d18:	b2d2      	uxtb	r2, r2
    5d1a:	4649      	mov	r1, r9
    5d1c:	4640      	mov	r0, r8
    5d1e:	4b8b      	ldr	r3, [pc, #556]	; (5f4c <xQueueGenericSend+0x2f8>)
    5d20:	4798      	blx	r3
    5d22:	002a      	movs	r2, r5
    5d24:	9900      	ldr	r1, [sp, #0]
    5d26:	0020      	movs	r0, r4
    5d28:	4b89      	ldr	r3, [pc, #548]	; (5f50 <xQueueGenericSend+0x2fc>)
    5d2a:	4798      	blx	r3
    5d2c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d012      	beq.n	5d58 <xQueueGenericSend+0x104>
    5d32:	0029      	movs	r1, r5
    5d34:	0020      	movs	r0, r4
    5d36:	4b87      	ldr	r3, [pc, #540]	; (5f54 <xQueueGenericSend+0x300>)
    5d38:	4798      	blx	r3
    5d3a:	2800      	cmp	r0, #0
    5d3c:	d001      	beq.n	5d42 <xQueueGenericSend+0xee>
    5d3e:	4b86      	ldr	r3, [pc, #536]	; (5f58 <xQueueGenericSend+0x304>)
    5d40:	4798      	blx	r3
    5d42:	4b86      	ldr	r3, [pc, #536]	; (5f5c <xQueueGenericSend+0x308>)
    5d44:	4798      	blx	r3
    5d46:	2301      	movs	r3, #1
    5d48:	0018      	movs	r0, r3
    5d4a:	b005      	add	sp, #20
    5d4c:	bc0c      	pop	{r2, r3}
    5d4e:	4690      	mov	r8, r2
    5d50:	4699      	mov	r9, r3
    5d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d54:	2200      	movs	r2, #0
    5d56:	e7e0      	b.n	5d1a <xQueueGenericSend+0xc6>
    5d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5d5a:	2b00      	cmp	r3, #0
    5d5c:	d008      	beq.n	5d70 <xQueueGenericSend+0x11c>
    5d5e:	0020      	movs	r0, r4
    5d60:	3024      	adds	r0, #36	; 0x24
    5d62:	4b7f      	ldr	r3, [pc, #508]	; (5f60 <xQueueGenericSend+0x30c>)
    5d64:	4798      	blx	r3
    5d66:	2800      	cmp	r0, #0
    5d68:	d0eb      	beq.n	5d42 <xQueueGenericSend+0xee>
    5d6a:	4b7b      	ldr	r3, [pc, #492]	; (5f58 <xQueueGenericSend+0x304>)
    5d6c:	4798      	blx	r3
    5d6e:	e7e8      	b.n	5d42 <xQueueGenericSend+0xee>
    5d70:	2800      	cmp	r0, #0
    5d72:	d0e6      	beq.n	5d42 <xQueueGenericSend+0xee>
    5d74:	4b78      	ldr	r3, [pc, #480]	; (5f58 <xQueueGenericSend+0x304>)
    5d76:	4798      	blx	r3
    5d78:	e7e3      	b.n	5d42 <xQueueGenericSend+0xee>
    5d7a:	4b78      	ldr	r3, [pc, #480]	; (5f5c <xQueueGenericSend+0x308>)
    5d7c:	4798      	blx	r3
    5d7e:	4b6b      	ldr	r3, [pc, #428]	; (5f2c <xQueueGenericSend+0x2d8>)
    5d80:	4798      	blx	r3
    5d82:	4b6b      	ldr	r3, [pc, #428]	; (5f30 <xQueueGenericSend+0x2dc>)
    5d84:	4798      	blx	r3
    5d86:	4b6b      	ldr	r3, [pc, #428]	; (5f34 <xQueueGenericSend+0x2e0>)
    5d88:	881a      	ldrh	r2, [r3, #0]
    5d8a:	2300      	movs	r3, #0
    5d8c:	4202      	tst	r2, r0
    5d8e:	d0db      	beq.n	5d48 <xQueueGenericSend+0xf4>
    5d90:	0020      	movs	r0, r4
    5d92:	4b69      	ldr	r3, [pc, #420]	; (5f38 <xQueueGenericSend+0x2e4>)
    5d94:	4798      	blx	r3
    5d96:	4b67      	ldr	r3, [pc, #412]	; (5f34 <xQueueGenericSend+0x2e0>)
    5d98:	881a      	ldrh	r2, [r3, #0]
    5d9a:	2300      	movs	r3, #0
    5d9c:	4202      	tst	r2, r0
    5d9e:	d0d3      	beq.n	5d48 <xQueueGenericSend+0xf4>
    5da0:	264d      	movs	r6, #77	; 0x4d
    5da2:	2d00      	cmp	r5, #0
    5da4:	d106      	bne.n	5db4 <xQueueGenericSend+0x160>
    5da6:	0020      	movs	r0, r4
    5da8:	4b64      	ldr	r3, [pc, #400]	; (5f3c <xQueueGenericSend+0x2e8>)
    5daa:	4798      	blx	r3
    5dac:	4b64      	ldr	r3, [pc, #400]	; (5f40 <xQueueGenericSend+0x2ec>)
    5dae:	5c1e      	ldrb	r6, [r3, r0]
    5db0:	3648      	adds	r6, #72	; 0x48
    5db2:	b2f6      	uxtb	r6, r6
    5db4:	0020      	movs	r0, r4
    5db6:	4b61      	ldr	r3, [pc, #388]	; (5f3c <xQueueGenericSend+0x2e8>)
    5db8:	4798      	blx	r3
    5dba:	4b61      	ldr	r3, [pc, #388]	; (5f40 <xQueueGenericSend+0x2ec>)
    5dbc:	5c1d      	ldrb	r5, [r3, r0]
    5dbe:	0020      	movs	r0, r4
    5dc0:	4b60      	ldr	r3, [pc, #384]	; (5f44 <xQueueGenericSend+0x2f0>)
    5dc2:	4798      	blx	r3
    5dc4:	b2c2      	uxtb	r2, r0
    5dc6:	0029      	movs	r1, r5
    5dc8:	0030      	movs	r0, r6
    5dca:	4b5f      	ldr	r3, [pc, #380]	; (5f48 <xQueueGenericSend+0x2f4>)
    5dcc:	4798      	blx	r3
    5dce:	2300      	movs	r3, #0
    5dd0:	e7ba      	b.n	5d48 <xQueueGenericSend+0xf4>
    5dd2:	4b62      	ldr	r3, [pc, #392]	; (5f5c <xQueueGenericSend+0x308>)
    5dd4:	4798      	blx	r3
    5dd6:	a901      	add	r1, sp, #4
    5dd8:	a802      	add	r0, sp, #8
    5dda:	4b62      	ldr	r3, [pc, #392]	; (5f64 <xQueueGenericSend+0x310>)
    5ddc:	4798      	blx	r3
    5dde:	2800      	cmp	r0, #0
    5de0:	d16e      	bne.n	5ec0 <xQueueGenericSend+0x26c>
    5de2:	4b51      	ldr	r3, [pc, #324]	; (5f28 <xQueueGenericSend+0x2d4>)
    5de4:	4798      	blx	r3
    5de6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5de8:	4699      	mov	r9, r3
    5dea:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    5dec:	4b5b      	ldr	r3, [pc, #364]	; (5f5c <xQueueGenericSend+0x308>)
    5dee:	4798      	blx	r3
    5df0:	45b9      	cmp	r9, r7
    5df2:	d15f      	bne.n	5eb4 <xQueueGenericSend+0x260>
    5df4:	4b4d      	ldr	r3, [pc, #308]	; (5f2c <xQueueGenericSend+0x2d8>)
    5df6:	4798      	blx	r3
    5df8:	4b4d      	ldr	r3, [pc, #308]	; (5f30 <xQueueGenericSend+0x2dc>)
    5dfa:	4798      	blx	r3
    5dfc:	4b4d      	ldr	r3, [pc, #308]	; (5f34 <xQueueGenericSend+0x2e0>)
    5dfe:	881b      	ldrh	r3, [r3, #0]
    5e00:	4203      	tst	r3, r0
    5e02:	d134      	bne.n	5e6e <xQueueGenericSend+0x21a>
    5e04:	0020      	movs	r0, r4
    5e06:	3010      	adds	r0, #16
    5e08:	9901      	ldr	r1, [sp, #4]
    5e0a:	4b57      	ldr	r3, [pc, #348]	; (5f68 <xQueueGenericSend+0x314>)
    5e0c:	4798      	blx	r3
    5e0e:	0020      	movs	r0, r4
    5e10:	4b56      	ldr	r3, [pc, #344]	; (5f6c <xQueueGenericSend+0x318>)
    5e12:	4798      	blx	r3
    5e14:	4b56      	ldr	r3, [pc, #344]	; (5f70 <xQueueGenericSend+0x31c>)
    5e16:	4798      	blx	r3
    5e18:	2800      	cmp	r0, #0
    5e1a:	d048      	beq.n	5eae <xQueueGenericSend+0x25a>
    5e1c:	2701      	movs	r7, #1
    5e1e:	47b0      	blx	r6
    5e20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5e22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5e24:	4293      	cmp	r3, r2
    5e26:	d200      	bcs.n	5e2a <xQueueGenericSend+0x1d6>
    5e28:	e73e      	b.n	5ca8 <xQueueGenericSend+0x54>
    5e2a:	2d02      	cmp	r5, #2
    5e2c:	d100      	bne.n	5e30 <xQueueGenericSend+0x1dc>
    5e2e:	e73b      	b.n	5ca8 <xQueueGenericSend+0x54>
    5e30:	9b01      	ldr	r3, [sp, #4]
    5e32:	2b00      	cmp	r3, #0
    5e34:	d0a1      	beq.n	5d7a <xQueueGenericSend+0x126>
    5e36:	2f00      	cmp	r7, #0
    5e38:	d102      	bne.n	5e40 <xQueueGenericSend+0x1ec>
    5e3a:	a802      	add	r0, sp, #8
    5e3c:	4b4d      	ldr	r3, [pc, #308]	; (5f74 <xQueueGenericSend+0x320>)
    5e3e:	4798      	blx	r3
    5e40:	4b46      	ldr	r3, [pc, #280]	; (5f5c <xQueueGenericSend+0x308>)
    5e42:	4798      	blx	r3
    5e44:	4b4c      	ldr	r3, [pc, #304]	; (5f78 <xQueueGenericSend+0x324>)
    5e46:	4798      	blx	r3
    5e48:	4b37      	ldr	r3, [pc, #220]	; (5f28 <xQueueGenericSend+0x2d4>)
    5e4a:	4798      	blx	r3
    5e4c:	2344      	movs	r3, #68	; 0x44
    5e4e:	5ce3      	ldrb	r3, [r4, r3]
    5e50:	b25b      	sxtb	r3, r3
    5e52:	3301      	adds	r3, #1
    5e54:	d102      	bne.n	5e5c <xQueueGenericSend+0x208>
    5e56:	2200      	movs	r2, #0
    5e58:	2344      	movs	r3, #68	; 0x44
    5e5a:	54e2      	strb	r2, [r4, r3]
    5e5c:	2345      	movs	r3, #69	; 0x45
    5e5e:	5ce3      	ldrb	r3, [r4, r3]
    5e60:	b25b      	sxtb	r3, r3
    5e62:	3301      	adds	r3, #1
    5e64:	d1b5      	bne.n	5dd2 <xQueueGenericSend+0x17e>
    5e66:	2200      	movs	r2, #0
    5e68:	2345      	movs	r3, #69	; 0x45
    5e6a:	54e2      	strb	r2, [r4, r3]
    5e6c:	e7b1      	b.n	5dd2 <xQueueGenericSend+0x17e>
    5e6e:	0020      	movs	r0, r4
    5e70:	4b31      	ldr	r3, [pc, #196]	; (5f38 <xQueueGenericSend+0x2e4>)
    5e72:	4798      	blx	r3
    5e74:	4b2f      	ldr	r3, [pc, #188]	; (5f34 <xQueueGenericSend+0x2e0>)
    5e76:	881b      	ldrh	r3, [r3, #0]
    5e78:	4203      	tst	r3, r0
    5e7a:	d0c3      	beq.n	5e04 <xQueueGenericSend+0x1b0>
    5e7c:	2775      	movs	r7, #117	; 0x75
    5e7e:	2d00      	cmp	r5, #0
    5e80:	d106      	bne.n	5e90 <xQueueGenericSend+0x23c>
    5e82:	0020      	movs	r0, r4
    5e84:	4b2d      	ldr	r3, [pc, #180]	; (5f3c <xQueueGenericSend+0x2e8>)
    5e86:	4798      	blx	r3
    5e88:	4b2d      	ldr	r3, [pc, #180]	; (5f40 <xQueueGenericSend+0x2ec>)
    5e8a:	5c1f      	ldrb	r7, [r3, r0]
    5e8c:	3770      	adds	r7, #112	; 0x70
    5e8e:	b2ff      	uxtb	r7, r7
    5e90:	0020      	movs	r0, r4
    5e92:	4b2a      	ldr	r3, [pc, #168]	; (5f3c <xQueueGenericSend+0x2e8>)
    5e94:	4798      	blx	r3
    5e96:	4b2a      	ldr	r3, [pc, #168]	; (5f40 <xQueueGenericSend+0x2ec>)
    5e98:	5c1b      	ldrb	r3, [r3, r0]
    5e9a:	4699      	mov	r9, r3
    5e9c:	0020      	movs	r0, r4
    5e9e:	4b29      	ldr	r3, [pc, #164]	; (5f44 <xQueueGenericSend+0x2f0>)
    5ea0:	4798      	blx	r3
    5ea2:	b2c2      	uxtb	r2, r0
    5ea4:	4649      	mov	r1, r9
    5ea6:	0038      	movs	r0, r7
    5ea8:	4b27      	ldr	r3, [pc, #156]	; (5f48 <xQueueGenericSend+0x2f4>)
    5eaa:	4798      	blx	r3
    5eac:	e7aa      	b.n	5e04 <xQueueGenericSend+0x1b0>
    5eae:	4b2a      	ldr	r3, [pc, #168]	; (5f58 <xQueueGenericSend+0x304>)
    5eb0:	4798      	blx	r3
    5eb2:	e7b3      	b.n	5e1c <xQueueGenericSend+0x1c8>
    5eb4:	0020      	movs	r0, r4
    5eb6:	4b2d      	ldr	r3, [pc, #180]	; (5f6c <xQueueGenericSend+0x318>)
    5eb8:	4798      	blx	r3
    5eba:	4b2d      	ldr	r3, [pc, #180]	; (5f70 <xQueueGenericSend+0x31c>)
    5ebc:	4798      	blx	r3
    5ebe:	e7ad      	b.n	5e1c <xQueueGenericSend+0x1c8>
    5ec0:	0020      	movs	r0, r4
    5ec2:	4b2a      	ldr	r3, [pc, #168]	; (5f6c <xQueueGenericSend+0x318>)
    5ec4:	4798      	blx	r3
    5ec6:	4b2a      	ldr	r3, [pc, #168]	; (5f70 <xQueueGenericSend+0x31c>)
    5ec8:	4798      	blx	r3
    5eca:	4b18      	ldr	r3, [pc, #96]	; (5f2c <xQueueGenericSend+0x2d8>)
    5ecc:	4798      	blx	r3
    5ece:	4b18      	ldr	r3, [pc, #96]	; (5f30 <xQueueGenericSend+0x2dc>)
    5ed0:	4798      	blx	r3
    5ed2:	4b18      	ldr	r3, [pc, #96]	; (5f34 <xQueueGenericSend+0x2e0>)
    5ed4:	881a      	ldrh	r2, [r3, #0]
    5ed6:	2300      	movs	r3, #0
    5ed8:	4202      	tst	r2, r0
    5eda:	d100      	bne.n	5ede <xQueueGenericSend+0x28a>
    5edc:	e734      	b.n	5d48 <xQueueGenericSend+0xf4>
    5ede:	0020      	movs	r0, r4
    5ee0:	4b15      	ldr	r3, [pc, #84]	; (5f38 <xQueueGenericSend+0x2e4>)
    5ee2:	4798      	blx	r3
    5ee4:	4b13      	ldr	r3, [pc, #76]	; (5f34 <xQueueGenericSend+0x2e0>)
    5ee6:	881a      	ldrh	r2, [r3, #0]
    5ee8:	2300      	movs	r3, #0
    5eea:	4202      	tst	r2, r0
    5eec:	d100      	bne.n	5ef0 <xQueueGenericSend+0x29c>
    5eee:	e72b      	b.n	5d48 <xQueueGenericSend+0xf4>
    5ef0:	264d      	movs	r6, #77	; 0x4d
    5ef2:	2d00      	cmp	r5, #0
    5ef4:	d106      	bne.n	5f04 <xQueueGenericSend+0x2b0>
    5ef6:	0020      	movs	r0, r4
    5ef8:	4b10      	ldr	r3, [pc, #64]	; (5f3c <xQueueGenericSend+0x2e8>)
    5efa:	4798      	blx	r3
    5efc:	4b10      	ldr	r3, [pc, #64]	; (5f40 <xQueueGenericSend+0x2ec>)
    5efe:	5c1e      	ldrb	r6, [r3, r0]
    5f00:	3648      	adds	r6, #72	; 0x48
    5f02:	b2f6      	uxtb	r6, r6
    5f04:	0020      	movs	r0, r4
    5f06:	4b0d      	ldr	r3, [pc, #52]	; (5f3c <xQueueGenericSend+0x2e8>)
    5f08:	4798      	blx	r3
    5f0a:	4b0d      	ldr	r3, [pc, #52]	; (5f40 <xQueueGenericSend+0x2ec>)
    5f0c:	5c1d      	ldrb	r5, [r3, r0]
    5f0e:	0020      	movs	r0, r4
    5f10:	4b0c      	ldr	r3, [pc, #48]	; (5f44 <xQueueGenericSend+0x2f0>)
    5f12:	4798      	blx	r3
    5f14:	b2c2      	uxtb	r2, r0
    5f16:	0029      	movs	r1, r5
    5f18:	0030      	movs	r0, r6
    5f1a:	4b0b      	ldr	r3, [pc, #44]	; (5f48 <xQueueGenericSend+0x2f4>)
    5f1c:	4798      	blx	r3
    5f1e:	2300      	movs	r3, #0
    5f20:	e712      	b.n	5d48 <xQueueGenericSend+0xf4>
    5f22:	46c0      	nop			; (mov r8, r8)
    5f24:	000075c5 	.word	0x000075c5
    5f28:	000056a1 	.word	0x000056a1
    5f2c:	000044f1 	.word	0x000044f1
    5f30:	00004439 	.word	0x00004439
    5f34:	200000e8 	.word	0x200000e8
    5f38:	0000449d 	.word	0x0000449d
    5f3c:	0000441d 	.word	0x0000441d
    5f40:	200000e0 	.word	0x200000e0
    5f44:	0000448d 	.word	0x0000448d
    5f48:	00005129 	.word	0x00005129
    5f4c:	00004bfd 	.word	0x00004bfd
    5f50:	0000582d 	.word	0x0000582d
    5f54:	000058a9 	.word	0x000058a9
    5f58:	00005691 	.word	0x00005691
    5f5c:	000056b9 	.word	0x000056b9
    5f60:	0000745d 	.word	0x0000745d
    5f64:	00007529 	.word	0x00007529
    5f68:	00007395 	.word	0x00007395
    5f6c:	000059ed 	.word	0x000059ed
    5f70:	00006fad 	.word	0x00006fad
    5f74:	00007511 	.word	0x00007511
    5f78:	00006e05 	.word	0x00006e05

00005f7c <xQueueCreateMutex>:
    5f7c:	b570      	push	{r4, r5, r6, lr}
    5f7e:	0002      	movs	r2, r0
    5f80:	2100      	movs	r1, #0
    5f82:	2001      	movs	r0, #1
    5f84:	4b06      	ldr	r3, [pc, #24]	; (5fa0 <xQueueCreateMutex+0x24>)
    5f86:	4798      	blx	r3
    5f88:	1e04      	subs	r4, r0, #0
    5f8a:	d007      	beq.n	5f9c <xQueueCreateMutex+0x20>
    5f8c:	2300      	movs	r3, #0
    5f8e:	6043      	str	r3, [r0, #4]
    5f90:	6003      	str	r3, [r0, #0]
    5f92:	60c3      	str	r3, [r0, #12]
    5f94:	2200      	movs	r2, #0
    5f96:	2100      	movs	r1, #0
    5f98:	4d02      	ldr	r5, [pc, #8]	; (5fa4 <xQueueCreateMutex+0x28>)
    5f9a:	47a8      	blx	r5
    5f9c:	0020      	movs	r0, r4
    5f9e:	bd70      	pop	{r4, r5, r6, pc}
    5fa0:	00005b19 	.word	0x00005b19
    5fa4:	00005c55 	.word	0x00005c55

00005fa8 <xQueueGenericSendFromISR>:
    5fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5faa:	46de      	mov	lr, fp
    5fac:	4647      	mov	r7, r8
    5fae:	b580      	push	{r7, lr}
    5fb0:	b083      	sub	sp, #12
    5fb2:	0004      	movs	r4, r0
    5fb4:	9101      	str	r1, [sp, #4]
    5fb6:	0016      	movs	r6, r2
    5fb8:	001f      	movs	r7, r3
    5fba:	2800      	cmp	r0, #0
    5fbc:	d02d      	beq.n	601a <xQueueGenericSendFromISR+0x72>
    5fbe:	9b01      	ldr	r3, [sp, #4]
    5fc0:	2b00      	cmp	r3, #0
    5fc2:	d02c      	beq.n	601e <xQueueGenericSendFromISR+0x76>
    5fc4:	2f02      	cmp	r7, #2
    5fc6:	d02f      	beq.n	6028 <xQueueGenericSendFromISR+0x80>
    5fc8:	4b59      	ldr	r3, [pc, #356]	; (6130 <xQueueGenericSendFromISR+0x188>)
    5fca:	4798      	blx	r3
    5fcc:	9000      	str	r0, [sp, #0]
    5fce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5fd0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    5fd2:	429a      	cmp	r2, r3
    5fd4:	d85a      	bhi.n	608c <xQueueGenericSendFromISR+0xe4>
    5fd6:	0020      	movs	r0, r4
    5fd8:	4b56      	ldr	r3, [pc, #344]	; (6134 <xQueueGenericSendFromISR+0x18c>)
    5fda:	4798      	blx	r3
    5fdc:	4b56      	ldr	r3, [pc, #344]	; (6138 <xQueueGenericSendFromISR+0x190>)
    5fde:	881b      	ldrh	r3, [r3, #0]
    5fe0:	2500      	movs	r5, #0
    5fe2:	4203      	tst	r3, r0
    5fe4:	d100      	bne.n	5fe8 <xQueueGenericSendFromISR+0x40>
    5fe6:	e09a      	b.n	611e <xQueueGenericSendFromISR+0x176>
    5fe8:	355d      	adds	r5, #93	; 0x5d
    5fea:	2f00      	cmp	r7, #0
    5fec:	d106      	bne.n	5ffc <xQueueGenericSendFromISR+0x54>
    5fee:	0020      	movs	r0, r4
    5ff0:	4b52      	ldr	r3, [pc, #328]	; (613c <xQueueGenericSendFromISR+0x194>)
    5ff2:	4798      	blx	r3
    5ff4:	4b52      	ldr	r3, [pc, #328]	; (6140 <xQueueGenericSendFromISR+0x198>)
    5ff6:	5c1d      	ldrb	r5, [r3, r0]
    5ff8:	3558      	adds	r5, #88	; 0x58
    5ffa:	b2ed      	uxtb	r5, r5
    5ffc:	0020      	movs	r0, r4
    5ffe:	4b4f      	ldr	r3, [pc, #316]	; (613c <xQueueGenericSendFromISR+0x194>)
    6000:	4798      	blx	r3
    6002:	4b4f      	ldr	r3, [pc, #316]	; (6140 <xQueueGenericSendFromISR+0x198>)
    6004:	5c1f      	ldrb	r7, [r3, r0]
    6006:	0020      	movs	r0, r4
    6008:	4b4e      	ldr	r3, [pc, #312]	; (6144 <xQueueGenericSendFromISR+0x19c>)
    600a:	4798      	blx	r3
    600c:	b2c2      	uxtb	r2, r0
    600e:	0039      	movs	r1, r7
    6010:	0028      	movs	r0, r5
    6012:	4b4d      	ldr	r3, [pc, #308]	; (6148 <xQueueGenericSendFromISR+0x1a0>)
    6014:	4798      	blx	r3
    6016:	2500      	movs	r5, #0
    6018:	e081      	b.n	611e <xQueueGenericSendFromISR+0x176>
    601a:	b672      	cpsid	i
    601c:	e7fe      	b.n	601c <xQueueGenericSendFromISR+0x74>
    601e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6020:	2b00      	cmp	r3, #0
    6022:	d0cf      	beq.n	5fc4 <xQueueGenericSendFromISR+0x1c>
    6024:	b672      	cpsid	i
    6026:	e7fe      	b.n	6026 <xQueueGenericSendFromISR+0x7e>
    6028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    602a:	2b01      	cmp	r3, #1
    602c:	d027      	beq.n	607e <xQueueGenericSendFromISR+0xd6>
    602e:	b672      	cpsid	i
    6030:	e7fe      	b.n	6030 <xQueueGenericSendFromISR+0x88>
    6032:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6034:	2501      	movs	r5, #1
    6036:	2b00      	cmp	r3, #0
    6038:	d071      	beq.n	611e <xQueueGenericSendFromISR+0x176>
    603a:	0020      	movs	r0, r4
    603c:	3024      	adds	r0, #36	; 0x24
    603e:	4b43      	ldr	r3, [pc, #268]	; (614c <xQueueGenericSendFromISR+0x1a4>)
    6040:	4798      	blx	r3
    6042:	2800      	cmp	r0, #0
    6044:	d06b      	beq.n	611e <xQueueGenericSendFromISR+0x176>
    6046:	2e00      	cmp	r6, #0
    6048:	d00a      	beq.n	6060 <xQueueGenericSendFromISR+0xb8>
    604a:	2301      	movs	r3, #1
    604c:	6033      	str	r3, [r6, #0]
    604e:	e066      	b.n	611e <xQueueGenericSendFromISR+0x176>
    6050:	3501      	adds	r5, #1
    6052:	b26d      	sxtb	r5, r5
    6054:	2345      	movs	r3, #69	; 0x45
    6056:	54e5      	strb	r5, [r4, r3]
    6058:	2501      	movs	r5, #1
    605a:	e060      	b.n	611e <xQueueGenericSendFromISR+0x176>
    605c:	2501      	movs	r5, #1
    605e:	e05e      	b.n	611e <xQueueGenericSendFromISR+0x176>
    6060:	2501      	movs	r5, #1
    6062:	e05c      	b.n	611e <xQueueGenericSendFromISR+0x176>
    6064:	2345      	movs	r3, #69	; 0x45
    6066:	5ce5      	ldrb	r5, [r4, r3]
    6068:	b26d      	sxtb	r5, r5
    606a:	0020      	movs	r0, r4
    606c:	4b31      	ldr	r3, [pc, #196]	; (6134 <xQueueGenericSendFromISR+0x18c>)
    606e:	4798      	blx	r3
    6070:	4b31      	ldr	r3, [pc, #196]	; (6138 <xQueueGenericSendFromISR+0x190>)
    6072:	881b      	ldrh	r3, [r3, #0]
    6074:	4203      	tst	r3, r0
    6076:	d02d      	beq.n	60d4 <xQueueGenericSendFromISR+0x12c>
    6078:	2335      	movs	r3, #53	; 0x35
    607a:	4698      	mov	r8, r3
    607c:	e01c      	b.n	60b8 <xQueueGenericSendFromISR+0x110>
    607e:	4b2c      	ldr	r3, [pc, #176]	; (6130 <xQueueGenericSendFromISR+0x188>)
    6080:	4798      	blx	r3
    6082:	9000      	str	r0, [sp, #0]
    6084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6086:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    6088:	429a      	cmp	r2, r3
    608a:	d9eb      	bls.n	6064 <xQueueGenericSendFromISR+0xbc>
    608c:	2345      	movs	r3, #69	; 0x45
    608e:	5ce5      	ldrb	r5, [r4, r3]
    6090:	b26d      	sxtb	r5, r5
    6092:	0020      	movs	r0, r4
    6094:	4b27      	ldr	r3, [pc, #156]	; (6134 <xQueueGenericSendFromISR+0x18c>)
    6096:	4798      	blx	r3
    6098:	4b27      	ldr	r3, [pc, #156]	; (6138 <xQueueGenericSendFromISR+0x190>)
    609a:	881b      	ldrh	r3, [r3, #0]
    609c:	4203      	tst	r3, r0
    609e:	d019      	beq.n	60d4 <xQueueGenericSendFromISR+0x12c>
    60a0:	2335      	movs	r3, #53	; 0x35
    60a2:	4698      	mov	r8, r3
    60a4:	2f00      	cmp	r7, #0
    60a6:	d107      	bne.n	60b8 <xQueueGenericSendFromISR+0x110>
    60a8:	0020      	movs	r0, r4
    60aa:	4b24      	ldr	r3, [pc, #144]	; (613c <xQueueGenericSendFromISR+0x194>)
    60ac:	4798      	blx	r3
    60ae:	4b24      	ldr	r3, [pc, #144]	; (6140 <xQueueGenericSendFromISR+0x198>)
    60b0:	5c1b      	ldrb	r3, [r3, r0]
    60b2:	3330      	adds	r3, #48	; 0x30
    60b4:	b2db      	uxtb	r3, r3
    60b6:	4698      	mov	r8, r3
    60b8:	0020      	movs	r0, r4
    60ba:	4b20      	ldr	r3, [pc, #128]	; (613c <xQueueGenericSendFromISR+0x194>)
    60bc:	4798      	blx	r3
    60be:	4b20      	ldr	r3, [pc, #128]	; (6140 <xQueueGenericSendFromISR+0x198>)
    60c0:	5c1b      	ldrb	r3, [r3, r0]
    60c2:	469b      	mov	fp, r3
    60c4:	0020      	movs	r0, r4
    60c6:	4b1f      	ldr	r3, [pc, #124]	; (6144 <xQueueGenericSendFromISR+0x19c>)
    60c8:	4798      	blx	r3
    60ca:	b2c2      	uxtb	r2, r0
    60cc:	4659      	mov	r1, fp
    60ce:	4640      	mov	r0, r8
    60d0:	4b1d      	ldr	r3, [pc, #116]	; (6148 <xQueueGenericSendFromISR+0x1a0>)
    60d2:	4798      	blx	r3
    60d4:	0020      	movs	r0, r4
    60d6:	4b19      	ldr	r3, [pc, #100]	; (613c <xQueueGenericSendFromISR+0x194>)
    60d8:	4798      	blx	r3
    60da:	4b19      	ldr	r3, [pc, #100]	; (6140 <xQueueGenericSendFromISR+0x198>)
    60dc:	5c1b      	ldrb	r3, [r3, r0]
    60de:	4698      	mov	r8, r3
    60e0:	0020      	movs	r0, r4
    60e2:	4b18      	ldr	r3, [pc, #96]	; (6144 <xQueueGenericSendFromISR+0x19c>)
    60e4:	4798      	blx	r3
    60e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    60e8:	3201      	adds	r2, #1
    60ea:	b2d2      	uxtb	r2, r2
    60ec:	b2c1      	uxtb	r1, r0
    60ee:	4640      	mov	r0, r8
    60f0:	4b17      	ldr	r3, [pc, #92]	; (6150 <xQueueGenericSendFromISR+0x1a8>)
    60f2:	4798      	blx	r3
    60f4:	003a      	movs	r2, r7
    60f6:	9901      	ldr	r1, [sp, #4]
    60f8:	0020      	movs	r0, r4
    60fa:	4b16      	ldr	r3, [pc, #88]	; (6154 <xQueueGenericSendFromISR+0x1ac>)
    60fc:	4798      	blx	r3
    60fe:	1c6b      	adds	r3, r5, #1
    6100:	d1a6      	bne.n	6050 <xQueueGenericSendFromISR+0xa8>
    6102:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6104:	2b00      	cmp	r3, #0
    6106:	d094      	beq.n	6032 <xQueueGenericSendFromISR+0x8a>
    6108:	0039      	movs	r1, r7
    610a:	0020      	movs	r0, r4
    610c:	4b12      	ldr	r3, [pc, #72]	; (6158 <xQueueGenericSendFromISR+0x1b0>)
    610e:	4798      	blx	r3
    6110:	3502      	adds	r5, #2
    6112:	2800      	cmp	r0, #0
    6114:	d003      	beq.n	611e <xQueueGenericSendFromISR+0x176>
    6116:	2e00      	cmp	r6, #0
    6118:	d0a0      	beq.n	605c <xQueueGenericSendFromISR+0xb4>
    611a:	2301      	movs	r3, #1
    611c:	6033      	str	r3, [r6, #0]
    611e:	9800      	ldr	r0, [sp, #0]
    6120:	4b0e      	ldr	r3, [pc, #56]	; (615c <xQueueGenericSendFromISR+0x1b4>)
    6122:	4798      	blx	r3
    6124:	0028      	movs	r0, r5
    6126:	b003      	add	sp, #12
    6128:	bc0c      	pop	{r2, r3}
    612a:	4690      	mov	r8, r2
    612c:	469b      	mov	fp, r3
    612e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6130:	000056d9 	.word	0x000056d9
    6134:	0000449d 	.word	0x0000449d
    6138:	200000e8 	.word	0x200000e8
    613c:	0000441d 	.word	0x0000441d
    6140:	200000e0 	.word	0x200000e0
    6144:	0000448d 	.word	0x0000448d
    6148:	00005129 	.word	0x00005129
    614c:	0000745d 	.word	0x0000745d
    6150:	00004bfd 	.word	0x00004bfd
    6154:	0000582d 	.word	0x0000582d
    6158:	000058a9 	.word	0x000058a9
    615c:	000056e1 	.word	0x000056e1

00006160 <MyWrapper>:
    6160:	b5f0      	push	{r4, r5, r6, r7, lr}
    6162:	46d6      	mov	lr, sl
    6164:	4647      	mov	r7, r8
    6166:	b580      	push	{r7, lr}
    6168:	b083      	sub	sp, #12
    616a:	0004      	movs	r4, r0
    616c:	000f      	movs	r7, r1
    616e:	0016      	movs	r6, r2
    6170:	2800      	cmp	r0, #0
    6172:	d004      	beq.n	617e <MyWrapper+0x1e>
    6174:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6176:	2b00      	cmp	r3, #0
    6178:	d003      	beq.n	6182 <MyWrapper+0x22>
    617a:	b672      	cpsid	i
    617c:	e7fe      	b.n	617c <MyWrapper+0x1c>
    617e:	b672      	cpsid	i
    6180:	e7fe      	b.n	6180 <MyWrapper+0x20>
    6182:	6803      	ldr	r3, [r0, #0]
    6184:	2b00      	cmp	r3, #0
    6186:	d055      	beq.n	6234 <MyWrapper+0xd4>
    6188:	4b4a      	ldr	r3, [pc, #296]	; (62b4 <MyWrapper+0x154>)
    618a:	4798      	blx	r3
    618c:	9001      	str	r0, [sp, #4]
    618e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6190:	4698      	mov	r8, r3
    6192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6194:	4598      	cmp	r8, r3
    6196:	d267      	bcs.n	6268 <MyWrapper+0x108>
    6198:	2345      	movs	r3, #69	; 0x45
    619a:	5ce5      	ldrb	r5, [r4, r3]
    619c:	b26d      	sxtb	r5, r5
    619e:	0020      	movs	r0, r4
    61a0:	4b45      	ldr	r3, [pc, #276]	; (62b8 <MyWrapper+0x158>)
    61a2:	4798      	blx	r3
    61a4:	4b45      	ldr	r3, [pc, #276]	; (62bc <MyWrapper+0x15c>)
    61a6:	881b      	ldrh	r3, [r3, #0]
    61a8:	4203      	tst	r3, r0
    61aa:	d018      	beq.n	61de <MyWrapper+0x7e>
    61ac:	2335      	movs	r3, #53	; 0x35
    61ae:	469a      	mov	sl, r3
    61b0:	2e00      	cmp	r6, #0
    61b2:	d107      	bne.n	61c4 <MyWrapper+0x64>
    61b4:	0020      	movs	r0, r4
    61b6:	4b42      	ldr	r3, [pc, #264]	; (62c0 <MyWrapper+0x160>)
    61b8:	4798      	blx	r3
    61ba:	4b42      	ldr	r3, [pc, #264]	; (62c4 <MyWrapper+0x164>)
    61bc:	5c1b      	ldrb	r3, [r3, r0]
    61be:	3330      	adds	r3, #48	; 0x30
    61c0:	b2db      	uxtb	r3, r3
    61c2:	469a      	mov	sl, r3
    61c4:	0020      	movs	r0, r4
    61c6:	4b3e      	ldr	r3, [pc, #248]	; (62c0 <MyWrapper+0x160>)
    61c8:	4798      	blx	r3
    61ca:	4b3e      	ldr	r3, [pc, #248]	; (62c4 <MyWrapper+0x164>)
    61cc:	5c1e      	ldrb	r6, [r3, r0]
    61ce:	0020      	movs	r0, r4
    61d0:	4b3d      	ldr	r3, [pc, #244]	; (62c8 <MyWrapper+0x168>)
    61d2:	4798      	blx	r3
    61d4:	b2c2      	uxtb	r2, r0
    61d6:	0031      	movs	r1, r6
    61d8:	4650      	mov	r0, sl
    61da:	4b3c      	ldr	r3, [pc, #240]	; (62cc <MyWrapper+0x16c>)
    61dc:	4798      	blx	r3
    61de:	0020      	movs	r0, r4
    61e0:	4b37      	ldr	r3, [pc, #220]	; (62c0 <MyWrapper+0x160>)
    61e2:	4798      	blx	r3
    61e4:	4b37      	ldr	r3, [pc, #220]	; (62c4 <MyWrapper+0x164>)
    61e6:	5c1e      	ldrb	r6, [r3, r0]
    61e8:	0020      	movs	r0, r4
    61ea:	4b37      	ldr	r3, [pc, #220]	; (62c8 <MyWrapper+0x168>)
    61ec:	4798      	blx	r3
    61ee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    61f0:	3201      	adds	r2, #1
    61f2:	b2d2      	uxtb	r2, r2
    61f4:	b2c1      	uxtb	r1, r0
    61f6:	0030      	movs	r0, r6
    61f8:	4b35      	ldr	r3, [pc, #212]	; (62d0 <MyWrapper+0x170>)
    61fa:	4798      	blx	r3
    61fc:	4643      	mov	r3, r8
    61fe:	3301      	adds	r3, #1
    6200:	63a3      	str	r3, [r4, #56]	; 0x38
    6202:	1c6b      	adds	r3, r5, #1
    6204:	d12a      	bne.n	625c <MyWrapper+0xfc>
    6206:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    6208:	2b00      	cmp	r3, #0
    620a:	d018      	beq.n	623e <MyWrapper+0xde>
    620c:	2100      	movs	r1, #0
    620e:	0020      	movs	r0, r4
    6210:	4b30      	ldr	r3, [pc, #192]	; (62d4 <MyWrapper+0x174>)
    6212:	4798      	blx	r3
    6214:	3502      	adds	r5, #2
    6216:	2800      	cmp	r0, #0
    6218:	d003      	beq.n	6222 <MyWrapper+0xc2>
    621a:	2f00      	cmp	r7, #0
    621c:	d045      	beq.n	62aa <MyWrapper+0x14a>
    621e:	2301      	movs	r3, #1
    6220:	603b      	str	r3, [r7, #0]
    6222:	9801      	ldr	r0, [sp, #4]
    6224:	4b2c      	ldr	r3, [pc, #176]	; (62d8 <MyWrapper+0x178>)
    6226:	4798      	blx	r3
    6228:	0028      	movs	r0, r5
    622a:	b003      	add	sp, #12
    622c:	bc0c      	pop	{r2, r3}
    622e:	4690      	mov	r8, r2
    6230:	469a      	mov	sl, r3
    6232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6234:	6843      	ldr	r3, [r0, #4]
    6236:	2b00      	cmp	r3, #0
    6238:	d0a6      	beq.n	6188 <MyWrapper+0x28>
    623a:	b672      	cpsid	i
    623c:	e7fe      	b.n	623c <MyWrapper+0xdc>
    623e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6240:	2501      	movs	r5, #1
    6242:	2b00      	cmp	r3, #0
    6244:	d0ed      	beq.n	6222 <MyWrapper+0xc2>
    6246:	0020      	movs	r0, r4
    6248:	3024      	adds	r0, #36	; 0x24
    624a:	4b24      	ldr	r3, [pc, #144]	; (62dc <MyWrapper+0x17c>)
    624c:	4798      	blx	r3
    624e:	2800      	cmp	r0, #0
    6250:	d0e7      	beq.n	6222 <MyWrapper+0xc2>
    6252:	2f00      	cmp	r7, #0
    6254:	d02b      	beq.n	62ae <MyWrapper+0x14e>
    6256:	2301      	movs	r3, #1
    6258:	603b      	str	r3, [r7, #0]
    625a:	e7e2      	b.n	6222 <MyWrapper+0xc2>
    625c:	3501      	adds	r5, #1
    625e:	b26d      	sxtb	r5, r5
    6260:	2345      	movs	r3, #69	; 0x45
    6262:	54e5      	strb	r5, [r4, r3]
    6264:	2501      	movs	r5, #1
    6266:	e7dc      	b.n	6222 <MyWrapper+0xc2>
    6268:	0020      	movs	r0, r4
    626a:	4b13      	ldr	r3, [pc, #76]	; (62b8 <MyWrapper+0x158>)
    626c:	4798      	blx	r3
    626e:	4b13      	ldr	r3, [pc, #76]	; (62bc <MyWrapper+0x15c>)
    6270:	881b      	ldrh	r3, [r3, #0]
    6272:	2500      	movs	r5, #0
    6274:	4203      	tst	r3, r0
    6276:	d0d4      	beq.n	6222 <MyWrapper+0xc2>
    6278:	355d      	adds	r5, #93	; 0x5d
    627a:	2e00      	cmp	r6, #0
    627c:	d106      	bne.n	628c <MyWrapper+0x12c>
    627e:	0020      	movs	r0, r4
    6280:	4b0f      	ldr	r3, [pc, #60]	; (62c0 <MyWrapper+0x160>)
    6282:	4798      	blx	r3
    6284:	4b0f      	ldr	r3, [pc, #60]	; (62c4 <MyWrapper+0x164>)
    6286:	5c1d      	ldrb	r5, [r3, r0]
    6288:	3558      	adds	r5, #88	; 0x58
    628a:	b2ed      	uxtb	r5, r5
    628c:	0020      	movs	r0, r4
    628e:	4b0c      	ldr	r3, [pc, #48]	; (62c0 <MyWrapper+0x160>)
    6290:	4798      	blx	r3
    6292:	4b0c      	ldr	r3, [pc, #48]	; (62c4 <MyWrapper+0x164>)
    6294:	5c1f      	ldrb	r7, [r3, r0]
    6296:	0020      	movs	r0, r4
    6298:	4b0b      	ldr	r3, [pc, #44]	; (62c8 <MyWrapper+0x168>)
    629a:	4798      	blx	r3
    629c:	b2c2      	uxtb	r2, r0
    629e:	0039      	movs	r1, r7
    62a0:	0028      	movs	r0, r5
    62a2:	4b0a      	ldr	r3, [pc, #40]	; (62cc <MyWrapper+0x16c>)
    62a4:	4798      	blx	r3
    62a6:	2500      	movs	r5, #0
    62a8:	e7bb      	b.n	6222 <MyWrapper+0xc2>
    62aa:	2501      	movs	r5, #1
    62ac:	e7b9      	b.n	6222 <MyWrapper+0xc2>
    62ae:	2501      	movs	r5, #1
    62b0:	e7b7      	b.n	6222 <MyWrapper+0xc2>
    62b2:	46c0      	nop			; (mov r8, r8)
    62b4:	000056d9 	.word	0x000056d9
    62b8:	0000449d 	.word	0x0000449d
    62bc:	200000e8 	.word	0x200000e8
    62c0:	0000441d 	.word	0x0000441d
    62c4:	200000e0 	.word	0x200000e0
    62c8:	0000448d 	.word	0x0000448d
    62cc:	00005129 	.word	0x00005129
    62d0:	00004bfd 	.word	0x00004bfd
    62d4:	000058a9 	.word	0x000058a9
    62d8:	000056e1 	.word	0x000056e1
    62dc:	0000745d 	.word	0x0000745d

000062e0 <xQueueGiveFromISR>:
    62e0:	b510      	push	{r4, lr}
    62e2:	2200      	movs	r2, #0
    62e4:	4b01      	ldr	r3, [pc, #4]	; (62ec <xQueueGiveFromISR+0xc>)
    62e6:	4798      	blx	r3
    62e8:	bd10      	pop	{r4, pc}
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	00006161 	.word	0x00006161

000062f0 <xQueueReceive>:
    62f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62f2:	46ce      	mov	lr, r9
    62f4:	4647      	mov	r7, r8
    62f6:	b580      	push	{r7, lr}
    62f8:	b085      	sub	sp, #20
    62fa:	1e04      	subs	r4, r0, #0
    62fc:	9100      	str	r1, [sp, #0]
    62fe:	9201      	str	r2, [sp, #4]
    6300:	d00b      	beq.n	631a <xQueueReceive+0x2a>
    6302:	9b00      	ldr	r3, [sp, #0]
    6304:	2b00      	cmp	r3, #0
    6306:	d00a      	beq.n	631e <xQueueReceive+0x2e>
    6308:	4ba4      	ldr	r3, [pc, #656]	; (659c <xQueueReceive+0x2ac>)
    630a:	4798      	blx	r3
    630c:	2800      	cmp	r0, #0
    630e:	d10b      	bne.n	6328 <xQueueReceive+0x38>
    6310:	9b01      	ldr	r3, [sp, #4]
    6312:	2b00      	cmp	r3, #0
    6314:	d00c      	beq.n	6330 <xQueueReceive+0x40>
    6316:	b672      	cpsid	i
    6318:	e7fe      	b.n	6318 <xQueueReceive+0x28>
    631a:	b672      	cpsid	i
    631c:	e7fe      	b.n	631c <xQueueReceive+0x2c>
    631e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    6320:	2b00      	cmp	r3, #0
    6322:	d0f1      	beq.n	6308 <xQueueReceive+0x18>
    6324:	b672      	cpsid	i
    6326:	e7fe      	b.n	6326 <xQueueReceive+0x36>
    6328:	2500      	movs	r5, #0
    632a:	4b9d      	ldr	r3, [pc, #628]	; (65a0 <xQueueReceive+0x2b0>)
    632c:	4698      	mov	r8, r3
    632e:	e0b4      	b.n	649a <xQueueReceive+0x1aa>
    6330:	2500      	movs	r5, #0
    6332:	e7fa      	b.n	632a <xQueueReceive+0x3a>
    6334:	9900      	ldr	r1, [sp, #0]
    6336:	0020      	movs	r0, r4
    6338:	4b9a      	ldr	r3, [pc, #616]	; (65a4 <xQueueReceive+0x2b4>)
    633a:	4798      	blx	r3
    633c:	4b9a      	ldr	r3, [pc, #616]	; (65a8 <xQueueReceive+0x2b8>)
    633e:	4798      	blx	r3
    6340:	4b9a      	ldr	r3, [pc, #616]	; (65ac <xQueueReceive+0x2bc>)
    6342:	4798      	blx	r3
    6344:	4b9a      	ldr	r3, [pc, #616]	; (65b0 <xQueueReceive+0x2c0>)
    6346:	881b      	ldrh	r3, [r3, #0]
    6348:	4203      	tst	r3, r0
    634a:	d019      	beq.n	6380 <xQueueReceive+0x90>
    634c:	0020      	movs	r0, r4
    634e:	4b99      	ldr	r3, [pc, #612]	; (65b4 <xQueueReceive+0x2c4>)
    6350:	4798      	blx	r3
    6352:	4b97      	ldr	r3, [pc, #604]	; (65b0 <xQueueReceive+0x2c0>)
    6354:	881b      	ldrh	r3, [r3, #0]
    6356:	4203      	tst	r3, r0
    6358:	d012      	beq.n	6380 <xQueueReceive+0x90>
    635a:	0020      	movs	r0, r4
    635c:	4b96      	ldr	r3, [pc, #600]	; (65b8 <xQueueReceive+0x2c8>)
    635e:	4698      	mov	r8, r3
    6360:	4798      	blx	r3
    6362:	4f96      	ldr	r7, [pc, #600]	; (65bc <xQueueReceive+0x2cc>)
    6364:	5c3d      	ldrb	r5, [r7, r0]
    6366:	3528      	adds	r5, #40	; 0x28
    6368:	b2ed      	uxtb	r5, r5
    636a:	0020      	movs	r0, r4
    636c:	47c0      	blx	r8
    636e:	5c3f      	ldrb	r7, [r7, r0]
    6370:	0020      	movs	r0, r4
    6372:	4b93      	ldr	r3, [pc, #588]	; (65c0 <xQueueReceive+0x2d0>)
    6374:	4798      	blx	r3
    6376:	b2c2      	uxtb	r2, r0
    6378:	0039      	movs	r1, r7
    637a:	0028      	movs	r0, r5
    637c:	4b91      	ldr	r3, [pc, #580]	; (65c4 <xQueueReceive+0x2d4>)
    637e:	4798      	blx	r3
    6380:	0020      	movs	r0, r4
    6382:	4f8d      	ldr	r7, [pc, #564]	; (65b8 <xQueueReceive+0x2c8>)
    6384:	47b8      	blx	r7
    6386:	4d8d      	ldr	r5, [pc, #564]	; (65bc <xQueueReceive+0x2cc>)
    6388:	5c2b      	ldrb	r3, [r5, r0]
    638a:	4699      	mov	r9, r3
    638c:	0020      	movs	r0, r4
    638e:	4b8c      	ldr	r3, [pc, #560]	; (65c0 <xQueueReceive+0x2d0>)
    6390:	4798      	blx	r3
    6392:	b2c3      	uxtb	r3, r0
    6394:	4698      	mov	r8, r3
    6396:	0020      	movs	r0, r4
    6398:	47b8      	blx	r7
    639a:	5c2b      	ldrb	r3, [r5, r0]
    639c:	2b02      	cmp	r3, #2
    639e:	d11e      	bne.n	63de <xQueueReceive+0xee>
    63a0:	4b81      	ldr	r3, [pc, #516]	; (65a8 <xQueueReceive+0x2b8>)
    63a2:	4798      	blx	r3
    63a4:	4b88      	ldr	r3, [pc, #544]	; (65c8 <xQueueReceive+0x2d8>)
    63a6:	4798      	blx	r3
    63a8:	b2c2      	uxtb	r2, r0
    63aa:	4641      	mov	r1, r8
    63ac:	4648      	mov	r0, r9
    63ae:	4b87      	ldr	r3, [pc, #540]	; (65cc <xQueueReceive+0x2dc>)
    63b0:	4798      	blx	r3
    63b2:	3e01      	subs	r6, #1
    63b4:	63a6      	str	r6, [r4, #56]	; 0x38
    63b6:	6923      	ldr	r3, [r4, #16]
    63b8:	2b00      	cmp	r3, #0
    63ba:	d007      	beq.n	63cc <xQueueReceive+0xdc>
    63bc:	0020      	movs	r0, r4
    63be:	3010      	adds	r0, #16
    63c0:	4b83      	ldr	r3, [pc, #524]	; (65d0 <xQueueReceive+0x2e0>)
    63c2:	4798      	blx	r3
    63c4:	2800      	cmp	r0, #0
    63c6:	d001      	beq.n	63cc <xQueueReceive+0xdc>
    63c8:	4b82      	ldr	r3, [pc, #520]	; (65d4 <xQueueReceive+0x2e4>)
    63ca:	4798      	blx	r3
    63cc:	4b82      	ldr	r3, [pc, #520]	; (65d8 <xQueueReceive+0x2e8>)
    63ce:	4798      	blx	r3
    63d0:	2301      	movs	r3, #1
    63d2:	0018      	movs	r0, r3
    63d4:	b005      	add	sp, #20
    63d6:	bc0c      	pop	{r2, r3}
    63d8:	4690      	mov	r8, r2
    63da:	4699      	mov	r9, r3
    63dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    63de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    63e0:	3a01      	subs	r2, #1
    63e2:	b2d2      	uxtb	r2, r2
    63e4:	e7e1      	b.n	63aa <xQueueReceive+0xba>
    63e6:	4b7c      	ldr	r3, [pc, #496]	; (65d8 <xQueueReceive+0x2e8>)
    63e8:	4798      	blx	r3
    63ea:	4b6f      	ldr	r3, [pc, #444]	; (65a8 <xQueueReceive+0x2b8>)
    63ec:	4798      	blx	r3
    63ee:	4b6f      	ldr	r3, [pc, #444]	; (65ac <xQueueReceive+0x2bc>)
    63f0:	4798      	blx	r3
    63f2:	4b6f      	ldr	r3, [pc, #444]	; (65b0 <xQueueReceive+0x2c0>)
    63f4:	881a      	ldrh	r2, [r3, #0]
    63f6:	2300      	movs	r3, #0
    63f8:	4202      	tst	r2, r0
    63fa:	d0ea      	beq.n	63d2 <xQueueReceive+0xe2>
    63fc:	0020      	movs	r0, r4
    63fe:	4b6d      	ldr	r3, [pc, #436]	; (65b4 <xQueueReceive+0x2c4>)
    6400:	4798      	blx	r3
    6402:	4b6b      	ldr	r3, [pc, #428]	; (65b0 <xQueueReceive+0x2c0>)
    6404:	881a      	ldrh	r2, [r3, #0]
    6406:	2300      	movs	r3, #0
    6408:	4202      	tst	r2, r0
    640a:	d0e2      	beq.n	63d2 <xQueueReceive+0xe2>
    640c:	0020      	movs	r0, r4
    640e:	4f6a      	ldr	r7, [pc, #424]	; (65b8 <xQueueReceive+0x2c8>)
    6410:	47b8      	blx	r7
    6412:	4e6a      	ldr	r6, [pc, #424]	; (65bc <xQueueReceive+0x2cc>)
    6414:	5c35      	ldrb	r5, [r6, r0]
    6416:	3550      	adds	r5, #80	; 0x50
    6418:	b2ed      	uxtb	r5, r5
    641a:	0020      	movs	r0, r4
    641c:	47b8      	blx	r7
    641e:	5c36      	ldrb	r6, [r6, r0]
    6420:	0020      	movs	r0, r4
    6422:	4b67      	ldr	r3, [pc, #412]	; (65c0 <xQueueReceive+0x2d0>)
    6424:	4798      	blx	r3
    6426:	b2c2      	uxtb	r2, r0
    6428:	0031      	movs	r1, r6
    642a:	0028      	movs	r0, r5
    642c:	4b65      	ldr	r3, [pc, #404]	; (65c4 <xQueueReceive+0x2d4>)
    642e:	4798      	blx	r3
    6430:	2300      	movs	r3, #0
    6432:	e7ce      	b.n	63d2 <xQueueReceive+0xe2>
    6434:	a802      	add	r0, sp, #8
    6436:	4b69      	ldr	r3, [pc, #420]	; (65dc <xQueueReceive+0x2ec>)
    6438:	4798      	blx	r3
    643a:	e038      	b.n	64ae <xQueueReceive+0x1be>
    643c:	2200      	movs	r2, #0
    643e:	2344      	movs	r3, #68	; 0x44
    6440:	54e2      	strb	r2, [r4, r3]
    6442:	e03f      	b.n	64c4 <xQueueReceive+0x1d4>
    6444:	2200      	movs	r2, #0
    6446:	2345      	movs	r3, #69	; 0x45
    6448:	54e2      	strb	r2, [r4, r3]
    644a:	e040      	b.n	64ce <xQueueReceive+0x1de>
    644c:	0020      	movs	r0, r4
    644e:	4b59      	ldr	r3, [pc, #356]	; (65b4 <xQueueReceive+0x2c4>)
    6450:	4798      	blx	r3
    6452:	4b57      	ldr	r3, [pc, #348]	; (65b0 <xQueueReceive+0x2c0>)
    6454:	881b      	ldrh	r3, [r3, #0]
    6456:	4203      	tst	r3, r0
    6458:	d04e      	beq.n	64f8 <xQueueReceive+0x208>
    645a:	0020      	movs	r0, r4
    645c:	4f56      	ldr	r7, [pc, #344]	; (65b8 <xQueueReceive+0x2c8>)
    645e:	47b8      	blx	r7
    6460:	4e56      	ldr	r6, [pc, #344]	; (65bc <xQueueReceive+0x2cc>)
    6462:	5c35      	ldrb	r5, [r6, r0]
    6464:	3568      	adds	r5, #104	; 0x68
    6466:	b2ed      	uxtb	r5, r5
    6468:	0020      	movs	r0, r4
    646a:	47b8      	blx	r7
    646c:	5c36      	ldrb	r6, [r6, r0]
    646e:	0020      	movs	r0, r4
    6470:	4b53      	ldr	r3, [pc, #332]	; (65c0 <xQueueReceive+0x2d0>)
    6472:	4798      	blx	r3
    6474:	b2c2      	uxtb	r2, r0
    6476:	0031      	movs	r1, r6
    6478:	0028      	movs	r0, r5
    647a:	4b52      	ldr	r3, [pc, #328]	; (65c4 <xQueueReceive+0x2d4>)
    647c:	4798      	blx	r3
    647e:	e03b      	b.n	64f8 <xQueueReceive+0x208>
    6480:	0020      	movs	r0, r4
    6482:	3024      	adds	r0, #36	; 0x24
    6484:	9901      	ldr	r1, [sp, #4]
    6486:	4b56      	ldr	r3, [pc, #344]	; (65e0 <xQueueReceive+0x2f0>)
    6488:	4798      	blx	r3
    648a:	0020      	movs	r0, r4
    648c:	4b55      	ldr	r3, [pc, #340]	; (65e4 <xQueueReceive+0x2f4>)
    648e:	4798      	blx	r3
    6490:	4b55      	ldr	r3, [pc, #340]	; (65e8 <xQueueReceive+0x2f8>)
    6492:	4798      	blx	r3
    6494:	2800      	cmp	r0, #0
    6496:	d046      	beq.n	6526 <xQueueReceive+0x236>
    6498:	2501      	movs	r5, #1
    649a:	47c0      	blx	r8
    649c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    649e:	2e00      	cmp	r6, #0
    64a0:	d000      	beq.n	64a4 <xQueueReceive+0x1b4>
    64a2:	e747      	b.n	6334 <xQueueReceive+0x44>
    64a4:	9b01      	ldr	r3, [sp, #4]
    64a6:	2b00      	cmp	r3, #0
    64a8:	d09d      	beq.n	63e6 <xQueueReceive+0xf6>
    64aa:	2d00      	cmp	r5, #0
    64ac:	d0c2      	beq.n	6434 <xQueueReceive+0x144>
    64ae:	4b4a      	ldr	r3, [pc, #296]	; (65d8 <xQueueReceive+0x2e8>)
    64b0:	4798      	blx	r3
    64b2:	4b4e      	ldr	r3, [pc, #312]	; (65ec <xQueueReceive+0x2fc>)
    64b4:	4798      	blx	r3
    64b6:	4b3a      	ldr	r3, [pc, #232]	; (65a0 <xQueueReceive+0x2b0>)
    64b8:	4798      	blx	r3
    64ba:	2344      	movs	r3, #68	; 0x44
    64bc:	5ce3      	ldrb	r3, [r4, r3]
    64be:	b25b      	sxtb	r3, r3
    64c0:	3301      	adds	r3, #1
    64c2:	d0bb      	beq.n	643c <xQueueReceive+0x14c>
    64c4:	2345      	movs	r3, #69	; 0x45
    64c6:	5ce3      	ldrb	r3, [r4, r3]
    64c8:	b25b      	sxtb	r3, r3
    64ca:	3301      	adds	r3, #1
    64cc:	d0ba      	beq.n	6444 <xQueueReceive+0x154>
    64ce:	4b42      	ldr	r3, [pc, #264]	; (65d8 <xQueueReceive+0x2e8>)
    64d0:	4798      	blx	r3
    64d2:	a901      	add	r1, sp, #4
    64d4:	a802      	add	r0, sp, #8
    64d6:	4b46      	ldr	r3, [pc, #280]	; (65f0 <xQueueReceive+0x300>)
    64d8:	4798      	blx	r3
    64da:	2800      	cmp	r0, #0
    64dc:	d12c      	bne.n	6538 <xQueueReceive+0x248>
    64de:	0020      	movs	r0, r4
    64e0:	4b44      	ldr	r3, [pc, #272]	; (65f4 <xQueueReceive+0x304>)
    64e2:	4798      	blx	r3
    64e4:	2800      	cmp	r0, #0
    64e6:	d021      	beq.n	652c <xQueueReceive+0x23c>
    64e8:	4b2f      	ldr	r3, [pc, #188]	; (65a8 <xQueueReceive+0x2b8>)
    64ea:	4798      	blx	r3
    64ec:	4b2f      	ldr	r3, [pc, #188]	; (65ac <xQueueReceive+0x2bc>)
    64ee:	4798      	blx	r3
    64f0:	4b2f      	ldr	r3, [pc, #188]	; (65b0 <xQueueReceive+0x2c0>)
    64f2:	881b      	ldrh	r3, [r3, #0]
    64f4:	4203      	tst	r3, r0
    64f6:	d1a9      	bne.n	644c <xQueueReceive+0x15c>
    64f8:	0020      	movs	r0, r4
    64fa:	4b2f      	ldr	r3, [pc, #188]	; (65b8 <xQueueReceive+0x2c8>)
    64fc:	4798      	blx	r3
    64fe:	4b2f      	ldr	r3, [pc, #188]	; (65bc <xQueueReceive+0x2cc>)
    6500:	5c1b      	ldrb	r3, [r3, r0]
    6502:	2b02      	cmp	r3, #2
    6504:	d0bc      	beq.n	6480 <xQueueReceive+0x190>
    6506:	4b28      	ldr	r3, [pc, #160]	; (65a8 <xQueueReceive+0x2b8>)
    6508:	4798      	blx	r3
    650a:	4b28      	ldr	r3, [pc, #160]	; (65ac <xQueueReceive+0x2bc>)
    650c:	4798      	blx	r3
    650e:	4b28      	ldr	r3, [pc, #160]	; (65b0 <xQueueReceive+0x2c0>)
    6510:	881b      	ldrh	r3, [r3, #0]
    6512:	4203      	tst	r3, r0
    6514:	d0b4      	beq.n	6480 <xQueueReceive+0x190>
    6516:	4b24      	ldr	r3, [pc, #144]	; (65a8 <xQueueReceive+0x2b8>)
    6518:	4798      	blx	r3
    651a:	4b2b      	ldr	r3, [pc, #172]	; (65c8 <xQueueReceive+0x2d8>)
    651c:	4798      	blx	r3
    651e:	b2c0      	uxtb	r0, r0
    6520:	4b35      	ldr	r3, [pc, #212]	; (65f8 <xQueueReceive+0x308>)
    6522:	4798      	blx	r3
    6524:	e7ac      	b.n	6480 <xQueueReceive+0x190>
    6526:	4b2b      	ldr	r3, [pc, #172]	; (65d4 <xQueueReceive+0x2e4>)
    6528:	4798      	blx	r3
    652a:	e7b5      	b.n	6498 <xQueueReceive+0x1a8>
    652c:	0020      	movs	r0, r4
    652e:	4b2d      	ldr	r3, [pc, #180]	; (65e4 <xQueueReceive+0x2f4>)
    6530:	4798      	blx	r3
    6532:	4b2d      	ldr	r3, [pc, #180]	; (65e8 <xQueueReceive+0x2f8>)
    6534:	4798      	blx	r3
    6536:	e7af      	b.n	6498 <xQueueReceive+0x1a8>
    6538:	0020      	movs	r0, r4
    653a:	4b2a      	ldr	r3, [pc, #168]	; (65e4 <xQueueReceive+0x2f4>)
    653c:	4798      	blx	r3
    653e:	4b2a      	ldr	r3, [pc, #168]	; (65e8 <xQueueReceive+0x2f8>)
    6540:	4798      	blx	r3
    6542:	0020      	movs	r0, r4
    6544:	4b2b      	ldr	r3, [pc, #172]	; (65f4 <xQueueReceive+0x304>)
    6546:	4798      	blx	r3
    6548:	2800      	cmp	r0, #0
    654a:	d0a5      	beq.n	6498 <xQueueReceive+0x1a8>
    654c:	4b16      	ldr	r3, [pc, #88]	; (65a8 <xQueueReceive+0x2b8>)
    654e:	4798      	blx	r3
    6550:	4b16      	ldr	r3, [pc, #88]	; (65ac <xQueueReceive+0x2bc>)
    6552:	4798      	blx	r3
    6554:	4b16      	ldr	r3, [pc, #88]	; (65b0 <xQueueReceive+0x2c0>)
    6556:	881a      	ldrh	r2, [r3, #0]
    6558:	2300      	movs	r3, #0
    655a:	4202      	tst	r2, r0
    655c:	d100      	bne.n	6560 <xQueueReceive+0x270>
    655e:	e738      	b.n	63d2 <xQueueReceive+0xe2>
    6560:	0020      	movs	r0, r4
    6562:	4b14      	ldr	r3, [pc, #80]	; (65b4 <xQueueReceive+0x2c4>)
    6564:	4798      	blx	r3
    6566:	4b12      	ldr	r3, [pc, #72]	; (65b0 <xQueueReceive+0x2c0>)
    6568:	881a      	ldrh	r2, [r3, #0]
    656a:	2300      	movs	r3, #0
    656c:	4202      	tst	r2, r0
    656e:	d100      	bne.n	6572 <xQueueReceive+0x282>
    6570:	e72f      	b.n	63d2 <xQueueReceive+0xe2>
    6572:	0020      	movs	r0, r4
    6574:	4f10      	ldr	r7, [pc, #64]	; (65b8 <xQueueReceive+0x2c8>)
    6576:	47b8      	blx	r7
    6578:	4e10      	ldr	r6, [pc, #64]	; (65bc <xQueueReceive+0x2cc>)
    657a:	5c35      	ldrb	r5, [r6, r0]
    657c:	3550      	adds	r5, #80	; 0x50
    657e:	b2ed      	uxtb	r5, r5
    6580:	0020      	movs	r0, r4
    6582:	47b8      	blx	r7
    6584:	5c36      	ldrb	r6, [r6, r0]
    6586:	0020      	movs	r0, r4
    6588:	4b0d      	ldr	r3, [pc, #52]	; (65c0 <xQueueReceive+0x2d0>)
    658a:	4798      	blx	r3
    658c:	b2c2      	uxtb	r2, r0
    658e:	0031      	movs	r1, r6
    6590:	0028      	movs	r0, r5
    6592:	4b0c      	ldr	r3, [pc, #48]	; (65c4 <xQueueReceive+0x2d4>)
    6594:	4798      	blx	r3
    6596:	2300      	movs	r3, #0
    6598:	e71b      	b.n	63d2 <xQueueReceive+0xe2>
    659a:	46c0      	nop			; (mov r8, r8)
    659c:	000075c5 	.word	0x000075c5
    65a0:	000056a1 	.word	0x000056a1
    65a4:	000059c5 	.word	0x000059c5
    65a8:	000044f1 	.word	0x000044f1
    65ac:	00004439 	.word	0x00004439
    65b0:	200000e8 	.word	0x200000e8
    65b4:	0000449d 	.word	0x0000449d
    65b8:	0000441d 	.word	0x0000441d
    65bc:	200000e0 	.word	0x200000e0
    65c0:	0000448d 	.word	0x0000448d
    65c4:	00005129 	.word	0x00005129
    65c8:	00004429 	.word	0x00004429
    65cc:	00004bfd 	.word	0x00004bfd
    65d0:	0000745d 	.word	0x0000745d
    65d4:	00005691 	.word	0x00005691
    65d8:	000056b9 	.word	0x000056b9
    65dc:	00007511 	.word	0x00007511
    65e0:	00007395 	.word	0x00007395
    65e4:	000059ed 	.word	0x000059ed
    65e8:	00006fad 	.word	0x00006fad
    65ec:	00006e05 	.word	0x00006e05
    65f0:	00007529 	.word	0x00007529
    65f4:	00005811 	.word	0x00005811
    65f8:	00004c55 	.word	0x00004c55

000065fc <xQueueSemaphoreTake>:
    65fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    65fe:	46ce      	mov	lr, r9
    6600:	4647      	mov	r7, r8
    6602:	b580      	push	{r7, lr}
    6604:	b085      	sub	sp, #20
    6606:	1e04      	subs	r4, r0, #0
    6608:	9101      	str	r1, [sp, #4]
    660a:	d004      	beq.n	6616 <xQueueSemaphoreTake+0x1a>
    660c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    660e:	2b00      	cmp	r3, #0
    6610:	d003      	beq.n	661a <xQueueSemaphoreTake+0x1e>
    6612:	b672      	cpsid	i
    6614:	e7fe      	b.n	6614 <xQueueSemaphoreTake+0x18>
    6616:	b672      	cpsid	i
    6618:	e7fe      	b.n	6618 <xQueueSemaphoreTake+0x1c>
    661a:	4bb2      	ldr	r3, [pc, #712]	; (68e4 <xQueueSemaphoreTake+0x2e8>)
    661c:	4798      	blx	r3
    661e:	2800      	cmp	r0, #0
    6620:	d104      	bne.n	662c <xQueueSemaphoreTake+0x30>
    6622:	9b01      	ldr	r3, [sp, #4]
    6624:	2b00      	cmp	r3, #0
    6626:	d006      	beq.n	6636 <xQueueSemaphoreTake+0x3a>
    6628:	b672      	cpsid	i
    662a:	e7fe      	b.n	662a <xQueueSemaphoreTake+0x2e>
    662c:	2500      	movs	r5, #0
    662e:	2700      	movs	r7, #0
    6630:	4bad      	ldr	r3, [pc, #692]	; (68e8 <xQueueSemaphoreTake+0x2ec>)
    6632:	4698      	mov	r8, r3
    6634:	e0bd      	b.n	67b2 <xQueueSemaphoreTake+0x1b6>
    6636:	2500      	movs	r5, #0
    6638:	2700      	movs	r7, #0
    663a:	e7f9      	b.n	6630 <xQueueSemaphoreTake+0x34>
    663c:	4bab      	ldr	r3, [pc, #684]	; (68ec <xQueueSemaphoreTake+0x2f0>)
    663e:	4798      	blx	r3
    6640:	4bab      	ldr	r3, [pc, #684]	; (68f0 <xQueueSemaphoreTake+0x2f4>)
    6642:	4798      	blx	r3
    6644:	4bab      	ldr	r3, [pc, #684]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    6646:	881b      	ldrh	r3, [r3, #0]
    6648:	4203      	tst	r3, r0
    664a:	d019      	beq.n	6680 <xQueueSemaphoreTake+0x84>
    664c:	0020      	movs	r0, r4
    664e:	4baa      	ldr	r3, [pc, #680]	; (68f8 <xQueueSemaphoreTake+0x2fc>)
    6650:	4798      	blx	r3
    6652:	4ba8      	ldr	r3, [pc, #672]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    6654:	881b      	ldrh	r3, [r3, #0]
    6656:	4203      	tst	r3, r0
    6658:	d012      	beq.n	6680 <xQueueSemaphoreTake+0x84>
    665a:	0020      	movs	r0, r4
    665c:	4ba7      	ldr	r3, [pc, #668]	; (68fc <xQueueSemaphoreTake+0x300>)
    665e:	4698      	mov	r8, r3
    6660:	4798      	blx	r3
    6662:	4fa7      	ldr	r7, [pc, #668]	; (6900 <xQueueSemaphoreTake+0x304>)
    6664:	5c3d      	ldrb	r5, [r7, r0]
    6666:	3528      	adds	r5, #40	; 0x28
    6668:	b2ed      	uxtb	r5, r5
    666a:	0020      	movs	r0, r4
    666c:	47c0      	blx	r8
    666e:	5c3f      	ldrb	r7, [r7, r0]
    6670:	0020      	movs	r0, r4
    6672:	4ba4      	ldr	r3, [pc, #656]	; (6904 <xQueueSemaphoreTake+0x308>)
    6674:	4798      	blx	r3
    6676:	b2c2      	uxtb	r2, r0
    6678:	0039      	movs	r1, r7
    667a:	0028      	movs	r0, r5
    667c:	4ba2      	ldr	r3, [pc, #648]	; (6908 <xQueueSemaphoreTake+0x30c>)
    667e:	4798      	blx	r3
    6680:	0020      	movs	r0, r4
    6682:	4f9e      	ldr	r7, [pc, #632]	; (68fc <xQueueSemaphoreTake+0x300>)
    6684:	47b8      	blx	r7
    6686:	4d9e      	ldr	r5, [pc, #632]	; (6900 <xQueueSemaphoreTake+0x304>)
    6688:	5c2b      	ldrb	r3, [r5, r0]
    668a:	4699      	mov	r9, r3
    668c:	0020      	movs	r0, r4
    668e:	4b9d      	ldr	r3, [pc, #628]	; (6904 <xQueueSemaphoreTake+0x308>)
    6690:	4798      	blx	r3
    6692:	b2c3      	uxtb	r3, r0
    6694:	4698      	mov	r8, r3
    6696:	0020      	movs	r0, r4
    6698:	47b8      	blx	r7
    669a:	5c2b      	ldrb	r3, [r5, r0]
    669c:	2b02      	cmp	r3, #2
    669e:	d124      	bne.n	66ea <xQueueSemaphoreTake+0xee>
    66a0:	4b92      	ldr	r3, [pc, #584]	; (68ec <xQueueSemaphoreTake+0x2f0>)
    66a2:	4798      	blx	r3
    66a4:	4b99      	ldr	r3, [pc, #612]	; (690c <xQueueSemaphoreTake+0x310>)
    66a6:	4798      	blx	r3
    66a8:	b2c2      	uxtb	r2, r0
    66aa:	4641      	mov	r1, r8
    66ac:	4648      	mov	r0, r9
    66ae:	4b98      	ldr	r3, [pc, #608]	; (6910 <xQueueSemaphoreTake+0x314>)
    66b0:	4798      	blx	r3
    66b2:	3e01      	subs	r6, #1
    66b4:	63a6      	str	r6, [r4, #56]	; 0x38
    66b6:	6823      	ldr	r3, [r4, #0]
    66b8:	2b00      	cmp	r3, #0
    66ba:	d102      	bne.n	66c2 <xQueueSemaphoreTake+0xc6>
    66bc:	4b95      	ldr	r3, [pc, #596]	; (6914 <xQueueSemaphoreTake+0x318>)
    66be:	4798      	blx	r3
    66c0:	6060      	str	r0, [r4, #4]
    66c2:	6923      	ldr	r3, [r4, #16]
    66c4:	2b00      	cmp	r3, #0
    66c6:	d007      	beq.n	66d8 <xQueueSemaphoreTake+0xdc>
    66c8:	0020      	movs	r0, r4
    66ca:	3010      	adds	r0, #16
    66cc:	4b92      	ldr	r3, [pc, #584]	; (6918 <xQueueSemaphoreTake+0x31c>)
    66ce:	4798      	blx	r3
    66d0:	2800      	cmp	r0, #0
    66d2:	d001      	beq.n	66d8 <xQueueSemaphoreTake+0xdc>
    66d4:	4b91      	ldr	r3, [pc, #580]	; (691c <xQueueSemaphoreTake+0x320>)
    66d6:	4798      	blx	r3
    66d8:	4b91      	ldr	r3, [pc, #580]	; (6920 <xQueueSemaphoreTake+0x324>)
    66da:	4798      	blx	r3
    66dc:	2501      	movs	r5, #1
    66de:	0028      	movs	r0, r5
    66e0:	b005      	add	sp, #20
    66e2:	bc0c      	pop	{r2, r3}
    66e4:	4690      	mov	r8, r2
    66e6:	4699      	mov	r9, r3
    66e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    66ec:	3a01      	subs	r2, #1
    66ee:	b2d2      	uxtb	r2, r2
    66f0:	e7db      	b.n	66aa <xQueueSemaphoreTake+0xae>
    66f2:	2d00      	cmp	r5, #0
    66f4:	d001      	beq.n	66fa <xQueueSemaphoreTake+0xfe>
    66f6:	b672      	cpsid	i
    66f8:	e7fe      	b.n	66f8 <xQueueSemaphoreTake+0xfc>
    66fa:	4b89      	ldr	r3, [pc, #548]	; (6920 <xQueueSemaphoreTake+0x324>)
    66fc:	4798      	blx	r3
    66fe:	4b7b      	ldr	r3, [pc, #492]	; (68ec <xQueueSemaphoreTake+0x2f0>)
    6700:	4798      	blx	r3
    6702:	4b7b      	ldr	r3, [pc, #492]	; (68f0 <xQueueSemaphoreTake+0x2f4>)
    6704:	4798      	blx	r3
    6706:	4b7b      	ldr	r3, [pc, #492]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    6708:	881b      	ldrh	r3, [r3, #0]
    670a:	4203      	tst	r3, r0
    670c:	d0e7      	beq.n	66de <xQueueSemaphoreTake+0xe2>
    670e:	0020      	movs	r0, r4
    6710:	4b79      	ldr	r3, [pc, #484]	; (68f8 <xQueueSemaphoreTake+0x2fc>)
    6712:	4798      	blx	r3
    6714:	4b77      	ldr	r3, [pc, #476]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    6716:	881b      	ldrh	r3, [r3, #0]
    6718:	4203      	tst	r3, r0
    671a:	d0e0      	beq.n	66de <xQueueSemaphoreTake+0xe2>
    671c:	0020      	movs	r0, r4
    671e:	4b77      	ldr	r3, [pc, #476]	; (68fc <xQueueSemaphoreTake+0x300>)
    6720:	4698      	mov	r8, r3
    6722:	4798      	blx	r3
    6724:	4f76      	ldr	r7, [pc, #472]	; (6900 <xQueueSemaphoreTake+0x304>)
    6726:	5c3e      	ldrb	r6, [r7, r0]
    6728:	3650      	adds	r6, #80	; 0x50
    672a:	b2f6      	uxtb	r6, r6
    672c:	0020      	movs	r0, r4
    672e:	47c0      	blx	r8
    6730:	5c3f      	ldrb	r7, [r7, r0]
    6732:	0020      	movs	r0, r4
    6734:	4b73      	ldr	r3, [pc, #460]	; (6904 <xQueueSemaphoreTake+0x308>)
    6736:	4798      	blx	r3
    6738:	b2c2      	uxtb	r2, r0
    673a:	0039      	movs	r1, r7
    673c:	0030      	movs	r0, r6
    673e:	4b72      	ldr	r3, [pc, #456]	; (6908 <xQueueSemaphoreTake+0x30c>)
    6740:	4798      	blx	r3
    6742:	e7cc      	b.n	66de <xQueueSemaphoreTake+0xe2>
    6744:	a802      	add	r0, sp, #8
    6746:	4b77      	ldr	r3, [pc, #476]	; (6924 <xQueueSemaphoreTake+0x328>)
    6748:	4798      	blx	r3
    674a:	e03c      	b.n	67c6 <xQueueSemaphoreTake+0x1ca>
    674c:	2200      	movs	r2, #0
    674e:	2344      	movs	r3, #68	; 0x44
    6750:	54e2      	strb	r2, [r4, r3]
    6752:	e043      	b.n	67dc <xQueueSemaphoreTake+0x1e0>
    6754:	2200      	movs	r2, #0
    6756:	2345      	movs	r3, #69	; 0x45
    6758:	54e2      	strb	r2, [r4, r3]
    675a:	e044      	b.n	67e6 <xQueueSemaphoreTake+0x1ea>
    675c:	0020      	movs	r0, r4
    675e:	4b66      	ldr	r3, [pc, #408]	; (68f8 <xQueueSemaphoreTake+0x2fc>)
    6760:	4798      	blx	r3
    6762:	4b64      	ldr	r3, [pc, #400]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    6764:	881b      	ldrh	r3, [r3, #0]
    6766:	4203      	tst	r3, r0
    6768:	d052      	beq.n	6810 <xQueueSemaphoreTake+0x214>
    676a:	0020      	movs	r0, r4
    676c:	4b63      	ldr	r3, [pc, #396]	; (68fc <xQueueSemaphoreTake+0x300>)
    676e:	4699      	mov	r9, r3
    6770:	4798      	blx	r3
    6772:	4f63      	ldr	r7, [pc, #396]	; (6900 <xQueueSemaphoreTake+0x304>)
    6774:	5c3e      	ldrb	r6, [r7, r0]
    6776:	3668      	adds	r6, #104	; 0x68
    6778:	b2f6      	uxtb	r6, r6
    677a:	0020      	movs	r0, r4
    677c:	47c8      	blx	r9
    677e:	5c3f      	ldrb	r7, [r7, r0]
    6780:	0020      	movs	r0, r4
    6782:	4b60      	ldr	r3, [pc, #384]	; (6904 <xQueueSemaphoreTake+0x308>)
    6784:	4798      	blx	r3
    6786:	b2c2      	uxtb	r2, r0
    6788:	0039      	movs	r1, r7
    678a:	0030      	movs	r0, r6
    678c:	4b5e      	ldr	r3, [pc, #376]	; (6908 <xQueueSemaphoreTake+0x30c>)
    678e:	4798      	blx	r3
    6790:	e03e      	b.n	6810 <xQueueSemaphoreTake+0x214>
    6792:	6823      	ldr	r3, [r4, #0]
    6794:	2b00      	cmp	r3, #0
    6796:	d052      	beq.n	683e <xQueueSemaphoreTake+0x242>
    6798:	0020      	movs	r0, r4
    679a:	3024      	adds	r0, #36	; 0x24
    679c:	9901      	ldr	r1, [sp, #4]
    679e:	4b62      	ldr	r3, [pc, #392]	; (6928 <xQueueSemaphoreTake+0x32c>)
    67a0:	4798      	blx	r3
    67a2:	0020      	movs	r0, r4
    67a4:	4b61      	ldr	r3, [pc, #388]	; (692c <xQueueSemaphoreTake+0x330>)
    67a6:	4798      	blx	r3
    67a8:	4b61      	ldr	r3, [pc, #388]	; (6930 <xQueueSemaphoreTake+0x334>)
    67aa:	4798      	blx	r3
    67ac:	2800      	cmp	r0, #0
    67ae:	d04f      	beq.n	6850 <xQueueSemaphoreTake+0x254>
    67b0:	2701      	movs	r7, #1
    67b2:	47c0      	blx	r8
    67b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    67b6:	2e00      	cmp	r6, #0
    67b8:	d000      	beq.n	67bc <xQueueSemaphoreTake+0x1c0>
    67ba:	e73f      	b.n	663c <xQueueSemaphoreTake+0x40>
    67bc:	9b01      	ldr	r3, [sp, #4]
    67be:	2b00      	cmp	r3, #0
    67c0:	d097      	beq.n	66f2 <xQueueSemaphoreTake+0xf6>
    67c2:	2f00      	cmp	r7, #0
    67c4:	d0be      	beq.n	6744 <xQueueSemaphoreTake+0x148>
    67c6:	4b56      	ldr	r3, [pc, #344]	; (6920 <xQueueSemaphoreTake+0x324>)
    67c8:	4798      	blx	r3
    67ca:	4b5a      	ldr	r3, [pc, #360]	; (6934 <xQueueSemaphoreTake+0x338>)
    67cc:	4798      	blx	r3
    67ce:	4b46      	ldr	r3, [pc, #280]	; (68e8 <xQueueSemaphoreTake+0x2ec>)
    67d0:	4798      	blx	r3
    67d2:	2344      	movs	r3, #68	; 0x44
    67d4:	5ce3      	ldrb	r3, [r4, r3]
    67d6:	b25b      	sxtb	r3, r3
    67d8:	3301      	adds	r3, #1
    67da:	d0b7      	beq.n	674c <xQueueSemaphoreTake+0x150>
    67dc:	2345      	movs	r3, #69	; 0x45
    67de:	5ce3      	ldrb	r3, [r4, r3]
    67e0:	b25b      	sxtb	r3, r3
    67e2:	3301      	adds	r3, #1
    67e4:	d0b6      	beq.n	6754 <xQueueSemaphoreTake+0x158>
    67e6:	4b4e      	ldr	r3, [pc, #312]	; (6920 <xQueueSemaphoreTake+0x324>)
    67e8:	4798      	blx	r3
    67ea:	a901      	add	r1, sp, #4
    67ec:	a802      	add	r0, sp, #8
    67ee:	4b52      	ldr	r3, [pc, #328]	; (6938 <xQueueSemaphoreTake+0x33c>)
    67f0:	4798      	blx	r3
    67f2:	2800      	cmp	r0, #0
    67f4:	d135      	bne.n	6862 <xQueueSemaphoreTake+0x266>
    67f6:	0020      	movs	r0, r4
    67f8:	4b50      	ldr	r3, [pc, #320]	; (693c <xQueueSemaphoreTake+0x340>)
    67fa:	4798      	blx	r3
    67fc:	2800      	cmp	r0, #0
    67fe:	d02a      	beq.n	6856 <xQueueSemaphoreTake+0x25a>
    6800:	4b3a      	ldr	r3, [pc, #232]	; (68ec <xQueueSemaphoreTake+0x2f0>)
    6802:	4798      	blx	r3
    6804:	4b3a      	ldr	r3, [pc, #232]	; (68f0 <xQueueSemaphoreTake+0x2f4>)
    6806:	4798      	blx	r3
    6808:	4b3a      	ldr	r3, [pc, #232]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    680a:	881b      	ldrh	r3, [r3, #0]
    680c:	4203      	tst	r3, r0
    680e:	d1a5      	bne.n	675c <xQueueSemaphoreTake+0x160>
    6810:	0020      	movs	r0, r4
    6812:	4b3a      	ldr	r3, [pc, #232]	; (68fc <xQueueSemaphoreTake+0x300>)
    6814:	4798      	blx	r3
    6816:	4b3a      	ldr	r3, [pc, #232]	; (6900 <xQueueSemaphoreTake+0x304>)
    6818:	5c1b      	ldrb	r3, [r3, r0]
    681a:	2b02      	cmp	r3, #2
    681c:	d0b9      	beq.n	6792 <xQueueSemaphoreTake+0x196>
    681e:	4b33      	ldr	r3, [pc, #204]	; (68ec <xQueueSemaphoreTake+0x2f0>)
    6820:	4798      	blx	r3
    6822:	4b33      	ldr	r3, [pc, #204]	; (68f0 <xQueueSemaphoreTake+0x2f4>)
    6824:	4798      	blx	r3
    6826:	4b33      	ldr	r3, [pc, #204]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    6828:	881b      	ldrh	r3, [r3, #0]
    682a:	4203      	tst	r3, r0
    682c:	d0b1      	beq.n	6792 <xQueueSemaphoreTake+0x196>
    682e:	4b2f      	ldr	r3, [pc, #188]	; (68ec <xQueueSemaphoreTake+0x2f0>)
    6830:	4798      	blx	r3
    6832:	4b36      	ldr	r3, [pc, #216]	; (690c <xQueueSemaphoreTake+0x310>)
    6834:	4798      	blx	r3
    6836:	b2c0      	uxtb	r0, r0
    6838:	4b41      	ldr	r3, [pc, #260]	; (6940 <xQueueSemaphoreTake+0x344>)
    683a:	4798      	blx	r3
    683c:	e7a9      	b.n	6792 <xQueueSemaphoreTake+0x196>
    683e:	4b2a      	ldr	r3, [pc, #168]	; (68e8 <xQueueSemaphoreTake+0x2ec>)
    6840:	4798      	blx	r3
    6842:	6860      	ldr	r0, [r4, #4]
    6844:	4b3f      	ldr	r3, [pc, #252]	; (6944 <xQueueSemaphoreTake+0x348>)
    6846:	4798      	blx	r3
    6848:	0005      	movs	r5, r0
    684a:	4b35      	ldr	r3, [pc, #212]	; (6920 <xQueueSemaphoreTake+0x324>)
    684c:	4798      	blx	r3
    684e:	e7a3      	b.n	6798 <xQueueSemaphoreTake+0x19c>
    6850:	4b32      	ldr	r3, [pc, #200]	; (691c <xQueueSemaphoreTake+0x320>)
    6852:	4798      	blx	r3
    6854:	e7ac      	b.n	67b0 <xQueueSemaphoreTake+0x1b4>
    6856:	0020      	movs	r0, r4
    6858:	4b34      	ldr	r3, [pc, #208]	; (692c <xQueueSemaphoreTake+0x330>)
    685a:	4798      	blx	r3
    685c:	4b34      	ldr	r3, [pc, #208]	; (6930 <xQueueSemaphoreTake+0x334>)
    685e:	4798      	blx	r3
    6860:	e7a6      	b.n	67b0 <xQueueSemaphoreTake+0x1b4>
    6862:	0020      	movs	r0, r4
    6864:	4b31      	ldr	r3, [pc, #196]	; (692c <xQueueSemaphoreTake+0x330>)
    6866:	4798      	blx	r3
    6868:	4b31      	ldr	r3, [pc, #196]	; (6930 <xQueueSemaphoreTake+0x334>)
    686a:	4798      	blx	r3
    686c:	0020      	movs	r0, r4
    686e:	4b33      	ldr	r3, [pc, #204]	; (693c <xQueueSemaphoreTake+0x340>)
    6870:	4798      	blx	r3
    6872:	2800      	cmp	r0, #0
    6874:	d09c      	beq.n	67b0 <xQueueSemaphoreTake+0x1b4>
    6876:	2d00      	cmp	r5, #0
    6878:	d00e      	beq.n	6898 <xQueueSemaphoreTake+0x29c>
    687a:	4b1b      	ldr	r3, [pc, #108]	; (68e8 <xQueueSemaphoreTake+0x2ec>)
    687c:	4798      	blx	r3
    687e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6880:	2100      	movs	r1, #0
    6882:	2b00      	cmp	r3, #0
    6884:	d003      	beq.n	688e <xQueueSemaphoreTake+0x292>
    6886:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6888:	681b      	ldr	r3, [r3, #0]
    688a:	3105      	adds	r1, #5
    688c:	1ac9      	subs	r1, r1, r3
    688e:	6860      	ldr	r0, [r4, #4]
    6890:	4b2d      	ldr	r3, [pc, #180]	; (6948 <xQueueSemaphoreTake+0x34c>)
    6892:	4798      	blx	r3
    6894:	4b22      	ldr	r3, [pc, #136]	; (6920 <xQueueSemaphoreTake+0x324>)
    6896:	4798      	blx	r3
    6898:	4b14      	ldr	r3, [pc, #80]	; (68ec <xQueueSemaphoreTake+0x2f0>)
    689a:	4798      	blx	r3
    689c:	4b14      	ldr	r3, [pc, #80]	; (68f0 <xQueueSemaphoreTake+0x2f4>)
    689e:	4798      	blx	r3
    68a0:	4b14      	ldr	r3, [pc, #80]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    68a2:	881b      	ldrh	r3, [r3, #0]
    68a4:	2500      	movs	r5, #0
    68a6:	4203      	tst	r3, r0
    68a8:	d100      	bne.n	68ac <xQueueSemaphoreTake+0x2b0>
    68aa:	e718      	b.n	66de <xQueueSemaphoreTake+0xe2>
    68ac:	0020      	movs	r0, r4
    68ae:	4b12      	ldr	r3, [pc, #72]	; (68f8 <xQueueSemaphoreTake+0x2fc>)
    68b0:	4798      	blx	r3
    68b2:	4b10      	ldr	r3, [pc, #64]	; (68f4 <xQueueSemaphoreTake+0x2f8>)
    68b4:	881b      	ldrh	r3, [r3, #0]
    68b6:	4203      	tst	r3, r0
    68b8:	d100      	bne.n	68bc <xQueueSemaphoreTake+0x2c0>
    68ba:	e710      	b.n	66de <xQueueSemaphoreTake+0xe2>
    68bc:	0020      	movs	r0, r4
    68be:	4f0f      	ldr	r7, [pc, #60]	; (68fc <xQueueSemaphoreTake+0x300>)
    68c0:	47b8      	blx	r7
    68c2:	4e0f      	ldr	r6, [pc, #60]	; (6900 <xQueueSemaphoreTake+0x304>)
    68c4:	5c35      	ldrb	r5, [r6, r0]
    68c6:	3550      	adds	r5, #80	; 0x50
    68c8:	b2ed      	uxtb	r5, r5
    68ca:	0020      	movs	r0, r4
    68cc:	47b8      	blx	r7
    68ce:	5c36      	ldrb	r6, [r6, r0]
    68d0:	0020      	movs	r0, r4
    68d2:	4b0c      	ldr	r3, [pc, #48]	; (6904 <xQueueSemaphoreTake+0x308>)
    68d4:	4798      	blx	r3
    68d6:	b2c2      	uxtb	r2, r0
    68d8:	0031      	movs	r1, r6
    68da:	0028      	movs	r0, r5
    68dc:	4b0a      	ldr	r3, [pc, #40]	; (6908 <xQueueSemaphoreTake+0x30c>)
    68de:	4798      	blx	r3
    68e0:	2500      	movs	r5, #0
    68e2:	e6fc      	b.n	66de <xQueueSemaphoreTake+0xe2>
    68e4:	000075c5 	.word	0x000075c5
    68e8:	000056a1 	.word	0x000056a1
    68ec:	000044f1 	.word	0x000044f1
    68f0:	00004439 	.word	0x00004439
    68f4:	200000e8 	.word	0x200000e8
    68f8:	0000449d 	.word	0x0000449d
    68fc:	0000441d 	.word	0x0000441d
    6900:	200000e0 	.word	0x200000e0
    6904:	0000448d 	.word	0x0000448d
    6908:	00005129 	.word	0x00005129
    690c:	00004429 	.word	0x00004429
    6910:	00004bfd 	.word	0x00004bfd
    6914:	000078f5 	.word	0x000078f5
    6918:	0000745d 	.word	0x0000745d
    691c:	00005691 	.word	0x00005691
    6920:	000056b9 	.word	0x000056b9
    6924:	00007511 	.word	0x00007511
    6928:	00007395 	.word	0x00007395
    692c:	000059ed 	.word	0x000059ed
    6930:	00006fad 	.word	0x00006fad
    6934:	00006e05 	.word	0x00006e05
    6938:	00007529 	.word	0x00007529
    693c:	00005811 	.word	0x00005811
    6940:	00004c55 	.word	0x00004c55
    6944:	000075e5 	.word	0x000075e5
    6948:	000077f1 	.word	0x000077f1

0000694c <uxQueueGetQueueNumber>:
    694c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    694e:	4770      	bx	lr

00006950 <vQueueSetQueueNumber>:
    6950:	64c1      	str	r1, [r0, #76]	; 0x4c
    6952:	4770      	bx	lr

00006954 <ucQueueGetQueueType>:
    6954:	2350      	movs	r3, #80	; 0x50
    6956:	5cc0      	ldrb	r0, [r0, r3]
    6958:	4770      	bx	lr
	...

0000695c <vQueueWaitForMessageRestricted>:
    695c:	b570      	push	{r4, r5, r6, lr}
    695e:	0004      	movs	r4, r0
    6960:	000d      	movs	r5, r1
    6962:	0016      	movs	r6, r2
    6964:	4b11      	ldr	r3, [pc, #68]	; (69ac <vQueueWaitForMessageRestricted+0x50>)
    6966:	4798      	blx	r3
    6968:	2344      	movs	r3, #68	; 0x44
    696a:	5ce3      	ldrb	r3, [r4, r3]
    696c:	b25b      	sxtb	r3, r3
    696e:	3301      	adds	r3, #1
    6970:	d00d      	beq.n	698e <vQueueWaitForMessageRestricted+0x32>
    6972:	2345      	movs	r3, #69	; 0x45
    6974:	5ce3      	ldrb	r3, [r4, r3]
    6976:	b25b      	sxtb	r3, r3
    6978:	3301      	adds	r3, #1
    697a:	d00c      	beq.n	6996 <vQueueWaitForMessageRestricted+0x3a>
    697c:	4b0c      	ldr	r3, [pc, #48]	; (69b0 <vQueueWaitForMessageRestricted+0x54>)
    697e:	4798      	blx	r3
    6980:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6982:	2b00      	cmp	r3, #0
    6984:	d00b      	beq.n	699e <vQueueWaitForMessageRestricted+0x42>
    6986:	0020      	movs	r0, r4
    6988:	4b0a      	ldr	r3, [pc, #40]	; (69b4 <vQueueWaitForMessageRestricted+0x58>)
    698a:	4798      	blx	r3
    698c:	bd70      	pop	{r4, r5, r6, pc}
    698e:	2200      	movs	r2, #0
    6990:	2344      	movs	r3, #68	; 0x44
    6992:	54e2      	strb	r2, [r4, r3]
    6994:	e7ed      	b.n	6972 <vQueueWaitForMessageRestricted+0x16>
    6996:	2200      	movs	r2, #0
    6998:	2345      	movs	r3, #69	; 0x45
    699a:	54e2      	strb	r2, [r4, r3]
    699c:	e7ee      	b.n	697c <vQueueWaitForMessageRestricted+0x20>
    699e:	0020      	movs	r0, r4
    69a0:	3024      	adds	r0, #36	; 0x24
    69a2:	0032      	movs	r2, r6
    69a4:	0029      	movs	r1, r5
    69a6:	4b04      	ldr	r3, [pc, #16]	; (69b8 <vQueueWaitForMessageRestricted+0x5c>)
    69a8:	4798      	blx	r3
    69aa:	e7ec      	b.n	6986 <vQueueWaitForMessageRestricted+0x2a>
    69ac:	000056a1 	.word	0x000056a1
    69b0:	000056b9 	.word	0x000056b9
    69b4:	000059ed 	.word	0x000059ed
    69b8:	000073c1 	.word	0x000073c1

000069bc <prvResetNextTaskUnblockTime>:
    69bc:	4b08      	ldr	r3, [pc, #32]	; (69e0 <prvResetNextTaskUnblockTime+0x24>)
    69be:	681b      	ldr	r3, [r3, #0]
    69c0:	681b      	ldr	r3, [r3, #0]
    69c2:	2b00      	cmp	r3, #0
    69c4:	d007      	beq.n	69d6 <prvResetNextTaskUnblockTime+0x1a>
    69c6:	4b06      	ldr	r3, [pc, #24]	; (69e0 <prvResetNextTaskUnblockTime+0x24>)
    69c8:	681b      	ldr	r3, [r3, #0]
    69ca:	68db      	ldr	r3, [r3, #12]
    69cc:	68db      	ldr	r3, [r3, #12]
    69ce:	685a      	ldr	r2, [r3, #4]
    69d0:	4b04      	ldr	r3, [pc, #16]	; (69e4 <prvResetNextTaskUnblockTime+0x28>)
    69d2:	601a      	str	r2, [r3, #0]
    69d4:	4770      	bx	lr
    69d6:	2201      	movs	r2, #1
    69d8:	4252      	negs	r2, r2
    69da:	4b02      	ldr	r3, [pc, #8]	; (69e4 <prvResetNextTaskUnblockTime+0x28>)
    69dc:	601a      	str	r2, [r3, #0]
    69de:	e7f9      	b.n	69d4 <prvResetNextTaskUnblockTime+0x18>
    69e0:	20003d00 	.word	0x20003d00
    69e4:	20003db0 	.word	0x20003db0

000069e8 <prvIdleTask>:
    69e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    69ea:	46d6      	mov	lr, sl
    69ec:	464f      	mov	r7, r9
    69ee:	4646      	mov	r6, r8
    69f0:	b5c0      	push	{r6, r7, lr}
    69f2:	4b14      	ldr	r3, [pc, #80]	; (6a44 <prvIdleTask+0x5c>)
    69f4:	4699      	mov	r9, r3
    69f6:	4b14      	ldr	r3, [pc, #80]	; (6a48 <prvIdleTask+0x60>)
    69f8:	4698      	mov	r8, r3
    69fa:	4f14      	ldr	r7, [pc, #80]	; (6a4c <prvIdleTask+0x64>)
    69fc:	4b14      	ldr	r3, [pc, #80]	; (6a50 <prvIdleTask+0x68>)
    69fe:	469a      	mov	sl, r3
    6a00:	464b      	mov	r3, r9
    6a02:	681b      	ldr	r3, [r3, #0]
    6a04:	2b00      	cmp	r3, #0
    6a06:	d016      	beq.n	6a36 <prvIdleTask+0x4e>
    6a08:	47c0      	blx	r8
    6a0a:	68fb      	ldr	r3, [r7, #12]
    6a0c:	68dd      	ldr	r5, [r3, #12]
    6a0e:	1d28      	adds	r0, r5, #4
    6a10:	47d0      	blx	sl
    6a12:	4a10      	ldr	r2, [pc, #64]	; (6a54 <prvIdleTask+0x6c>)
    6a14:	6813      	ldr	r3, [r2, #0]
    6a16:	3b01      	subs	r3, #1
    6a18:	6013      	str	r3, [r2, #0]
    6a1a:	4c0a      	ldr	r4, [pc, #40]	; (6a44 <prvIdleTask+0x5c>)
    6a1c:	6823      	ldr	r3, [r4, #0]
    6a1e:	3b01      	subs	r3, #1
    6a20:	6023      	str	r3, [r4, #0]
    6a22:	4b0d      	ldr	r3, [pc, #52]	; (6a58 <prvIdleTask+0x70>)
    6a24:	4798      	blx	r3
    6a26:	6b28      	ldr	r0, [r5, #48]	; 0x30
    6a28:	4e0c      	ldr	r6, [pc, #48]	; (6a5c <prvIdleTask+0x74>)
    6a2a:	47b0      	blx	r6
    6a2c:	0028      	movs	r0, r5
    6a2e:	47b0      	blx	r6
    6a30:	6823      	ldr	r3, [r4, #0]
    6a32:	2b00      	cmp	r3, #0
    6a34:	d1e8      	bne.n	6a08 <prvIdleTask+0x20>
    6a36:	4b0a      	ldr	r3, [pc, #40]	; (6a60 <prvIdleTask+0x78>)
    6a38:	681b      	ldr	r3, [r3, #0]
    6a3a:	2b01      	cmp	r3, #1
    6a3c:	d9e0      	bls.n	6a00 <prvIdleTask+0x18>
    6a3e:	4b09      	ldr	r3, [pc, #36]	; (6a64 <prvIdleTask+0x7c>)
    6a40:	4798      	blx	r3
    6a42:	e7dd      	b.n	6a00 <prvIdleTask+0x18>
    6a44:	20003d70 	.word	0x20003d70
    6a48:	000056a1 	.word	0x000056a1
    6a4c:	20003de4 	.word	0x20003de4
    6a50:	0000556f 	.word	0x0000556f
    6a54:	20003d6c 	.word	0x20003d6c
    6a58:	000056b9 	.word	0x000056b9
    6a5c:	000057f5 	.word	0x000057f5
    6a60:	20003d08 	.word	0x20003d08
    6a64:	00005691 	.word	0x00005691

00006a68 <prvAddCurrentTaskToDelayedList>:
    6a68:	b570      	push	{r4, r5, r6, lr}
    6a6a:	0004      	movs	r4, r0
    6a6c:	000d      	movs	r5, r1
    6a6e:	4b17      	ldr	r3, [pc, #92]	; (6acc <prvAddCurrentTaskToDelayedList+0x64>)
    6a70:	681e      	ldr	r6, [r3, #0]
    6a72:	4b17      	ldr	r3, [pc, #92]	; (6ad0 <prvAddCurrentTaskToDelayedList+0x68>)
    6a74:	6818      	ldr	r0, [r3, #0]
    6a76:	3004      	adds	r0, #4
    6a78:	4b16      	ldr	r3, [pc, #88]	; (6ad4 <prvAddCurrentTaskToDelayedList+0x6c>)
    6a7a:	4798      	blx	r3
    6a7c:	1c63      	adds	r3, r4, #1
    6a7e:	d013      	beq.n	6aa8 <prvAddCurrentTaskToDelayedList+0x40>
    6a80:	1934      	adds	r4, r6, r4
    6a82:	4b13      	ldr	r3, [pc, #76]	; (6ad0 <prvAddCurrentTaskToDelayedList+0x68>)
    6a84:	681b      	ldr	r3, [r3, #0]
    6a86:	605c      	str	r4, [r3, #4]
    6a88:	42a6      	cmp	r6, r4
    6a8a:	d816      	bhi.n	6aba <prvAddCurrentTaskToDelayedList+0x52>
    6a8c:	4b12      	ldr	r3, [pc, #72]	; (6ad8 <prvAddCurrentTaskToDelayedList+0x70>)
    6a8e:	6818      	ldr	r0, [r3, #0]
    6a90:	4b0f      	ldr	r3, [pc, #60]	; (6ad0 <prvAddCurrentTaskToDelayedList+0x68>)
    6a92:	6819      	ldr	r1, [r3, #0]
    6a94:	3104      	adds	r1, #4
    6a96:	4b11      	ldr	r3, [pc, #68]	; (6adc <prvAddCurrentTaskToDelayedList+0x74>)
    6a98:	4798      	blx	r3
    6a9a:	4b11      	ldr	r3, [pc, #68]	; (6ae0 <prvAddCurrentTaskToDelayedList+0x78>)
    6a9c:	681b      	ldr	r3, [r3, #0]
    6a9e:	429c      	cmp	r4, r3
    6aa0:	d212      	bcs.n	6ac8 <prvAddCurrentTaskToDelayedList+0x60>
    6aa2:	4b0f      	ldr	r3, [pc, #60]	; (6ae0 <prvAddCurrentTaskToDelayedList+0x78>)
    6aa4:	601c      	str	r4, [r3, #0]
    6aa6:	e00f      	b.n	6ac8 <prvAddCurrentTaskToDelayedList+0x60>
    6aa8:	2d00      	cmp	r5, #0
    6aaa:	d0e9      	beq.n	6a80 <prvAddCurrentTaskToDelayedList+0x18>
    6aac:	4b08      	ldr	r3, [pc, #32]	; (6ad0 <prvAddCurrentTaskToDelayedList+0x68>)
    6aae:	6819      	ldr	r1, [r3, #0]
    6ab0:	3104      	adds	r1, #4
    6ab2:	480c      	ldr	r0, [pc, #48]	; (6ae4 <prvAddCurrentTaskToDelayedList+0x7c>)
    6ab4:	4b0c      	ldr	r3, [pc, #48]	; (6ae8 <prvAddCurrentTaskToDelayedList+0x80>)
    6ab6:	4798      	blx	r3
    6ab8:	e006      	b.n	6ac8 <prvAddCurrentTaskToDelayedList+0x60>
    6aba:	4b0c      	ldr	r3, [pc, #48]	; (6aec <prvAddCurrentTaskToDelayedList+0x84>)
    6abc:	6818      	ldr	r0, [r3, #0]
    6abe:	4b04      	ldr	r3, [pc, #16]	; (6ad0 <prvAddCurrentTaskToDelayedList+0x68>)
    6ac0:	6819      	ldr	r1, [r3, #0]
    6ac2:	3104      	adds	r1, #4
    6ac4:	4b05      	ldr	r3, [pc, #20]	; (6adc <prvAddCurrentTaskToDelayedList+0x74>)
    6ac6:	4798      	blx	r3
    6ac8:	bd70      	pop	{r4, r5, r6, pc}
    6aca:	46c0      	nop			; (mov r8, r8)
    6acc:	20003df8 	.word	0x20003df8
    6ad0:	20003cfc 	.word	0x20003cfc
    6ad4:	0000556f 	.word	0x0000556f
    6ad8:	20003d00 	.word	0x20003d00
    6adc:	00005541 	.word	0x00005541
    6ae0:	20003db0 	.word	0x20003db0
    6ae4:	20003dd0 	.word	0x20003dd0
    6ae8:	00005529 	.word	0x00005529
    6aec:	20003d04 	.word	0x20003d04

00006af0 <xTaskCreate>:
    6af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6af2:	46c6      	mov	lr, r8
    6af4:	b500      	push	{lr}
    6af6:	b084      	sub	sp, #16
    6af8:	9001      	str	r0, [sp, #4]
    6afa:	000d      	movs	r5, r1
    6afc:	9302      	str	r3, [sp, #8]
    6afe:	0097      	lsls	r7, r2, #2
    6b00:	0038      	movs	r0, r7
    6b02:	4b81      	ldr	r3, [pc, #516]	; (6d08 <xTaskCreate+0x218>)
    6b04:	4798      	blx	r3
    6b06:	1e06      	subs	r6, r0, #0
    6b08:	d100      	bne.n	6b0c <xTaskCreate+0x1c>
    6b0a:	e0b6      	b.n	6c7a <xTaskCreate+0x18a>
    6b0c:	2054      	movs	r0, #84	; 0x54
    6b0e:	4b7e      	ldr	r3, [pc, #504]	; (6d08 <xTaskCreate+0x218>)
    6b10:	4798      	blx	r3
    6b12:	1e04      	subs	r4, r0, #0
    6b14:	d100      	bne.n	6b18 <xTaskCreate+0x28>
    6b16:	e0ad      	b.n	6c74 <xTaskCreate+0x184>
    6b18:	6306      	str	r6, [r0, #48]	; 0x30
    6b1a:	003a      	movs	r2, r7
    6b1c:	21a5      	movs	r1, #165	; 0xa5
    6b1e:	0030      	movs	r0, r6
    6b20:	4b7a      	ldr	r3, [pc, #488]	; (6d0c <xTaskCreate+0x21c>)
    6b22:	4798      	blx	r3
    6b24:	1f3a      	subs	r2, r7, #4
    6b26:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6b28:	469c      	mov	ip, r3
    6b2a:	4462      	add	r2, ip
    6b2c:	2307      	movs	r3, #7
    6b2e:	439a      	bics	r2, r3
    6b30:	4690      	mov	r8, r2
    6b32:	782a      	ldrb	r2, [r5, #0]
    6b34:	332d      	adds	r3, #45	; 0x2d
    6b36:	54e2      	strb	r2, [r4, r3]
    6b38:	782b      	ldrb	r3, [r5, #0]
    6b3a:	2b00      	cmp	r3, #0
    6b3c:	d00d      	beq.n	6b5a <xTaskCreate+0x6a>
    6b3e:	3501      	adds	r5, #1
    6b40:	0023      	movs	r3, r4
    6b42:	3335      	adds	r3, #53	; 0x35
    6b44:	0020      	movs	r0, r4
    6b46:	303c      	adds	r0, #60	; 0x3c
    6b48:	782a      	ldrb	r2, [r5, #0]
    6b4a:	701a      	strb	r2, [r3, #0]
    6b4c:	782a      	ldrb	r2, [r5, #0]
    6b4e:	2a00      	cmp	r2, #0
    6b50:	d003      	beq.n	6b5a <xTaskCreate+0x6a>
    6b52:	3501      	adds	r5, #1
    6b54:	3301      	adds	r3, #1
    6b56:	4283      	cmp	r3, r0
    6b58:	d1f6      	bne.n	6b48 <xTaskCreate+0x58>
    6b5a:	2200      	movs	r2, #0
    6b5c:	233b      	movs	r3, #59	; 0x3b
    6b5e:	54e2      	strb	r2, [r4, r3]
    6b60:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    6b62:	2f04      	cmp	r7, #4
    6b64:	d900      	bls.n	6b68 <xTaskCreate+0x78>
    6b66:	2704      	movs	r7, #4
    6b68:	62e7      	str	r7, [r4, #44]	; 0x2c
    6b6a:	6467      	str	r7, [r4, #68]	; 0x44
    6b6c:	2600      	movs	r6, #0
    6b6e:	64a6      	str	r6, [r4, #72]	; 0x48
    6b70:	1d23      	adds	r3, r4, #4
    6b72:	9303      	str	r3, [sp, #12]
    6b74:	0018      	movs	r0, r3
    6b76:	4d66      	ldr	r5, [pc, #408]	; (6d10 <xTaskCreate+0x220>)
    6b78:	47a8      	blx	r5
    6b7a:	0020      	movs	r0, r4
    6b7c:	3018      	adds	r0, #24
    6b7e:	47a8      	blx	r5
    6b80:	6124      	str	r4, [r4, #16]
    6b82:	2305      	movs	r3, #5
    6b84:	1bdb      	subs	r3, r3, r7
    6b86:	61a3      	str	r3, [r4, #24]
    6b88:	6264      	str	r4, [r4, #36]	; 0x24
    6b8a:	64e6      	str	r6, [r4, #76]	; 0x4c
    6b8c:	2350      	movs	r3, #80	; 0x50
    6b8e:	54e6      	strb	r6, [r4, r3]
    6b90:	9a02      	ldr	r2, [sp, #8]
    6b92:	9901      	ldr	r1, [sp, #4]
    6b94:	4640      	mov	r0, r8
    6b96:	4b5f      	ldr	r3, [pc, #380]	; (6d14 <xTaskCreate+0x224>)
    6b98:	4798      	blx	r3
    6b9a:	6020      	str	r0, [r4, #0]
    6b9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b9e:	2b00      	cmp	r3, #0
    6ba0:	d000      	beq.n	6ba4 <xTaskCreate+0xb4>
    6ba2:	601c      	str	r4, [r3, #0]
    6ba4:	4b5c      	ldr	r3, [pc, #368]	; (6d18 <xTaskCreate+0x228>)
    6ba6:	4798      	blx	r3
    6ba8:	4a5c      	ldr	r2, [pc, #368]	; (6d1c <xTaskCreate+0x22c>)
    6baa:	6813      	ldr	r3, [r2, #0]
    6bac:	3301      	adds	r3, #1
    6bae:	6013      	str	r3, [r2, #0]
    6bb0:	4b5b      	ldr	r3, [pc, #364]	; (6d20 <xTaskCreate+0x230>)
    6bb2:	681b      	ldr	r3, [r3, #0]
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d063      	beq.n	6c80 <xTaskCreate+0x190>
    6bb8:	4b5a      	ldr	r3, [pc, #360]	; (6d24 <xTaskCreate+0x234>)
    6bba:	681b      	ldr	r3, [r3, #0]
    6bbc:	2b00      	cmp	r3, #0
    6bbe:	d107      	bne.n	6bd0 <xTaskCreate+0xe0>
    6bc0:	4b57      	ldr	r3, [pc, #348]	; (6d20 <xTaskCreate+0x230>)
    6bc2:	681b      	ldr	r3, [r3, #0]
    6bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6bc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6bc8:	4293      	cmp	r3, r2
    6bca:	d801      	bhi.n	6bd0 <xTaskCreate+0xe0>
    6bcc:	4b54      	ldr	r3, [pc, #336]	; (6d20 <xTaskCreate+0x230>)
    6bce:	601c      	str	r4, [r3, #0]
    6bd0:	4a55      	ldr	r2, [pc, #340]	; (6d28 <xTaskCreate+0x238>)
    6bd2:	6813      	ldr	r3, [r2, #0]
    6bd4:	3301      	adds	r3, #1
    6bd6:	6013      	str	r3, [r2, #0]
    6bd8:	63e3      	str	r3, [r4, #60]	; 0x3c
    6bda:	2003      	movs	r0, #3
    6bdc:	4b53      	ldr	r3, [pc, #332]	; (6d2c <xTaskCreate+0x23c>)
    6bde:	4798      	blx	r3
    6be0:	b281      	uxth	r1, r0
    6be2:	0020      	movs	r0, r4
    6be4:	4b52      	ldr	r3, [pc, #328]	; (6d30 <xTaskCreate+0x240>)
    6be6:	4798      	blx	r3
    6be8:	4b52      	ldr	r3, [pc, #328]	; (6d34 <xTaskCreate+0x244>)
    6bea:	8819      	ldrh	r1, [r3, #0]
    6bec:	0020      	movs	r0, r4
    6bee:	4b52      	ldr	r3, [pc, #328]	; (6d38 <xTaskCreate+0x248>)
    6bf0:	4798      	blx	r3
    6bf2:	0020      	movs	r0, r4
    6bf4:	4e51      	ldr	r6, [pc, #324]	; (6d3c <xTaskCreate+0x24c>)
    6bf6:	47b0      	blx	r6
    6bf8:	0022      	movs	r2, r4
    6bfa:	3234      	adds	r2, #52	; 0x34
    6bfc:	b2c1      	uxtb	r1, r0
    6bfe:	2003      	movs	r0, #3
    6c00:	4b4f      	ldr	r3, [pc, #316]	; (6d40 <xTaskCreate+0x250>)
    6c02:	4798      	blx	r3
    6c04:	0020      	movs	r0, r4
    6c06:	47b0      	blx	r6
    6c08:	232c      	movs	r3, #44	; 0x2c
    6c0a:	18e3      	adds	r3, r4, r3
    6c0c:	781a      	ldrb	r2, [r3, #0]
    6c0e:	b2c1      	uxtb	r1, r0
    6c10:	2003      	movs	r0, #3
    6c12:	4b4c      	ldr	r3, [pc, #304]	; (6d44 <xTaskCreate+0x254>)
    6c14:	4798      	blx	r3
    6c16:	4b4c      	ldr	r3, [pc, #304]	; (6d48 <xTaskCreate+0x258>)
    6c18:	4798      	blx	r3
    6c1a:	4b4c      	ldr	r3, [pc, #304]	; (6d4c <xTaskCreate+0x25c>)
    6c1c:	4798      	blx	r3
    6c1e:	4b4c      	ldr	r3, [pc, #304]	; (6d50 <xTaskCreate+0x260>)
    6c20:	881b      	ldrh	r3, [r3, #0]
    6c22:	4203      	tst	r3, r0
    6c24:	d154      	bne.n	6cd0 <xTaskCreate+0x1e0>
    6c26:	0020      	movs	r0, r4
    6c28:	4b48      	ldr	r3, [pc, #288]	; (6d4c <xTaskCreate+0x25c>)
    6c2a:	4798      	blx	r3
    6c2c:	4b48      	ldr	r3, [pc, #288]	; (6d50 <xTaskCreate+0x260>)
    6c2e:	881b      	ldrh	r3, [r3, #0]
    6c30:	4203      	tst	r3, r0
    6c32:	d15d      	bne.n	6cf0 <xTaskCreate+0x200>
    6c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6c36:	4a47      	ldr	r2, [pc, #284]	; (6d54 <xTaskCreate+0x264>)
    6c38:	6812      	ldr	r2, [r2, #0]
    6c3a:	4293      	cmp	r3, r2
    6c3c:	d901      	bls.n	6c42 <xTaskCreate+0x152>
    6c3e:	4a45      	ldr	r2, [pc, #276]	; (6d54 <xTaskCreate+0x264>)
    6c40:	6013      	str	r3, [r2, #0]
    6c42:	0098      	lsls	r0, r3, #2
    6c44:	18c0      	adds	r0, r0, r3
    6c46:	0080      	lsls	r0, r0, #2
    6c48:	4b43      	ldr	r3, [pc, #268]	; (6d58 <xTaskCreate+0x268>)
    6c4a:	1818      	adds	r0, r3, r0
    6c4c:	9903      	ldr	r1, [sp, #12]
    6c4e:	4b43      	ldr	r3, [pc, #268]	; (6d5c <xTaskCreate+0x26c>)
    6c50:	4798      	blx	r3
    6c52:	4b43      	ldr	r3, [pc, #268]	; (6d60 <xTaskCreate+0x270>)
    6c54:	4798      	blx	r3
    6c56:	4b33      	ldr	r3, [pc, #204]	; (6d24 <xTaskCreate+0x234>)
    6c58:	681b      	ldr	r3, [r3, #0]
    6c5a:	2001      	movs	r0, #1
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d005      	beq.n	6c6c <xTaskCreate+0x17c>
    6c60:	4b2f      	ldr	r3, [pc, #188]	; (6d20 <xTaskCreate+0x230>)
    6c62:	681b      	ldr	r3, [r3, #0]
    6c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6c66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6c68:	429a      	cmp	r2, r3
    6c6a:	d348      	bcc.n	6cfe <xTaskCreate+0x20e>
    6c6c:	b004      	add	sp, #16
    6c6e:	bc04      	pop	{r2}
    6c70:	4690      	mov	r8, r2
    6c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c74:	0030      	movs	r0, r6
    6c76:	4b3b      	ldr	r3, [pc, #236]	; (6d64 <xTaskCreate+0x274>)
    6c78:	4798      	blx	r3
    6c7a:	2001      	movs	r0, #1
    6c7c:	4240      	negs	r0, r0
    6c7e:	e7f5      	b.n	6c6c <xTaskCreate+0x17c>
    6c80:	4b27      	ldr	r3, [pc, #156]	; (6d20 <xTaskCreate+0x230>)
    6c82:	601c      	str	r4, [r3, #0]
    6c84:	6813      	ldr	r3, [r2, #0]
    6c86:	2b01      	cmp	r3, #1
    6c88:	d1a2      	bne.n	6bd0 <xTaskCreate+0xe0>
    6c8a:	4f33      	ldr	r7, [pc, #204]	; (6d58 <xTaskCreate+0x268>)
    6c8c:	0038      	movs	r0, r7
    6c8e:	4e36      	ldr	r6, [pc, #216]	; (6d68 <xTaskCreate+0x278>)
    6c90:	47b0      	blx	r6
    6c92:	0038      	movs	r0, r7
    6c94:	3014      	adds	r0, #20
    6c96:	47b0      	blx	r6
    6c98:	0038      	movs	r0, r7
    6c9a:	3028      	adds	r0, #40	; 0x28
    6c9c:	47b0      	blx	r6
    6c9e:	0038      	movs	r0, r7
    6ca0:	303c      	adds	r0, #60	; 0x3c
    6ca2:	47b0      	blx	r6
    6ca4:	0038      	movs	r0, r7
    6ca6:	3050      	adds	r0, #80	; 0x50
    6ca8:	47b0      	blx	r6
    6caa:	4b30      	ldr	r3, [pc, #192]	; (6d6c <xTaskCreate+0x27c>)
    6cac:	4698      	mov	r8, r3
    6cae:	0018      	movs	r0, r3
    6cb0:	47b0      	blx	r6
    6cb2:	4f2f      	ldr	r7, [pc, #188]	; (6d70 <xTaskCreate+0x280>)
    6cb4:	0038      	movs	r0, r7
    6cb6:	47b0      	blx	r6
    6cb8:	482e      	ldr	r0, [pc, #184]	; (6d74 <xTaskCreate+0x284>)
    6cba:	47b0      	blx	r6
    6cbc:	482e      	ldr	r0, [pc, #184]	; (6d78 <xTaskCreate+0x288>)
    6cbe:	47b0      	blx	r6
    6cc0:	482e      	ldr	r0, [pc, #184]	; (6d7c <xTaskCreate+0x28c>)
    6cc2:	47b0      	blx	r6
    6cc4:	4b2e      	ldr	r3, [pc, #184]	; (6d80 <xTaskCreate+0x290>)
    6cc6:	4642      	mov	r2, r8
    6cc8:	601a      	str	r2, [r3, #0]
    6cca:	4b2e      	ldr	r3, [pc, #184]	; (6d84 <xTaskCreate+0x294>)
    6ccc:	601f      	str	r7, [r3, #0]
    6cce:	e77f      	b.n	6bd0 <xTaskCreate+0xe0>
    6cd0:	0020      	movs	r0, r4
    6cd2:	4b1e      	ldr	r3, [pc, #120]	; (6d4c <xTaskCreate+0x25c>)
    6cd4:	4798      	blx	r3
    6cd6:	4b1e      	ldr	r3, [pc, #120]	; (6d50 <xTaskCreate+0x260>)
    6cd8:	881b      	ldrh	r3, [r3, #0]
    6cda:	4203      	tst	r3, r0
    6cdc:	d0a3      	beq.n	6c26 <xTaskCreate+0x136>
    6cde:	0020      	movs	r0, r4
    6ce0:	4b16      	ldr	r3, [pc, #88]	; (6d3c <xTaskCreate+0x24c>)
    6ce2:	4798      	blx	r3
    6ce4:	b2c2      	uxtb	r2, r0
    6ce6:	2103      	movs	r1, #3
    6ce8:	201b      	movs	r0, #27
    6cea:	4b27      	ldr	r3, [pc, #156]	; (6d88 <xTaskCreate+0x298>)
    6cec:	4798      	blx	r3
    6cee:	e79a      	b.n	6c26 <xTaskCreate+0x136>
    6cf0:	0020      	movs	r0, r4
    6cf2:	4b12      	ldr	r3, [pc, #72]	; (6d3c <xTaskCreate+0x24c>)
    6cf4:	4798      	blx	r3
    6cf6:	b2c0      	uxtb	r0, r0
    6cf8:	4b24      	ldr	r3, [pc, #144]	; (6d8c <xTaskCreate+0x29c>)
    6cfa:	4798      	blx	r3
    6cfc:	e79a      	b.n	6c34 <xTaskCreate+0x144>
    6cfe:	4b24      	ldr	r3, [pc, #144]	; (6d90 <xTaskCreate+0x2a0>)
    6d00:	4798      	blx	r3
    6d02:	2001      	movs	r0, #1
    6d04:	e7b2      	b.n	6c6c <xTaskCreate+0x17c>
    6d06:	46c0      	nop			; (mov r8, r8)
    6d08:	00005765 	.word	0x00005765
    6d0c:	0001427b 	.word	0x0001427b
    6d10:	00005523 	.word	0x00005523
    6d14:	000055f5 	.word	0x000055f5
    6d18:	000056a1 	.word	0x000056a1
    6d1c:	20003d6c 	.word	0x20003d6c
    6d20:	20003cfc 	.word	0x20003cfc
    6d24:	20003dcc 	.word	0x20003dcc
    6d28:	20003d7c 	.word	0x20003d7c
    6d2c:	00004c95 	.word	0x00004c95
    6d30:	00004449 	.word	0x00004449
    6d34:	200000e6 	.word	0x200000e6
    6d38:	00004469 	.word	0x00004469
    6d3c:	00004429 	.word	0x00004429
    6d40:	00004d69 	.word	0x00004d69
    6d44:	00004b49 	.word	0x00004b49
    6d48:	000044f1 	.word	0x000044f1
    6d4c:	00004439 	.word	0x00004439
    6d50:	200000e8 	.word	0x200000e8
    6d54:	20003d80 	.word	0x20003d80
    6d58:	20003d08 	.word	0x20003d08
    6d5c:	00005529 	.word	0x00005529
    6d60:	000056b9 	.word	0x000056b9
    6d64:	000057f5 	.word	0x000057f5
    6d68:	0000550d 	.word	0x0000550d
    6d6c:	20003d84 	.word	0x20003d84
    6d70:	20003d98 	.word	0x20003d98
    6d74:	20003db8 	.word	0x20003db8
    6d78:	20003de4 	.word	0x20003de4
    6d7c:	20003dd0 	.word	0x20003dd0
    6d80:	20003d00 	.word	0x20003d00
    6d84:	20003d04 	.word	0x20003d04
    6d88:	00005129 	.word	0x00005129
    6d8c:	00004fc1 	.word	0x00004fc1
    6d90:	00005691 	.word	0x00005691

00006d94 <vTaskStartScheduler>:
    6d94:	b510      	push	{r4, lr}
    6d96:	b082      	sub	sp, #8
    6d98:	4b11      	ldr	r3, [pc, #68]	; (6de0 <vTaskStartScheduler+0x4c>)
    6d9a:	9301      	str	r3, [sp, #4]
    6d9c:	2300      	movs	r3, #0
    6d9e:	9300      	str	r3, [sp, #0]
    6da0:	22fa      	movs	r2, #250	; 0xfa
    6da2:	0052      	lsls	r2, r2, #1
    6da4:	490f      	ldr	r1, [pc, #60]	; (6de4 <vTaskStartScheduler+0x50>)
    6da6:	4810      	ldr	r0, [pc, #64]	; (6de8 <vTaskStartScheduler+0x54>)
    6da8:	4c10      	ldr	r4, [pc, #64]	; (6dec <vTaskStartScheduler+0x58>)
    6daa:	47a0      	blx	r4
    6dac:	2801      	cmp	r0, #1
    6dae:	d003      	beq.n	6db8 <vTaskStartScheduler+0x24>
    6db0:	1c43      	adds	r3, r0, #1
    6db2:	d013      	beq.n	6ddc <vTaskStartScheduler+0x48>
    6db4:	b002      	add	sp, #8
    6db6:	bd10      	pop	{r4, pc}
    6db8:	4b0d      	ldr	r3, [pc, #52]	; (6df0 <vTaskStartScheduler+0x5c>)
    6dba:	4798      	blx	r3
    6dbc:	2801      	cmp	r0, #1
    6dbe:	d1f7      	bne.n	6db0 <vTaskStartScheduler+0x1c>
    6dc0:	b672      	cpsid	i
    6dc2:	2201      	movs	r2, #1
    6dc4:	4252      	negs	r2, r2
    6dc6:	4b0b      	ldr	r3, [pc, #44]	; (6df4 <vTaskStartScheduler+0x60>)
    6dc8:	601a      	str	r2, [r3, #0]
    6dca:	3202      	adds	r2, #2
    6dcc:	4b0a      	ldr	r3, [pc, #40]	; (6df8 <vTaskStartScheduler+0x64>)
    6dce:	601a      	str	r2, [r3, #0]
    6dd0:	2200      	movs	r2, #0
    6dd2:	4b0a      	ldr	r3, [pc, #40]	; (6dfc <vTaskStartScheduler+0x68>)
    6dd4:	601a      	str	r2, [r3, #0]
    6dd6:	4b0a      	ldr	r3, [pc, #40]	; (6e00 <vTaskStartScheduler+0x6c>)
    6dd8:	4798      	blx	r3
    6dda:	e7eb      	b.n	6db4 <vTaskStartScheduler+0x20>
    6ddc:	b672      	cpsid	i
    6dde:	e7fe      	b.n	6dde <vTaskStartScheduler+0x4a>
    6de0:	20003dac 	.word	0x20003dac
    6de4:	00017b50 	.word	0x00017b50
    6de8:	000069e9 	.word	0x000069e9
    6dec:	00006af1 	.word	0x00006af1
    6df0:	000079b9 	.word	0x000079b9
    6df4:	20003db0 	.word	0x20003db0
    6df8:	20003dcc 	.word	0x20003dcc
    6dfc:	20003df8 	.word	0x20003df8
    6e00:	00005619 	.word	0x00005619

00006e04 <vTaskSuspendAll>:
    6e04:	4a02      	ldr	r2, [pc, #8]	; (6e10 <vTaskSuspendAll+0xc>)
    6e06:	6813      	ldr	r3, [r2, #0]
    6e08:	3301      	adds	r3, #1
    6e0a:	6013      	str	r3, [r2, #0]
    6e0c:	4770      	bx	lr
    6e0e:	46c0      	nop			; (mov r8, r8)
    6e10:	20003d78 	.word	0x20003d78

00006e14 <xTaskGetTickCount>:
    6e14:	4b01      	ldr	r3, [pc, #4]	; (6e1c <xTaskGetTickCount+0x8>)
    6e16:	6818      	ldr	r0, [r3, #0]
    6e18:	4770      	bx	lr
    6e1a:	46c0      	nop			; (mov r8, r8)
    6e1c:	20003df8 	.word	0x20003df8

00006e20 <xTaskIncrementTick>:
    6e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e22:	b083      	sub	sp, #12
    6e24:	4b4c      	ldr	r3, [pc, #304]	; (6f58 <xTaskIncrementTick+0x138>)
    6e26:	681b      	ldr	r3, [r3, #0]
    6e28:	2b01      	cmp	r3, #1
    6e2a:	d003      	beq.n	6e34 <xTaskIncrementTick+0x14>
    6e2c:	4b4b      	ldr	r3, [pc, #300]	; (6f5c <xTaskIncrementTick+0x13c>)
    6e2e:	681b      	ldr	r3, [r3, #0]
    6e30:	2b00      	cmp	r3, #0
    6e32:	d106      	bne.n	6e42 <xTaskIncrementTick+0x22>
    6e34:	4a4a      	ldr	r2, [pc, #296]	; (6f60 <xTaskIncrementTick+0x140>)
    6e36:	6813      	ldr	r3, [r2, #0]
    6e38:	3301      	adds	r3, #1
    6e3a:	6013      	str	r3, [r2, #0]
    6e3c:	2000      	movs	r0, #0
    6e3e:	4b49      	ldr	r3, [pc, #292]	; (6f64 <xTaskIncrementTick+0x144>)
    6e40:	4798      	blx	r3
    6e42:	4b45      	ldr	r3, [pc, #276]	; (6f58 <xTaskIncrementTick+0x138>)
    6e44:	681b      	ldr	r3, [r3, #0]
    6e46:	2b00      	cmp	r3, #0
    6e48:	d010      	beq.n	6e6c <xTaskIncrementTick+0x4c>
    6e4a:	4b43      	ldr	r3, [pc, #268]	; (6f58 <xTaskIncrementTick+0x138>)
    6e4c:	681b      	ldr	r3, [r3, #0]
    6e4e:	2b00      	cmp	r3, #0
    6e50:	d175      	bne.n	6f3e <xTaskIncrementTick+0x11e>
    6e52:	4b45      	ldr	r3, [pc, #276]	; (6f68 <xTaskIncrementTick+0x148>)
    6e54:	681e      	ldr	r6, [r3, #0]
    6e56:	3601      	adds	r6, #1
    6e58:	601e      	str	r6, [r3, #0]
    6e5a:	2e00      	cmp	r6, #0
    6e5c:	d119      	bne.n	6e92 <xTaskIncrementTick+0x72>
    6e5e:	4b43      	ldr	r3, [pc, #268]	; (6f6c <xTaskIncrementTick+0x14c>)
    6e60:	681b      	ldr	r3, [r3, #0]
    6e62:	681b      	ldr	r3, [r3, #0]
    6e64:	2b00      	cmp	r3, #0
    6e66:	d008      	beq.n	6e7a <xTaskIncrementTick+0x5a>
    6e68:	b672      	cpsid	i
    6e6a:	e7fe      	b.n	6e6a <xTaskIncrementTick+0x4a>
    6e6c:	4b3e      	ldr	r3, [pc, #248]	; (6f68 <xTaskIncrementTick+0x148>)
    6e6e:	6819      	ldr	r1, [r3, #0]
    6e70:	3101      	adds	r1, #1
    6e72:	2003      	movs	r0, #3
    6e74:	4b3e      	ldr	r3, [pc, #248]	; (6f70 <xTaskIncrementTick+0x150>)
    6e76:	4798      	blx	r3
    6e78:	e7e7      	b.n	6e4a <xTaskIncrementTick+0x2a>
    6e7a:	4a3c      	ldr	r2, [pc, #240]	; (6f6c <xTaskIncrementTick+0x14c>)
    6e7c:	6811      	ldr	r1, [r2, #0]
    6e7e:	4b3d      	ldr	r3, [pc, #244]	; (6f74 <xTaskIncrementTick+0x154>)
    6e80:	6818      	ldr	r0, [r3, #0]
    6e82:	6010      	str	r0, [r2, #0]
    6e84:	6019      	str	r1, [r3, #0]
    6e86:	4a3c      	ldr	r2, [pc, #240]	; (6f78 <xTaskIncrementTick+0x158>)
    6e88:	6813      	ldr	r3, [r2, #0]
    6e8a:	3301      	adds	r3, #1
    6e8c:	6013      	str	r3, [r2, #0]
    6e8e:	4b3b      	ldr	r3, [pc, #236]	; (6f7c <xTaskIncrementTick+0x15c>)
    6e90:	4798      	blx	r3
    6e92:	4b3b      	ldr	r3, [pc, #236]	; (6f80 <xTaskIncrementTick+0x160>)
    6e94:	681b      	ldr	r3, [r3, #0]
    6e96:	2500      	movs	r5, #0
    6e98:	429e      	cmp	r6, r3
    6e9a:	d33a      	bcc.n	6f12 <xTaskIncrementTick+0xf2>
    6e9c:	2500      	movs	r5, #0
    6e9e:	4f33      	ldr	r7, [pc, #204]	; (6f6c <xTaskIncrementTick+0x14c>)
    6ea0:	683b      	ldr	r3, [r7, #0]
    6ea2:	681b      	ldr	r3, [r3, #0]
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	d030      	beq.n	6f0a <xTaskIncrementTick+0xea>
    6ea8:	4b30      	ldr	r3, [pc, #192]	; (6f6c <xTaskIncrementTick+0x14c>)
    6eaa:	681b      	ldr	r3, [r3, #0]
    6eac:	68db      	ldr	r3, [r3, #12]
    6eae:	68dc      	ldr	r4, [r3, #12]
    6eb0:	6863      	ldr	r3, [r4, #4]
    6eb2:	429e      	cmp	r6, r3
    6eb4:	d339      	bcc.n	6f2a <xTaskIncrementTick+0x10a>
    6eb6:	1d23      	adds	r3, r4, #4
    6eb8:	9301      	str	r3, [sp, #4]
    6eba:	0018      	movs	r0, r3
    6ebc:	4b31      	ldr	r3, [pc, #196]	; (6f84 <xTaskIncrementTick+0x164>)
    6ebe:	4798      	blx	r3
    6ec0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d003      	beq.n	6ece <xTaskIncrementTick+0xae>
    6ec6:	0020      	movs	r0, r4
    6ec8:	3018      	adds	r0, #24
    6eca:	4b2e      	ldr	r3, [pc, #184]	; (6f84 <xTaskIncrementTick+0x164>)
    6ecc:	4798      	blx	r3
    6ece:	0020      	movs	r0, r4
    6ed0:	4b2d      	ldr	r3, [pc, #180]	; (6f88 <xTaskIncrementTick+0x168>)
    6ed2:	4798      	blx	r3
    6ed4:	4b2d      	ldr	r3, [pc, #180]	; (6f8c <xTaskIncrementTick+0x16c>)
    6ed6:	881b      	ldrh	r3, [r3, #0]
    6ed8:	4203      	tst	r3, r0
    6eda:	d129      	bne.n	6f30 <xTaskIncrementTick+0x110>
    6edc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6ede:	4a2c      	ldr	r2, [pc, #176]	; (6f90 <xTaskIncrementTick+0x170>)
    6ee0:	6812      	ldr	r2, [r2, #0]
    6ee2:	4293      	cmp	r3, r2
    6ee4:	d901      	bls.n	6eea <xTaskIncrementTick+0xca>
    6ee6:	4a2a      	ldr	r2, [pc, #168]	; (6f90 <xTaskIncrementTick+0x170>)
    6ee8:	6013      	str	r3, [r2, #0]
    6eea:	0098      	lsls	r0, r3, #2
    6eec:	18c0      	adds	r0, r0, r3
    6eee:	0080      	lsls	r0, r0, #2
    6ef0:	4b28      	ldr	r3, [pc, #160]	; (6f94 <xTaskIncrementTick+0x174>)
    6ef2:	1818      	adds	r0, r3, r0
    6ef4:	9901      	ldr	r1, [sp, #4]
    6ef6:	4b28      	ldr	r3, [pc, #160]	; (6f98 <xTaskIncrementTick+0x178>)
    6ef8:	4798      	blx	r3
    6efa:	4b28      	ldr	r3, [pc, #160]	; (6f9c <xTaskIncrementTick+0x17c>)
    6efc:	681b      	ldr	r3, [r3, #0]
    6efe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6f02:	429a      	cmp	r2, r3
    6f04:	d3cc      	bcc.n	6ea0 <xTaskIncrementTick+0x80>
    6f06:	2501      	movs	r5, #1
    6f08:	e7ca      	b.n	6ea0 <xTaskIncrementTick+0x80>
    6f0a:	2201      	movs	r2, #1
    6f0c:	4252      	negs	r2, r2
    6f0e:	4b1c      	ldr	r3, [pc, #112]	; (6f80 <xTaskIncrementTick+0x160>)
    6f10:	601a      	str	r2, [r3, #0]
    6f12:	4b22      	ldr	r3, [pc, #136]	; (6f9c <xTaskIncrementTick+0x17c>)
    6f14:	681b      	ldr	r3, [r3, #0]
    6f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6f18:	0093      	lsls	r3, r2, #2
    6f1a:	189b      	adds	r3, r3, r2
    6f1c:	009b      	lsls	r3, r3, #2
    6f1e:	4a1d      	ldr	r2, [pc, #116]	; (6f94 <xTaskIncrementTick+0x174>)
    6f20:	589b      	ldr	r3, [r3, r2]
    6f22:	2b01      	cmp	r3, #1
    6f24:	d910      	bls.n	6f48 <xTaskIncrementTick+0x128>
    6f26:	2501      	movs	r5, #1
    6f28:	e00e      	b.n	6f48 <xTaskIncrementTick+0x128>
    6f2a:	4a15      	ldr	r2, [pc, #84]	; (6f80 <xTaskIncrementTick+0x160>)
    6f2c:	6013      	str	r3, [r2, #0]
    6f2e:	e7f0      	b.n	6f12 <xTaskIncrementTick+0xf2>
    6f30:	0020      	movs	r0, r4
    6f32:	4b1b      	ldr	r3, [pc, #108]	; (6fa0 <xTaskIncrementTick+0x180>)
    6f34:	4798      	blx	r3
    6f36:	b2c0      	uxtb	r0, r0
    6f38:	4b1a      	ldr	r3, [pc, #104]	; (6fa4 <xTaskIncrementTick+0x184>)
    6f3a:	4798      	blx	r3
    6f3c:	e7ce      	b.n	6edc <xTaskIncrementTick+0xbc>
    6f3e:	4a07      	ldr	r2, [pc, #28]	; (6f5c <xTaskIncrementTick+0x13c>)
    6f40:	6813      	ldr	r3, [r2, #0]
    6f42:	3301      	adds	r3, #1
    6f44:	6013      	str	r3, [r2, #0]
    6f46:	2500      	movs	r5, #0
    6f48:	4b17      	ldr	r3, [pc, #92]	; (6fa8 <xTaskIncrementTick+0x188>)
    6f4a:	681b      	ldr	r3, [r3, #0]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d000      	beq.n	6f52 <xTaskIncrementTick+0x132>
    6f50:	2501      	movs	r5, #1
    6f52:	0028      	movs	r0, r5
    6f54:	b003      	add	sp, #12
    6f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f58:	20003d78 	.word	0x20003d78
    6f5c:	20003d74 	.word	0x20003d74
    6f60:	20000a24 	.word	0x20000a24
    6f64:	00004df9 	.word	0x00004df9
    6f68:	20003df8 	.word	0x20003df8
    6f6c:	20003d00 	.word	0x20003d00
    6f70:	000052c5 	.word	0x000052c5
    6f74:	20003d04 	.word	0x20003d04
    6f78:	20003db4 	.word	0x20003db4
    6f7c:	000069bd 	.word	0x000069bd
    6f80:	20003db0 	.word	0x20003db0
    6f84:	0000556f 	.word	0x0000556f
    6f88:	00004439 	.word	0x00004439
    6f8c:	200000e8 	.word	0x200000e8
    6f90:	20003d80 	.word	0x20003d80
    6f94:	20003d08 	.word	0x20003d08
    6f98:	00005529 	.word	0x00005529
    6f9c:	20003cfc 	.word	0x20003cfc
    6fa0:	00004429 	.word	0x00004429
    6fa4:	00004fc1 	.word	0x00004fc1
    6fa8:	20003dfc 	.word	0x20003dfc

00006fac <xTaskResumeAll>:
    6fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fae:	4b37      	ldr	r3, [pc, #220]	; (708c <xTaskResumeAll+0xe0>)
    6fb0:	681b      	ldr	r3, [r3, #0]
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	d101      	bne.n	6fba <xTaskResumeAll+0xe>
    6fb6:	b672      	cpsid	i
    6fb8:	e7fe      	b.n	6fb8 <xTaskResumeAll+0xc>
    6fba:	4b35      	ldr	r3, [pc, #212]	; (7090 <xTaskResumeAll+0xe4>)
    6fbc:	4798      	blx	r3
    6fbe:	4b33      	ldr	r3, [pc, #204]	; (708c <xTaskResumeAll+0xe0>)
    6fc0:	681a      	ldr	r2, [r3, #0]
    6fc2:	3a01      	subs	r2, #1
    6fc4:	601a      	str	r2, [r3, #0]
    6fc6:	681b      	ldr	r3, [r3, #0]
    6fc8:	2400      	movs	r4, #0
    6fca:	2b00      	cmp	r3, #0
    6fcc:	d103      	bne.n	6fd6 <xTaskResumeAll+0x2a>
    6fce:	4b31      	ldr	r3, [pc, #196]	; (7094 <xTaskResumeAll+0xe8>)
    6fd0:	681b      	ldr	r3, [r3, #0]
    6fd2:	2b00      	cmp	r3, #0
    6fd4:	d136      	bne.n	7044 <xTaskResumeAll+0x98>
    6fd6:	4b30      	ldr	r3, [pc, #192]	; (7098 <xTaskResumeAll+0xec>)
    6fd8:	4798      	blx	r3
    6fda:	0020      	movs	r0, r4
    6fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6fe0:	4a2e      	ldr	r2, [pc, #184]	; (709c <xTaskResumeAll+0xf0>)
    6fe2:	6812      	ldr	r2, [r2, #0]
    6fe4:	4293      	cmp	r3, r2
    6fe6:	d901      	bls.n	6fec <xTaskResumeAll+0x40>
    6fe8:	4a2c      	ldr	r2, [pc, #176]	; (709c <xTaskResumeAll+0xf0>)
    6fea:	6013      	str	r3, [r2, #0]
    6fec:	0098      	lsls	r0, r3, #2
    6fee:	18c0      	adds	r0, r0, r3
    6ff0:	0080      	lsls	r0, r0, #2
    6ff2:	4b2b      	ldr	r3, [pc, #172]	; (70a0 <xTaskResumeAll+0xf4>)
    6ff4:	1818      	adds	r0, r3, r0
    6ff6:	0031      	movs	r1, r6
    6ff8:	4b2a      	ldr	r3, [pc, #168]	; (70a4 <xTaskResumeAll+0xf8>)
    6ffa:	4798      	blx	r3
    6ffc:	4b2a      	ldr	r3, [pc, #168]	; (70a8 <xTaskResumeAll+0xfc>)
    6ffe:	681b      	ldr	r3, [r3, #0]
    7000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7002:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7004:	429a      	cmp	r2, r3
    7006:	d302      	bcc.n	700e <xTaskResumeAll+0x62>
    7008:	2201      	movs	r2, #1
    700a:	4b28      	ldr	r3, [pc, #160]	; (70ac <xTaskResumeAll+0x100>)
    700c:	601a      	str	r2, [r3, #0]
    700e:	682b      	ldr	r3, [r5, #0]
    7010:	2b00      	cmp	r3, #0
    7012:	d01a      	beq.n	704a <xTaskResumeAll+0x9e>
    7014:	68fb      	ldr	r3, [r7, #12]
    7016:	68dc      	ldr	r4, [r3, #12]
    7018:	0020      	movs	r0, r4
    701a:	3018      	adds	r0, #24
    701c:	4b24      	ldr	r3, [pc, #144]	; (70b0 <xTaskResumeAll+0x104>)
    701e:	4798      	blx	r3
    7020:	1d26      	adds	r6, r4, #4
    7022:	0030      	movs	r0, r6
    7024:	4b22      	ldr	r3, [pc, #136]	; (70b0 <xTaskResumeAll+0x104>)
    7026:	4798      	blx	r3
    7028:	0020      	movs	r0, r4
    702a:	4b22      	ldr	r3, [pc, #136]	; (70b4 <xTaskResumeAll+0x108>)
    702c:	4798      	blx	r3
    702e:	4b22      	ldr	r3, [pc, #136]	; (70b8 <xTaskResumeAll+0x10c>)
    7030:	881b      	ldrh	r3, [r3, #0]
    7032:	4203      	tst	r3, r0
    7034:	d0d3      	beq.n	6fde <xTaskResumeAll+0x32>
    7036:	0020      	movs	r0, r4
    7038:	4b20      	ldr	r3, [pc, #128]	; (70bc <xTaskResumeAll+0x110>)
    703a:	4798      	blx	r3
    703c:	b2c0      	uxtb	r0, r0
    703e:	4b20      	ldr	r3, [pc, #128]	; (70c0 <xTaskResumeAll+0x114>)
    7040:	4798      	blx	r3
    7042:	e7cc      	b.n	6fde <xTaskResumeAll+0x32>
    7044:	4d1f      	ldr	r5, [pc, #124]	; (70c4 <xTaskResumeAll+0x118>)
    7046:	002f      	movs	r7, r5
    7048:	e7e1      	b.n	700e <xTaskResumeAll+0x62>
    704a:	2c00      	cmp	r4, #0
    704c:	d001      	beq.n	7052 <xTaskResumeAll+0xa6>
    704e:	4b1e      	ldr	r3, [pc, #120]	; (70c8 <xTaskResumeAll+0x11c>)
    7050:	4798      	blx	r3
    7052:	4b1e      	ldr	r3, [pc, #120]	; (70cc <xTaskResumeAll+0x120>)
    7054:	681c      	ldr	r4, [r3, #0]
    7056:	2c00      	cmp	r4, #0
    7058:	d00e      	beq.n	7078 <xTaskResumeAll+0xcc>
    705a:	4f1d      	ldr	r7, [pc, #116]	; (70d0 <xTaskResumeAll+0x124>)
    705c:	4e13      	ldr	r6, [pc, #76]	; (70ac <xTaskResumeAll+0x100>)
    705e:	2501      	movs	r5, #1
    7060:	e002      	b.n	7068 <xTaskResumeAll+0xbc>
    7062:	3c01      	subs	r4, #1
    7064:	2c00      	cmp	r4, #0
    7066:	d004      	beq.n	7072 <xTaskResumeAll+0xc6>
    7068:	47b8      	blx	r7
    706a:	2800      	cmp	r0, #0
    706c:	d0f9      	beq.n	7062 <xTaskResumeAll+0xb6>
    706e:	6035      	str	r5, [r6, #0]
    7070:	e7f7      	b.n	7062 <xTaskResumeAll+0xb6>
    7072:	2200      	movs	r2, #0
    7074:	4b15      	ldr	r3, [pc, #84]	; (70cc <xTaskResumeAll+0x120>)
    7076:	601a      	str	r2, [r3, #0]
    7078:	4b0c      	ldr	r3, [pc, #48]	; (70ac <xTaskResumeAll+0x100>)
    707a:	681b      	ldr	r3, [r3, #0]
    707c:	2400      	movs	r4, #0
    707e:	2b00      	cmp	r3, #0
    7080:	d0a9      	beq.n	6fd6 <xTaskResumeAll+0x2a>
    7082:	4b14      	ldr	r3, [pc, #80]	; (70d4 <xTaskResumeAll+0x128>)
    7084:	4798      	blx	r3
    7086:	3401      	adds	r4, #1
    7088:	e7a5      	b.n	6fd6 <xTaskResumeAll+0x2a>
    708a:	46c0      	nop			; (mov r8, r8)
    708c:	20003d78 	.word	0x20003d78
    7090:	000056a1 	.word	0x000056a1
    7094:	20003d6c 	.word	0x20003d6c
    7098:	000056b9 	.word	0x000056b9
    709c:	20003d80 	.word	0x20003d80
    70a0:	20003d08 	.word	0x20003d08
    70a4:	00005529 	.word	0x00005529
    70a8:	20003cfc 	.word	0x20003cfc
    70ac:	20003dfc 	.word	0x20003dfc
    70b0:	0000556f 	.word	0x0000556f
    70b4:	00004439 	.word	0x00004439
    70b8:	200000e8 	.word	0x200000e8
    70bc:	00004429 	.word	0x00004429
    70c0:	00004fc1 	.word	0x00004fc1
    70c4:	20003db8 	.word	0x20003db8
    70c8:	000069bd 	.word	0x000069bd
    70cc:	20003d74 	.word	0x20003d74
    70d0:	00006e21 	.word	0x00006e21
    70d4:	00005691 	.word	0x00005691

000070d8 <vTaskDelay>:
    70d8:	b510      	push	{r4, lr}
    70da:	1e04      	subs	r4, r0, #0
    70dc:	d031      	beq.n	7142 <vTaskDelay+0x6a>
    70de:	4b1a      	ldr	r3, [pc, #104]	; (7148 <vTaskDelay+0x70>)
    70e0:	681b      	ldr	r3, [r3, #0]
    70e2:	2b00      	cmp	r3, #0
    70e4:	d001      	beq.n	70ea <vTaskDelay+0x12>
    70e6:	b672      	cpsid	i
    70e8:	e7fe      	b.n	70e8 <vTaskDelay+0x10>
    70ea:	4b18      	ldr	r3, [pc, #96]	; (714c <vTaskDelay+0x74>)
    70ec:	4798      	blx	r3
    70ee:	4b18      	ldr	r3, [pc, #96]	; (7150 <vTaskDelay+0x78>)
    70f0:	6818      	ldr	r0, [r3, #0]
    70f2:	4b18      	ldr	r3, [pc, #96]	; (7154 <vTaskDelay+0x7c>)
    70f4:	4798      	blx	r3
    70f6:	4b18      	ldr	r3, [pc, #96]	; (7158 <vTaskDelay+0x80>)
    70f8:	881b      	ldrh	r3, [r3, #0]
    70fa:	4203      	tst	r3, r0
    70fc:	d00a      	beq.n	7114 <vTaskDelay+0x3c>
    70fe:	0021      	movs	r1, r4
    7100:	2089      	movs	r0, #137	; 0x89
    7102:	4b16      	ldr	r3, [pc, #88]	; (715c <vTaskDelay+0x84>)
    7104:	4798      	blx	r3
    7106:	4b12      	ldr	r3, [pc, #72]	; (7150 <vTaskDelay+0x78>)
    7108:	6818      	ldr	r0, [r3, #0]
    710a:	4b15      	ldr	r3, [pc, #84]	; (7160 <vTaskDelay+0x88>)
    710c:	4798      	blx	r3
    710e:	b2c0      	uxtb	r0, r0
    7110:	4b14      	ldr	r3, [pc, #80]	; (7164 <vTaskDelay+0x8c>)
    7112:	4798      	blx	r3
    7114:	4b14      	ldr	r3, [pc, #80]	; (7168 <vTaskDelay+0x90>)
    7116:	4798      	blx	r3
    7118:	4b0e      	ldr	r3, [pc, #56]	; (7154 <vTaskDelay+0x7c>)
    711a:	4798      	blx	r3
    711c:	4b0e      	ldr	r3, [pc, #56]	; (7158 <vTaskDelay+0x80>)
    711e:	881b      	ldrh	r3, [r3, #0]
    7120:	4203      	tst	r3, r0
    7122:	d006      	beq.n	7132 <vTaskDelay+0x5a>
    7124:	4b10      	ldr	r3, [pc, #64]	; (7168 <vTaskDelay+0x90>)
    7126:	4798      	blx	r3
    7128:	4b0d      	ldr	r3, [pc, #52]	; (7160 <vTaskDelay+0x88>)
    712a:	4798      	blx	r3
    712c:	b2c0      	uxtb	r0, r0
    712e:	4b0d      	ldr	r3, [pc, #52]	; (7164 <vTaskDelay+0x8c>)
    7130:	4798      	blx	r3
    7132:	2100      	movs	r1, #0
    7134:	0020      	movs	r0, r4
    7136:	4b0d      	ldr	r3, [pc, #52]	; (716c <vTaskDelay+0x94>)
    7138:	4798      	blx	r3
    713a:	4b0d      	ldr	r3, [pc, #52]	; (7170 <vTaskDelay+0x98>)
    713c:	4798      	blx	r3
    713e:	2800      	cmp	r0, #0
    7140:	d101      	bne.n	7146 <vTaskDelay+0x6e>
    7142:	4b0c      	ldr	r3, [pc, #48]	; (7174 <vTaskDelay+0x9c>)
    7144:	4798      	blx	r3
    7146:	bd10      	pop	{r4, pc}
    7148:	20003d78 	.word	0x20003d78
    714c:	00006e05 	.word	0x00006e05
    7150:	20003cfc 	.word	0x20003cfc
    7154:	00004439 	.word	0x00004439
    7158:	200000e8 	.word	0x200000e8
    715c:	000052c5 	.word	0x000052c5
    7160:	00004429 	.word	0x00004429
    7164:	00004c55 	.word	0x00004c55
    7168:	000044f1 	.word	0x000044f1
    716c:	00006a69 	.word	0x00006a69
    7170:	00006fad 	.word	0x00006fad
    7174:	00005691 	.word	0x00005691

00007178 <vTaskSwitchContext>:
    7178:	b510      	push	{r4, lr}
    717a:	4b33      	ldr	r3, [pc, #204]	; (7248 <vTaskSwitchContext+0xd0>)
    717c:	681b      	ldr	r3, [r3, #0]
    717e:	2b00      	cmp	r3, #0
    7180:	d125      	bne.n	71ce <vTaskSwitchContext+0x56>
    7182:	2200      	movs	r2, #0
    7184:	4b31      	ldr	r3, [pc, #196]	; (724c <vTaskSwitchContext+0xd4>)
    7186:	601a      	str	r2, [r3, #0]
    7188:	4b31      	ldr	r3, [pc, #196]	; (7250 <vTaskSwitchContext+0xd8>)
    718a:	681a      	ldr	r2, [r3, #0]
    718c:	681b      	ldr	r3, [r3, #0]
    718e:	6812      	ldr	r2, [r2, #0]
    7190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7192:	429a      	cmp	r2, r3
    7194:	d805      	bhi.n	71a2 <vTaskSwitchContext+0x2a>
    7196:	4b2e      	ldr	r3, [pc, #184]	; (7250 <vTaskSwitchContext+0xd8>)
    7198:	6818      	ldr	r0, [r3, #0]
    719a:	6819      	ldr	r1, [r3, #0]
    719c:	3134      	adds	r1, #52	; 0x34
    719e:	4b2d      	ldr	r3, [pc, #180]	; (7254 <vTaskSwitchContext+0xdc>)
    71a0:	4798      	blx	r3
    71a2:	4b2d      	ldr	r3, [pc, #180]	; (7258 <vTaskSwitchContext+0xe0>)
    71a4:	681b      	ldr	r3, [r3, #0]
    71a6:	009a      	lsls	r2, r3, #2
    71a8:	18d2      	adds	r2, r2, r3
    71aa:	0092      	lsls	r2, r2, #2
    71ac:	492b      	ldr	r1, [pc, #172]	; (725c <vTaskSwitchContext+0xe4>)
    71ae:	5852      	ldr	r2, [r2, r1]
    71b0:	2a00      	cmp	r2, #0
    71b2:	d110      	bne.n	71d6 <vTaskSwitchContext+0x5e>
    71b4:	2b00      	cmp	r3, #0
    71b6:	d008      	beq.n	71ca <vTaskSwitchContext+0x52>
    71b8:	3b01      	subs	r3, #1
    71ba:	009a      	lsls	r2, r3, #2
    71bc:	18d2      	adds	r2, r2, r3
    71be:	0092      	lsls	r2, r2, #2
    71c0:	5852      	ldr	r2, [r2, r1]
    71c2:	2a00      	cmp	r2, #0
    71c4:	d107      	bne.n	71d6 <vTaskSwitchContext+0x5e>
    71c6:	2b00      	cmp	r3, #0
    71c8:	d1f6      	bne.n	71b8 <vTaskSwitchContext+0x40>
    71ca:	b672      	cpsid	i
    71cc:	e7fe      	b.n	71cc <vTaskSwitchContext+0x54>
    71ce:	2201      	movs	r2, #1
    71d0:	4b1e      	ldr	r3, [pc, #120]	; (724c <vTaskSwitchContext+0xd4>)
    71d2:	601a      	str	r2, [r3, #0]
    71d4:	bd10      	pop	{r4, pc}
    71d6:	4821      	ldr	r0, [pc, #132]	; (725c <vTaskSwitchContext+0xe4>)
    71d8:	009a      	lsls	r2, r3, #2
    71da:	18d1      	adds	r1, r2, r3
    71dc:	0089      	lsls	r1, r1, #2
    71de:	1841      	adds	r1, r0, r1
    71e0:	684c      	ldr	r4, [r1, #4]
    71e2:	6864      	ldr	r4, [r4, #4]
    71e4:	604c      	str	r4, [r1, #4]
    71e6:	18d2      	adds	r2, r2, r3
    71e8:	0092      	lsls	r2, r2, #2
    71ea:	3208      	adds	r2, #8
    71ec:	1882      	adds	r2, r0, r2
    71ee:	4294      	cmp	r4, r2
    71f0:	d019      	beq.n	7226 <vTaskSwitchContext+0xae>
    71f2:	009a      	lsls	r2, r3, #2
    71f4:	18d2      	adds	r2, r2, r3
    71f6:	0092      	lsls	r2, r2, #2
    71f8:	4918      	ldr	r1, [pc, #96]	; (725c <vTaskSwitchContext+0xe4>)
    71fa:	188a      	adds	r2, r1, r2
    71fc:	6852      	ldr	r2, [r2, #4]
    71fe:	68d1      	ldr	r1, [r2, #12]
    7200:	4a13      	ldr	r2, [pc, #76]	; (7250 <vTaskSwitchContext+0xd8>)
    7202:	6011      	str	r1, [r2, #0]
    7204:	4a14      	ldr	r2, [pc, #80]	; (7258 <vTaskSwitchContext+0xe0>)
    7206:	6013      	str	r3, [r2, #0]
    7208:	2201      	movs	r2, #1
    720a:	4b15      	ldr	r3, [pc, #84]	; (7260 <vTaskSwitchContext+0xe8>)
    720c:	601a      	str	r2, [r3, #0]
    720e:	4b15      	ldr	r3, [pc, #84]	; (7264 <vTaskSwitchContext+0xec>)
    7210:	4798      	blx	r3
    7212:	4b15      	ldr	r3, [pc, #84]	; (7268 <vTaskSwitchContext+0xf0>)
    7214:	4798      	blx	r3
    7216:	4b15      	ldr	r3, [pc, #84]	; (726c <vTaskSwitchContext+0xf4>)
    7218:	881b      	ldrh	r3, [r3, #0]
    721a:	4203      	tst	r3, r0
    721c:	d10b      	bne.n	7236 <vTaskSwitchContext+0xbe>
    721e:	2202      	movs	r2, #2
    7220:	4b0f      	ldr	r3, [pc, #60]	; (7260 <vTaskSwitchContext+0xe8>)
    7222:	601a      	str	r2, [r3, #0]
    7224:	e7d6      	b.n	71d4 <vTaskSwitchContext+0x5c>
    7226:	6860      	ldr	r0, [r4, #4]
    7228:	009a      	lsls	r2, r3, #2
    722a:	18d2      	adds	r2, r2, r3
    722c:	0092      	lsls	r2, r2, #2
    722e:	490b      	ldr	r1, [pc, #44]	; (725c <vTaskSwitchContext+0xe4>)
    7230:	188a      	adds	r2, r1, r2
    7232:	6050      	str	r0, [r2, #4]
    7234:	e7dd      	b.n	71f2 <vTaskSwitchContext+0x7a>
    7236:	4b0b      	ldr	r3, [pc, #44]	; (7264 <vTaskSwitchContext+0xec>)
    7238:	4798      	blx	r3
    723a:	4b0d      	ldr	r3, [pc, #52]	; (7270 <vTaskSwitchContext+0xf8>)
    723c:	4798      	blx	r3
    723e:	b2c0      	uxtb	r0, r0
    7240:	4b0c      	ldr	r3, [pc, #48]	; (7274 <vTaskSwitchContext+0xfc>)
    7242:	4798      	blx	r3
    7244:	e7eb      	b.n	721e <vTaskSwitchContext+0xa6>
    7246:	46c0      	nop			; (mov r8, r8)
    7248:	20003d78 	.word	0x20003d78
    724c:	20003dfc 	.word	0x20003dfc
    7250:	20003cfc 	.word	0x20003cfc
    7254:	00011d61 	.word	0x00011d61
    7258:	20003d80 	.word	0x20003d80
    725c:	20003d08 	.word	0x20003d08
    7260:	20000a20 	.word	0x20000a20
    7264:	000044f1 	.word	0x000044f1
    7268:	00004439 	.word	0x00004439
    726c:	200000e8 	.word	0x200000e8
    7270:	00004429 	.word	0x00004429
    7274:	0000536d 	.word	0x0000536d

00007278 <vTaskSuspend>:
    7278:	b570      	push	{r4, r5, r6, lr}
    727a:	0005      	movs	r5, r0
    727c:	4b33      	ldr	r3, [pc, #204]	; (734c <vTaskSuspend+0xd4>)
    727e:	4798      	blx	r3
    7280:	1e2c      	subs	r4, r5, #0
    7282:	d02b      	beq.n	72dc <vTaskSuspend+0x64>
    7284:	4b32      	ldr	r3, [pc, #200]	; (7350 <vTaskSuspend+0xd8>)
    7286:	4798      	blx	r3
    7288:	4b32      	ldr	r3, [pc, #200]	; (7354 <vTaskSuspend+0xdc>)
    728a:	4798      	blx	r3
    728c:	4b32      	ldr	r3, [pc, #200]	; (7358 <vTaskSuspend+0xe0>)
    728e:	881b      	ldrh	r3, [r3, #0]
    7290:	4203      	tst	r3, r0
    7292:	d126      	bne.n	72e2 <vTaskSuspend+0x6a>
    7294:	0020      	movs	r0, r4
    7296:	4b31      	ldr	r3, [pc, #196]	; (735c <vTaskSuspend+0xe4>)
    7298:	4798      	blx	r3
    729a:	b2c0      	uxtb	r0, r0
    729c:	4b30      	ldr	r3, [pc, #192]	; (7360 <vTaskSuspend+0xe8>)
    729e:	4798      	blx	r3
    72a0:	1d25      	adds	r5, r4, #4
    72a2:	0028      	movs	r0, r5
    72a4:	4b2f      	ldr	r3, [pc, #188]	; (7364 <vTaskSuspend+0xec>)
    72a6:	4798      	blx	r3
    72a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    72aa:	2b00      	cmp	r3, #0
    72ac:	d003      	beq.n	72b6 <vTaskSuspend+0x3e>
    72ae:	0020      	movs	r0, r4
    72b0:	3018      	adds	r0, #24
    72b2:	4b2c      	ldr	r3, [pc, #176]	; (7364 <vTaskSuspend+0xec>)
    72b4:	4798      	blx	r3
    72b6:	0029      	movs	r1, r5
    72b8:	482b      	ldr	r0, [pc, #172]	; (7368 <vTaskSuspend+0xf0>)
    72ba:	4b2c      	ldr	r3, [pc, #176]	; (736c <vTaskSuspend+0xf4>)
    72bc:	4798      	blx	r3
    72be:	2350      	movs	r3, #80	; 0x50
    72c0:	5ce3      	ldrb	r3, [r4, r3]
    72c2:	2b01      	cmp	r3, #1
    72c4:	d01d      	beq.n	7302 <vTaskSuspend+0x8a>
    72c6:	4b2a      	ldr	r3, [pc, #168]	; (7370 <vTaskSuspend+0xf8>)
    72c8:	4798      	blx	r3
    72ca:	4b2a      	ldr	r3, [pc, #168]	; (7374 <vTaskSuspend+0xfc>)
    72cc:	681b      	ldr	r3, [r3, #0]
    72ce:	2b00      	cmp	r3, #0
    72d0:	d11b      	bne.n	730a <vTaskSuspend+0x92>
    72d2:	4b29      	ldr	r3, [pc, #164]	; (7378 <vTaskSuspend+0x100>)
    72d4:	681b      	ldr	r3, [r3, #0]
    72d6:	429c      	cmp	r4, r3
    72d8:	d01e      	beq.n	7318 <vTaskSuspend+0xa0>
    72da:	bd70      	pop	{r4, r5, r6, pc}
    72dc:	4b26      	ldr	r3, [pc, #152]	; (7378 <vTaskSuspend+0x100>)
    72de:	681c      	ldr	r4, [r3, #0]
    72e0:	e7d0      	b.n	7284 <vTaskSuspend+0xc>
    72e2:	0020      	movs	r0, r4
    72e4:	4b1b      	ldr	r3, [pc, #108]	; (7354 <vTaskSuspend+0xdc>)
    72e6:	4798      	blx	r3
    72e8:	4b1b      	ldr	r3, [pc, #108]	; (7358 <vTaskSuspend+0xe0>)
    72ea:	881b      	ldrh	r3, [r3, #0]
    72ec:	4203      	tst	r3, r0
    72ee:	d0d1      	beq.n	7294 <vTaskSuspend+0x1c>
    72f0:	0020      	movs	r0, r4
    72f2:	4b1a      	ldr	r3, [pc, #104]	; (735c <vTaskSuspend+0xe4>)
    72f4:	4798      	blx	r3
    72f6:	b2c2      	uxtb	r2, r0
    72f8:	2103      	movs	r1, #3
    72fa:	208a      	movs	r0, #138	; 0x8a
    72fc:	4b1f      	ldr	r3, [pc, #124]	; (737c <vTaskSuspend+0x104>)
    72fe:	4798      	blx	r3
    7300:	e7c8      	b.n	7294 <vTaskSuspend+0x1c>
    7302:	2200      	movs	r2, #0
    7304:	334f      	adds	r3, #79	; 0x4f
    7306:	54e2      	strb	r2, [r4, r3]
    7308:	e7dd      	b.n	72c6 <vTaskSuspend+0x4e>
    730a:	4b10      	ldr	r3, [pc, #64]	; (734c <vTaskSuspend+0xd4>)
    730c:	4798      	blx	r3
    730e:	4b1c      	ldr	r3, [pc, #112]	; (7380 <vTaskSuspend+0x108>)
    7310:	4798      	blx	r3
    7312:	4b17      	ldr	r3, [pc, #92]	; (7370 <vTaskSuspend+0xf8>)
    7314:	4798      	blx	r3
    7316:	e7dc      	b.n	72d2 <vTaskSuspend+0x5a>
    7318:	4b16      	ldr	r3, [pc, #88]	; (7374 <vTaskSuspend+0xfc>)
    731a:	681b      	ldr	r3, [r3, #0]
    731c:	2b00      	cmp	r3, #0
    731e:	d008      	beq.n	7332 <vTaskSuspend+0xba>
    7320:	4b18      	ldr	r3, [pc, #96]	; (7384 <vTaskSuspend+0x10c>)
    7322:	681b      	ldr	r3, [r3, #0]
    7324:	2b00      	cmp	r3, #0
    7326:	d001      	beq.n	732c <vTaskSuspend+0xb4>
    7328:	b672      	cpsid	i
    732a:	e7fe      	b.n	732a <vTaskSuspend+0xb2>
    732c:	4b16      	ldr	r3, [pc, #88]	; (7388 <vTaskSuspend+0x110>)
    732e:	4798      	blx	r3
    7330:	e7d3      	b.n	72da <vTaskSuspend+0x62>
    7332:	4b0d      	ldr	r3, [pc, #52]	; (7368 <vTaskSuspend+0xf0>)
    7334:	681a      	ldr	r2, [r3, #0]
    7336:	4b15      	ldr	r3, [pc, #84]	; (738c <vTaskSuspend+0x114>)
    7338:	681b      	ldr	r3, [r3, #0]
    733a:	429a      	cmp	r2, r3
    733c:	d002      	beq.n	7344 <vTaskSuspend+0xcc>
    733e:	4b14      	ldr	r3, [pc, #80]	; (7390 <vTaskSuspend+0x118>)
    7340:	4798      	blx	r3
    7342:	e7ca      	b.n	72da <vTaskSuspend+0x62>
    7344:	2200      	movs	r2, #0
    7346:	4b0c      	ldr	r3, [pc, #48]	; (7378 <vTaskSuspend+0x100>)
    7348:	601a      	str	r2, [r3, #0]
    734a:	e7c6      	b.n	72da <vTaskSuspend+0x62>
    734c:	000056a1 	.word	0x000056a1
    7350:	000044f1 	.word	0x000044f1
    7354:	00004439 	.word	0x00004439
    7358:	200000e8 	.word	0x200000e8
    735c:	00004429 	.word	0x00004429
    7360:	00004c55 	.word	0x00004c55
    7364:	0000556f 	.word	0x0000556f
    7368:	20003dd0 	.word	0x20003dd0
    736c:	00005529 	.word	0x00005529
    7370:	000056b9 	.word	0x000056b9
    7374:	20003dcc 	.word	0x20003dcc
    7378:	20003cfc 	.word	0x20003cfc
    737c:	00005129 	.word	0x00005129
    7380:	000069bd 	.word	0x000069bd
    7384:	20003d78 	.word	0x20003d78
    7388:	00005691 	.word	0x00005691
    738c:	20003d6c 	.word	0x20003d6c
    7390:	00007179 	.word	0x00007179

00007394 <vTaskPlaceOnEventList>:
    7394:	b510      	push	{r4, lr}
    7396:	000c      	movs	r4, r1
    7398:	2800      	cmp	r0, #0
    739a:	d101      	bne.n	73a0 <vTaskPlaceOnEventList+0xc>
    739c:	b672      	cpsid	i
    739e:	e7fe      	b.n	739e <vTaskPlaceOnEventList+0xa>
    73a0:	4b04      	ldr	r3, [pc, #16]	; (73b4 <vTaskPlaceOnEventList+0x20>)
    73a2:	6819      	ldr	r1, [r3, #0]
    73a4:	3118      	adds	r1, #24
    73a6:	4b04      	ldr	r3, [pc, #16]	; (73b8 <vTaskPlaceOnEventList+0x24>)
    73a8:	4798      	blx	r3
    73aa:	2101      	movs	r1, #1
    73ac:	0020      	movs	r0, r4
    73ae:	4b03      	ldr	r3, [pc, #12]	; (73bc <vTaskPlaceOnEventList+0x28>)
    73b0:	4798      	blx	r3
    73b2:	bd10      	pop	{r4, pc}
    73b4:	20003cfc 	.word	0x20003cfc
    73b8:	00005541 	.word	0x00005541
    73bc:	00006a69 	.word	0x00006a69

000073c0 <vTaskPlaceOnEventListRestricted>:
    73c0:	b570      	push	{r4, r5, r6, lr}
    73c2:	000c      	movs	r4, r1
    73c4:	0015      	movs	r5, r2
    73c6:	2800      	cmp	r0, #0
    73c8:	d031      	beq.n	742e <vTaskPlaceOnEventListRestricted+0x6e>
    73ca:	4b1a      	ldr	r3, [pc, #104]	; (7434 <vTaskPlaceOnEventListRestricted+0x74>)
    73cc:	6819      	ldr	r1, [r3, #0]
    73ce:	3118      	adds	r1, #24
    73d0:	4b19      	ldr	r3, [pc, #100]	; (7438 <vTaskPlaceOnEventListRestricted+0x78>)
    73d2:	4798      	blx	r3
    73d4:	2d00      	cmp	r5, #0
    73d6:	d001      	beq.n	73dc <vTaskPlaceOnEventListRestricted+0x1c>
    73d8:	2401      	movs	r4, #1
    73da:	4264      	negs	r4, r4
    73dc:	4b15      	ldr	r3, [pc, #84]	; (7434 <vTaskPlaceOnEventListRestricted+0x74>)
    73de:	6818      	ldr	r0, [r3, #0]
    73e0:	4b16      	ldr	r3, [pc, #88]	; (743c <vTaskPlaceOnEventListRestricted+0x7c>)
    73e2:	4798      	blx	r3
    73e4:	4b16      	ldr	r3, [pc, #88]	; (7440 <vTaskPlaceOnEventListRestricted+0x80>)
    73e6:	881b      	ldrh	r3, [r3, #0]
    73e8:	4203      	tst	r3, r0
    73ea:	d00c      	beq.n	7406 <vTaskPlaceOnEventListRestricted+0x46>
    73ec:	4b15      	ldr	r3, [pc, #84]	; (7444 <vTaskPlaceOnEventListRestricted+0x84>)
    73ee:	6819      	ldr	r1, [r3, #0]
    73f0:	1861      	adds	r1, r4, r1
    73f2:	2088      	movs	r0, #136	; 0x88
    73f4:	4b14      	ldr	r3, [pc, #80]	; (7448 <vTaskPlaceOnEventListRestricted+0x88>)
    73f6:	4798      	blx	r3
    73f8:	4b0e      	ldr	r3, [pc, #56]	; (7434 <vTaskPlaceOnEventListRestricted+0x74>)
    73fa:	6818      	ldr	r0, [r3, #0]
    73fc:	4b13      	ldr	r3, [pc, #76]	; (744c <vTaskPlaceOnEventListRestricted+0x8c>)
    73fe:	4798      	blx	r3
    7400:	b2c0      	uxtb	r0, r0
    7402:	4b13      	ldr	r3, [pc, #76]	; (7450 <vTaskPlaceOnEventListRestricted+0x90>)
    7404:	4798      	blx	r3
    7406:	4b13      	ldr	r3, [pc, #76]	; (7454 <vTaskPlaceOnEventListRestricted+0x94>)
    7408:	4798      	blx	r3
    740a:	4b0c      	ldr	r3, [pc, #48]	; (743c <vTaskPlaceOnEventListRestricted+0x7c>)
    740c:	4798      	blx	r3
    740e:	4b0c      	ldr	r3, [pc, #48]	; (7440 <vTaskPlaceOnEventListRestricted+0x80>)
    7410:	881b      	ldrh	r3, [r3, #0]
    7412:	4203      	tst	r3, r0
    7414:	d006      	beq.n	7424 <vTaskPlaceOnEventListRestricted+0x64>
    7416:	4b0f      	ldr	r3, [pc, #60]	; (7454 <vTaskPlaceOnEventListRestricted+0x94>)
    7418:	4798      	blx	r3
    741a:	4b0c      	ldr	r3, [pc, #48]	; (744c <vTaskPlaceOnEventListRestricted+0x8c>)
    741c:	4798      	blx	r3
    741e:	b2c0      	uxtb	r0, r0
    7420:	4b0b      	ldr	r3, [pc, #44]	; (7450 <vTaskPlaceOnEventListRestricted+0x90>)
    7422:	4798      	blx	r3
    7424:	0029      	movs	r1, r5
    7426:	0020      	movs	r0, r4
    7428:	4b0b      	ldr	r3, [pc, #44]	; (7458 <vTaskPlaceOnEventListRestricted+0x98>)
    742a:	4798      	blx	r3
    742c:	bd70      	pop	{r4, r5, r6, pc}
    742e:	b672      	cpsid	i
    7430:	e7fe      	b.n	7430 <vTaskPlaceOnEventListRestricted+0x70>
    7432:	46c0      	nop			; (mov r8, r8)
    7434:	20003cfc 	.word	0x20003cfc
    7438:	00005529 	.word	0x00005529
    743c:	00004439 	.word	0x00004439
    7440:	200000e8 	.word	0x200000e8
    7444:	20003df8 	.word	0x20003df8
    7448:	000052c5 	.word	0x000052c5
    744c:	00004429 	.word	0x00004429
    7450:	00004c55 	.word	0x00004c55
    7454:	000044f1 	.word	0x000044f1
    7458:	00006a69 	.word	0x00006a69

0000745c <xTaskRemoveFromEventList>:
    745c:	b570      	push	{r4, r5, r6, lr}
    745e:	68c3      	ldr	r3, [r0, #12]
    7460:	68dc      	ldr	r4, [r3, #12]
    7462:	2c00      	cmp	r4, #0
    7464:	d02e      	beq.n	74c4 <xTaskRemoveFromEventList+0x68>
    7466:	0025      	movs	r5, r4
    7468:	3518      	adds	r5, #24
    746a:	0028      	movs	r0, r5
    746c:	4b1c      	ldr	r3, [pc, #112]	; (74e0 <xTaskRemoveFromEventList+0x84>)
    746e:	4798      	blx	r3
    7470:	4b1c      	ldr	r3, [pc, #112]	; (74e4 <xTaskRemoveFromEventList+0x88>)
    7472:	681b      	ldr	r3, [r3, #0]
    7474:	2b00      	cmp	r3, #0
    7476:	d12e      	bne.n	74d6 <xTaskRemoveFromEventList+0x7a>
    7478:	1d25      	adds	r5, r4, #4
    747a:	0028      	movs	r0, r5
    747c:	4b18      	ldr	r3, [pc, #96]	; (74e0 <xTaskRemoveFromEventList+0x84>)
    747e:	4798      	blx	r3
    7480:	0020      	movs	r0, r4
    7482:	4b19      	ldr	r3, [pc, #100]	; (74e8 <xTaskRemoveFromEventList+0x8c>)
    7484:	4798      	blx	r3
    7486:	4b19      	ldr	r3, [pc, #100]	; (74ec <xTaskRemoveFromEventList+0x90>)
    7488:	881b      	ldrh	r3, [r3, #0]
    748a:	4203      	tst	r3, r0
    748c:	d11c      	bne.n	74c8 <xTaskRemoveFromEventList+0x6c>
    748e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7490:	4a17      	ldr	r2, [pc, #92]	; (74f0 <xTaskRemoveFromEventList+0x94>)
    7492:	6812      	ldr	r2, [r2, #0]
    7494:	4293      	cmp	r3, r2
    7496:	d901      	bls.n	749c <xTaskRemoveFromEventList+0x40>
    7498:	4a15      	ldr	r2, [pc, #84]	; (74f0 <xTaskRemoveFromEventList+0x94>)
    749a:	6013      	str	r3, [r2, #0]
    749c:	0098      	lsls	r0, r3, #2
    749e:	18c0      	adds	r0, r0, r3
    74a0:	0080      	lsls	r0, r0, #2
    74a2:	4b14      	ldr	r3, [pc, #80]	; (74f4 <xTaskRemoveFromEventList+0x98>)
    74a4:	1818      	adds	r0, r3, r0
    74a6:	0029      	movs	r1, r5
    74a8:	4b13      	ldr	r3, [pc, #76]	; (74f8 <xTaskRemoveFromEventList+0x9c>)
    74aa:	4798      	blx	r3
    74ac:	4b13      	ldr	r3, [pc, #76]	; (74fc <xTaskRemoveFromEventList+0xa0>)
    74ae:	681b      	ldr	r3, [r3, #0]
    74b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    74b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    74b4:	2000      	movs	r0, #0
    74b6:	429a      	cmp	r2, r3
    74b8:	d903      	bls.n	74c2 <xTaskRemoveFromEventList+0x66>
    74ba:	2201      	movs	r2, #1
    74bc:	4b10      	ldr	r3, [pc, #64]	; (7500 <xTaskRemoveFromEventList+0xa4>)
    74be:	601a      	str	r2, [r3, #0]
    74c0:	3001      	adds	r0, #1
    74c2:	bd70      	pop	{r4, r5, r6, pc}
    74c4:	b672      	cpsid	i
    74c6:	e7fe      	b.n	74c6 <xTaskRemoveFromEventList+0x6a>
    74c8:	0020      	movs	r0, r4
    74ca:	4b0e      	ldr	r3, [pc, #56]	; (7504 <xTaskRemoveFromEventList+0xa8>)
    74cc:	4798      	blx	r3
    74ce:	b2c0      	uxtb	r0, r0
    74d0:	4b0d      	ldr	r3, [pc, #52]	; (7508 <xTaskRemoveFromEventList+0xac>)
    74d2:	4798      	blx	r3
    74d4:	e7db      	b.n	748e <xTaskRemoveFromEventList+0x32>
    74d6:	0029      	movs	r1, r5
    74d8:	480c      	ldr	r0, [pc, #48]	; (750c <xTaskRemoveFromEventList+0xb0>)
    74da:	4b07      	ldr	r3, [pc, #28]	; (74f8 <xTaskRemoveFromEventList+0x9c>)
    74dc:	4798      	blx	r3
    74de:	e7e5      	b.n	74ac <xTaskRemoveFromEventList+0x50>
    74e0:	0000556f 	.word	0x0000556f
    74e4:	20003d78 	.word	0x20003d78
    74e8:	00004439 	.word	0x00004439
    74ec:	200000e8 	.word	0x200000e8
    74f0:	20003d80 	.word	0x20003d80
    74f4:	20003d08 	.word	0x20003d08
    74f8:	00005529 	.word	0x00005529
    74fc:	20003cfc 	.word	0x20003cfc
    7500:	20003dfc 	.word	0x20003dfc
    7504:	00004429 	.word	0x00004429
    7508:	00004fc1 	.word	0x00004fc1
    750c:	20003db8 	.word	0x20003db8

00007510 <vTaskInternalSetTimeOutState>:
    7510:	4b03      	ldr	r3, [pc, #12]	; (7520 <vTaskInternalSetTimeOutState+0x10>)
    7512:	681b      	ldr	r3, [r3, #0]
    7514:	6003      	str	r3, [r0, #0]
    7516:	4b03      	ldr	r3, [pc, #12]	; (7524 <vTaskInternalSetTimeOutState+0x14>)
    7518:	681b      	ldr	r3, [r3, #0]
    751a:	6043      	str	r3, [r0, #4]
    751c:	4770      	bx	lr
    751e:	46c0      	nop			; (mov r8, r8)
    7520:	20003db4 	.word	0x20003db4
    7524:	20003df8 	.word	0x20003df8

00007528 <xTaskCheckForTimeOut>:
    7528:	b570      	push	{r4, r5, r6, lr}
    752a:	0006      	movs	r6, r0
    752c:	000d      	movs	r5, r1
    752e:	2800      	cmp	r0, #0
    7530:	d01b      	beq.n	756a <xTaskCheckForTimeOut+0x42>
    7532:	2900      	cmp	r1, #0
    7534:	d01b      	beq.n	756e <xTaskCheckForTimeOut+0x46>
    7536:	4b13      	ldr	r3, [pc, #76]	; (7584 <xTaskCheckForTimeOut+0x5c>)
    7538:	4798      	blx	r3
    753a:	4b13      	ldr	r3, [pc, #76]	; (7588 <xTaskCheckForTimeOut+0x60>)
    753c:	681a      	ldr	r2, [r3, #0]
    753e:	6871      	ldr	r1, [r6, #4]
    7540:	682b      	ldr	r3, [r5, #0]
    7542:	1c58      	adds	r0, r3, #1
    7544:	d01c      	beq.n	7580 <xTaskCheckForTimeOut+0x58>
    7546:	4811      	ldr	r0, [pc, #68]	; (758c <xTaskCheckForTimeOut+0x64>)
    7548:	6800      	ldr	r0, [r0, #0]
    754a:	6834      	ldr	r4, [r6, #0]
    754c:	4284      	cmp	r4, r0
    754e:	d002      	beq.n	7556 <xTaskCheckForTimeOut+0x2e>
    7550:	2401      	movs	r4, #1
    7552:	428a      	cmp	r2, r1
    7554:	d205      	bcs.n	7562 <xTaskCheckForTimeOut+0x3a>
    7556:	1a52      	subs	r2, r2, r1
    7558:	429a      	cmp	r2, r3
    755a:	d30a      	bcc.n	7572 <xTaskCheckForTimeOut+0x4a>
    755c:	2300      	movs	r3, #0
    755e:	602b      	str	r3, [r5, #0]
    7560:	2401      	movs	r4, #1
    7562:	4b0b      	ldr	r3, [pc, #44]	; (7590 <xTaskCheckForTimeOut+0x68>)
    7564:	4798      	blx	r3
    7566:	0020      	movs	r0, r4
    7568:	bd70      	pop	{r4, r5, r6, pc}
    756a:	b672      	cpsid	i
    756c:	e7fe      	b.n	756c <xTaskCheckForTimeOut+0x44>
    756e:	b672      	cpsid	i
    7570:	e7fe      	b.n	7570 <xTaskCheckForTimeOut+0x48>
    7572:	1a9b      	subs	r3, r3, r2
    7574:	602b      	str	r3, [r5, #0]
    7576:	0030      	movs	r0, r6
    7578:	4b06      	ldr	r3, [pc, #24]	; (7594 <xTaskCheckForTimeOut+0x6c>)
    757a:	4798      	blx	r3
    757c:	2400      	movs	r4, #0
    757e:	e7f0      	b.n	7562 <xTaskCheckForTimeOut+0x3a>
    7580:	2400      	movs	r4, #0
    7582:	e7ee      	b.n	7562 <xTaskCheckForTimeOut+0x3a>
    7584:	000056a1 	.word	0x000056a1
    7588:	20003df8 	.word	0x20003df8
    758c:	20003db4 	.word	0x20003db4
    7590:	000056b9 	.word	0x000056b9
    7594:	00007511 	.word	0x00007511

00007598 <vTaskMissedYield>:
    7598:	2201      	movs	r2, #1
    759a:	4b01      	ldr	r3, [pc, #4]	; (75a0 <vTaskMissedYield+0x8>)
    759c:	601a      	str	r2, [r3, #0]
    759e:	4770      	bx	lr
    75a0:	20003dfc 	.word	0x20003dfc

000075a4 <uxTaskGetTaskNumber>:
    75a4:	2800      	cmp	r0, #0
    75a6:	d001      	beq.n	75ac <uxTaskGetTaskNumber+0x8>
    75a8:	6c00      	ldr	r0, [r0, #64]	; 0x40
    75aa:	4770      	bx	lr
    75ac:	2000      	movs	r0, #0
    75ae:	e7fc      	b.n	75aa <uxTaskGetTaskNumber+0x6>

000075b0 <vTaskSetTaskNumber>:
    75b0:	2800      	cmp	r0, #0
    75b2:	d000      	beq.n	75b6 <vTaskSetTaskNumber+0x6>
    75b4:	6401      	str	r1, [r0, #64]	; 0x40
    75b6:	4770      	bx	lr

000075b8 <xTaskGetCurrentTaskHandle>:
    75b8:	4b01      	ldr	r3, [pc, #4]	; (75c0 <xTaskGetCurrentTaskHandle+0x8>)
    75ba:	6818      	ldr	r0, [r3, #0]
    75bc:	4770      	bx	lr
    75be:	46c0      	nop			; (mov r8, r8)
    75c0:	20003cfc 	.word	0x20003cfc

000075c4 <xTaskGetSchedulerState>:
    75c4:	4b05      	ldr	r3, [pc, #20]	; (75dc <xTaskGetSchedulerState+0x18>)
    75c6:	681b      	ldr	r3, [r3, #0]
    75c8:	2001      	movs	r0, #1
    75ca:	2b00      	cmp	r3, #0
    75cc:	d004      	beq.n	75d8 <xTaskGetSchedulerState+0x14>
    75ce:	4b04      	ldr	r3, [pc, #16]	; (75e0 <xTaskGetSchedulerState+0x1c>)
    75d0:	6818      	ldr	r0, [r3, #0]
    75d2:	4243      	negs	r3, r0
    75d4:	4158      	adcs	r0, r3
    75d6:	0040      	lsls	r0, r0, #1
    75d8:	4770      	bx	lr
    75da:	46c0      	nop			; (mov r8, r8)
    75dc:	20003dcc 	.word	0x20003dcc
    75e0:	20003d78 	.word	0x20003d78

000075e4 <xTaskPriorityInherit>:
    75e4:	b570      	push	{r4, r5, r6, lr}
    75e6:	1e04      	subs	r4, r0, #0
    75e8:	d100      	bne.n	75ec <xTaskPriorityInherit+0x8>
    75ea:	e06d      	b.n	76c8 <xTaskPriorityInherit+0xe4>
    75ec:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    75ee:	4b37      	ldr	r3, [pc, #220]	; (76cc <xTaskPriorityInherit+0xe8>)
    75f0:	681b      	ldr	r3, [r3, #0]
    75f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    75f4:	429a      	cmp	r2, r3
    75f6:	d25f      	bcs.n	76b8 <xTaskPriorityInherit+0xd4>
    75f8:	6983      	ldr	r3, [r0, #24]
    75fa:	2b00      	cmp	r3, #0
    75fc:	db05      	blt.n	760a <xTaskPriorityInherit+0x26>
    75fe:	4b33      	ldr	r3, [pc, #204]	; (76cc <xTaskPriorityInherit+0xe8>)
    7600:	681b      	ldr	r3, [r3, #0]
    7602:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7604:	2305      	movs	r3, #5
    7606:	1a5b      	subs	r3, r3, r1
    7608:	6183      	str	r3, [r0, #24]
    760a:	0093      	lsls	r3, r2, #2
    760c:	189b      	adds	r3, r3, r2
    760e:	009b      	lsls	r3, r3, #2
    7610:	4a2f      	ldr	r2, [pc, #188]	; (76d0 <xTaskPriorityInherit+0xec>)
    7612:	18d3      	adds	r3, r2, r3
    7614:	6962      	ldr	r2, [r4, #20]
    7616:	429a      	cmp	r2, r3
    7618:	d028      	beq.n	766c <xTaskPriorityInherit+0x88>
    761a:	4b2c      	ldr	r3, [pc, #176]	; (76cc <xTaskPriorityInherit+0xe8>)
    761c:	681b      	ldr	r3, [r3, #0]
    761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7620:	62e3      	str	r3, [r4, #44]	; 0x2c
    7622:	0020      	movs	r0, r4
    7624:	4b2b      	ldr	r3, [pc, #172]	; (76d4 <xTaskPriorityInherit+0xf0>)
    7626:	4798      	blx	r3
    7628:	0003      	movs	r3, r0
    762a:	4a2b      	ldr	r2, [pc, #172]	; (76d8 <xTaskPriorityInherit+0xf4>)
    762c:	8812      	ldrh	r2, [r2, #0]
    762e:	2001      	movs	r0, #1
    7630:	421a      	tst	r2, r3
    7632:	d048      	beq.n	76c6 <xTaskPriorityInherit+0xe2>
    7634:	0020      	movs	r0, r4
    7636:	4d29      	ldr	r5, [pc, #164]	; (76dc <xTaskPriorityInherit+0xf8>)
    7638:	47a8      	blx	r5
    763a:	0006      	movs	r6, r0
    763c:	0020      	movs	r0, r4
    763e:	47a8      	blx	r5
    7640:	b2c1      	uxtb	r1, r0
    7642:	2003      	movs	r0, #3
    7644:	4b26      	ldr	r3, [pc, #152]	; (76e0 <xTaskPriorityInherit+0xfc>)
    7646:	4798      	blx	r3
    7648:	0003      	movs	r3, r0
    764a:	b2f2      	uxtb	r2, r6
    764c:	2103      	movs	r1, #3
    764e:	208e      	movs	r0, #142	; 0x8e
    7650:	4e24      	ldr	r6, [pc, #144]	; (76e4 <xTaskPriorityInherit+0x100>)
    7652:	47b0      	blx	r6
    7654:	0020      	movs	r0, r4
    7656:	47a8      	blx	r5
    7658:	4b1c      	ldr	r3, [pc, #112]	; (76cc <xTaskPriorityInherit+0xe8>)
    765a:	681b      	ldr	r3, [r3, #0]
    765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    765e:	b2d2      	uxtb	r2, r2
    7660:	b2c1      	uxtb	r1, r0
    7662:	2003      	movs	r0, #3
    7664:	4b20      	ldr	r3, [pc, #128]	; (76e8 <xTaskPriorityInherit+0x104>)
    7666:	4798      	blx	r3
    7668:	2001      	movs	r0, #1
    766a:	e02c      	b.n	76c6 <xTaskPriorityInherit+0xe2>
    766c:	1d25      	adds	r5, r4, #4
    766e:	0028      	movs	r0, r5
    7670:	4b1e      	ldr	r3, [pc, #120]	; (76ec <xTaskPriorityInherit+0x108>)
    7672:	4798      	blx	r3
    7674:	4b15      	ldr	r3, [pc, #84]	; (76cc <xTaskPriorityInherit+0xe8>)
    7676:	681b      	ldr	r3, [r3, #0]
    7678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    767a:	62e3      	str	r3, [r4, #44]	; 0x2c
    767c:	0020      	movs	r0, r4
    767e:	4b15      	ldr	r3, [pc, #84]	; (76d4 <xTaskPriorityInherit+0xf0>)
    7680:	4798      	blx	r3
    7682:	4b15      	ldr	r3, [pc, #84]	; (76d8 <xTaskPriorityInherit+0xf4>)
    7684:	881b      	ldrh	r3, [r3, #0]
    7686:	4203      	tst	r3, r0
    7688:	d10f      	bne.n	76aa <xTaskPriorityInherit+0xc6>
    768a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    768c:	4a18      	ldr	r2, [pc, #96]	; (76f0 <xTaskPriorityInherit+0x10c>)
    768e:	6812      	ldr	r2, [r2, #0]
    7690:	4293      	cmp	r3, r2
    7692:	d901      	bls.n	7698 <xTaskPriorityInherit+0xb4>
    7694:	4a16      	ldr	r2, [pc, #88]	; (76f0 <xTaskPriorityInherit+0x10c>)
    7696:	6013      	str	r3, [r2, #0]
    7698:	0098      	lsls	r0, r3, #2
    769a:	18c0      	adds	r0, r0, r3
    769c:	0080      	lsls	r0, r0, #2
    769e:	4b0c      	ldr	r3, [pc, #48]	; (76d0 <xTaskPriorityInherit+0xec>)
    76a0:	1818      	adds	r0, r3, r0
    76a2:	0029      	movs	r1, r5
    76a4:	4b13      	ldr	r3, [pc, #76]	; (76f4 <xTaskPriorityInherit+0x110>)
    76a6:	4798      	blx	r3
    76a8:	e7bb      	b.n	7622 <xTaskPriorityInherit+0x3e>
    76aa:	0020      	movs	r0, r4
    76ac:	4b0b      	ldr	r3, [pc, #44]	; (76dc <xTaskPriorityInherit+0xf8>)
    76ae:	4798      	blx	r3
    76b0:	b2c0      	uxtb	r0, r0
    76b2:	4b11      	ldr	r3, [pc, #68]	; (76f8 <xTaskPriorityInherit+0x114>)
    76b4:	4798      	blx	r3
    76b6:	e7e8      	b.n	768a <xTaskPriorityInherit+0xa6>
    76b8:	4b04      	ldr	r3, [pc, #16]	; (76cc <xTaskPriorityInherit+0xe8>)
    76ba:	681b      	ldr	r3, [r3, #0]
    76bc:	6c40      	ldr	r0, [r0, #68]	; 0x44
    76be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    76c0:	4298      	cmp	r0, r3
    76c2:	4180      	sbcs	r0, r0
    76c4:	4240      	negs	r0, r0
    76c6:	bd70      	pop	{r4, r5, r6, pc}
    76c8:	2000      	movs	r0, #0
    76ca:	e7fc      	b.n	76c6 <xTaskPriorityInherit+0xe2>
    76cc:	20003cfc 	.word	0x20003cfc
    76d0:	20003d08 	.word	0x20003d08
    76d4:	00004439 	.word	0x00004439
    76d8:	200000e8 	.word	0x200000e8
    76dc:	00004429 	.word	0x00004429
    76e0:	00004ba1 	.word	0x00004ba1
    76e4:	000051ed 	.word	0x000051ed
    76e8:	00004b49 	.word	0x00004b49
    76ec:	0000556f 	.word	0x0000556f
    76f0:	20003d80 	.word	0x20003d80
    76f4:	00005529 	.word	0x00005529
    76f8:	00004fc1 	.word	0x00004fc1

000076fc <xTaskPriorityDisinherit>:
    76fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76fe:	1e04      	subs	r4, r0, #0
    7700:	d05a      	beq.n	77b8 <xTaskPriorityDisinherit+0xbc>
    7702:	4b2f      	ldr	r3, [pc, #188]	; (77c0 <xTaskPriorityDisinherit+0xc4>)
    7704:	681b      	ldr	r3, [r3, #0]
    7706:	4298      	cmp	r0, r3
    7708:	d001      	beq.n	770e <xTaskPriorityDisinherit+0x12>
    770a:	b672      	cpsid	i
    770c:	e7fe      	b.n	770c <xTaskPriorityDisinherit+0x10>
    770e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    7710:	2b00      	cmp	r3, #0
    7712:	d101      	bne.n	7718 <xTaskPriorityDisinherit+0x1c>
    7714:	b672      	cpsid	i
    7716:	e7fe      	b.n	7716 <xTaskPriorityDisinherit+0x1a>
    7718:	3b01      	subs	r3, #1
    771a:	6483      	str	r3, [r0, #72]	; 0x48
    771c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    771e:	6c41      	ldr	r1, [r0, #68]	; 0x44
    7720:	428a      	cmp	r2, r1
    7722:	d04b      	beq.n	77bc <xTaskPriorityDisinherit+0xc0>
    7724:	2000      	movs	r0, #0
    7726:	2b00      	cmp	r3, #0
    7728:	d145      	bne.n	77b6 <xTaskPriorityDisinherit+0xba>
    772a:	1d25      	adds	r5, r4, #4
    772c:	0028      	movs	r0, r5
    772e:	4b25      	ldr	r3, [pc, #148]	; (77c4 <xTaskPriorityDisinherit+0xc8>)
    7730:	4798      	blx	r3
    7732:	0020      	movs	r0, r4
    7734:	4b24      	ldr	r3, [pc, #144]	; (77c8 <xTaskPriorityDisinherit+0xcc>)
    7736:	4798      	blx	r3
    7738:	4b24      	ldr	r3, [pc, #144]	; (77cc <xTaskPriorityDisinherit+0xd0>)
    773a:	881b      	ldrh	r3, [r3, #0]
    773c:	4203      	tst	r3, r0
    773e:	d018      	beq.n	7772 <xTaskPriorityDisinherit+0x76>
    7740:	0020      	movs	r0, r4
    7742:	4e23      	ldr	r6, [pc, #140]	; (77d0 <xTaskPriorityDisinherit+0xd4>)
    7744:	47b0      	blx	r6
    7746:	0007      	movs	r7, r0
    7748:	0020      	movs	r0, r4
    774a:	47b0      	blx	r6
    774c:	b2c1      	uxtb	r1, r0
    774e:	2003      	movs	r0, #3
    7750:	4b20      	ldr	r3, [pc, #128]	; (77d4 <xTaskPriorityDisinherit+0xd8>)
    7752:	4798      	blx	r3
    7754:	0003      	movs	r3, r0
    7756:	b2fa      	uxtb	r2, r7
    7758:	2103      	movs	r1, #3
    775a:	208f      	movs	r0, #143	; 0x8f
    775c:	4f1e      	ldr	r7, [pc, #120]	; (77d8 <xTaskPriorityDisinherit+0xdc>)
    775e:	47b8      	blx	r7
    7760:	0020      	movs	r0, r4
    7762:	47b0      	blx	r6
    7764:	2344      	movs	r3, #68	; 0x44
    7766:	18e3      	adds	r3, r4, r3
    7768:	781a      	ldrb	r2, [r3, #0]
    776a:	b2c1      	uxtb	r1, r0
    776c:	2003      	movs	r0, #3
    776e:	4b1b      	ldr	r3, [pc, #108]	; (77dc <xTaskPriorityDisinherit+0xe0>)
    7770:	4798      	blx	r3
    7772:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7774:	62e2      	str	r2, [r4, #44]	; 0x2c
    7776:	2305      	movs	r3, #5
    7778:	1a9b      	subs	r3, r3, r2
    777a:	61a3      	str	r3, [r4, #24]
    777c:	0020      	movs	r0, r4
    777e:	4b12      	ldr	r3, [pc, #72]	; (77c8 <xTaskPriorityDisinherit+0xcc>)
    7780:	4798      	blx	r3
    7782:	4b12      	ldr	r3, [pc, #72]	; (77cc <xTaskPriorityDisinherit+0xd0>)
    7784:	881b      	ldrh	r3, [r3, #0]
    7786:	4203      	tst	r3, r0
    7788:	d005      	beq.n	7796 <xTaskPriorityDisinherit+0x9a>
    778a:	0020      	movs	r0, r4
    778c:	4b10      	ldr	r3, [pc, #64]	; (77d0 <xTaskPriorityDisinherit+0xd4>)
    778e:	4798      	blx	r3
    7790:	b2c0      	uxtb	r0, r0
    7792:	4b13      	ldr	r3, [pc, #76]	; (77e0 <xTaskPriorityDisinherit+0xe4>)
    7794:	4798      	blx	r3
    7796:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7798:	4a12      	ldr	r2, [pc, #72]	; (77e4 <xTaskPriorityDisinherit+0xe8>)
    779a:	6812      	ldr	r2, [r2, #0]
    779c:	4293      	cmp	r3, r2
    779e:	d901      	bls.n	77a4 <xTaskPriorityDisinherit+0xa8>
    77a0:	4a10      	ldr	r2, [pc, #64]	; (77e4 <xTaskPriorityDisinherit+0xe8>)
    77a2:	6013      	str	r3, [r2, #0]
    77a4:	0098      	lsls	r0, r3, #2
    77a6:	18c0      	adds	r0, r0, r3
    77a8:	0080      	lsls	r0, r0, #2
    77aa:	4b0f      	ldr	r3, [pc, #60]	; (77e8 <xTaskPriorityDisinherit+0xec>)
    77ac:	1818      	adds	r0, r3, r0
    77ae:	0029      	movs	r1, r5
    77b0:	4b0e      	ldr	r3, [pc, #56]	; (77ec <xTaskPriorityDisinherit+0xf0>)
    77b2:	4798      	blx	r3
    77b4:	2001      	movs	r0, #1
    77b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77b8:	2000      	movs	r0, #0
    77ba:	e7fc      	b.n	77b6 <xTaskPriorityDisinherit+0xba>
    77bc:	2000      	movs	r0, #0
    77be:	e7fa      	b.n	77b6 <xTaskPriorityDisinherit+0xba>
    77c0:	20003cfc 	.word	0x20003cfc
    77c4:	0000556f 	.word	0x0000556f
    77c8:	00004439 	.word	0x00004439
    77cc:	200000e8 	.word	0x200000e8
    77d0:	00004429 	.word	0x00004429
    77d4:	00004ba1 	.word	0x00004ba1
    77d8:	000051ed 	.word	0x000051ed
    77dc:	00004b49 	.word	0x00004b49
    77e0:	00004fc1 	.word	0x00004fc1
    77e4:	20003d80 	.word	0x20003d80
    77e8:	20003d08 	.word	0x20003d08
    77ec:	00005529 	.word	0x00005529

000077f0 <vTaskPriorityDisinheritAfterTimeout>:
    77f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77f2:	1e04      	subs	r4, r0, #0
    77f4:	d00d      	beq.n	7812 <vTaskPriorityDisinheritAfterTimeout+0x22>
    77f6:	6c83      	ldr	r3, [r0, #72]	; 0x48
    77f8:	2b00      	cmp	r3, #0
    77fa:	d101      	bne.n	7800 <vTaskPriorityDisinheritAfterTimeout+0x10>
    77fc:	b672      	cpsid	i
    77fe:	e7fe      	b.n	77fe <vTaskPriorityDisinheritAfterTimeout+0xe>
    7800:	6c45      	ldr	r5, [r0, #68]	; 0x44
    7802:	428d      	cmp	r5, r1
    7804:	d200      	bcs.n	7808 <vTaskPriorityDisinheritAfterTimeout+0x18>
    7806:	000d      	movs	r5, r1
    7808:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    780a:	42aa      	cmp	r2, r5
    780c:	d001      	beq.n	7812 <vTaskPriorityDisinheritAfterTimeout+0x22>
    780e:	2b01      	cmp	r3, #1
    7810:	d000      	beq.n	7814 <vTaskPriorityDisinheritAfterTimeout+0x24>
    7812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7814:	4b2b      	ldr	r3, [pc, #172]	; (78c4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
    7816:	681b      	ldr	r3, [r3, #0]
    7818:	429c      	cmp	r4, r3
    781a:	d101      	bne.n	7820 <vTaskPriorityDisinheritAfterTimeout+0x30>
    781c:	b672      	cpsid	i
    781e:	e7fe      	b.n	781e <vTaskPriorityDisinheritAfterTimeout+0x2e>
    7820:	0020      	movs	r0, r4
    7822:	4b29      	ldr	r3, [pc, #164]	; (78c8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    7824:	4798      	blx	r3
    7826:	4b29      	ldr	r3, [pc, #164]	; (78cc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    7828:	881b      	ldrh	r3, [r3, #0]
    782a:	4203      	tst	r3, r0
    782c:	d018      	beq.n	7860 <vTaskPriorityDisinheritAfterTimeout+0x70>
    782e:	0020      	movs	r0, r4
    7830:	4e27      	ldr	r6, [pc, #156]	; (78d0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    7832:	47b0      	blx	r6
    7834:	0007      	movs	r7, r0
    7836:	0020      	movs	r0, r4
    7838:	47b0      	blx	r6
    783a:	b2c1      	uxtb	r1, r0
    783c:	2003      	movs	r0, #3
    783e:	4b25      	ldr	r3, [pc, #148]	; (78d4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
    7840:	4798      	blx	r3
    7842:	0003      	movs	r3, r0
    7844:	b2fa      	uxtb	r2, r7
    7846:	2103      	movs	r1, #3
    7848:	208f      	movs	r0, #143	; 0x8f
    784a:	4f23      	ldr	r7, [pc, #140]	; (78d8 <vTaskPriorityDisinheritAfterTimeout+0xe8>)
    784c:	47b8      	blx	r7
    784e:	0020      	movs	r0, r4
    7850:	47b0      	blx	r6
    7852:	2344      	movs	r3, #68	; 0x44
    7854:	18e3      	adds	r3, r4, r3
    7856:	781a      	ldrb	r2, [r3, #0]
    7858:	b2c1      	uxtb	r1, r0
    785a:	2003      	movs	r0, #3
    785c:	4b1f      	ldr	r3, [pc, #124]	; (78dc <vTaskPriorityDisinheritAfterTimeout+0xec>)
    785e:	4798      	blx	r3
    7860:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7862:	62e5      	str	r5, [r4, #44]	; 0x2c
    7864:	69a3      	ldr	r3, [r4, #24]
    7866:	2b00      	cmp	r3, #0
    7868:	db02      	blt.n	7870 <vTaskPriorityDisinheritAfterTimeout+0x80>
    786a:	2205      	movs	r2, #5
    786c:	1b55      	subs	r5, r2, r5
    786e:	61a5      	str	r5, [r4, #24]
    7870:	008b      	lsls	r3, r1, #2
    7872:	185b      	adds	r3, r3, r1
    7874:	009b      	lsls	r3, r3, #2
    7876:	4a1a      	ldr	r2, [pc, #104]	; (78e0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    7878:	18d3      	adds	r3, r2, r3
    787a:	6962      	ldr	r2, [r4, #20]
    787c:	429a      	cmp	r2, r3
    787e:	d1c8      	bne.n	7812 <vTaskPriorityDisinheritAfterTimeout+0x22>
    7880:	1d25      	adds	r5, r4, #4
    7882:	0028      	movs	r0, r5
    7884:	4b17      	ldr	r3, [pc, #92]	; (78e4 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
    7886:	4798      	blx	r3
    7888:	0020      	movs	r0, r4
    788a:	4b0f      	ldr	r3, [pc, #60]	; (78c8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
    788c:	4798      	blx	r3
    788e:	4b0f      	ldr	r3, [pc, #60]	; (78cc <vTaskPriorityDisinheritAfterTimeout+0xdc>)
    7890:	881b      	ldrh	r3, [r3, #0]
    7892:	4203      	tst	r3, r0
    7894:	d005      	beq.n	78a2 <vTaskPriorityDisinheritAfterTimeout+0xb2>
    7896:	0020      	movs	r0, r4
    7898:	4b0d      	ldr	r3, [pc, #52]	; (78d0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
    789a:	4798      	blx	r3
    789c:	b2c0      	uxtb	r0, r0
    789e:	4b12      	ldr	r3, [pc, #72]	; (78e8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
    78a0:	4798      	blx	r3
    78a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    78a4:	4a11      	ldr	r2, [pc, #68]	; (78ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    78a6:	6812      	ldr	r2, [r2, #0]
    78a8:	4293      	cmp	r3, r2
    78aa:	d901      	bls.n	78b0 <vTaskPriorityDisinheritAfterTimeout+0xc0>
    78ac:	4a0f      	ldr	r2, [pc, #60]	; (78ec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
    78ae:	6013      	str	r3, [r2, #0]
    78b0:	0098      	lsls	r0, r3, #2
    78b2:	18c0      	adds	r0, r0, r3
    78b4:	0080      	lsls	r0, r0, #2
    78b6:	4b0a      	ldr	r3, [pc, #40]	; (78e0 <vTaskPriorityDisinheritAfterTimeout+0xf0>)
    78b8:	1818      	adds	r0, r3, r0
    78ba:	0029      	movs	r1, r5
    78bc:	4b0c      	ldr	r3, [pc, #48]	; (78f0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
    78be:	4798      	blx	r3
    78c0:	e7a7      	b.n	7812 <vTaskPriorityDisinheritAfterTimeout+0x22>
    78c2:	46c0      	nop			; (mov r8, r8)
    78c4:	20003cfc 	.word	0x20003cfc
    78c8:	00004439 	.word	0x00004439
    78cc:	200000e8 	.word	0x200000e8
    78d0:	00004429 	.word	0x00004429
    78d4:	00004ba1 	.word	0x00004ba1
    78d8:	000051ed 	.word	0x000051ed
    78dc:	00004b49 	.word	0x00004b49
    78e0:	20003d08 	.word	0x20003d08
    78e4:	0000556f 	.word	0x0000556f
    78e8:	00004fc1 	.word	0x00004fc1
    78ec:	20003d80 	.word	0x20003d80
    78f0:	00005529 	.word	0x00005529

000078f4 <pvTaskIncrementMutexHeldCount>:
    78f4:	4b05      	ldr	r3, [pc, #20]	; (790c <pvTaskIncrementMutexHeldCount+0x18>)
    78f6:	681b      	ldr	r3, [r3, #0]
    78f8:	2b00      	cmp	r3, #0
    78fa:	d004      	beq.n	7906 <pvTaskIncrementMutexHeldCount+0x12>
    78fc:	4b03      	ldr	r3, [pc, #12]	; (790c <pvTaskIncrementMutexHeldCount+0x18>)
    78fe:	681a      	ldr	r2, [r3, #0]
    7900:	6c93      	ldr	r3, [r2, #72]	; 0x48
    7902:	3301      	adds	r3, #1
    7904:	6493      	str	r3, [r2, #72]	; 0x48
    7906:	4b01      	ldr	r3, [pc, #4]	; (790c <pvTaskIncrementMutexHeldCount+0x18>)
    7908:	6818      	ldr	r0, [r3, #0]
    790a:	4770      	bx	lr
    790c:	20003cfc 	.word	0x20003cfc

00007910 <prvInsertTimerInActiveList>:
    7910:	b510      	push	{r4, lr}
    7912:	6041      	str	r1, [r0, #4]
    7914:	6100      	str	r0, [r0, #16]
    7916:	4291      	cmp	r1, r2
    7918:	d80b      	bhi.n	7932 <prvInsertTimerInActiveList+0x22>
    791a:	1ad2      	subs	r2, r2, r3
    791c:	2401      	movs	r4, #1
    791e:	6983      	ldr	r3, [r0, #24]
    7920:	429a      	cmp	r2, r3
    7922:	d211      	bcs.n	7948 <prvInsertTimerInActiveList+0x38>
    7924:	1d01      	adds	r1, r0, #4
    7926:	4b09      	ldr	r3, [pc, #36]	; (794c <prvInsertTimerInActiveList+0x3c>)
    7928:	6818      	ldr	r0, [r3, #0]
    792a:	4b09      	ldr	r3, [pc, #36]	; (7950 <prvInsertTimerInActiveList+0x40>)
    792c:	4798      	blx	r3
    792e:	2400      	movs	r4, #0
    7930:	e00a      	b.n	7948 <prvInsertTimerInActiveList+0x38>
    7932:	429a      	cmp	r2, r3
    7934:	d202      	bcs.n	793c <prvInsertTimerInActiveList+0x2c>
    7936:	2401      	movs	r4, #1
    7938:	4299      	cmp	r1, r3
    793a:	d205      	bcs.n	7948 <prvInsertTimerInActiveList+0x38>
    793c:	1d01      	adds	r1, r0, #4
    793e:	4b05      	ldr	r3, [pc, #20]	; (7954 <prvInsertTimerInActiveList+0x44>)
    7940:	6818      	ldr	r0, [r3, #0]
    7942:	4b03      	ldr	r3, [pc, #12]	; (7950 <prvInsertTimerInActiveList+0x40>)
    7944:	4798      	blx	r3
    7946:	2400      	movs	r4, #0
    7948:	0020      	movs	r0, r4
    794a:	bd10      	pop	{r4, pc}
    794c:	20003e04 	.word	0x20003e04
    7950:	00005541 	.word	0x00005541
    7954:	20003e00 	.word	0x20003e00

00007958 <prvCheckForValidListAndQueue>:
    7958:	b570      	push	{r4, r5, r6, lr}
    795a:	4b0e      	ldr	r3, [pc, #56]	; (7994 <prvCheckForValidListAndQueue+0x3c>)
    795c:	4798      	blx	r3
    795e:	4b0e      	ldr	r3, [pc, #56]	; (7998 <prvCheckForValidListAndQueue+0x40>)
    7960:	681b      	ldr	r3, [r3, #0]
    7962:	2b00      	cmp	r3, #0
    7964:	d002      	beq.n	796c <prvCheckForValidListAndQueue+0x14>
    7966:	4b0d      	ldr	r3, [pc, #52]	; (799c <prvCheckForValidListAndQueue+0x44>)
    7968:	4798      	blx	r3
    796a:	bd70      	pop	{r4, r5, r6, pc}
    796c:	4d0c      	ldr	r5, [pc, #48]	; (79a0 <prvCheckForValidListAndQueue+0x48>)
    796e:	0028      	movs	r0, r5
    7970:	4e0c      	ldr	r6, [pc, #48]	; (79a4 <prvCheckForValidListAndQueue+0x4c>)
    7972:	47b0      	blx	r6
    7974:	4c0c      	ldr	r4, [pc, #48]	; (79a8 <prvCheckForValidListAndQueue+0x50>)
    7976:	0020      	movs	r0, r4
    7978:	47b0      	blx	r6
    797a:	4b0c      	ldr	r3, [pc, #48]	; (79ac <prvCheckForValidListAndQueue+0x54>)
    797c:	601d      	str	r5, [r3, #0]
    797e:	4b0c      	ldr	r3, [pc, #48]	; (79b0 <prvCheckForValidListAndQueue+0x58>)
    7980:	601c      	str	r4, [r3, #0]
    7982:	2200      	movs	r2, #0
    7984:	210c      	movs	r1, #12
    7986:	2002      	movs	r0, #2
    7988:	4b0a      	ldr	r3, [pc, #40]	; (79b4 <prvCheckForValidListAndQueue+0x5c>)
    798a:	4798      	blx	r3
    798c:	4b02      	ldr	r3, [pc, #8]	; (7998 <prvCheckForValidListAndQueue+0x40>)
    798e:	6018      	str	r0, [r3, #0]
    7990:	e7e9      	b.n	7966 <prvCheckForValidListAndQueue+0xe>
    7992:	46c0      	nop			; (mov r8, r8)
    7994:	000056a1 	.word	0x000056a1
    7998:	20003e34 	.word	0x20003e34
    799c:	000056b9 	.word	0x000056b9
    79a0:	20003e08 	.word	0x20003e08
    79a4:	0000550d 	.word	0x0000550d
    79a8:	20003e1c 	.word	0x20003e1c
    79ac:	20003e00 	.word	0x20003e00
    79b0:	20003e04 	.word	0x20003e04
    79b4:	00005b19 	.word	0x00005b19

000079b8 <xTimerCreateTimerTask>:
    79b8:	b510      	push	{r4, lr}
    79ba:	b082      	sub	sp, #8
    79bc:	4b0a      	ldr	r3, [pc, #40]	; (79e8 <xTimerCreateTimerTask+0x30>)
    79be:	4798      	blx	r3
    79c0:	4b0a      	ldr	r3, [pc, #40]	; (79ec <xTimerCreateTimerTask+0x34>)
    79c2:	681b      	ldr	r3, [r3, #0]
    79c4:	2b00      	cmp	r3, #0
    79c6:	d00d      	beq.n	79e4 <xTimerCreateTimerTask+0x2c>
    79c8:	4b09      	ldr	r3, [pc, #36]	; (79f0 <xTimerCreateTimerTask+0x38>)
    79ca:	9301      	str	r3, [sp, #4]
    79cc:	2302      	movs	r3, #2
    79ce:	9300      	str	r3, [sp, #0]
    79d0:	2300      	movs	r3, #0
    79d2:	2280      	movs	r2, #128	; 0x80
    79d4:	4907      	ldr	r1, [pc, #28]	; (79f4 <xTimerCreateTimerTask+0x3c>)
    79d6:	4808      	ldr	r0, [pc, #32]	; (79f8 <xTimerCreateTimerTask+0x40>)
    79d8:	4c08      	ldr	r4, [pc, #32]	; (79fc <xTimerCreateTimerTask+0x44>)
    79da:	47a0      	blx	r4
    79dc:	2800      	cmp	r0, #0
    79de:	d001      	beq.n	79e4 <xTimerCreateTimerTask+0x2c>
    79e0:	b002      	add	sp, #8
    79e2:	bd10      	pop	{r4, pc}
    79e4:	b672      	cpsid	i
    79e6:	e7fe      	b.n	79e6 <xTimerCreateTimerTask+0x2e>
    79e8:	00007959 	.word	0x00007959
    79ec:	20003e34 	.word	0x20003e34
    79f0:	20003e38 	.word	0x20003e38
    79f4:	00017b80 	.word	0x00017b80
    79f8:	00007b25 	.word	0x00007b25
    79fc:	00006af1 	.word	0x00006af1

00007a00 <xTimerGenericCommand>:
    7a00:	b530      	push	{r4, r5, lr}
    7a02:	b085      	sub	sp, #20
    7a04:	0004      	movs	r4, r0
    7a06:	001d      	movs	r5, r3
    7a08:	2800      	cmp	r0, #0
    7a0a:	d014      	beq.n	7a36 <xTimerGenericCommand+0x36>
    7a0c:	4b13      	ldr	r3, [pc, #76]	; (7a5c <xTimerGenericCommand+0x5c>)
    7a0e:	6818      	ldr	r0, [r3, #0]
    7a10:	2800      	cmp	r0, #0
    7a12:	d021      	beq.n	7a58 <xTimerGenericCommand+0x58>
    7a14:	9101      	str	r1, [sp, #4]
    7a16:	9202      	str	r2, [sp, #8]
    7a18:	9403      	str	r4, [sp, #12]
    7a1a:	2905      	cmp	r1, #5
    7a1c:	dc15      	bgt.n	7a4a <xTimerGenericCommand+0x4a>
    7a1e:	4b10      	ldr	r3, [pc, #64]	; (7a60 <xTimerGenericCommand+0x60>)
    7a20:	4798      	blx	r3
    7a22:	2802      	cmp	r0, #2
    7a24:	d009      	beq.n	7a3a <xTimerGenericCommand+0x3a>
    7a26:	4b0d      	ldr	r3, [pc, #52]	; (7a5c <xTimerGenericCommand+0x5c>)
    7a28:	6818      	ldr	r0, [r3, #0]
    7a2a:	2300      	movs	r3, #0
    7a2c:	2200      	movs	r2, #0
    7a2e:	a901      	add	r1, sp, #4
    7a30:	4c0c      	ldr	r4, [pc, #48]	; (7a64 <xTimerGenericCommand+0x64>)
    7a32:	47a0      	blx	r4
    7a34:	e00e      	b.n	7a54 <xTimerGenericCommand+0x54>
    7a36:	b672      	cpsid	i
    7a38:	e7fe      	b.n	7a38 <xTimerGenericCommand+0x38>
    7a3a:	4b08      	ldr	r3, [pc, #32]	; (7a5c <xTimerGenericCommand+0x5c>)
    7a3c:	6818      	ldr	r0, [r3, #0]
    7a3e:	2300      	movs	r3, #0
    7a40:	9a08      	ldr	r2, [sp, #32]
    7a42:	a901      	add	r1, sp, #4
    7a44:	4c07      	ldr	r4, [pc, #28]	; (7a64 <xTimerGenericCommand+0x64>)
    7a46:	47a0      	blx	r4
    7a48:	e004      	b.n	7a54 <xTimerGenericCommand+0x54>
    7a4a:	2300      	movs	r3, #0
    7a4c:	002a      	movs	r2, r5
    7a4e:	a901      	add	r1, sp, #4
    7a50:	4c05      	ldr	r4, [pc, #20]	; (7a68 <xTimerGenericCommand+0x68>)
    7a52:	47a0      	blx	r4
    7a54:	b005      	add	sp, #20
    7a56:	bd30      	pop	{r4, r5, pc}
    7a58:	2000      	movs	r0, #0
    7a5a:	e7fb      	b.n	7a54 <xTimerGenericCommand+0x54>
    7a5c:	20003e34 	.word	0x20003e34
    7a60:	000075c5 	.word	0x000075c5
    7a64:	00005c55 	.word	0x00005c55
    7a68:	00005fa9 	.word	0x00005fa9

00007a6c <prvSampleTimeNow>:
    7a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a6e:	46d6      	mov	lr, sl
    7a70:	464f      	mov	r7, r9
    7a72:	4646      	mov	r6, r8
    7a74:	b5c0      	push	{r6, r7, lr}
    7a76:	b082      	sub	sp, #8
    7a78:	4680      	mov	r8, r0
    7a7a:	4b23      	ldr	r3, [pc, #140]	; (7b08 <prvSampleTimeNow+0x9c>)
    7a7c:	4798      	blx	r3
    7a7e:	4682      	mov	sl, r0
    7a80:	4b22      	ldr	r3, [pc, #136]	; (7b0c <prvSampleTimeNow+0xa0>)
    7a82:	681b      	ldr	r3, [r3, #0]
    7a84:	4298      	cmp	r0, r3
    7a86:	d317      	bcc.n	7ab8 <prvSampleTimeNow+0x4c>
    7a88:	2300      	movs	r3, #0
    7a8a:	4642      	mov	r2, r8
    7a8c:	6013      	str	r3, [r2, #0]
    7a8e:	4b1f      	ldr	r3, [pc, #124]	; (7b0c <prvSampleTimeNow+0xa0>)
    7a90:	4652      	mov	r2, sl
    7a92:	601a      	str	r2, [r3, #0]
    7a94:	4650      	mov	r0, sl
    7a96:	b002      	add	sp, #8
    7a98:	bc1c      	pop	{r2, r3, r4}
    7a9a:	4690      	mov	r8, r2
    7a9c:	4699      	mov	r9, r3
    7a9e:	46a2      	mov	sl, r4
    7aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7aa2:	2300      	movs	r3, #0
    7aa4:	9300      	str	r3, [sp, #0]
    7aa6:	003a      	movs	r2, r7
    7aa8:	2100      	movs	r1, #0
    7aaa:	0020      	movs	r0, r4
    7aac:	4c18      	ldr	r4, [pc, #96]	; (7b10 <prvSampleTimeNow+0xa4>)
    7aae:	47a0      	blx	r4
    7ab0:	2800      	cmp	r0, #0
    7ab2:	d104      	bne.n	7abe <prvSampleTimeNow+0x52>
    7ab4:	b672      	cpsid	i
    7ab6:	e7fe      	b.n	7ab6 <prvSampleTimeNow+0x4a>
    7ab8:	4d16      	ldr	r5, [pc, #88]	; (7b14 <prvSampleTimeNow+0xa8>)
    7aba:	4b17      	ldr	r3, [pc, #92]	; (7b18 <prvSampleTimeNow+0xac>)
    7abc:	4699      	mov	r9, r3
    7abe:	682b      	ldr	r3, [r5, #0]
    7ac0:	681a      	ldr	r2, [r3, #0]
    7ac2:	2a00      	cmp	r2, #0
    7ac4:	d017      	beq.n	7af6 <prvSampleTimeNow+0x8a>
    7ac6:	68db      	ldr	r3, [r3, #12]
    7ac8:	681f      	ldr	r7, [r3, #0]
    7aca:	68dc      	ldr	r4, [r3, #12]
    7acc:	1d26      	adds	r6, r4, #4
    7ace:	0030      	movs	r0, r6
    7ad0:	47c8      	blx	r9
    7ad2:	0020      	movs	r0, r4
    7ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7ad6:	4798      	blx	r3
    7ad8:	69e3      	ldr	r3, [r4, #28]
    7ada:	2b01      	cmp	r3, #1
    7adc:	d1ef      	bne.n	7abe <prvSampleTimeNow+0x52>
    7ade:	69a3      	ldr	r3, [r4, #24]
    7ae0:	18fb      	adds	r3, r7, r3
    7ae2:	429f      	cmp	r7, r3
    7ae4:	d2dd      	bcs.n	7aa2 <prvSampleTimeNow+0x36>
    7ae6:	6063      	str	r3, [r4, #4]
    7ae8:	6124      	str	r4, [r4, #16]
    7aea:	4b0a      	ldr	r3, [pc, #40]	; (7b14 <prvSampleTimeNow+0xa8>)
    7aec:	6818      	ldr	r0, [r3, #0]
    7aee:	0031      	movs	r1, r6
    7af0:	4b0a      	ldr	r3, [pc, #40]	; (7b1c <prvSampleTimeNow+0xb0>)
    7af2:	4798      	blx	r3
    7af4:	e7e3      	b.n	7abe <prvSampleTimeNow+0x52>
    7af6:	4a0a      	ldr	r2, [pc, #40]	; (7b20 <prvSampleTimeNow+0xb4>)
    7af8:	4906      	ldr	r1, [pc, #24]	; (7b14 <prvSampleTimeNow+0xa8>)
    7afa:	6810      	ldr	r0, [r2, #0]
    7afc:	6008      	str	r0, [r1, #0]
    7afe:	6013      	str	r3, [r2, #0]
    7b00:	2301      	movs	r3, #1
    7b02:	4642      	mov	r2, r8
    7b04:	6013      	str	r3, [r2, #0]
    7b06:	e7c2      	b.n	7a8e <prvSampleTimeNow+0x22>
    7b08:	00006e15 	.word	0x00006e15
    7b0c:	20003e30 	.word	0x20003e30
    7b10:	00007a01 	.word	0x00007a01
    7b14:	20003e00 	.word	0x20003e00
    7b18:	0000556f 	.word	0x0000556f
    7b1c:	00005541 	.word	0x00005541
    7b20:	20003e04 	.word	0x20003e04

00007b24 <prvTimerTask>:
    7b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b26:	b089      	sub	sp, #36	; 0x24
    7b28:	4b53      	ldr	r3, [pc, #332]	; (7c78 <prvTimerTask+0x154>)
    7b2a:	4798      	blx	r3
    7b2c:	4f53      	ldr	r7, [pc, #332]	; (7c7c <prvTimerTask+0x158>)
    7b2e:	4b54      	ldr	r3, [pc, #336]	; (7c80 <prvTimerTask+0x15c>)
    7b30:	681b      	ldr	r3, [r3, #0]
    7b32:	681a      	ldr	r2, [r3, #0]
    7b34:	2a00      	cmp	r2, #0
    7b36:	d00e      	beq.n	7b56 <prvTimerTask+0x32>
    7b38:	68db      	ldr	r3, [r3, #12]
    7b3a:	681c      	ldr	r4, [r3, #0]
    7b3c:	4b51      	ldr	r3, [pc, #324]	; (7c84 <prvTimerTask+0x160>)
    7b3e:	4798      	blx	r3
    7b40:	a805      	add	r0, sp, #20
    7b42:	4b51      	ldr	r3, [pc, #324]	; (7c88 <prvTimerTask+0x164>)
    7b44:	4798      	blx	r3
    7b46:	0005      	movs	r5, r0
    7b48:	9b05      	ldr	r3, [sp, #20]
    7b4a:	2b00      	cmp	r3, #0
    7b4c:	d15f      	bne.n	7c0e <prvTimerTask+0xea>
    7b4e:	4284      	cmp	r4, r0
    7b50:	d936      	bls.n	7bc0 <prvTimerTask+0x9c>
    7b52:	2200      	movs	r2, #0
    7b54:	e00f      	b.n	7b76 <prvTimerTask+0x52>
    7b56:	4b4b      	ldr	r3, [pc, #300]	; (7c84 <prvTimerTask+0x160>)
    7b58:	4798      	blx	r3
    7b5a:	a805      	add	r0, sp, #20
    7b5c:	4b4a      	ldr	r3, [pc, #296]	; (7c88 <prvTimerTask+0x164>)
    7b5e:	4798      	blx	r3
    7b60:	0005      	movs	r5, r0
    7b62:	9b05      	ldr	r3, [sp, #20]
    7b64:	2b00      	cmp	r3, #0
    7b66:	d152      	bne.n	7c0e <prvTimerTask+0xea>
    7b68:	4b48      	ldr	r3, [pc, #288]	; (7c8c <prvTimerTask+0x168>)
    7b6a:	681b      	ldr	r3, [r3, #0]
    7b6c:	681b      	ldr	r3, [r3, #0]
    7b6e:	425a      	negs	r2, r3
    7b70:	415a      	adcs	r2, r3
    7b72:	b2d2      	uxtb	r2, r2
    7b74:	2400      	movs	r4, #0
    7b76:	1b61      	subs	r1, r4, r5
    7b78:	4b45      	ldr	r3, [pc, #276]	; (7c90 <prvTimerTask+0x16c>)
    7b7a:	6818      	ldr	r0, [r3, #0]
    7b7c:	4b45      	ldr	r3, [pc, #276]	; (7c94 <prvTimerTask+0x170>)
    7b7e:	4798      	blx	r3
    7b80:	4b45      	ldr	r3, [pc, #276]	; (7c98 <prvTimerTask+0x174>)
    7b82:	4798      	blx	r3
    7b84:	2800      	cmp	r0, #0
    7b86:	d03f      	beq.n	7c08 <prvTimerTask+0xe4>
    7b88:	4d41      	ldr	r5, [pc, #260]	; (7c90 <prvTimerTask+0x16c>)
    7b8a:	4c44      	ldr	r4, [pc, #272]	; (7c9c <prvTimerTask+0x178>)
    7b8c:	2200      	movs	r2, #0
    7b8e:	a905      	add	r1, sp, #20
    7b90:	6828      	ldr	r0, [r5, #0]
    7b92:	47a0      	blx	r4
    7b94:	2800      	cmp	r0, #0
    7b96:	d0ca      	beq.n	7b2e <prvTimerTask+0xa>
    7b98:	9b05      	ldr	r3, [sp, #20]
    7b9a:	9303      	str	r3, [sp, #12]
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	dbf5      	blt.n	7b8c <prvTimerTask+0x68>
    7ba0:	9e07      	ldr	r6, [sp, #28]
    7ba2:	6973      	ldr	r3, [r6, #20]
    7ba4:	2b00      	cmp	r3, #0
    7ba6:	d001      	beq.n	7bac <prvTimerTask+0x88>
    7ba8:	1d30      	adds	r0, r6, #4
    7baa:	47b8      	blx	r7
    7bac:	a804      	add	r0, sp, #16
    7bae:	4b36      	ldr	r3, [pc, #216]	; (7c88 <prvTimerTask+0x164>)
    7bb0:	4798      	blx	r3
    7bb2:	9b05      	ldr	r3, [sp, #20]
    7bb4:	2b09      	cmp	r3, #9
    7bb6:	d8e9      	bhi.n	7b8c <prvTimerTask+0x68>
    7bb8:	009b      	lsls	r3, r3, #2
    7bba:	4a39      	ldr	r2, [pc, #228]	; (7ca0 <prvTimerTask+0x17c>)
    7bbc:	58d3      	ldr	r3, [r2, r3]
    7bbe:	469f      	mov	pc, r3
    7bc0:	4b35      	ldr	r3, [pc, #212]	; (7c98 <prvTimerTask+0x174>)
    7bc2:	4798      	blx	r3
    7bc4:	4b2e      	ldr	r3, [pc, #184]	; (7c80 <prvTimerTask+0x15c>)
    7bc6:	681b      	ldr	r3, [r3, #0]
    7bc8:	68db      	ldr	r3, [r3, #12]
    7bca:	68de      	ldr	r6, [r3, #12]
    7bcc:	1d30      	adds	r0, r6, #4
    7bce:	4b2b      	ldr	r3, [pc, #172]	; (7c7c <prvTimerTask+0x158>)
    7bd0:	4798      	blx	r3
    7bd2:	69f3      	ldr	r3, [r6, #28]
    7bd4:	2b01      	cmp	r3, #1
    7bd6:	d003      	beq.n	7be0 <prvTimerTask+0xbc>
    7bd8:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7bda:	0030      	movs	r0, r6
    7bdc:	4798      	blx	r3
    7bde:	e7d3      	b.n	7b88 <prvTimerTask+0x64>
    7be0:	69b3      	ldr	r3, [r6, #24]
    7be2:	18e1      	adds	r1, r4, r3
    7be4:	0023      	movs	r3, r4
    7be6:	002a      	movs	r2, r5
    7be8:	0030      	movs	r0, r6
    7bea:	4d2e      	ldr	r5, [pc, #184]	; (7ca4 <prvTimerTask+0x180>)
    7bec:	47a8      	blx	r5
    7bee:	2800      	cmp	r0, #0
    7bf0:	d0f2      	beq.n	7bd8 <prvTimerTask+0xb4>
    7bf2:	2300      	movs	r3, #0
    7bf4:	9300      	str	r3, [sp, #0]
    7bf6:	0022      	movs	r2, r4
    7bf8:	2100      	movs	r1, #0
    7bfa:	0030      	movs	r0, r6
    7bfc:	4c2a      	ldr	r4, [pc, #168]	; (7ca8 <prvTimerTask+0x184>)
    7bfe:	47a0      	blx	r4
    7c00:	2800      	cmp	r0, #0
    7c02:	d1e9      	bne.n	7bd8 <prvTimerTask+0xb4>
    7c04:	b672      	cpsid	i
    7c06:	e7fe      	b.n	7c06 <prvTimerTask+0xe2>
    7c08:	4b28      	ldr	r3, [pc, #160]	; (7cac <prvTimerTask+0x188>)
    7c0a:	4798      	blx	r3
    7c0c:	e7bc      	b.n	7b88 <prvTimerTask+0x64>
    7c0e:	4b22      	ldr	r3, [pc, #136]	; (7c98 <prvTimerTask+0x174>)
    7c10:	4798      	blx	r3
    7c12:	e7b9      	b.n	7b88 <prvTimerTask+0x64>
    7c14:	9b06      	ldr	r3, [sp, #24]
    7c16:	69b2      	ldr	r2, [r6, #24]
    7c18:	4694      	mov	ip, r2
    7c1a:	4463      	add	r3, ip
    7c1c:	0019      	movs	r1, r3
    7c1e:	9b06      	ldr	r3, [sp, #24]
    7c20:	0002      	movs	r2, r0
    7c22:	0030      	movs	r0, r6
    7c24:	4c1f      	ldr	r4, [pc, #124]	; (7ca4 <prvTimerTask+0x180>)
    7c26:	47a0      	blx	r4
    7c28:	2800      	cmp	r0, #0
    7c2a:	d0ae      	beq.n	7b8a <prvTimerTask+0x66>
    7c2c:	0030      	movs	r0, r6
    7c2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    7c30:	4798      	blx	r3
    7c32:	69f3      	ldr	r3, [r6, #28]
    7c34:	2b01      	cmp	r3, #1
    7c36:	d1a8      	bne.n	7b8a <prvTimerTask+0x66>
    7c38:	9b06      	ldr	r3, [sp, #24]
    7c3a:	69b1      	ldr	r1, [r6, #24]
    7c3c:	468c      	mov	ip, r1
    7c3e:	4463      	add	r3, ip
    7c40:	001a      	movs	r2, r3
    7c42:	2300      	movs	r3, #0
    7c44:	9300      	str	r3, [sp, #0]
    7c46:	2100      	movs	r1, #0
    7c48:	0030      	movs	r0, r6
    7c4a:	4c17      	ldr	r4, [pc, #92]	; (7ca8 <prvTimerTask+0x184>)
    7c4c:	47a0      	blx	r4
    7c4e:	2800      	cmp	r0, #0
    7c50:	d19b      	bne.n	7b8a <prvTimerTask+0x66>
    7c52:	b672      	cpsid	i
    7c54:	e7fe      	b.n	7c54 <prvTimerTask+0x130>
    7c56:	9906      	ldr	r1, [sp, #24]
    7c58:	61b1      	str	r1, [r6, #24]
    7c5a:	2900      	cmp	r1, #0
    7c5c:	d006      	beq.n	7c6c <prvTimerTask+0x148>
    7c5e:	1841      	adds	r1, r0, r1
    7c60:	0003      	movs	r3, r0
    7c62:	0002      	movs	r2, r0
    7c64:	0030      	movs	r0, r6
    7c66:	4c0f      	ldr	r4, [pc, #60]	; (7ca4 <prvTimerTask+0x180>)
    7c68:	47a0      	blx	r4
    7c6a:	e78e      	b.n	7b8a <prvTimerTask+0x66>
    7c6c:	b672      	cpsid	i
    7c6e:	e7fe      	b.n	7c6e <prvTimerTask+0x14a>
    7c70:	0030      	movs	r0, r6
    7c72:	4b0f      	ldr	r3, [pc, #60]	; (7cb0 <prvTimerTask+0x18c>)
    7c74:	4798      	blx	r3
    7c76:	e788      	b.n	7b8a <prvTimerTask+0x66>
    7c78:	00011bcd 	.word	0x00011bcd
    7c7c:	0000556f 	.word	0x0000556f
    7c80:	20003e00 	.word	0x20003e00
    7c84:	00006e05 	.word	0x00006e05
    7c88:	00007a6d 	.word	0x00007a6d
    7c8c:	20003e04 	.word	0x20003e04
    7c90:	20003e34 	.word	0x20003e34
    7c94:	0000695d 	.word	0x0000695d
    7c98:	00006fad 	.word	0x00006fad
    7c9c:	000062f1 	.word	0x000062f1
    7ca0:	00017b58 	.word	0x00017b58
    7ca4:	00007911 	.word	0x00007911
    7ca8:	00007a01 	.word	0x00007a01
    7cac:	00005691 	.word	0x00005691
    7cb0:	000057f5 	.word	0x000057f5

00007cb4 <advance_pointer>:
    7cb4:	b510      	push	{r4, lr}
    7cb6:	0004      	movs	r4, r0
    7cb8:	7c03      	ldrb	r3, [r0, #16]
    7cba:	2b00      	cmp	r3, #0
    7cbc:	d005      	beq.n	7cca <advance_pointer+0x16>
    7cbe:	6883      	ldr	r3, [r0, #8]
    7cc0:	1c58      	adds	r0, r3, #1
    7cc2:	68e1      	ldr	r1, [r4, #12]
    7cc4:	4b07      	ldr	r3, [pc, #28]	; (7ce4 <advance_pointer+0x30>)
    7cc6:	4798      	blx	r3
    7cc8:	60a1      	str	r1, [r4, #8]
    7cca:	6863      	ldr	r3, [r4, #4]
    7ccc:	1c58      	adds	r0, r3, #1
    7cce:	68e1      	ldr	r1, [r4, #12]
    7cd0:	4b04      	ldr	r3, [pc, #16]	; (7ce4 <advance_pointer+0x30>)
    7cd2:	4798      	blx	r3
    7cd4:	6061      	str	r1, [r4, #4]
    7cd6:	68a3      	ldr	r3, [r4, #8]
    7cd8:	1a59      	subs	r1, r3, r1
    7cda:	424a      	negs	r2, r1
    7cdc:	414a      	adcs	r2, r1
    7cde:	7422      	strb	r2, [r4, #16]
    7ce0:	bd10      	pop	{r4, pc}
    7ce2:	46c0      	nop			; (mov r8, r8)
    7ce4:	00011e81 	.word	0x00011e81

00007ce8 <circular_buf_init>:
    7ce8:	b570      	push	{r4, r5, r6, lr}
    7cea:	0005      	movs	r5, r0
    7cec:	000c      	movs	r4, r1
    7cee:	2014      	movs	r0, #20
    7cf0:	4b04      	ldr	r3, [pc, #16]	; (7d04 <circular_buf_init+0x1c>)
    7cf2:	4798      	blx	r3
    7cf4:	6005      	str	r5, [r0, #0]
    7cf6:	60c4      	str	r4, [r0, #12]
    7cf8:	2300      	movs	r3, #0
    7cfa:	6043      	str	r3, [r0, #4]
    7cfc:	6083      	str	r3, [r0, #8]
    7cfe:	7403      	strb	r3, [r0, #16]
    7d00:	bd70      	pop	{r4, r5, r6, pc}
    7d02:	46c0      	nop			; (mov r8, r8)
    7d04:	0001421d 	.word	0x0001421d

00007d08 <circular_buf_put>:
    7d08:	b510      	push	{r4, lr}
    7d0a:	6803      	ldr	r3, [r0, #0]
    7d0c:	6842      	ldr	r2, [r0, #4]
    7d0e:	5499      	strb	r1, [r3, r2]
    7d10:	4b01      	ldr	r3, [pc, #4]	; (7d18 <circular_buf_put+0x10>)
    7d12:	4798      	blx	r3
    7d14:	bd10      	pop	{r4, pc}
    7d16:	46c0      	nop			; (mov r8, r8)
    7d18:	00007cb5 	.word	0x00007cb5

00007d1c <circular_buf_empty>:
    7d1c:	7c02      	ldrb	r2, [r0, #16]
    7d1e:	2300      	movs	r3, #0
    7d20:	2a00      	cmp	r2, #0
    7d22:	d105      	bne.n	7d30 <circular_buf_empty+0x14>
    7d24:	6843      	ldr	r3, [r0, #4]
    7d26:	6880      	ldr	r0, [r0, #8]
    7d28:	1a1b      	subs	r3, r3, r0
    7d2a:	4258      	negs	r0, r3
    7d2c:	4143      	adcs	r3, r0
    7d2e:	b2db      	uxtb	r3, r3
    7d30:	0018      	movs	r0, r3
    7d32:	4770      	bx	lr

00007d34 <circular_buf_get>:
    7d34:	b570      	push	{r4, r5, r6, lr}
    7d36:	0004      	movs	r4, r0
    7d38:	000d      	movs	r5, r1
    7d3a:	4b0a      	ldr	r3, [pc, #40]	; (7d64 <circular_buf_get+0x30>)
    7d3c:	4798      	blx	r3
    7d3e:	2800      	cmp	r0, #0
    7d40:	d10d      	bne.n	7d5e <circular_buf_get+0x2a>
    7d42:	6823      	ldr	r3, [r4, #0]
    7d44:	68a2      	ldr	r2, [r4, #8]
    7d46:	5c9b      	ldrb	r3, [r3, r2]
    7d48:	702b      	strb	r3, [r5, #0]
    7d4a:	2300      	movs	r3, #0
    7d4c:	7423      	strb	r3, [r4, #16]
    7d4e:	68a3      	ldr	r3, [r4, #8]
    7d50:	1c58      	adds	r0, r3, #1
    7d52:	68e1      	ldr	r1, [r4, #12]
    7d54:	4b04      	ldr	r3, [pc, #16]	; (7d68 <circular_buf_get+0x34>)
    7d56:	4798      	blx	r3
    7d58:	60a1      	str	r1, [r4, #8]
    7d5a:	2000      	movs	r0, #0
    7d5c:	bd70      	pop	{r4, r5, r6, pc}
    7d5e:	2001      	movs	r0, #1
    7d60:	4240      	negs	r0, r0
    7d62:	e7fb      	b.n	7d5c <circular_buf_get+0x28>
    7d64:	00007d1d 	.word	0x00007d1d
    7d68:	00011e81 	.word	0x00011e81

00007d6c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
    7d6c:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
    7d6e:	4b06      	ldr	r3, [pc, #24]	; (7d88 <usart_write_callback+0x1c>)
    7d70:	6818      	ldr	r0, [r3, #0]
    7d72:	4906      	ldr	r1, [pc, #24]	; (7d8c <usart_write_callback+0x20>)
    7d74:	4b06      	ldr	r3, [pc, #24]	; (7d90 <usart_write_callback+0x24>)
    7d76:	4798      	blx	r3
    7d78:	1c43      	adds	r3, r0, #1
    7d7a:	d004      	beq.n	7d86 <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    7d7c:	2201      	movs	r2, #1
    7d7e:	4903      	ldr	r1, [pc, #12]	; (7d8c <usart_write_callback+0x20>)
    7d80:	4804      	ldr	r0, [pc, #16]	; (7d94 <usart_write_callback+0x28>)
    7d82:	4b05      	ldr	r3, [pc, #20]	; (7d98 <usart_write_callback+0x2c>)
    7d84:	4798      	blx	r3
	}
	
}
    7d86:	bd10      	pop	{r4, pc}
    7d88:	20005a54 	.word	0x20005a54
    7d8c:	20005a50 	.word	0x20005a50
    7d90:	00007d35 	.word	0x00007d35
    7d94:	20005614 	.word	0x20005614
    7d98:	0000d839 	.word	0x0000d839

00007d9c <usart_read_callback>:
{
    7d9c:	b510      	push	{r4, lr}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
    7d9e:	4c07      	ldr	r4, [pc, #28]	; (7dbc <usart_read_callback+0x20>)
    7da0:	7821      	ldrb	r1, [r4, #0]
    7da2:	4b07      	ldr	r3, [pc, #28]	; (7dc0 <usart_read_callback+0x24>)
    7da4:	6818      	ldr	r0, [r3, #0]
    7da6:	4b07      	ldr	r3, [pc, #28]	; (7dc4 <usart_read_callback+0x28>)
    7da8:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
    7daa:	2201      	movs	r2, #1
    7dac:	0021      	movs	r1, r4
    7dae:	4806      	ldr	r0, [pc, #24]	; (7dc8 <usart_read_callback+0x2c>)
    7db0:	4b06      	ldr	r3, [pc, #24]	; (7dcc <usart_read_callback+0x30>)
    7db2:	4798      	blx	r3
	CliCharReadySemaphoreGiveFromISR(); //Give binary semaphore
    7db4:	4b06      	ldr	r3, [pc, #24]	; (7dd0 <usart_read_callback+0x34>)
    7db6:	4798      	blx	r3
}
    7db8:	bd10      	pop	{r4, pc}
    7dba:	46c0      	nop			; (mov r8, r8)
    7dbc:	2000564c 	.word	0x2000564c
    7dc0:	20005648 	.word	0x20005648
    7dc4:	00007d09 	.word	0x00007d09
    7dc8:	20005614 	.word	0x20005614
    7dcc:	0000d859 	.word	0x0000d859
    7dd0:	00003181 	.word	0x00003181

00007dd4 <InitializeSerialConsole>:
{
    7dd4:	b530      	push	{r4, r5, lr}
    7dd6:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
    7dd8:	2580      	movs	r5, #128	; 0x80
    7dda:	00ad      	lsls	r5, r5, #2
    7ddc:	0029      	movs	r1, r5
    7dde:	4836      	ldr	r0, [pc, #216]	; (7eb8 <InitializeSerialConsole+0xe4>)
    7de0:	4c36      	ldr	r4, [pc, #216]	; (7ebc <InitializeSerialConsole+0xe8>)
    7de2:	47a0      	blx	r4
    7de4:	4b36      	ldr	r3, [pc, #216]	; (7ec0 <InitializeSerialConsole+0xec>)
    7de6:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
    7de8:	0029      	movs	r1, r5
    7dea:	4836      	ldr	r0, [pc, #216]	; (7ec4 <InitializeSerialConsole+0xf0>)
    7dec:	47a0      	blx	r4
    7dee:	4b36      	ldr	r3, [pc, #216]	; (7ec8 <InitializeSerialConsole+0xf4>)
    7df0:	6018      	str	r0, [r3, #0]
	config->data_order       = USART_DATAORDER_LSB;
    7df2:	2380      	movs	r3, #128	; 0x80
    7df4:	05db      	lsls	r3, r3, #23
    7df6:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    7df8:	2300      	movs	r3, #0
    7dfa:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    7dfc:	22ff      	movs	r2, #255	; 0xff
    7dfe:	4669      	mov	r1, sp
    7e00:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    7e02:	2200      	movs	r2, #0
    7e04:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7e06:	72cb      	strb	r3, [r1, #11]
	config->receiver_enable  = true;
    7e08:	2101      	movs	r1, #1
    7e0a:	2024      	movs	r0, #36	; 0x24
    7e0c:	466c      	mov	r4, sp
    7e0e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    7e10:	3001      	adds	r0, #1
    7e12:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    7e14:	3125      	adds	r1, #37	; 0x25
    7e16:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    7e18:	3101      	adds	r1, #1
    7e1a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    7e1c:	930a      	str	r3, [sp, #40]	; 0x28
	config->run_in_standby   = false;
    7e1e:	3105      	adds	r1, #5
    7e20:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    7e22:	3101      	adds	r1, #1
    7e24:	5463      	strb	r3, [r4, r1]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7e26:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7e28:	8223      	strh	r3, [r4, #16]
	config->lin_slave_enable      = false;
    7e2a:	76e3      	strb	r3, [r4, #27]
	config->immediate_buffer_overflow_notification  = false;
    7e2c:	7622      	strb	r2, [r4, #24]
	config->start_frame_detection_enable            = false;
    7e2e:	7722      	strb	r2, [r4, #28]
	config->encoding_format_enable                  = false;
    7e30:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    7e32:	2313      	movs	r3, #19
    7e34:	76a3      	strb	r3, [r4, #26]
	config->collision_detection_enable              = false;
    7e36:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
    7e38:	23e1      	movs	r3, #225	; 0xe1
    7e3a:	025b      	lsls	r3, r3, #9
    7e3c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    7e3e:	23c4      	movs	r3, #196	; 0xc4
    7e40:	039b      	lsls	r3, r3, #14
    7e42:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    7e44:	2301      	movs	r3, #1
    7e46:	425b      	negs	r3, r3
    7e48:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    7e4a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    7e4c:	4b1f      	ldr	r3, [pc, #124]	; (7ecc <InitializeSerialConsole+0xf8>)
    7e4e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    7e50:	4b1f      	ldr	r3, [pc, #124]	; (7ed0 <InitializeSerialConsole+0xfc>)
    7e52:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
    7e54:	4d1f      	ldr	r5, [pc, #124]	; (7ed4 <InitializeSerialConsole+0x100>)
    7e56:	4c20      	ldr	r4, [pc, #128]	; (7ed8 <InitializeSerialConsole+0x104>)
    7e58:	466a      	mov	r2, sp
    7e5a:	4920      	ldr	r1, [pc, #128]	; (7edc <InitializeSerialConsole+0x108>)
    7e5c:	0028      	movs	r0, r5
    7e5e:	47a0      	blx	r4
    7e60:	2800      	cmp	r0, #0
    7e62:	d1f9      	bne.n	7e58 <InitializeSerialConsole+0x84>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7e64:	4d1b      	ldr	r5, [pc, #108]	; (7ed4 <InitializeSerialConsole+0x100>)
    7e66:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7e68:	0020      	movs	r0, r4
    7e6a:	4b1d      	ldr	r3, [pc, #116]	; (7ee0 <InitializeSerialConsole+0x10c>)
    7e6c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7e6e:	231f      	movs	r3, #31
    7e70:	4018      	ands	r0, r3
    7e72:	3b1e      	subs	r3, #30
    7e74:	4083      	lsls	r3, r0
    7e76:	4a1b      	ldr	r2, [pc, #108]	; (7ee4 <InitializeSerialConsole+0x110>)
    7e78:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7e7a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7e7c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7e7e:	2b00      	cmp	r3, #0
    7e80:	d1fc      	bne.n	7e7c <InitializeSerialConsole+0xa8>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7e82:	6823      	ldr	r3, [r4, #0]
    7e84:	2202      	movs	r2, #2
    7e86:	4313      	orrs	r3, r2
    7e88:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
    7e8a:	4c12      	ldr	r4, [pc, #72]	; (7ed4 <InitializeSerialConsole+0x100>)
    7e8c:	2200      	movs	r2, #0
    7e8e:	4916      	ldr	r1, [pc, #88]	; (7ee8 <InitializeSerialConsole+0x114>)
    7e90:	0020      	movs	r0, r4
    7e92:	4d16      	ldr	r5, [pc, #88]	; (7eec <InitializeSerialConsole+0x118>)
    7e94:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
    7e96:	2201      	movs	r2, #1
    7e98:	4915      	ldr	r1, [pc, #84]	; (7ef0 <InitializeSerialConsole+0x11c>)
    7e9a:	0020      	movs	r0, r4
    7e9c:	47a8      	blx	r5
    7e9e:	2231      	movs	r2, #49	; 0x31
    7ea0:	5ca3      	ldrb	r3, [r4, r2]
    7ea2:	2103      	movs	r1, #3
    7ea4:	430b      	orrs	r3, r1
    7ea6:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
    7ea8:	3a30      	subs	r2, #48	; 0x30
    7eaa:	4912      	ldr	r1, [pc, #72]	; (7ef4 <InitializeSerialConsole+0x120>)
    7eac:	0020      	movs	r0, r4
    7eae:	4b12      	ldr	r3, [pc, #72]	; (7ef8 <InitializeSerialConsole+0x124>)
    7eb0:	4798      	blx	r3
}
    7eb2:	b011      	add	sp, #68	; 0x44
    7eb4:	bd30      	pop	{r4, r5, pc}
    7eb6:	46c0      	nop			; (mov r8, r8)
    7eb8:	20005850 	.word	0x20005850
    7ebc:	00007ce9 	.word	0x00007ce9
    7ec0:	20005648 	.word	0x20005648
    7ec4:	20005650 	.word	0x20005650
    7ec8:	20005a54 	.word	0x20005a54
    7ecc:	002a0003 	.word	0x002a0003
    7ed0:	002b0003 	.word	0x002b0003
    7ed4:	20005614 	.word	0x20005614
    7ed8:	0000d451 	.word	0x0000d451
    7edc:	42001800 	.word	0x42001800
    7ee0:	0000cccd 	.word	0x0000cccd
    7ee4:	e000e100 	.word	0xe000e100
    7ee8:	00007d6d 	.word	0x00007d6d
    7eec:	0000d821 	.word	0x0000d821
    7ef0:	00007d9d 	.word	0x00007d9d
    7ef4:	2000564c 	.word	0x2000564c
    7ef8:	0000d859 	.word	0x0000d859

00007efc <SerialConsoleWriteString>:
{
    7efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7efe:	46c6      	mov	lr, r8
    7f00:	b500      	push	{lr}
    7f02:	0005      	movs	r5, r0
vTaskSuspendAll();
    7f04:	4b14      	ldr	r3, [pc, #80]	; (7f58 <SerialConsoleWriteString+0x5c>)
    7f06:	4798      	blx	r3
    7f08:	2400      	movs	r4, #0
	if(string != NULL)
    7f0a:	2d00      	cmp	r5, #0
    7f0c:	d012      	beq.n	7f34 <SerialConsoleWriteString+0x38>
		for (size_t iter = 0; iter < strlen(string); iter++)
    7f0e:	4e13      	ldr	r6, [pc, #76]	; (7f5c <SerialConsoleWriteString+0x60>)
			circular_buf_put(cbufTx, string[iter]);
    7f10:	4f13      	ldr	r7, [pc, #76]	; (7f60 <SerialConsoleWriteString+0x64>)
    7f12:	4b14      	ldr	r3, [pc, #80]	; (7f64 <SerialConsoleWriteString+0x68>)
    7f14:	4698      	mov	r8, r3
    7f16:	e003      	b.n	7f20 <SerialConsoleWriteString+0x24>
    7f18:	5d29      	ldrb	r1, [r5, r4]
    7f1a:	6838      	ldr	r0, [r7, #0]
    7f1c:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
    7f1e:	3401      	adds	r4, #1
    7f20:	0028      	movs	r0, r5
    7f22:	47b0      	blx	r6
    7f24:	4284      	cmp	r4, r0
    7f26:	d3f7      	bcc.n	7f18 <SerialConsoleWriteString+0x1c>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
    7f28:	2101      	movs	r1, #1
    7f2a:	480f      	ldr	r0, [pc, #60]	; (7f68 <SerialConsoleWriteString+0x6c>)
    7f2c:	4b0f      	ldr	r3, [pc, #60]	; (7f6c <SerialConsoleWriteString+0x70>)
    7f2e:	4798      	blx	r3
    7f30:	2800      	cmp	r0, #0
    7f32:	d004      	beq.n	7f3e <SerialConsoleWriteString+0x42>
xTaskResumeAll();
    7f34:	4b0e      	ldr	r3, [pc, #56]	; (7f70 <SerialConsoleWriteString+0x74>)
    7f36:	4798      	blx	r3
}
    7f38:	bc04      	pop	{r2}
    7f3a:	4690      	mov	r8, r2
    7f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
    7f3e:	4c0d      	ldr	r4, [pc, #52]	; (7f74 <SerialConsoleWriteString+0x78>)
    7f40:	4b07      	ldr	r3, [pc, #28]	; (7f60 <SerialConsoleWriteString+0x64>)
    7f42:	6818      	ldr	r0, [r3, #0]
    7f44:	0021      	movs	r1, r4
    7f46:	4b0c      	ldr	r3, [pc, #48]	; (7f78 <SerialConsoleWriteString+0x7c>)
    7f48:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
    7f4a:	2201      	movs	r2, #1
    7f4c:	0021      	movs	r1, r4
    7f4e:	4806      	ldr	r0, [pc, #24]	; (7f68 <SerialConsoleWriteString+0x6c>)
    7f50:	4b0a      	ldr	r3, [pc, #40]	; (7f7c <SerialConsoleWriteString+0x80>)
    7f52:	4798      	blx	r3
    7f54:	e7ee      	b.n	7f34 <SerialConsoleWriteString+0x38>
    7f56:	46c0      	nop			; (mov r8, r8)
    7f58:	00006e05 	.word	0x00006e05
    7f5c:	00014633 	.word	0x00014633
    7f60:	20005a54 	.word	0x20005a54
    7f64:	00007d09 	.word	0x00007d09
    7f68:	20005614 	.word	0x20005614
    7f6c:	0000d879 	.word	0x0000d879
    7f70:	00006fad 	.word	0x00006fad
    7f74:	20005a50 	.word	0x20005a50
    7f78:	00007d35 	.word	0x00007d35
    7f7c:	0000d839 	.word	0x0000d839

00007f80 <SerialConsoleReadCharacter>:
{
    7f80:	b510      	push	{r4, lr}
    7f82:	0004      	movs	r4, r0
	vTaskSuspendAll();
    7f84:	4b05      	ldr	r3, [pc, #20]	; (7f9c <SerialConsoleReadCharacter+0x1c>)
    7f86:	4798      	blx	r3
	int a = circular_buf_get(cbufRx, (uint8_t*) rxChar);
    7f88:	4b05      	ldr	r3, [pc, #20]	; (7fa0 <SerialConsoleReadCharacter+0x20>)
    7f8a:	6818      	ldr	r0, [r3, #0]
    7f8c:	0021      	movs	r1, r4
    7f8e:	4b05      	ldr	r3, [pc, #20]	; (7fa4 <SerialConsoleReadCharacter+0x24>)
    7f90:	4798      	blx	r3
    7f92:	0004      	movs	r4, r0
	xTaskResumeAll();
    7f94:	4b04      	ldr	r3, [pc, #16]	; (7fa8 <SerialConsoleReadCharacter+0x28>)
    7f96:	4798      	blx	r3
}
    7f98:	0020      	movs	r0, r4
    7f9a:	bd10      	pop	{r4, pc}
    7f9c:	00006e05 	.word	0x00006e05
    7fa0:	20005648 	.word	0x20005648
    7fa4:	00007d35 	.word	0x00007d35
    7fa8:	00006fad 	.word	0x00006fad

00007fac <LogMessage>:
{
    7fac:	b40e      	push	{r1, r2, r3}
    7fae:	b530      	push	{r4, r5, lr}
    7fb0:	b082      	sub	sp, #8
return currentDebugLevel;
    7fb2:	4b0a      	ldr	r3, [pc, #40]	; (7fdc <LogMessage+0x30>)
if(getLogLevel() <= level){
    7fb4:	781b      	ldrb	r3, [r3, #0]
    7fb6:	4283      	cmp	r3, r0
    7fb8:	d904      	bls.n	7fc4 <LogMessage+0x18>
};
    7fba:	b002      	add	sp, #8
    7fbc:	bc30      	pop	{r4, r5}
    7fbe:	bc08      	pop	{r3}
    7fc0:	b003      	add	sp, #12
    7fc2:	4718      	bx	r3
	va_start(ap, format);
    7fc4:	ab06      	add	r3, sp, #24
    7fc6:	9301      	str	r3, [sp, #4]
	vsnprintf(debugBuffer, 127, format, ap);
    7fc8:	4c05      	ldr	r4, [pc, #20]	; (7fe0 <LogMessage+0x34>)
    7fca:	9a05      	ldr	r2, [sp, #20]
    7fcc:	217f      	movs	r1, #127	; 0x7f
    7fce:	0020      	movs	r0, r4
    7fd0:	4d04      	ldr	r5, [pc, #16]	; (7fe4 <LogMessage+0x38>)
    7fd2:	47a8      	blx	r5
	SerialConsoleWriteString(debugBuffer);
    7fd4:	0020      	movs	r0, r4
    7fd6:	4b04      	ldr	r3, [pc, #16]	; (7fe8 <LogMessage+0x3c>)
    7fd8:	4798      	blx	r3
};
    7fda:	e7ee      	b.n	7fba <LogMessage+0xe>
    7fdc:	20003e3c 	.word	0x20003e3c
    7fe0:	20005594 	.word	0x20005594
    7fe4:	000149a5 	.word	0x000149a5
    7fe8:	00007efd 	.word	0x00007efd

00007fec <LogMessageDebug>:
{
    7fec:	b40f      	push	{r0, r1, r2, r3}
    7fee:	b510      	push	{r4, lr}
LogMessage(LOG_DEBUG_LVL, format);
    7ff0:	9902      	ldr	r1, [sp, #8]
    7ff2:	2001      	movs	r0, #1
    7ff4:	4b02      	ldr	r3, [pc, #8]	; (8000 <LogMessageDebug+0x14>)
    7ff6:	4798      	blx	r3
};
    7ff8:	bc10      	pop	{r4}
    7ffa:	bc08      	pop	{r3}
    7ffc:	b004      	add	sp, #16
    7ffe:	4718      	bx	r3
    8000:	00007fad 	.word	0x00007fad

00008004 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    8004:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    8006:	4b06      	ldr	r3, [pc, #24]	; (8020 <sd_mmc_configure_slot+0x1c>)
    8008:	6819      	ldr	r1, [r3, #0]
    800a:	7f8b      	ldrb	r3, [r1, #30]
    800c:	1e5a      	subs	r2, r3, #1
    800e:	4193      	sbcs	r3, r2
    8010:	b2db      	uxtb	r3, r3
    8012:	7b4a      	ldrb	r2, [r1, #13]
    8014:	6809      	ldr	r1, [r1, #0]
    8016:	4803      	ldr	r0, [pc, #12]	; (8024 <sd_mmc_configure_slot+0x20>)
    8018:	7800      	ldrb	r0, [r0, #0]
    801a:	4c03      	ldr	r4, [pc, #12]	; (8028 <sd_mmc_configure_slot+0x24>)
    801c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
    801e:	bd10      	pop	{r4, pc}
    8020:	20003e40 	.word	0x20003e40
    8024:	20003e68 	.word	0x20003e68
    8028:	00008b8d 	.word	0x00008b8d

0000802c <sd_mmc_select_slot>:
{
    802c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
    802e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
    8030:	2800      	cmp	r0, #0
    8032:	d001      	beq.n	8038 <sd_mmc_select_slot+0xc>
}
    8034:	0018      	movs	r0, r3
    8036:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    8038:	4b0e      	ldr	r3, [pc, #56]	; (8074 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    803a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    803c:	3b03      	subs	r3, #3
    803e:	2b01      	cmp	r3, #1
    8040:	d90d      	bls.n	805e <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
    8042:	2200      	movs	r2, #0
    8044:	4b0c      	ldr	r3, [pc, #48]	; (8078 <sd_mmc_select_slot+0x4c>)
    8046:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    8048:	4c0a      	ldr	r4, [pc, #40]	; (8074 <sd_mmc_select_slot+0x48>)
    804a:	4b0c      	ldr	r3, [pc, #48]	; (807c <sd_mmc_select_slot+0x50>)
    804c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
    804e:	4b0c      	ldr	r3, [pc, #48]	; (8080 <sd_mmc_select_slot+0x54>)
    8050:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    8052:	7aa3      	ldrb	r3, [r4, #10]
    8054:	3b02      	subs	r3, #2
    8056:	4258      	negs	r0, r3
    8058:	4143      	adcs	r3, r0
    805a:	b2db      	uxtb	r3, r3
    805c:	e7ea      	b.n	8034 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    805e:	4b05      	ldr	r3, [pc, #20]	; (8074 <sd_mmc_select_slot+0x48>)
    8060:	2202      	movs	r2, #2
    8062:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    8064:	4a07      	ldr	r2, [pc, #28]	; (8084 <sd_mmc_select_slot+0x58>)
    8066:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
    8068:	2201      	movs	r2, #1
    806a:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
    806c:	2200      	movs	r2, #0
    806e:	779a      	strb	r2, [r3, #30]
    8070:	e7e7      	b.n	8042 <sd_mmc_select_slot+0x16>
    8072:	46c0      	nop			; (mov r8, r8)
    8074:	20003e44 	.word	0x20003e44
    8078:	20003e68 	.word	0x20003e68
    807c:	20003e40 	.word	0x20003e40
    8080:	00008005 	.word	0x00008005
    8084:	00061a80 	.word	0x00061a80

00008088 <sd_mmc_cmd13>:
{
    8088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    808a:	4d09      	ldr	r5, [pc, #36]	; (80b0 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    808c:	4f09      	ldr	r7, [pc, #36]	; (80b4 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
    808e:	4e0a      	ldr	r6, [pc, #40]	; (80b8 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    8090:	2100      	movs	r1, #0
    8092:	480a      	ldr	r0, [pc, #40]	; (80bc <sd_mmc_cmd13+0x34>)
    8094:	47b8      	blx	r7
    8096:	1e04      	subs	r4, r0, #0
    8098:	d007      	beq.n	80aa <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
    809a:	47b0      	blx	r6
    809c:	23ff      	movs	r3, #255	; 0xff
    809e:	4203      	tst	r3, r0
    80a0:	d003      	beq.n	80aa <sd_mmc_cmd13+0x22>
    80a2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
    80a4:	2d00      	cmp	r5, #0
    80a6:	d1f3      	bne.n	8090 <sd_mmc_cmd13+0x8>
			return false;
    80a8:	2400      	movs	r4, #0
}
    80aa:	0020      	movs	r0, r4
    80ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    80ae:	46c0      	nop			; (mov r8, r8)
    80b0:	00030d41 	.word	0x00030d41
    80b4:	00008dd1 	.word	0x00008dd1
    80b8:	00008de9 	.word	0x00008de9
    80bc:	00001b0d 	.word	0x00001b0d

000080c0 <sd_mmc_cmd9_spi>:
{
    80c0:	b510      	push	{r4, lr}
    80c2:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    80c4:	4b0c      	ldr	r3, [pc, #48]	; (80f8 <sd_mmc_cmd9_spi+0x38>)
    80c6:	681b      	ldr	r3, [r3, #0]
    80c8:	8919      	ldrh	r1, [r3, #8]
    80ca:	0409      	lsls	r1, r1, #16
    80cc:	2301      	movs	r3, #1
    80ce:	9300      	str	r3, [sp, #0]
    80d0:	2210      	movs	r2, #16
    80d2:	480a      	ldr	r0, [pc, #40]	; (80fc <sd_mmc_cmd9_spi+0x3c>)
    80d4:	4c0a      	ldr	r4, [pc, #40]	; (8100 <sd_mmc_cmd9_spi+0x40>)
    80d6:	47a0      	blx	r4
    80d8:	2800      	cmp	r0, #0
    80da:	d101      	bne.n	80e0 <sd_mmc_cmd9_spi+0x20>
}
    80dc:	b002      	add	sp, #8
    80de:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    80e0:	4b05      	ldr	r3, [pc, #20]	; (80f8 <sd_mmc_cmd9_spi+0x38>)
    80e2:	6818      	ldr	r0, [r3, #0]
    80e4:	300e      	adds	r0, #14
    80e6:	2101      	movs	r1, #1
    80e8:	4b06      	ldr	r3, [pc, #24]	; (8104 <sd_mmc_cmd9_spi+0x44>)
    80ea:	4798      	blx	r3
    80ec:	2800      	cmp	r0, #0
    80ee:	d0f5      	beq.n	80dc <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
    80f0:	4b05      	ldr	r3, [pc, #20]	; (8108 <sd_mmc_cmd9_spi+0x48>)
    80f2:	4798      	blx	r3
    80f4:	e7f2      	b.n	80dc <sd_mmc_cmd9_spi+0x1c>
    80f6:	46c0      	nop			; (mov r8, r8)
    80f8:	20003e40 	.word	0x20003e40
    80fc:	00081109 	.word	0x00081109
    8100:	00008c41 	.word	0x00008c41
    8104:	00008e6d 	.word	0x00008e6d
    8108:	00008ef9 	.word	0x00008ef9

0000810c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    810c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    810e:	4b04      	ldr	r3, [pc, #16]	; (8120 <sd_mmc_deselect_slot+0x14>)
    8110:	781b      	ldrb	r3, [r3, #0]
    8112:	2b00      	cmp	r3, #0
    8114:	d000      	beq.n	8118 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
    8116:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
    8118:	2000      	movs	r0, #0
    811a:	4b02      	ldr	r3, [pc, #8]	; (8124 <sd_mmc_deselect_slot+0x18>)
    811c:	4798      	blx	r3
}
    811e:	e7fa      	b.n	8116 <sd_mmc_deselect_slot+0xa>
    8120:	20003e68 	.word	0x20003e68
    8124:	00008be1 	.word	0x00008be1

00008128 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    8128:	b5f0      	push	{r4, r5, r6, r7, lr}
    812a:	46c6      	mov	lr, r8
    812c:	b500      	push	{lr}
    812e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    8130:	4bcb      	ldr	r3, [pc, #812]	; (8460 <sd_mmc_check+0x338>)
    8132:	4798      	blx	r3
    8134:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    8136:	2801      	cmp	r0, #1
    8138:	d006      	beq.n	8148 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
    813a:	4bca      	ldr	r3, [pc, #808]	; (8464 <sd_mmc_check+0x33c>)
    813c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
    813e:	0020      	movs	r0, r4
    8140:	b008      	add	sp, #32
    8142:	bc04      	pop	{r2}
    8144:	4690      	mov	r8, r2
    8146:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
    8148:	4bc7      	ldr	r3, [pc, #796]	; (8468 <sd_mmc_check+0x340>)
    814a:	681b      	ldr	r3, [r3, #0]
    814c:	2201      	movs	r2, #1
    814e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    8150:	2200      	movs	r2, #0
    8152:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    8154:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
    8156:	4bc5      	ldr	r3, [pc, #788]	; (846c <sd_mmc_check+0x344>)
    8158:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    815a:	2100      	movs	r1, #0
    815c:	2088      	movs	r0, #136	; 0x88
    815e:	0140      	lsls	r0, r0, #5
    8160:	4bc3      	ldr	r3, [pc, #780]	; (8470 <sd_mmc_check+0x348>)
    8162:	4798      	blx	r3
    8164:	2800      	cmp	r0, #0
    8166:	d107      	bne.n	8178 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    8168:	4bbf      	ldr	r3, [pc, #764]	; (8468 <sd_mmc_check+0x340>)
    816a:	681b      	ldr	r3, [r3, #0]
    816c:	2203      	movs	r2, #3
    816e:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    8170:	4bbc      	ldr	r3, [pc, #752]	; (8464 <sd_mmc_check+0x33c>)
    8172:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    8174:	2403      	movs	r4, #3
    8176:	e7e2      	b.n	813e <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    8178:	21d5      	movs	r1, #213	; 0xd5
    817a:	0049      	lsls	r1, r1, #1
    817c:	48bd      	ldr	r0, [pc, #756]	; (8474 <sd_mmc_check+0x34c>)
    817e:	4bbc      	ldr	r3, [pc, #752]	; (8470 <sd_mmc_check+0x348>)
    8180:	4798      	blx	r3
	*v2 = 0;
    8182:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
    8184:	2800      	cmp	r0, #0
    8186:	d125      	bne.n	81d4 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    8188:	4bb7      	ldr	r3, [pc, #732]	; (8468 <sd_mmc_check+0x340>)
    818a:	681b      	ldr	r3, [r3, #0]
    818c:	7adb      	ldrb	r3, [r3, #11]
    818e:	07db      	lsls	r3, r3, #31
    8190:	d500      	bpl.n	8194 <sd_mmc_check+0x6c>
    8192:	e1eb      	b.n	856c <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    8194:	4bb4      	ldr	r3, [pc, #720]	; (8468 <sd_mmc_check+0x340>)
    8196:	681b      	ldr	r3, [r3, #0]
    8198:	7ada      	ldrb	r2, [r3, #11]
    819a:	2309      	movs	r3, #9
    819c:	4013      	ands	r3, r2
    819e:	2b01      	cmp	r3, #1
    81a0:	d10f      	bne.n	81c2 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    81a2:	2180      	movs	r1, #128	; 0x80
    81a4:	0089      	lsls	r1, r1, #2
    81a6:	48b4      	ldr	r0, [pc, #720]	; (8478 <sd_mmc_check+0x350>)
    81a8:	4bb1      	ldr	r3, [pc, #708]	; (8470 <sd_mmc_check+0x348>)
    81aa:	4798      	blx	r3
    81ac:	2800      	cmp	r0, #0
    81ae:	d0db      	beq.n	8168 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    81b0:	4bad      	ldr	r3, [pc, #692]	; (8468 <sd_mmc_check+0x340>)
    81b2:	681b      	ldr	r3, [r3, #0]
    81b4:	7adb      	ldrb	r3, [r3, #11]
    81b6:	07db      	lsls	r3, r3, #31
    81b8:	d503      	bpl.n	81c2 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
    81ba:	4bb0      	ldr	r3, [pc, #704]	; (847c <sd_mmc_check+0x354>)
    81bc:	4798      	blx	r3
    81be:	2800      	cmp	r0, #0
    81c0:	d0d2      	beq.n	8168 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    81c2:	4baf      	ldr	r3, [pc, #700]	; (8480 <sd_mmc_check+0x358>)
    81c4:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    81c6:	4ba8      	ldr	r3, [pc, #672]	; (8468 <sd_mmc_check+0x340>)
    81c8:	681b      	ldr	r3, [r3, #0]
    81ca:	2200      	movs	r2, #0
    81cc:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    81ce:	4ba5      	ldr	r3, [pc, #660]	; (8464 <sd_mmc_check+0x33c>)
    81d0:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
    81d2:	e7b4      	b.n	813e <sd_mmc_check+0x16>
	resp = driver_get_response();
    81d4:	4bab      	ldr	r3, [pc, #684]	; (8484 <sd_mmc_check+0x35c>)
    81d6:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
    81d8:	1c43      	adds	r3, r0, #1
    81da:	d100      	bne.n	81de <sd_mmc_check+0xb6>
    81dc:	e1c4      	b.n	8568 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    81de:	0500      	lsls	r0, r0, #20
    81e0:	0d00      	lsrs	r0, r0, #20
    81e2:	23d5      	movs	r3, #213	; 0xd5
    81e4:	005b      	lsls	r3, r3, #1
	*v2 = 1;
    81e6:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
    81e8:	4298      	cmp	r0, r3
    81ea:	d1bd      	bne.n	8168 <sd_mmc_check+0x40>
    81ec:	e7cc      	b.n	8188 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    81ee:	2100      	movs	r1, #0
    81f0:	48a5      	ldr	r0, [pc, #660]	; (8488 <sd_mmc_check+0x360>)
    81f2:	4b9f      	ldr	r3, [pc, #636]	; (8470 <sd_mmc_check+0x348>)
    81f4:	4798      	blx	r3
    81f6:	2800      	cmp	r0, #0
    81f8:	d119      	bne.n	822e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
    81fa:	4b9b      	ldr	r3, [pc, #620]	; (8468 <sd_mmc_check+0x340>)
    81fc:	681b      	ldr	r3, [r3, #0]
    81fe:	2202      	movs	r2, #2
    8200:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    8202:	2100      	movs	r1, #0
    8204:	2088      	movs	r0, #136	; 0x88
    8206:	0140      	lsls	r0, r0, #5
    8208:	4b99      	ldr	r3, [pc, #612]	; (8470 <sd_mmc_check+0x348>)
    820a:	4798      	blx	r3
    820c:	2800      	cmp	r0, #0
    820e:	d0ab      	beq.n	8168 <sd_mmc_check+0x40>
    8210:	4d9e      	ldr	r5, [pc, #632]	; (848c <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    8212:	4f97      	ldr	r7, [pc, #604]	; (8470 <sd_mmc_check+0x348>)
		resp = driver_get_response();
    8214:	4e9b      	ldr	r6, [pc, #620]	; (8484 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
    8216:	2100      	movs	r1, #0
    8218:	489d      	ldr	r0, [pc, #628]	; (8490 <sd_mmc_check+0x368>)
    821a:	47b8      	blx	r7
    821c:	2800      	cmp	r0, #0
    821e:	d0a3      	beq.n	8168 <sd_mmc_check+0x40>
		resp = driver_get_response();
    8220:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    8222:	07c3      	lsls	r3, r0, #31
    8224:	d57d      	bpl.n	8322 <sd_mmc_check+0x1fa>
    8226:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    8228:	2d00      	cmp	r5, #0
    822a:	d1f4      	bne.n	8216 <sd_mmc_check+0xee>
    822c:	e79c      	b.n	8168 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
    822e:	4b95      	ldr	r3, [pc, #596]	; (8484 <sd_mmc_check+0x35c>)
    8230:	4798      	blx	r3
    8232:	0043      	lsls	r3, r0, #1
    8234:	d505      	bpl.n	8242 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
    8236:	4b8c      	ldr	r3, [pc, #560]	; (8468 <sd_mmc_check+0x340>)
    8238:	681a      	ldr	r2, [r3, #0]
    823a:	7ad3      	ldrb	r3, [r2, #11]
    823c:	2108      	movs	r1, #8
    823e:	430b      	orrs	r3, r1
    8240:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    8242:	2100      	movs	r1, #0
    8244:	4893      	ldr	r0, [pc, #588]	; (8494 <sd_mmc_check+0x36c>)
    8246:	4b8a      	ldr	r3, [pc, #552]	; (8470 <sd_mmc_check+0x348>)
    8248:	4798      	blx	r3
    824a:	2800      	cmp	r0, #0
    824c:	d08c      	beq.n	8168 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    824e:	4b86      	ldr	r3, [pc, #536]	; (8468 <sd_mmc_check+0x340>)
    8250:	681b      	ldr	r3, [r3, #0]
    8252:	7adb      	ldrb	r3, [r3, #11]
    8254:	07da      	lsls	r2, r3, #31
    8256:	d400      	bmi.n	825a <sd_mmc_check+0x132>
    8258:	e1a4      	b.n	85a4 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
    825a:	4b8f      	ldr	r3, [pc, #572]	; (8498 <sd_mmc_check+0x370>)
    825c:	4798      	blx	r3
    825e:	2800      	cmp	r0, #0
    8260:	d082      	beq.n	8168 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    8262:	4b81      	ldr	r3, [pc, #516]	; (8468 <sd_mmc_check+0x340>)
    8264:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8266:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    8268:	2107      	movs	r1, #7
    826a:	4019      	ands	r1, r3
    826c:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
    826e:	488b      	ldr	r0, [pc, #556]	; (849c <sd_mmc_check+0x374>)
    8270:	5808      	ldr	r0, [r1, r0]
    8272:	21fa      	movs	r1, #250	; 0xfa
    8274:	0089      	lsls	r1, r1, #2
    8276:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    8278:	065b      	lsls	r3, r3, #25
    827a:	0f1b      	lsrs	r3, r3, #28
    827c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    827e:	4888      	ldr	r0, [pc, #544]	; (84a0 <sd_mmc_check+0x378>)
    8280:	581b      	ldr	r3, [r3, r0]
    8282:	434b      	muls	r3, r1
    8284:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    8286:	7b93      	ldrb	r3, [r2, #14]
    8288:	099b      	lsrs	r3, r3, #6
    828a:	d000      	beq.n	828e <sd_mmc_check+0x166>
    828c:	e13c      	b.n	8508 <sd_mmc_check+0x3e0>
    828e:	7d91      	ldrb	r1, [r2, #22]
    8290:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    8292:	7d53      	ldrb	r3, [r2, #21]
    8294:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    8296:	7d10      	ldrb	r0, [r2, #20]
    8298:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    829a:	4303      	orrs	r3, r0
    829c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    829e:	7e10      	ldrb	r0, [r2, #24]
    82a0:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    82a2:	7dd1      	ldrb	r1, [r2, #23]
    82a4:	0049      	lsls	r1, r1, #1
    82a6:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
    82a8:	051b      	lsls	r3, r3, #20
    82aa:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    82ac:	3301      	adds	r3, #1
    82ae:	2107      	movs	r1, #7
    82b0:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    82b2:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    82b4:	408b      	lsls	r3, r1
    82b6:	7cd0      	ldrb	r0, [r2, #19]
    82b8:	210f      	movs	r1, #15
    82ba:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    82bc:	408b      	lsls	r3, r1
				/ 1024;
    82be:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    82c0:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    82c2:	8911      	ldrh	r1, [r2, #8]
    82c4:	0409      	lsls	r1, r1, #16
    82c6:	4877      	ldr	r0, [pc, #476]	; (84a4 <sd_mmc_check+0x37c>)
    82c8:	4b69      	ldr	r3, [pc, #420]	; (8470 <sd_mmc_check+0x348>)
    82ca:	4798      	blx	r3
    82cc:	2800      	cmp	r0, #0
    82ce:	d100      	bne.n	82d2 <sd_mmc_check+0x1aa>
    82d0:	e74a      	b.n	8168 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    82d2:	2301      	movs	r3, #1
    82d4:	9300      	str	r3, [sp, #0]
    82d6:	2208      	movs	r2, #8
    82d8:	2100      	movs	r1, #0
    82da:	4873      	ldr	r0, [pc, #460]	; (84a8 <sd_mmc_check+0x380>)
    82dc:	4d73      	ldr	r5, [pc, #460]	; (84ac <sd_mmc_check+0x384>)
    82de:	47a8      	blx	r5
    82e0:	2800      	cmp	r0, #0
    82e2:	d100      	bne.n	82e6 <sd_mmc_check+0x1be>
    82e4:	e740      	b.n	8168 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
    82e6:	2101      	movs	r1, #1
    82e8:	a806      	add	r0, sp, #24
    82ea:	4b71      	ldr	r3, [pc, #452]	; (84b0 <sd_mmc_check+0x388>)
    82ec:	4798      	blx	r3
    82ee:	2800      	cmp	r0, #0
    82f0:	d100      	bne.n	82f4 <sd_mmc_check+0x1cc>
    82f2:	e739      	b.n	8168 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
    82f4:	4b6f      	ldr	r3, [pc, #444]	; (84b4 <sd_mmc_check+0x38c>)
    82f6:	4798      	blx	r3
    82f8:	2800      	cmp	r0, #0
    82fa:	d100      	bne.n	82fe <sd_mmc_check+0x1d6>
    82fc:	e734      	b.n	8168 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    82fe:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
    8300:	781b      	ldrb	r3, [r3, #0]
    8302:	220f      	movs	r2, #15
    8304:	4013      	ands	r3, r2
    8306:	2b01      	cmp	r3, #1
    8308:	d100      	bne.n	830c <sd_mmc_check+0x1e4>
    830a:	e119      	b.n	8540 <sd_mmc_check+0x418>
    830c:	2b00      	cmp	r3, #0
    830e:	d100      	bne.n	8312 <sd_mmc_check+0x1ea>
    8310:	e109      	b.n	8526 <sd_mmc_check+0x3fe>
    8312:	2b02      	cmp	r3, #2
    8314:	d100      	bne.n	8318 <sd_mmc_check+0x1f0>
    8316:	e118      	b.n	854a <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    8318:	4b53      	ldr	r3, [pc, #332]	; (8468 <sd_mmc_check+0x340>)
    831a:	681b      	ldr	r3, [r3, #0]
    831c:	2210      	movs	r2, #16
    831e:	731a      	strb	r2, [r3, #12]
    8320:	e105      	b.n	852e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
    8322:	2100      	movs	r1, #0
    8324:	4858      	ldr	r0, [pc, #352]	; (8488 <sd_mmc_check+0x360>)
    8326:	4b52      	ldr	r3, [pc, #328]	; (8470 <sd_mmc_check+0x348>)
    8328:	4798      	blx	r3
    832a:	2800      	cmp	r0, #0
    832c:	d100      	bne.n	8330 <sd_mmc_check+0x208>
    832e:	e71b      	b.n	8168 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
    8330:	4b54      	ldr	r3, [pc, #336]	; (8484 <sd_mmc_check+0x35c>)
    8332:	4798      	blx	r3
    8334:	23c0      	movs	r3, #192	; 0xc0
    8336:	05db      	lsls	r3, r3, #23
    8338:	4018      	ands	r0, r3
    833a:	2380      	movs	r3, #128	; 0x80
    833c:	05db      	lsls	r3, r3, #23
    833e:	4298      	cmp	r0, r3
    8340:	d105      	bne.n	834e <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
    8342:	4b49      	ldr	r3, [pc, #292]	; (8468 <sd_mmc_check+0x340>)
    8344:	681a      	ldr	r2, [r3, #0]
    8346:	7ad1      	ldrb	r1, [r2, #11]
    8348:	2308      	movs	r3, #8
    834a:	430b      	orrs	r3, r1
    834c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    834e:	2100      	movs	r1, #0
    8350:	4850      	ldr	r0, [pc, #320]	; (8494 <sd_mmc_check+0x36c>)
    8352:	4b47      	ldr	r3, [pc, #284]	; (8470 <sd_mmc_check+0x348>)
    8354:	4798      	blx	r3
    8356:	2800      	cmp	r0, #0
    8358:	d100      	bne.n	835c <sd_mmc_check+0x234>
    835a:	e705      	b.n	8168 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
    835c:	4b4e      	ldr	r3, [pc, #312]	; (8498 <sd_mmc_check+0x370>)
    835e:	4798      	blx	r3
    8360:	2800      	cmp	r0, #0
    8362:	d100      	bne.n	8366 <sd_mmc_check+0x23e>
    8364:	e700      	b.n	8168 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    8366:	4b40      	ldr	r3, [pc, #256]	; (8468 <sd_mmc_check+0x340>)
    8368:	681a      	ldr	r2, [r3, #0]
    836a:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
    836c:	069b      	lsls	r3, r3, #26
    836e:	0f1b      	lsrs	r3, r3, #28
    8370:	2b02      	cmp	r3, #2
    8372:	d100      	bne.n	8376 <sd_mmc_check+0x24e>
    8374:	e0a8      	b.n	84c8 <sd_mmc_check+0x3a0>
    8376:	d907      	bls.n	8388 <sd_mmc_check+0x260>
    8378:	2b03      	cmp	r3, #3
    837a:	d100      	bne.n	837e <sd_mmc_check+0x256>
    837c:	e0a7      	b.n	84ce <sd_mmc_check+0x3a6>
    837e:	2b04      	cmp	r3, #4
    8380:	d104      	bne.n	838c <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
    8382:	2340      	movs	r3, #64	; 0x40
    8384:	7313      	strb	r3, [r2, #12]
    8386:	e003      	b.n	8390 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    8388:	2b01      	cmp	r3, #1
    838a:	d066      	beq.n	845a <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    838c:	2312      	movs	r3, #18
    838e:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8390:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    8392:	0659      	lsls	r1, r3, #25
    8394:	0f09      	lsrs	r1, r1, #28
    8396:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    8398:	2007      	movs	r0, #7
    839a:	4003      	ands	r3, r0
    839c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
    839e:	483f      	ldr	r0, [pc, #252]	; (849c <sd_mmc_check+0x374>)
    83a0:	5818      	ldr	r0, [r3, r0]
    83a2:	23fa      	movs	r3, #250	; 0xfa
    83a4:	009b      	lsls	r3, r3, #2
    83a6:	4343      	muls	r3, r0
    83a8:	4843      	ldr	r0, [pc, #268]	; (84b8 <sd_mmc_check+0x390>)
    83aa:	5809      	ldr	r1, [r1, r0]
    83ac:	434b      	muls	r3, r1
    83ae:	6013      	str	r3, [r2, #0]
    83b0:	7d91      	ldrb	r1, [r2, #22]
    83b2:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    83b4:	7d53      	ldrb	r3, [r2, #21]
    83b6:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    83b8:	7d10      	ldrb	r0, [r2, #20]
    83ba:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    83bc:	4303      	orrs	r3, r0
    83be:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
    83c0:	051b      	lsls	r3, r3, #20
    83c2:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    83c4:	493d      	ldr	r1, [pc, #244]	; (84bc <sd_mmc_check+0x394>)
    83c6:	428b      	cmp	r3, r1
    83c8:	d00f      	beq.n	83ea <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    83ca:	7e10      	ldrb	r0, [r2, #24]
    83cc:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    83ce:	7dd1      	ldrb	r1, [r2, #23]
    83d0:	0049      	lsls	r1, r1, #1
    83d2:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    83d4:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
    83d6:	2007      	movs	r0, #7
    83d8:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    83da:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    83dc:	408b      	lsls	r3, r1
    83de:	7cd1      	ldrb	r1, [r2, #19]
    83e0:	3008      	adds	r0, #8
    83e2:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
    83e4:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    83e6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    83e8:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    83ea:	7b13      	ldrb	r3, [r2, #12]
    83ec:	2b3f      	cmp	r3, #63	; 0x3f
    83ee:	d97b      	bls.n	84e8 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
    83f0:	2100      	movs	r1, #0
    83f2:	9100      	str	r1, [sp, #0]
    83f4:	2301      	movs	r3, #1
    83f6:	2280      	movs	r2, #128	; 0x80
    83f8:	0092      	lsls	r2, r2, #2
    83fa:	4831      	ldr	r0, [pc, #196]	; (84c0 <sd_mmc_check+0x398>)
    83fc:	4d2b      	ldr	r5, [pc, #172]	; (84ac <sd_mmc_check+0x384>)
    83fe:	47a8      	blx	r5
    8400:	2800      	cmp	r0, #0
    8402:	d100      	bne.n	8406 <sd_mmc_check+0x2de>
    8404:	e6b0      	b.n	8168 <sd_mmc_check+0x40>
    8406:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
    8408:	4e2e      	ldr	r6, [pc, #184]	; (84c4 <sd_mmc_check+0x39c>)
    840a:	a805      	add	r0, sp, #20
    840c:	47b0      	blx	r6
    840e:	2800      	cmp	r0, #0
    8410:	d100      	bne.n	8414 <sd_mmc_check+0x2ec>
    8412:	e6a9      	b.n	8168 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    8414:	3501      	adds	r5, #1
    8416:	b2ad      	uxth	r5, r5
    8418:	2d32      	cmp	r5, #50	; 0x32
    841a:	d1f6      	bne.n	840a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    841c:	4b12      	ldr	r3, [pc, #72]	; (8468 <sd_mmc_check+0x340>)
    841e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8420:	7d8a      	ldrb	r2, [r1, #22]
    8422:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    8424:	7d4b      	ldrb	r3, [r1, #21]
    8426:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    8428:	7d09      	ldrb	r1, [r1, #20]
    842a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    842c:	430b      	orrs	r3, r1
    842e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
    8430:	051b      	lsls	r3, r3, #20
    8432:	0d1b      	lsrs	r3, r3, #20
    8434:	4a21      	ldr	r2, [pc, #132]	; (84bc <sd_mmc_check+0x394>)
    8436:	4293      	cmp	r3, r2
    8438:	d154      	bne.n	84e4 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
    843a:	4e22      	ldr	r6, [pc, #136]	; (84c4 <sd_mmc_check+0x39c>)
    843c:	a806      	add	r0, sp, #24
    843e:	47b0      	blx	r6
    8440:	2800      	cmp	r0, #0
    8442:	d100      	bne.n	8446 <sd_mmc_check+0x31e>
    8444:	e690      	b.n	8168 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    8446:	3501      	adds	r5, #1
    8448:	b2ad      	uxth	r5, r5
    844a:	2d35      	cmp	r5, #53	; 0x35
    844c:	d9f6      	bls.n	843c <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
    844e:	4b06      	ldr	r3, [pc, #24]	; (8468 <sd_mmc_check+0x340>)
    8450:	681a      	ldr	r2, [r3, #0]
    8452:	9b06      	ldr	r3, [sp, #24]
    8454:	085b      	lsrs	r3, r3, #1
    8456:	6053      	str	r3, [r2, #4]
    8458:	e044      	b.n	84e4 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    845a:	2314      	movs	r3, #20
    845c:	7313      	strb	r3, [r2, #12]
    845e:	e797      	b.n	8390 <sd_mmc_check+0x268>
    8460:	0000802d 	.word	0x0000802d
    8464:	0000810d 	.word	0x0000810d
    8468:	20003e40 	.word	0x20003e40
    846c:	00008c09 	.word	0x00008c09
    8470:	00008dd1 	.word	0x00008dd1
    8474:	00005508 	.word	0x00005508
    8478:	00001110 	.word	0x00001110
    847c:	00008089 	.word	0x00008089
    8480:	00008005 	.word	0x00008005
    8484:	00008de9 	.word	0x00008de9
    8488:	0000053a 	.word	0x0000053a
    848c:	00001bef 	.word	0x00001bef
    8490:	00001101 	.word	0x00001101
    8494:	0000113b 	.word	0x0000113b
    8498:	000080c1 	.word	0x000080c1
    849c:	00017bc8 	.word	0x00017bc8
    84a0:	00017be4 	.word	0x00017be4
    84a4:	00001137 	.word	0x00001137
    84a8:	00081133 	.word	0x00081133
    84ac:	00008c41 	.word	0x00008c41
    84b0:	00008e6d 	.word	0x00008e6d
    84b4:	00008ef9 	.word	0x00008ef9
    84b8:	00017b88 	.word	0x00017b88
    84bc:	00000fff 	.word	0x00000fff
    84c0:	00081108 	.word	0x00081108
    84c4:	00008df5 	.word	0x00008df5
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    84c8:	2322      	movs	r3, #34	; 0x22
    84ca:	7313      	strb	r3, [r2, #12]
    84cc:	e760      	b.n	8390 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
    84ce:	2330      	movs	r3, #48	; 0x30
    84d0:	7313      	strb	r3, [r2, #12]
    84d2:	e75d      	b.n	8390 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
    84d4:	a806      	add	r0, sp, #24
    84d6:	4b36      	ldr	r3, [pc, #216]	; (85b0 <sd_mmc_check+0x488>)
    84d8:	4798      	blx	r3
    84da:	2800      	cmp	r0, #0
    84dc:	d100      	bne.n	84e0 <sd_mmc_check+0x3b8>
    84de:	e643      	b.n	8168 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    84e0:	3501      	adds	r5, #1
    84e2:	b2ad      	uxth	r5, r5
    84e4:	2d7f      	cmp	r5, #127	; 0x7f
    84e6:	d9f5      	bls.n	84d4 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    84e8:	2180      	movs	r1, #128	; 0x80
    84ea:	0089      	lsls	r1, r1, #2
    84ec:	4831      	ldr	r0, [pc, #196]	; (85b4 <sd_mmc_check+0x48c>)
    84ee:	4b32      	ldr	r3, [pc, #200]	; (85b8 <sd_mmc_check+0x490>)
    84f0:	4798      	blx	r3
    84f2:	2800      	cmp	r0, #0
    84f4:	d100      	bne.n	84f8 <sd_mmc_check+0x3d0>
    84f6:	e637      	b.n	8168 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
    84f8:	4b30      	ldr	r3, [pc, #192]	; (85bc <sd_mmc_check+0x494>)
    84fa:	4798      	blx	r3
    84fc:	2800      	cmp	r0, #0
    84fe:	d100      	bne.n	8502 <sd_mmc_check+0x3da>
    8500:	e632      	b.n	8168 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
    8502:	4b2f      	ldr	r3, [pc, #188]	; (85c0 <sd_mmc_check+0x498>)
    8504:	4798      	blx	r3
    8506:	e65e      	b.n	81c6 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    8508:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
    850a:	7d93      	ldrb	r3, [r2, #22]
    850c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    850e:	7d51      	ldrb	r1, [r2, #21]
    8510:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
    8512:	430b      	orrs	r3, r1
    8514:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
    8516:	029b      	lsls	r3, r3, #10
				* 512;
    8518:	085b      	lsrs	r3, r3, #1
    851a:	2180      	movs	r1, #128	; 0x80
    851c:	0089      	lsls	r1, r1, #2
    851e:	468c      	mov	ip, r1
    8520:	4463      	add	r3, ip
		sd_mmc_card->capacity =
    8522:	6053      	str	r3, [r2, #4]
    8524:	e6cd      	b.n	82c2 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
    8526:	4b27      	ldr	r3, [pc, #156]	; (85c4 <sd_mmc_check+0x49c>)
    8528:	681b      	ldr	r3, [r3, #0]
    852a:	2210      	movs	r2, #16
    852c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    852e:	4b25      	ldr	r3, [pc, #148]	; (85c4 <sd_mmc_check+0x49c>)
    8530:	681b      	ldr	r3, [r3, #0]
    8532:	7adb      	ldrb	r3, [r3, #11]
    8534:	2209      	movs	r2, #9
    8536:	4013      	ands	r3, r2
    8538:	2b01      	cmp	r3, #1
    853a:	d000      	beq.n	853e <sd_mmc_check+0x416>
    853c:	e638      	b.n	81b0 <sd_mmc_check+0x88>
    853e:	e630      	b.n	81a2 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
    8540:	4b20      	ldr	r3, [pc, #128]	; (85c4 <sd_mmc_check+0x49c>)
    8542:	681b      	ldr	r3, [r3, #0]
    8544:	221a      	movs	r2, #26
    8546:	731a      	strb	r2, [r3, #12]
    8548:	e7f1      	b.n	852e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
    854a:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    854c:	789b      	ldrb	r3, [r3, #2]
    854e:	09db      	lsrs	r3, r3, #7
    8550:	2b01      	cmp	r3, #1
    8552:	d104      	bne.n	855e <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    8554:	4b1b      	ldr	r3, [pc, #108]	; (85c4 <sd_mmc_check+0x49c>)
    8556:	681b      	ldr	r3, [r3, #0]
    8558:	2230      	movs	r2, #48	; 0x30
    855a:	731a      	strb	r2, [r3, #12]
    855c:	e7e7      	b.n	852e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    855e:	4b19      	ldr	r3, [pc, #100]	; (85c4 <sd_mmc_check+0x49c>)
    8560:	681b      	ldr	r3, [r3, #0]
    8562:	2220      	movs	r2, #32
    8564:	731a      	strb	r2, [r3, #12]
    8566:	e7e2      	b.n	852e <sd_mmc_check+0x406>
	*v2 = 0;
    8568:	2600      	movs	r6, #0
    856a:	e60d      	b.n	8188 <sd_mmc_check+0x60>
    856c:	1e73      	subs	r3, r6, #1
    856e:	419e      	sbcs	r6, r3
    8570:	07b3      	lsls	r3, r6, #30
    8572:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    8574:	4d14      	ldr	r5, [pc, #80]	; (85c8 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    8576:	4f10      	ldr	r7, [pc, #64]	; (85b8 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    8578:	46b8      	mov	r8, r7
		resp = driver_get_response();
    857a:	4e14      	ldr	r6, [pc, #80]	; (85cc <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
    857c:	2100      	movs	r1, #0
    857e:	4814      	ldr	r0, [pc, #80]	; (85d0 <sd_mmc_check+0x4a8>)
    8580:	47b8      	blx	r7
    8582:	2800      	cmp	r0, #0
    8584:	d100      	bne.n	8588 <sd_mmc_check+0x460>
    8586:	e638      	b.n	81fa <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
    8588:	9903      	ldr	r1, [sp, #12]
    858a:	4812      	ldr	r0, [pc, #72]	; (85d4 <sd_mmc_check+0x4ac>)
    858c:	47c0      	blx	r8
    858e:	2800      	cmp	r0, #0
    8590:	d100      	bne.n	8594 <sd_mmc_check+0x46c>
    8592:	e632      	b.n	81fa <sd_mmc_check+0xd2>
		resp = driver_get_response();
    8594:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
    8596:	07c3      	lsls	r3, r0, #31
    8598:	d400      	bmi.n	859c <sd_mmc_check+0x474>
    859a:	e628      	b.n	81ee <sd_mmc_check+0xc6>
    859c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
    859e:	2d00      	cmp	r5, #0
    85a0:	d1ec      	bne.n	857c <sd_mmc_check+0x454>
    85a2:	e62a      	b.n	81fa <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    85a4:	2209      	movs	r2, #9
    85a6:	4013      	ands	r3, r2
    85a8:	2b01      	cmp	r3, #1
    85aa:	d000      	beq.n	85ae <sd_mmc_check+0x486>
    85ac:	e609      	b.n	81c2 <sd_mmc_check+0x9a>
    85ae:	e5f8      	b.n	81a2 <sd_mmc_check+0x7a>
    85b0:	00008df5 	.word	0x00008df5
    85b4:	00001110 	.word	0x00001110
    85b8:	00008dd1 	.word	0x00008dd1
    85bc:	00008089 	.word	0x00008089
    85c0:	00008005 	.word	0x00008005
    85c4:	20003e40 	.word	0x20003e40
    85c8:	00001bef 	.word	0x00001bef
    85cc:	00008de9 	.word	0x00008de9
    85d0:	00001137 	.word	0x00001137
    85d4:	00001129 	.word	0x00001129

000085d8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    85d8:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    85da:	4b06      	ldr	r3, [pc, #24]	; (85f4 <sd_mmc_get_type+0x1c>)
    85dc:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
    85de:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    85e0:	2800      	cmp	r0, #0
    85e2:	d001      	beq.n	85e8 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
    85e4:	0018      	movs	r0, r3
    85e6:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    85e8:	4b03      	ldr	r3, [pc, #12]	; (85f8 <sd_mmc_get_type+0x20>)
    85ea:	4798      	blx	r3
	return sd_mmc_card->type;
    85ec:	4b03      	ldr	r3, [pc, #12]	; (85fc <sd_mmc_get_type+0x24>)
    85ee:	681b      	ldr	r3, [r3, #0]
    85f0:	7adb      	ldrb	r3, [r3, #11]
    85f2:	e7f7      	b.n	85e4 <sd_mmc_get_type+0xc>
    85f4:	0000802d 	.word	0x0000802d
    85f8:	0000810d 	.word	0x0000810d
    85fc:	20003e40 	.word	0x20003e40

00008600 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    8600:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    8602:	4b06      	ldr	r3, [pc, #24]	; (861c <sd_mmc_get_capacity+0x1c>)
    8604:	4798      	blx	r3
		return 0;
    8606:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    8608:	2800      	cmp	r0, #0
    860a:	d001      	beq.n	8610 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
    860c:	0018      	movs	r0, r3
    860e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
    8610:	4b03      	ldr	r3, [pc, #12]	; (8620 <sd_mmc_get_capacity+0x20>)
    8612:	4798      	blx	r3
	return sd_mmc_card->capacity;
    8614:	4b03      	ldr	r3, [pc, #12]	; (8624 <sd_mmc_get_capacity+0x24>)
    8616:	681b      	ldr	r3, [r3, #0]
    8618:	685b      	ldr	r3, [r3, #4]
    861a:	e7f7      	b.n	860c <sd_mmc_get_capacity+0xc>
    861c:	0000802d 	.word	0x0000802d
    8620:	0000810d 	.word	0x0000810d
    8624:	20003e40 	.word	0x20003e40

00008628 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
    8628:	2000      	movs	r0, #0
    862a:	4770      	bx	lr

0000862c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    862c:	b570      	push	{r4, r5, r6, lr}
    862e:	b082      	sub	sp, #8
    8630:	000e      	movs	r6, r1
    8632:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    8634:	4b16      	ldr	r3, [pc, #88]	; (8690 <sd_mmc_init_read_blocks+0x64>)
    8636:	4798      	blx	r3
    8638:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    863a:	d002      	beq.n	8642 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
    863c:	0020      	movs	r0, r4
    863e:	b002      	add	sp, #8
    8640:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
    8642:	4b14      	ldr	r3, [pc, #80]	; (8694 <sd_mmc_init_read_blocks+0x68>)
    8644:	4798      	blx	r3
    8646:	2800      	cmp	r0, #0
    8648:	d017      	beq.n	867a <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
    864a:	2d01      	cmp	r5, #1
    864c:	d919      	bls.n	8682 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    864e:	4812      	ldr	r0, [pc, #72]	; (8698 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    8650:	4b12      	ldr	r3, [pc, #72]	; (869c <sd_mmc_init_read_blocks+0x70>)
    8652:	681b      	ldr	r3, [r3, #0]
    8654:	7adb      	ldrb	r3, [r3, #11]
    8656:	071b      	lsls	r3, r3, #28
    8658:	d400      	bmi.n	865c <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
    865a:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    865c:	2301      	movs	r3, #1
    865e:	9300      	str	r3, [sp, #0]
    8660:	002b      	movs	r3, r5
    8662:	2280      	movs	r2, #128	; 0x80
    8664:	0092      	lsls	r2, r2, #2
    8666:	0031      	movs	r1, r6
    8668:	4e0d      	ldr	r6, [pc, #52]	; (86a0 <sd_mmc_init_read_blocks+0x74>)
    866a:	47b0      	blx	r6
    866c:	2800      	cmp	r0, #0
    866e:	d00a      	beq.n	8686 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
    8670:	4b0c      	ldr	r3, [pc, #48]	; (86a4 <sd_mmc_init_read_blocks+0x78>)
    8672:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    8674:	4b0c      	ldr	r3, [pc, #48]	; (86a8 <sd_mmc_init_read_blocks+0x7c>)
    8676:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
    8678:	e7e0      	b.n	863c <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
    867a:	4b0c      	ldr	r3, [pc, #48]	; (86ac <sd_mmc_init_read_blocks+0x80>)
    867c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    867e:	3405      	adds	r4, #5
    8680:	e7dc      	b.n	863c <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    8682:	480b      	ldr	r0, [pc, #44]	; (86b0 <sd_mmc_init_read_blocks+0x84>)
    8684:	e7e4      	b.n	8650 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
    8686:	4b09      	ldr	r3, [pc, #36]	; (86ac <sd_mmc_init_read_blocks+0x80>)
    8688:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    868a:	2405      	movs	r4, #5
    868c:	e7d6      	b.n	863c <sd_mmc_init_read_blocks+0x10>
    868e:	46c0      	nop			; (mov r8, r8)
    8690:	0000802d 	.word	0x0000802d
    8694:	00008089 	.word	0x00008089
    8698:	00101112 	.word	0x00101112
    869c:	20003e40 	.word	0x20003e40
    86a0:	00008c41 	.word	0x00008c41
    86a4:	20003e64 	.word	0x20003e64
    86a8:	20003e66 	.word	0x20003e66
    86ac:	0000810d 	.word	0x0000810d
    86b0:	00081111 	.word	0x00081111

000086b4 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    86b4:	b510      	push	{r4, lr}
    86b6:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    86b8:	4b07      	ldr	r3, [pc, #28]	; (86d8 <sd_mmc_start_read_blocks+0x24>)
    86ba:	4798      	blx	r3
    86bc:	2800      	cmp	r0, #0
    86be:	d104      	bne.n	86ca <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    86c0:	2200      	movs	r2, #0
    86c2:	4b06      	ldr	r3, [pc, #24]	; (86dc <sd_mmc_start_read_blocks+0x28>)
    86c4:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    86c6:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    86c8:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    86ca:	4a04      	ldr	r2, [pc, #16]	; (86dc <sd_mmc_start_read_blocks+0x28>)
    86cc:	8813      	ldrh	r3, [r2, #0]
    86ce:	1b1c      	subs	r4, r3, r4
    86d0:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    86d2:	2000      	movs	r0, #0
    86d4:	e7f8      	b.n	86c8 <sd_mmc_start_read_blocks+0x14>
    86d6:	46c0      	nop			; (mov r8, r8)
    86d8:	00008e6d 	.word	0x00008e6d
    86dc:	20003e64 	.word	0x20003e64

000086e0 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    86e0:	b510      	push	{r4, lr}
    86e2:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
    86e4:	4b14      	ldr	r3, [pc, #80]	; (8738 <sd_mmc_wait_end_of_read_blocks+0x58>)
    86e6:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    86e8:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
    86ea:	2800      	cmp	r0, #0
    86ec:	d101      	bne.n	86f2 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    86ee:	0018      	movs	r0, r3
    86f0:	bd10      	pop	{r4, pc}
	if (abort) {
    86f2:	2c00      	cmp	r4, #0
    86f4:	d010      	beq.n	8718 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
    86f6:	2200      	movs	r2, #0
    86f8:	4b10      	ldr	r3, [pc, #64]	; (873c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    86fa:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    86fc:	4b10      	ldr	r3, [pc, #64]	; (8740 <sd_mmc_wait_end_of_read_blocks+0x60>)
    86fe:	881b      	ldrh	r3, [r3, #0]
    8700:	2b01      	cmp	r3, #1
    8702:	d00f      	beq.n	8724 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    8704:	2100      	movs	r1, #0
    8706:	480f      	ldr	r0, [pc, #60]	; (8744 <sd_mmc_wait_end_of_read_blocks+0x64>)
    8708:	4b0f      	ldr	r3, [pc, #60]	; (8748 <sd_mmc_wait_end_of_read_blocks+0x68>)
    870a:	4798      	blx	r3
    870c:	2800      	cmp	r0, #0
    870e:	d00d      	beq.n	872c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
    8710:	4b0e      	ldr	r3, [pc, #56]	; (874c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    8712:	4798      	blx	r3
	return SD_MMC_OK;
    8714:	2300      	movs	r3, #0
    8716:	e7ea      	b.n	86ee <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    8718:	4b08      	ldr	r3, [pc, #32]	; (873c <sd_mmc_wait_end_of_read_blocks+0x5c>)
    871a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    871c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    871e:	2a00      	cmp	r2, #0
    8720:	d0ec      	beq.n	86fc <sd_mmc_wait_end_of_read_blocks+0x1c>
    8722:	e7e4      	b.n	86ee <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
    8724:	4b09      	ldr	r3, [pc, #36]	; (874c <sd_mmc_wait_end_of_read_blocks+0x6c>)
    8726:	4798      	blx	r3
		return SD_MMC_OK;
    8728:	2300      	movs	r3, #0
    872a:	e7e0      	b.n	86ee <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    872c:	2100      	movs	r1, #0
    872e:	4805      	ldr	r0, [pc, #20]	; (8744 <sd_mmc_wait_end_of_read_blocks+0x64>)
    8730:	4b05      	ldr	r3, [pc, #20]	; (8748 <sd_mmc_wait_end_of_read_blocks+0x68>)
    8732:	4798      	blx	r3
    8734:	e7ec      	b.n	8710 <sd_mmc_wait_end_of_read_blocks+0x30>
    8736:	46c0      	nop			; (mov r8, r8)
    8738:	00008ef9 	.word	0x00008ef9
    873c:	20003e64 	.word	0x20003e64
    8740:	20003e66 	.word	0x20003e66
    8744:	0000310c 	.word	0x0000310c
    8748:	00008dd1 	.word	0x00008dd1
    874c:	0000810d 	.word	0x0000810d

00008750 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    8750:	b570      	push	{r4, r5, r6, lr}
    8752:	b082      	sub	sp, #8
    8754:	000e      	movs	r6, r1
    8756:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    8758:	4b11      	ldr	r3, [pc, #68]	; (87a0 <sd_mmc_init_write_blocks+0x50>)
    875a:	4798      	blx	r3
    875c:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
    875e:	d116      	bne.n	878e <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
    8760:	2d01      	cmp	r5, #1
    8762:	d917      	bls.n	8794 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    8764:	480f      	ldr	r0, [pc, #60]	; (87a4 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    8766:	4b10      	ldr	r3, [pc, #64]	; (87a8 <sd_mmc_init_write_blocks+0x58>)
    8768:	681b      	ldr	r3, [r3, #0]
    876a:	7adb      	ldrb	r3, [r3, #11]
    876c:	071b      	lsls	r3, r3, #28
    876e:	d400      	bmi.n	8772 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    8770:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    8772:	2301      	movs	r3, #1
    8774:	9300      	str	r3, [sp, #0]
    8776:	002b      	movs	r3, r5
    8778:	2280      	movs	r2, #128	; 0x80
    877a:	0092      	lsls	r2, r2, #2
    877c:	0031      	movs	r1, r6
    877e:	4e0b      	ldr	r6, [pc, #44]	; (87ac <sd_mmc_init_write_blocks+0x5c>)
    8780:	47b0      	blx	r6
    8782:	2800      	cmp	r0, #0
    8784:	d008      	beq.n	8798 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    8786:	4b0a      	ldr	r3, [pc, #40]	; (87b0 <sd_mmc_init_write_blocks+0x60>)
    8788:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    878a:	4b0a      	ldr	r3, [pc, #40]	; (87b4 <sd_mmc_init_write_blocks+0x64>)
    878c:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
    878e:	0020      	movs	r0, r4
    8790:	b002      	add	sp, #8
    8792:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    8794:	4808      	ldr	r0, [pc, #32]	; (87b8 <sd_mmc_init_write_blocks+0x68>)
    8796:	e7e6      	b.n	8766 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    8798:	4b08      	ldr	r3, [pc, #32]	; (87bc <sd_mmc_init_write_blocks+0x6c>)
    879a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    879c:	2405      	movs	r4, #5
    879e:	e7f6      	b.n	878e <sd_mmc_init_write_blocks+0x3e>
    87a0:	0000802d 	.word	0x0000802d
    87a4:	00109119 	.word	0x00109119
    87a8:	20003e40 	.word	0x20003e40
    87ac:	00008c41 	.word	0x00008c41
    87b0:	20003e64 	.word	0x20003e64
    87b4:	20003e66 	.word	0x20003e66
    87b8:	00089118 	.word	0x00089118
    87bc:	0000810d 	.word	0x0000810d

000087c0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    87c0:	b510      	push	{r4, lr}
    87c2:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    87c4:	4b07      	ldr	r3, [pc, #28]	; (87e4 <sd_mmc_start_write_blocks+0x24>)
    87c6:	4798      	blx	r3
    87c8:	2800      	cmp	r0, #0
    87ca:	d104      	bne.n	87d6 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    87cc:	2200      	movs	r2, #0
    87ce:	4b06      	ldr	r3, [pc, #24]	; (87e8 <sd_mmc_start_write_blocks+0x28>)
    87d0:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    87d2:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    87d4:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    87d6:	4a04      	ldr	r2, [pc, #16]	; (87e8 <sd_mmc_start_write_blocks+0x28>)
    87d8:	8813      	ldrh	r3, [r2, #0]
    87da:	1b1c      	subs	r4, r3, r4
    87dc:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    87de:	2000      	movs	r0, #0
    87e0:	e7f8      	b.n	87d4 <sd_mmc_start_write_blocks+0x14>
    87e2:	46c0      	nop			; (mov r8, r8)
    87e4:	00008efd 	.word	0x00008efd
    87e8:	20003e64 	.word	0x20003e64

000087ec <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    87ec:	b510      	push	{r4, lr}
    87ee:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    87f0:	4b0e      	ldr	r3, [pc, #56]	; (882c <sd_mmc_wait_end_of_write_blocks+0x40>)
    87f2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    87f4:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    87f6:	2800      	cmp	r0, #0
    87f8:	d101      	bne.n	87fe <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    87fa:	0018      	movs	r0, r3
    87fc:	bd10      	pop	{r4, pc}
	if (abort) {
    87fe:	2c00      	cmp	r4, #0
    8800:	d00a      	beq.n	8818 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    8802:	2200      	movs	r2, #0
    8804:	4b0a      	ldr	r3, [pc, #40]	; (8830 <sd_mmc_wait_end_of_write_blocks+0x44>)
    8806:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    8808:	4b0a      	ldr	r3, [pc, #40]	; (8834 <sd_mmc_wait_end_of_write_blocks+0x48>)
    880a:	881b      	ldrh	r3, [r3, #0]
    880c:	2b01      	cmp	r3, #1
    880e:	d009      	beq.n	8824 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    8810:	4b09      	ldr	r3, [pc, #36]	; (8838 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    8812:	4798      	blx	r3
	return SD_MMC_OK;
    8814:	2300      	movs	r3, #0
    8816:	e7f0      	b.n	87fa <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    8818:	4b05      	ldr	r3, [pc, #20]	; (8830 <sd_mmc_wait_end_of_write_blocks+0x44>)
    881a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    881c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    881e:	2a00      	cmp	r2, #0
    8820:	d0f2      	beq.n	8808 <sd_mmc_wait_end_of_write_blocks+0x1c>
    8822:	e7ea      	b.n	87fa <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    8824:	4b04      	ldr	r3, [pc, #16]	; (8838 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    8826:	4798      	blx	r3
		return SD_MMC_OK;
    8828:	2300      	movs	r3, #0
    882a:	e7e6      	b.n	87fa <sd_mmc_wait_end_of_write_blocks+0xe>
    882c:	00008f7d 	.word	0x00008f7d
    8830:	20003e64 	.word	0x20003e64
    8834:	20003e66 	.word	0x20003e66
    8838:	0000810d 	.word	0x0000810d

0000883c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    883c:	b510      	push	{r4, lr}
    883e:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    8840:	4b0f      	ldr	r3, [pc, #60]	; (8880 <sd_mmc_test_unit_ready+0x44>)
    8842:	4798      	blx	r3
    8844:	2801      	cmp	r0, #1
    8846:	d019      	beq.n	887c <sd_mmc_test_unit_ready+0x40>
    8848:	2800      	cmp	r0, #0
    884a:	d003      	beq.n	8854 <sd_mmc_test_unit_ready+0x18>
    884c:	2802      	cmp	r0, #2
    884e:	d010      	beq.n	8872 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    8850:	2001      	movs	r0, #1
	}
}
    8852:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    8854:	4b0b      	ldr	r3, [pc, #44]	; (8884 <sd_mmc_test_unit_ready+0x48>)
    8856:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    8858:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    885a:	2b00      	cmp	r3, #0
    885c:	d1f9      	bne.n	8852 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    885e:	0020      	movs	r0, r4
    8860:	4b09      	ldr	r3, [pc, #36]	; (8888 <sd_mmc_test_unit_ready+0x4c>)
    8862:	4798      	blx	r3
    8864:	0003      	movs	r3, r0
    8866:	2003      	movs	r0, #3
    8868:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    886a:	4243      	negs	r3, r0
    886c:	4158      	adcs	r0, r3
    886e:	0040      	lsls	r0, r0, #1
    8870:	e7ef      	b.n	8852 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    8872:	2200      	movs	r2, #0
    8874:	4b03      	ldr	r3, [pc, #12]	; (8884 <sd_mmc_test_unit_ready+0x48>)
    8876:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    8878:	2002      	movs	r0, #2
    887a:	e7ea      	b.n	8852 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    887c:	2003      	movs	r0, #3
    887e:	e7e8      	b.n	8852 <sd_mmc_test_unit_ready+0x16>
    8880:	00008129 	.word	0x00008129
    8884:	20003e6c 	.word	0x20003e6c
    8888:	000085d9 	.word	0x000085d9

0000888c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    888c:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    888e:	2000      	movs	r0, #0
    8890:	4b01      	ldr	r3, [pc, #4]	; (8898 <sd_mmc_test_unit_ready_0+0xc>)
    8892:	4798      	blx	r3
}
    8894:	bd10      	pop	{r4, pc}
    8896:	46c0      	nop			; (mov r8, r8)
    8898:	0000883d 	.word	0x0000883d

0000889c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    889c:	b570      	push	{r4, r5, r6, lr}
    889e:	0004      	movs	r4, r0
    88a0:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    88a2:	4b04      	ldr	r3, [pc, #16]	; (88b4 <sd_mmc_read_capacity+0x18>)
    88a4:	4798      	blx	r3
    88a6:	0040      	lsls	r0, r0, #1
    88a8:	3801      	subs	r0, #1
    88aa:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    88ac:	0020      	movs	r0, r4
    88ae:	4b02      	ldr	r3, [pc, #8]	; (88b8 <sd_mmc_read_capacity+0x1c>)
    88b0:	4798      	blx	r3
}
    88b2:	bd70      	pop	{r4, r5, r6, pc}
    88b4:	00008601 	.word	0x00008601
    88b8:	0000883d 	.word	0x0000883d

000088bc <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    88bc:	b510      	push	{r4, lr}
    88be:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    88c0:	2000      	movs	r0, #0
    88c2:	4b01      	ldr	r3, [pc, #4]	; (88c8 <sd_mmc_read_capacity_0+0xc>)
    88c4:	4798      	blx	r3
}
    88c6:	bd10      	pop	{r4, pc}
    88c8:	0000889d 	.word	0x0000889d

000088cc <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    88cc:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    88ce:	2000      	movs	r0, #0
    88d0:	4b01      	ldr	r3, [pc, #4]	; (88d8 <sd_mmc_wr_protect_0+0xc>)
    88d2:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    88d4:	bd10      	pop	{r4, pc}
    88d6:	46c0      	nop			; (mov r8, r8)
    88d8:	00008629 	.word	0x00008629

000088dc <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    88dc:	b510      	push	{r4, lr}
    88de:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    88e0:	2201      	movs	r2, #1
    88e2:	4b0c      	ldr	r3, [pc, #48]	; (8914 <sd_mmc_mem_2_ram+0x38>)
    88e4:	4798      	blx	r3
    88e6:	2800      	cmp	r0, #0
    88e8:	d004      	beq.n	88f4 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    88ea:	3802      	subs	r0, #2
    88ec:	4243      	negs	r3, r0
    88ee:	4158      	adcs	r0, r3
    88f0:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    88f2:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    88f4:	2101      	movs	r1, #1
    88f6:	0020      	movs	r0, r4
    88f8:	4b07      	ldr	r3, [pc, #28]	; (8918 <sd_mmc_mem_2_ram+0x3c>)
    88fa:	4798      	blx	r3
    88fc:	0003      	movs	r3, r0
		return CTRL_FAIL;
    88fe:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    8900:	2b00      	cmp	r3, #0
    8902:	d1f6      	bne.n	88f2 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    8904:	2000      	movs	r0, #0
    8906:	4b05      	ldr	r3, [pc, #20]	; (891c <sd_mmc_mem_2_ram+0x40>)
    8908:	4798      	blx	r3
    890a:	1e43      	subs	r3, r0, #1
    890c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    890e:	b2c0      	uxtb	r0, r0
    8910:	e7ef      	b.n	88f2 <sd_mmc_mem_2_ram+0x16>
    8912:	46c0      	nop			; (mov r8, r8)
    8914:	0000862d 	.word	0x0000862d
    8918:	000086b5 	.word	0x000086b5
    891c:	000086e1 	.word	0x000086e1

00008920 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    8920:	b510      	push	{r4, lr}
    8922:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    8924:	0001      	movs	r1, r0
    8926:	2000      	movs	r0, #0
    8928:	4b01      	ldr	r3, [pc, #4]	; (8930 <sd_mmc_mem_2_ram_0+0x10>)
    892a:	4798      	blx	r3
}
    892c:	bd10      	pop	{r4, pc}
    892e:	46c0      	nop			; (mov r8, r8)
    8930:	000088dd 	.word	0x000088dd

00008934 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    8934:	b510      	push	{r4, lr}
    8936:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    8938:	2201      	movs	r2, #1
    893a:	4b0c      	ldr	r3, [pc, #48]	; (896c <sd_mmc_ram_2_mem+0x38>)
    893c:	4798      	blx	r3
    893e:	2800      	cmp	r0, #0
    8940:	d004      	beq.n	894c <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    8942:	3802      	subs	r0, #2
    8944:	4243      	negs	r3, r0
    8946:	4158      	adcs	r0, r3
    8948:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    894a:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    894c:	2101      	movs	r1, #1
    894e:	0020      	movs	r0, r4
    8950:	4b07      	ldr	r3, [pc, #28]	; (8970 <sd_mmc_ram_2_mem+0x3c>)
    8952:	4798      	blx	r3
    8954:	0003      	movs	r3, r0
		return CTRL_FAIL;
    8956:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    8958:	2b00      	cmp	r3, #0
    895a:	d1f6      	bne.n	894a <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    895c:	2000      	movs	r0, #0
    895e:	4b05      	ldr	r3, [pc, #20]	; (8974 <sd_mmc_ram_2_mem+0x40>)
    8960:	4798      	blx	r3
    8962:	1e43      	subs	r3, r0, #1
    8964:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    8966:	b2c0      	uxtb	r0, r0
    8968:	e7ef      	b.n	894a <sd_mmc_ram_2_mem+0x16>
    896a:	46c0      	nop			; (mov r8, r8)
    896c:	00008751 	.word	0x00008751
    8970:	000087c1 	.word	0x000087c1
    8974:	000087ed 	.word	0x000087ed

00008978 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    8978:	b510      	push	{r4, lr}
    897a:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    897c:	0001      	movs	r1, r0
    897e:	2000      	movs	r0, #0
    8980:	4b01      	ldr	r3, [pc, #4]	; (8988 <sd_mmc_ram_2_mem_0+0x10>)
    8982:	4798      	blx	r3
}
    8984:	bd10      	pop	{r4, pc}
    8986:	46c0      	nop			; (mov r8, r8)
    8988:	00008935 	.word	0x00008935

0000898c <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    898c:	b500      	push	{lr}
    898e:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    8990:	466b      	mov	r3, sp
    8992:	1dd9      	adds	r1, r3, #7
    8994:	23ff      	movs	r3, #255	; 0xff
    8996:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    8998:	2201      	movs	r2, #1
    899a:	480b      	ldr	r0, [pc, #44]	; (89c8 <sd_mmc_spi_start_write_block+0x3c>)
    899c:	4b0b      	ldr	r3, [pc, #44]	; (89cc <sd_mmc_spi_start_write_block+0x40>)
    899e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    89a0:	4b0b      	ldr	r3, [pc, #44]	; (89d0 <sd_mmc_spi_start_write_block+0x44>)
    89a2:	881b      	ldrh	r3, [r3, #0]
    89a4:	2b01      	cmp	r3, #1
    89a6:	d00a      	beq.n	89be <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    89a8:	22fc      	movs	r2, #252	; 0xfc
    89aa:	466b      	mov	r3, sp
    89ac:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    89ae:	2201      	movs	r2, #1
    89b0:	466b      	mov	r3, sp
    89b2:	1d99      	adds	r1, r3, #6
    89b4:	4804      	ldr	r0, [pc, #16]	; (89c8 <sd_mmc_spi_start_write_block+0x3c>)
    89b6:	4b05      	ldr	r3, [pc, #20]	; (89cc <sd_mmc_spi_start_write_block+0x40>)
    89b8:	4798      	blx	r3
}
    89ba:	b003      	add	sp, #12
    89bc:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    89be:	22fe      	movs	r2, #254	; 0xfe
    89c0:	466b      	mov	r3, sp
    89c2:	719a      	strb	r2, [r3, #6]
    89c4:	e7f3      	b.n	89ae <sd_mmc_spi_start_write_block+0x22>
    89c6:	46c0      	nop			; (mov r8, r8)
    89c8:	20003e70 	.word	0x20003e70
    89cc:	0000d1b5 	.word	0x0000d1b5
    89d0:	20003eb4 	.word	0x20003eb4

000089d4 <sd_mmc_spi_wait_busy>:
{
    89d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    89d6:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    89d8:	466b      	mov	r3, sp
    89da:	1ddc      	adds	r4, r3, #7
    89dc:	23ff      	movs	r3, #255	; 0xff
    89de:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    89e0:	4e12      	ldr	r6, [pc, #72]	; (8a2c <sd_mmc_spi_wait_busy+0x58>)
    89e2:	2201      	movs	r2, #1
    89e4:	0021      	movs	r1, r4
    89e6:	0030      	movs	r0, r6
    89e8:	4d11      	ldr	r5, [pc, #68]	; (8a30 <sd_mmc_spi_wait_busy+0x5c>)
    89ea:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    89ec:	23ff      	movs	r3, #255	; 0xff
    89ee:	2201      	movs	r2, #1
    89f0:	0021      	movs	r1, r4
    89f2:	0030      	movs	r0, r6
    89f4:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    89f6:	23ff      	movs	r3, #255	; 0xff
    89f8:	2201      	movs	r2, #1
    89fa:	0021      	movs	r1, r4
    89fc:	0030      	movs	r0, r6
    89fe:	47a8      	blx	r5
    8a00:	4c0c      	ldr	r4, [pc, #48]	; (8a34 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    8a02:	466b      	mov	r3, sp
    8a04:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8a06:	4e09      	ldr	r6, [pc, #36]	; (8a2c <sd_mmc_spi_wait_busy+0x58>)
    8a08:	4f09      	ldr	r7, [pc, #36]	; (8a30 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    8a0a:	782b      	ldrb	r3, [r5, #0]
    8a0c:	2bff      	cmp	r3, #255	; 0xff
    8a0e:	d009      	beq.n	8a24 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    8a10:	23ff      	movs	r3, #255	; 0xff
    8a12:	2201      	movs	r2, #1
    8a14:	0029      	movs	r1, r5
    8a16:	0030      	movs	r0, r6
    8a18:	47b8      	blx	r7
    8a1a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    8a1c:	2c00      	cmp	r4, #0
    8a1e:	d1f4      	bne.n	8a0a <sd_mmc_spi_wait_busy+0x36>
			return false;
    8a20:	2000      	movs	r0, #0
    8a22:	e000      	b.n	8a26 <sd_mmc_spi_wait_busy+0x52>
	return true;
    8a24:	2001      	movs	r0, #1
}
    8a26:	b003      	add	sp, #12
    8a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a2a:	46c0      	nop			; (mov r8, r8)
    8a2c:	20003e70 	.word	0x20003e70
    8a30:	0000cfed 	.word	0x0000cfed
    8a34:	00030d40 	.word	0x00030d40

00008a38 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    8a38:	b570      	push	{r4, r5, r6, lr}
    8a3a:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    8a3c:	4b14      	ldr	r3, [pc, #80]	; (8a90 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    8a3e:	881c      	ldrh	r4, [r3, #0]
    8a40:	2c01      	cmp	r4, #1
    8a42:	d023      	beq.n	8a8c <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    8a44:	4b13      	ldr	r3, [pc, #76]	; (8a94 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    8a46:	8819      	ldrh	r1, [r3, #0]
    8a48:	4b13      	ldr	r3, [pc, #76]	; (8a98 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    8a4a:	6818      	ldr	r0, [r3, #0]
    8a4c:	4b13      	ldr	r3, [pc, #76]	; (8a9c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    8a4e:	4798      	blx	r3
		return true; // It is not the End of multi write
    8a50:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    8a52:	4284      	cmp	r4, r0
    8a54:	d902      	bls.n	8a5c <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    8a56:	0018      	movs	r0, r3
    8a58:	b002      	add	sp, #8
    8a5a:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    8a5c:	466b      	mov	r3, sp
    8a5e:	1ddc      	adds	r4, r3, #7
    8a60:	23ff      	movs	r3, #255	; 0xff
    8a62:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    8a64:	4e0e      	ldr	r6, [pc, #56]	; (8aa0 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    8a66:	2201      	movs	r2, #1
    8a68:	0021      	movs	r1, r4
    8a6a:	0030      	movs	r0, r6
    8a6c:	4d0d      	ldr	r5, [pc, #52]	; (8aa4 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    8a6e:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    8a70:	23fd      	movs	r3, #253	; 0xfd
    8a72:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    8a74:	2201      	movs	r2, #1
    8a76:	0021      	movs	r1, r4
    8a78:	0030      	movs	r0, r6
    8a7a:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    8a7c:	4b0a      	ldr	r3, [pc, #40]	; (8aa8 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    8a7e:	4798      	blx	r3
    8a80:	1e03      	subs	r3, r0, #0
    8a82:	d1e8      	bne.n	8a56 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8a84:	2105      	movs	r1, #5
    8a86:	4a09      	ldr	r2, [pc, #36]	; (8aac <sd_mmc_spi_stop_multiwrite_block+0x74>)
    8a88:	7011      	strb	r1, [r2, #0]
		return false;
    8a8a:	e7e4      	b.n	8a56 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    8a8c:	2301      	movs	r3, #1
    8a8e:	e7e2      	b.n	8a56 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    8a90:	20003eb4 	.word	0x20003eb4
    8a94:	20003eac 	.word	0x20003eac
    8a98:	20003ebc 	.word	0x20003ebc
    8a9c:	00011d75 	.word	0x00011d75
    8aa0:	20003e70 	.word	0x20003e70
    8aa4:	0000d1b5 	.word	0x0000d1b5
    8aa8:	000089d5 	.word	0x000089d5
    8aac:	20003eb3 	.word	0x20003eb3

00008ab0 <sd_mmc_spi_start_read_block>:
{
    8ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ab2:	b083      	sub	sp, #12
	token = 0;
    8ab4:	2200      	movs	r2, #0
    8ab6:	466b      	mov	r3, sp
    8ab8:	71da      	strb	r2, [r3, #7]
    8aba:	4c14      	ldr	r4, [pc, #80]	; (8b0c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    8abc:	466b      	mov	r3, sp
    8abe:	1ddd      	adds	r5, r3, #7
    8ac0:	4e13      	ldr	r6, [pc, #76]	; (8b10 <sd_mmc_spi_start_read_block+0x60>)
    8ac2:	4f14      	ldr	r7, [pc, #80]	; (8b14 <sd_mmc_spi_start_read_block+0x64>)
    8ac4:	23ff      	movs	r3, #255	; 0xff
    8ac6:	2201      	movs	r2, #1
    8ac8:	0029      	movs	r1, r5
    8aca:	0030      	movs	r0, r6
    8acc:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    8ace:	782b      	ldrb	r3, [r5, #0]
    8ad0:	220f      	movs	r2, #15
    8ad2:	0019      	movs	r1, r3
    8ad4:	4391      	bics	r1, r2
    8ad6:	1e0a      	subs	r2, r1, #0
    8ad8:	d009      	beq.n	8aee <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    8ada:	2bfe      	cmp	r3, #254	; 0xfe
    8adc:	d013      	beq.n	8b06 <sd_mmc_spi_start_read_block+0x56>
    8ade:	3c01      	subs	r4, #1
		if (i-- == 0) {
    8ae0:	2c00      	cmp	r4, #0
    8ae2:	d1ef      	bne.n	8ac4 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    8ae4:	2204      	movs	r2, #4
    8ae6:	4b0c      	ldr	r3, [pc, #48]	; (8b18 <sd_mmc_spi_start_read_block+0x68>)
    8ae8:	701a      	strb	r2, [r3, #0]
			return false;
    8aea:	2000      	movs	r0, #0
    8aec:	e00c      	b.n	8b08 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    8aee:	075b      	lsls	r3, r3, #29
    8af0:	d004      	beq.n	8afc <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    8af2:	3207      	adds	r2, #7
    8af4:	4b08      	ldr	r3, [pc, #32]	; (8b18 <sd_mmc_spi_start_read_block+0x68>)
    8af6:	701a      	strb	r2, [r3, #0]
			return false;
    8af8:	2000      	movs	r0, #0
    8afa:	e005      	b.n	8b08 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    8afc:	220b      	movs	r2, #11
    8afe:	4b06      	ldr	r3, [pc, #24]	; (8b18 <sd_mmc_spi_start_read_block+0x68>)
    8b00:	701a      	strb	r2, [r3, #0]
			return false;
    8b02:	2000      	movs	r0, #0
    8b04:	e000      	b.n	8b08 <sd_mmc_spi_start_read_block+0x58>
	return true;
    8b06:	2001      	movs	r0, #1
}
    8b08:	b003      	add	sp, #12
    8b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b0c:	0007a120 	.word	0x0007a120
    8b10:	20003e70 	.word	0x20003e70
    8b14:	0000cfed 	.word	0x0000cfed
    8b18:	20003eb3 	.word	0x20003eb3

00008b1c <sd_mmc_spi_stop_write_block>:
{
    8b1c:	b530      	push	{r4, r5, lr}
    8b1e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    8b20:	a901      	add	r1, sp, #4
    8b22:	2301      	movs	r3, #1
    8b24:	425b      	negs	r3, r3
    8b26:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    8b28:	4d14      	ldr	r5, [pc, #80]	; (8b7c <sd_mmc_spi_stop_write_block+0x60>)
    8b2a:	2202      	movs	r2, #2
    8b2c:	0028      	movs	r0, r5
    8b2e:	4b14      	ldr	r3, [pc, #80]	; (8b80 <sd_mmc_spi_stop_write_block+0x64>)
    8b30:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    8b32:	466b      	mov	r3, sp
    8b34:	1ddc      	adds	r4, r3, #7
    8b36:	23ff      	movs	r3, #255	; 0xff
    8b38:	2201      	movs	r2, #1
    8b3a:	0021      	movs	r1, r4
    8b3c:	0028      	movs	r0, r5
    8b3e:	4d11      	ldr	r5, [pc, #68]	; (8b84 <sd_mmc_spi_stop_write_block+0x68>)
    8b40:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    8b42:	7822      	ldrb	r2, [r4, #0]
    8b44:	2311      	movs	r3, #17
    8b46:	4013      	ands	r3, r2
    8b48:	2b01      	cmp	r3, #1
    8b4a:	d005      	beq.n	8b58 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    8b4c:	2201      	movs	r2, #1
    8b4e:	4b0e      	ldr	r3, [pc, #56]	; (8b88 <sd_mmc_spi_stop_write_block+0x6c>)
    8b50:	701a      	strb	r2, [r3, #0]
		return false;
    8b52:	2000      	movs	r0, #0
}
    8b54:	b003      	add	sp, #12
    8b56:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    8b58:	231e      	movs	r3, #30
    8b5a:	401a      	ands	r2, r3
    8b5c:	2a04      	cmp	r2, #4
    8b5e:	d00b      	beq.n	8b78 <sd_mmc_spi_stop_write_block+0x5c>
    8b60:	2a0a      	cmp	r2, #10
    8b62:	d104      	bne.n	8b6e <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    8b64:	3a02      	subs	r2, #2
    8b66:	4b08      	ldr	r3, [pc, #32]	; (8b88 <sd_mmc_spi_stop_write_block+0x6c>)
    8b68:	701a      	strb	r2, [r3, #0]
		return false;
    8b6a:	2000      	movs	r0, #0
    8b6c:	e7f2      	b.n	8b54 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    8b6e:	220a      	movs	r2, #10
    8b70:	4b05      	ldr	r3, [pc, #20]	; (8b88 <sd_mmc_spi_stop_write_block+0x6c>)
    8b72:	701a      	strb	r2, [r3, #0]
		return false;
    8b74:	2000      	movs	r0, #0
    8b76:	e7ed      	b.n	8b54 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    8b78:	2001      	movs	r0, #1
    8b7a:	e7eb      	b.n	8b54 <sd_mmc_spi_stop_write_block+0x38>
    8b7c:	20003e70 	.word	0x20003e70
    8b80:	0000d1b5 	.word	0x0000d1b5
    8b84:	0000cfed 	.word	0x0000cfed
    8b88:	20003eb3 	.word	0x20003eb3

00008b8c <sd_mmc_spi_select_device>:
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    8b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b8e:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8b90:	2200      	movs	r2, #0
    8b92:	4b0d      	ldr	r3, [pc, #52]	; (8bc8 <sd_mmc_spi_select_device+0x3c>)
    8b94:	701a      	strb	r2, [r3, #0]
    8b96:	000c      	movs	r4, r1
    8b98:	4b0c      	ldr	r3, [pc, #48]	; (8bcc <sd_mmc_spi_select_device+0x40>)
    8b9a:	4299      	cmp	r1, r3
    8b9c:	d900      	bls.n	8ba0 <sd_mmc_spi_select_device+0x14>
    8b9e:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    8ba0:	4d0b      	ldr	r5, [pc, #44]	; (8bd0 <sd_mmc_spi_select_device+0x44>)
    8ba2:	4e0c      	ldr	r6, [pc, #48]	; (8bd4 <sd_mmc_spi_select_device+0x48>)
    8ba4:	e001      	b.n	8baa <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    8ba6:	08e3      	lsrs	r3, r4, #3
    8ba8:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    8baa:	0021      	movs	r1, r4
    8bac:	0028      	movs	r0, r5
    8bae:	47b0      	blx	r6
    8bb0:	2817      	cmp	r0, #23
    8bb2:	d0f8      	beq.n	8ba6 <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    8bb4:	0079      	lsls	r1, r7, #1
    8bb6:	19cf      	adds	r7, r1, r7
    8bb8:	4907      	ldr	r1, [pc, #28]	; (8bd8 <sd_mmc_spi_select_device+0x4c>)
    8bba:	19c9      	adds	r1, r1, r7
    8bbc:	2201      	movs	r2, #1
    8bbe:	4804      	ldr	r0, [pc, #16]	; (8bd0 <sd_mmc_spi_select_device+0x44>)
    8bc0:	4b06      	ldr	r3, [pc, #24]	; (8bdc <sd_mmc_spi_select_device+0x50>)
    8bc2:	4798      	blx	r3
}
    8bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8bc6:	46c0      	nop			; (mov r8, r8)
    8bc8:	20003eb3 	.word	0x20003eb3
    8bcc:	00989680 	.word	0x00989680
    8bd0:	20003e70 	.word	0x20003e70
    8bd4:	0000cd5d 	.word	0x0000cd5d
    8bd8:	20003eb0 	.word	0x20003eb0
    8bdc:	0000d0c1 	.word	0x0000d0c1

00008be0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    8be0:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8be2:	2200      	movs	r2, #0
    8be4:	4b04      	ldr	r3, [pc, #16]	; (8bf8 <sd_mmc_spi_deselect_device+0x18>)
    8be6:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    8be8:	0041      	lsls	r1, r0, #1
    8bea:	1808      	adds	r0, r1, r0
    8bec:	4903      	ldr	r1, [pc, #12]	; (8bfc <sd_mmc_spi_deselect_device+0x1c>)
    8bee:	1809      	adds	r1, r1, r0
    8bf0:	4803      	ldr	r0, [pc, #12]	; (8c00 <sd_mmc_spi_deselect_device+0x20>)
    8bf2:	4b04      	ldr	r3, [pc, #16]	; (8c04 <sd_mmc_spi_deselect_device+0x24>)
    8bf4:	4798      	blx	r3
}
    8bf6:	bd10      	pop	{r4, pc}
    8bf8:	20003eb3 	.word	0x20003eb3
    8bfc:	20003eb0 	.word	0x20003eb0
    8c00:	20003e70 	.word	0x20003e70
    8c04:	0000d0c1 	.word	0x0000d0c1

00008c08 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    8c08:	b570      	push	{r4, r5, r6, lr}
    8c0a:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    8c0c:	22ff      	movs	r2, #255	; 0xff
    8c0e:	466b      	mov	r3, sp
    8c10:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8c12:	2200      	movs	r2, #0
    8c14:	4b07      	ldr	r3, [pc, #28]	; (8c34 <sd_mmc_spi_send_clock+0x2c>)
    8c16:	701a      	strb	r2, [r3, #0]
    8c18:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    8c1a:	4e07      	ldr	r6, [pc, #28]	; (8c38 <sd_mmc_spi_send_clock+0x30>)
    8c1c:	4d07      	ldr	r5, [pc, #28]	; (8c3c <sd_mmc_spi_send_clock+0x34>)
    8c1e:	2201      	movs	r2, #1
    8c20:	466b      	mov	r3, sp
    8c22:	1dd9      	adds	r1, r3, #7
    8c24:	0030      	movs	r0, r6
    8c26:	47a8      	blx	r5
    8c28:	3c01      	subs	r4, #1
    8c2a:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    8c2c:	2c00      	cmp	r4, #0
    8c2e:	d1f6      	bne.n	8c1e <sd_mmc_spi_send_clock+0x16>
	}
}
    8c30:	b002      	add	sp, #8
    8c32:	bd70      	pop	{r4, r5, r6, pc}
    8c34:	20003eb3 	.word	0x20003eb3
    8c38:	20003e70 	.word	0x20003e70
    8c3c:	0000d1b5 	.word	0x0000d1b5

00008c40 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    8c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c42:	46c6      	mov	lr, r8
    8c44:	b500      	push	{lr}
    8c46:	b086      	sub	sp, #24
    8c48:	4680      	mov	r8, r0
    8c4a:	9200      	str	r2, [sp, #0]
    8c4c:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    8c4e:	22ff      	movs	r2, #255	; 0xff
    8c50:	230f      	movs	r3, #15
    8c52:	a802      	add	r0, sp, #8
    8c54:	4684      	mov	ip, r0
    8c56:	4463      	add	r3, ip
    8c58:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8c5a:	2200      	movs	r2, #0
    8c5c:	4b53      	ldr	r3, [pc, #332]	; (8dac <sd_mmc_spi_adtc_start+0x16c>)
    8c5e:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    8c60:	ab04      	add	r3, sp, #16
    8c62:	323f      	adds	r2, #63	; 0x3f
    8c64:	4640      	mov	r0, r8
    8c66:	4002      	ands	r2, r0
    8c68:	2040      	movs	r0, #64	; 0x40
    8c6a:	4302      	orrs	r2, r0
    8c6c:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    8c6e:	0e0a      	lsrs	r2, r1, #24
    8c70:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    8c72:	0c0a      	lsrs	r2, r1, #16
    8c74:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    8c76:	0a0a      	lsrs	r2, r1, #8
    8c78:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    8c7a:	7119      	strb	r1, [r3, #4]
    8c7c:	2700      	movs	r7, #0
	crc = 0;
    8c7e:	2300      	movs	r3, #0
		value = *buf++;
    8c80:	a904      	add	r1, sp, #16
    8c82:	2208      	movs	r2, #8
				crc ^= 0x09;
    8c84:	2409      	movs	r4, #9
    8c86:	e011      	b.n	8cac <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    8c88:	0076      	lsls	r6, r6, #1
    8c8a:	b2f6      	uxtb	r6, r6
    8c8c:	3801      	subs	r0, #1
    8c8e:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    8c90:	2800      	cmp	r0, #0
    8c92:	d008      	beq.n	8ca6 <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    8c94:	005b      	lsls	r3, r3, #1
    8c96:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    8c98:	001d      	movs	r5, r3
    8c9a:	4075      	eors	r5, r6
    8c9c:	062d      	lsls	r5, r5, #24
    8c9e:	d5f3      	bpl.n	8c88 <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    8ca0:	4063      	eors	r3, r4
    8ca2:	b2db      	uxtb	r3, r3
    8ca4:	e7f0      	b.n	8c88 <sd_mmc_spi_adtc_start+0x48>
    8ca6:	3701      	adds	r7, #1
	while (size--) {
    8ca8:	2f05      	cmp	r7, #5
    8caa:	d002      	beq.n	8cb2 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    8cac:	5c7e      	ldrb	r6, [r7, r1]
    8cae:	0010      	movs	r0, r2
    8cb0:	e7f0      	b.n	8c94 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    8cb2:	005b      	lsls	r3, r3, #1
    8cb4:	2201      	movs	r2, #1
    8cb6:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    8cb8:	ac04      	add	r4, sp, #16
    8cba:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    8cbc:	4e3c      	ldr	r6, [pc, #240]	; (8db0 <sd_mmc_spi_adtc_start+0x170>)
    8cbe:	2201      	movs	r2, #1
    8cc0:	210f      	movs	r1, #15
    8cc2:	ab02      	add	r3, sp, #8
    8cc4:	469c      	mov	ip, r3
    8cc6:	4461      	add	r1, ip
    8cc8:	0030      	movs	r0, r6
    8cca:	4f3a      	ldr	r7, [pc, #232]	; (8db4 <sd_mmc_spi_adtc_start+0x174>)
    8ccc:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    8cce:	2206      	movs	r2, #6
    8cd0:	0021      	movs	r1, r4
    8cd2:	0030      	movs	r0, r6
    8cd4:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    8cd6:	ab02      	add	r3, sp, #8
    8cd8:	1dd9      	adds	r1, r3, #7
    8cda:	23ff      	movs	r3, #255	; 0xff
    8cdc:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    8cde:	2201      	movs	r2, #1
    8ce0:	0030      	movs	r0, r6
    8ce2:	4e35      	ldr	r6, [pc, #212]	; (8db8 <sd_mmc_spi_adtc_start+0x178>)
    8ce4:	47b0      	blx	r6
    8ce6:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    8ce8:	ab02      	add	r3, sp, #8
    8cea:	1dde      	adds	r6, r3, #7
    8cec:	4f30      	ldr	r7, [pc, #192]	; (8db0 <sd_mmc_spi_adtc_start+0x170>)
    8cee:	4d32      	ldr	r5, [pc, #200]	; (8db8 <sd_mmc_spi_adtc_start+0x178>)
    8cf0:	23ff      	movs	r3, #255	; 0xff
    8cf2:	2201      	movs	r2, #1
    8cf4:	0031      	movs	r1, r6
    8cf6:	0038      	movs	r0, r7
    8cf8:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    8cfa:	7833      	ldrb	r3, [r6, #0]
    8cfc:	b25a      	sxtb	r2, r3
    8cfe:	2a00      	cmp	r2, #0
    8d00:	da0b      	bge.n	8d1a <sd_mmc_spi_adtc_start+0xda>
    8d02:	3c01      	subs	r4, #1
    8d04:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    8d06:	2c00      	cmp	r4, #0
    8d08:	d1f2      	bne.n	8cf0 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    8d0a:	2202      	movs	r2, #2
    8d0c:	4b27      	ldr	r3, [pc, #156]	; (8dac <sd_mmc_spi_adtc_start+0x16c>)
    8d0e:	701a      	strb	r2, [r3, #0]
			return false;
    8d10:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    8d12:	b006      	add	sp, #24
    8d14:	bc04      	pop	{r2}
    8d16:	4690      	mov	r8, r2
    8d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    8d1a:	4a28      	ldr	r2, [pc, #160]	; (8dbc <sd_mmc_spi_adtc_start+0x17c>)
    8d1c:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    8d1e:	071a      	lsls	r2, r3, #28
    8d20:	d41a      	bmi.n	8d58 <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    8d22:	075a      	lsls	r2, r3, #29
    8d24:	d41d      	bmi.n	8d62 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    8d26:	2201      	movs	r2, #1
    8d28:	4393      	bics	r3, r2
    8d2a:	d11f      	bne.n	8d6c <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    8d2c:	4643      	mov	r3, r8
    8d2e:	049b      	lsls	r3, r3, #18
    8d30:	d420      	bmi.n	8d74 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    8d32:	4643      	mov	r3, r8
    8d34:	059b      	lsls	r3, r3, #22
    8d36:	d425      	bmi.n	8d84 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    8d38:	4643      	mov	r3, r8
    8d3a:	055b      	lsls	r3, r3, #21
    8d3c:	d42b      	bmi.n	8d96 <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    8d3e:	4b20      	ldr	r3, [pc, #128]	; (8dc0 <sd_mmc_spi_adtc_start+0x180>)
    8d40:	466a      	mov	r2, sp
    8d42:	8812      	ldrh	r2, [r2, #0]
    8d44:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    8d46:	4b1f      	ldr	r3, [pc, #124]	; (8dc4 <sd_mmc_spi_adtc_start+0x184>)
    8d48:	466a      	mov	r2, sp
    8d4a:	8892      	ldrh	r2, [r2, #4]
    8d4c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    8d4e:	2200      	movs	r2, #0
    8d50:	4b1d      	ldr	r3, [pc, #116]	; (8dc8 <sd_mmc_spi_adtc_start+0x188>)
    8d52:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    8d54:	2001      	movs	r0, #1
    8d56:	e7dc      	b.n	8d12 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    8d58:	2206      	movs	r2, #6
    8d5a:	4b14      	ldr	r3, [pc, #80]	; (8dac <sd_mmc_spi_adtc_start+0x16c>)
    8d5c:	701a      	strb	r2, [r3, #0]
		return false;
    8d5e:	2000      	movs	r0, #0
    8d60:	e7d7      	b.n	8d12 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    8d62:	2209      	movs	r2, #9
    8d64:	4b11      	ldr	r3, [pc, #68]	; (8dac <sd_mmc_spi_adtc_start+0x16c>)
    8d66:	701a      	strb	r2, [r3, #0]
		return false;
    8d68:	2000      	movs	r0, #0
    8d6a:	e7d2      	b.n	8d12 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    8d6c:	4b0f      	ldr	r3, [pc, #60]	; (8dac <sd_mmc_spi_adtc_start+0x16c>)
    8d6e:	701a      	strb	r2, [r3, #0]
		return false;
    8d70:	2000      	movs	r0, #0
    8d72:	e7ce      	b.n	8d12 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    8d74:	4b15      	ldr	r3, [pc, #84]	; (8dcc <sd_mmc_spi_adtc_start+0x18c>)
    8d76:	4798      	blx	r3
    8d78:	2800      	cmp	r0, #0
    8d7a:	d1da      	bne.n	8d32 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    8d7c:	2203      	movs	r2, #3
    8d7e:	4b0b      	ldr	r3, [pc, #44]	; (8dac <sd_mmc_spi_adtc_start+0x16c>)
    8d80:	701a      	strb	r2, [r3, #0]
			return false;
    8d82:	e7c6      	b.n	8d12 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    8d84:	490d      	ldr	r1, [pc, #52]	; (8dbc <sd_mmc_spi_adtc_start+0x17c>)
    8d86:	2300      	movs	r3, #0
    8d88:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    8d8a:	33ff      	adds	r3, #255	; 0xff
    8d8c:	2201      	movs	r2, #1
    8d8e:	4808      	ldr	r0, [pc, #32]	; (8db0 <sd_mmc_spi_adtc_start+0x170>)
    8d90:	4e09      	ldr	r6, [pc, #36]	; (8db8 <sd_mmc_spi_adtc_start+0x178>)
    8d92:	47b0      	blx	r6
    8d94:	e7d0      	b.n	8d38 <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    8d96:	4e09      	ldr	r6, [pc, #36]	; (8dbc <sd_mmc_spi_adtc_start+0x17c>)
    8d98:	23ff      	movs	r3, #255	; 0xff
    8d9a:	2204      	movs	r2, #4
    8d9c:	0031      	movs	r1, r6
    8d9e:	4804      	ldr	r0, [pc, #16]	; (8db0 <sd_mmc_spi_adtc_start+0x170>)
    8da0:	4f05      	ldr	r7, [pc, #20]	; (8db8 <sd_mmc_spi_adtc_start+0x178>)
    8da2:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    8da4:	6833      	ldr	r3, [r6, #0]
    8da6:	ba1b      	rev	r3, r3
    8da8:	6033      	str	r3, [r6, #0]
    8daa:	e7c8      	b.n	8d3e <sd_mmc_spi_adtc_start+0xfe>
    8dac:	20003eb3 	.word	0x20003eb3
    8db0:	20003e70 	.word	0x20003e70
    8db4:	0000d1b5 	.word	0x0000d1b5
    8db8:	0000cfed 	.word	0x0000cfed
    8dbc:	20003eb8 	.word	0x20003eb8
    8dc0:	20003eac 	.word	0x20003eac
    8dc4:	20003eb4 	.word	0x20003eb4
    8dc8:	20003ebc 	.word	0x20003ebc
    8dcc:	000089d5 	.word	0x000089d5

00008dd0 <sd_mmc_spi_send_cmd>:
{
    8dd0:	b510      	push	{r4, lr}
    8dd2:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    8dd4:	2300      	movs	r3, #0
    8dd6:	9300      	str	r3, [sp, #0]
    8dd8:	2200      	movs	r2, #0
    8dda:	4c02      	ldr	r4, [pc, #8]	; (8de4 <sd_mmc_spi_send_cmd+0x14>)
    8ddc:	47a0      	blx	r4
}
    8dde:	b002      	add	sp, #8
    8de0:	bd10      	pop	{r4, pc}
    8de2:	46c0      	nop			; (mov r8, r8)
    8de4:	00008c41 	.word	0x00008c41

00008de8 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    8de8:	4b01      	ldr	r3, [pc, #4]	; (8df0 <sd_mmc_spi_get_response+0x8>)
    8dea:	6818      	ldr	r0, [r3, #0]
}
    8dec:	4770      	bx	lr
    8dee:	46c0      	nop			; (mov r8, r8)
    8df0:	20003eb8 	.word	0x20003eb8

00008df4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    8df4:	b510      	push	{r4, lr}
    8df6:	b084      	sub	sp, #16
    8df8:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8dfa:	2200      	movs	r2, #0
    8dfc:	4b14      	ldr	r3, [pc, #80]	; (8e50 <sd_mmc_spi_read_word+0x5c>)
    8dfe:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8e00:	4b14      	ldr	r3, [pc, #80]	; (8e54 <sd_mmc_spi_read_word+0x60>)
    8e02:	8819      	ldrh	r1, [r3, #0]
    8e04:	4b14      	ldr	r3, [pc, #80]	; (8e58 <sd_mmc_spi_read_word+0x64>)
    8e06:	6818      	ldr	r0, [r3, #0]
    8e08:	4b14      	ldr	r3, [pc, #80]	; (8e5c <sd_mmc_spi_read_word+0x68>)
    8e0a:	4798      	blx	r3
    8e0c:	2900      	cmp	r1, #0
    8e0e:	d103      	bne.n	8e18 <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    8e10:	4b13      	ldr	r3, [pc, #76]	; (8e60 <sd_mmc_spi_read_word+0x6c>)
    8e12:	4798      	blx	r3
    8e14:	2800      	cmp	r0, #0
    8e16:	d010      	beq.n	8e3a <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    8e18:	23ff      	movs	r3, #255	; 0xff
    8e1a:	2204      	movs	r2, #4
    8e1c:	a901      	add	r1, sp, #4
    8e1e:	4811      	ldr	r0, [pc, #68]	; (8e64 <sd_mmc_spi_read_word+0x70>)
    8e20:	4c11      	ldr	r4, [pc, #68]	; (8e68 <sd_mmc_spi_read_word+0x74>)
    8e22:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    8e24:	4b0c      	ldr	r3, [pc, #48]	; (8e58 <sd_mmc_spi_read_word+0x64>)
    8e26:	681a      	ldr	r2, [r3, #0]
    8e28:	1d10      	adds	r0, r2, #4
    8e2a:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8e2c:	4b09      	ldr	r3, [pc, #36]	; (8e54 <sd_mmc_spi_read_word+0x60>)
    8e2e:	8819      	ldrh	r1, [r3, #0]
    8e30:	4b0a      	ldr	r3, [pc, #40]	; (8e5c <sd_mmc_spi_read_word+0x68>)
    8e32:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    8e34:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    8e36:	2900      	cmp	r1, #0
    8e38:	d001      	beq.n	8e3e <sd_mmc_spi_read_word+0x4a>
}
    8e3a:	b004      	add	sp, #16
    8e3c:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    8e3e:	23ff      	movs	r3, #255	; 0xff
    8e40:	2202      	movs	r2, #2
    8e42:	a903      	add	r1, sp, #12
    8e44:	4807      	ldr	r0, [pc, #28]	; (8e64 <sd_mmc_spi_read_word+0x70>)
    8e46:	4c08      	ldr	r4, [pc, #32]	; (8e68 <sd_mmc_spi_read_word+0x74>)
    8e48:	47a0      	blx	r4
	return true;
    8e4a:	2001      	movs	r0, #1
    8e4c:	e7f5      	b.n	8e3a <sd_mmc_spi_read_word+0x46>
    8e4e:	46c0      	nop			; (mov r8, r8)
    8e50:	20003eb3 	.word	0x20003eb3
    8e54:	20003eac 	.word	0x20003eac
    8e58:	20003ebc 	.word	0x20003ebc
    8e5c:	00011e81 	.word	0x00011e81
    8e60:	00008ab1 	.word	0x00008ab1
    8e64:	20003e70 	.word	0x20003e70
    8e68:	0000cfed 	.word	0x0000cfed

00008e6c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    8e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e6e:	46de      	mov	lr, fp
    8e70:	4657      	mov	r7, sl
    8e72:	4646      	mov	r6, r8
    8e74:	b5c0      	push	{r6, r7, lr}
    8e76:	b082      	sub	sp, #8
    8e78:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8e7a:	2200      	movs	r2, #0
    8e7c:	4b17      	ldr	r3, [pc, #92]	; (8edc <sd_mmc_spi_start_read_blocks+0x70>)
    8e7e:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    8e80:	1e4c      	subs	r4, r1, #1
    8e82:	b2a4      	uxth	r4, r4
    8e84:	2900      	cmp	r1, #0
    8e86:	d026      	beq.n	8ed6 <sd_mmc_spi_start_read_blocks+0x6a>
    8e88:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    8e8a:	4b15      	ldr	r3, [pc, #84]	; (8ee0 <sd_mmc_spi_start_read_blocks+0x74>)
    8e8c:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    8e8e:	4f15      	ldr	r7, [pc, #84]	; (8ee4 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    8e90:	47d0      	blx	sl
    8e92:	4680      	mov	r8, r0
    8e94:	2800      	cmp	r0, #0
    8e96:	d017      	beq.n	8ec8 <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    8e98:	883a      	ldrh	r2, [r7, #0]
    8e9a:	465b      	mov	r3, fp
    8e9c:	1999      	adds	r1, r3, r6
    8e9e:	23ff      	movs	r3, #255	; 0xff
    8ea0:	4811      	ldr	r0, [pc, #68]	; (8ee8 <sd_mmc_spi_start_read_blocks+0x7c>)
    8ea2:	4d12      	ldr	r5, [pc, #72]	; (8eec <sd_mmc_spi_start_read_blocks+0x80>)
    8ea4:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    8ea6:	883b      	ldrh	r3, [r7, #0]
    8ea8:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    8eaa:	4a11      	ldr	r2, [pc, #68]	; (8ef0 <sd_mmc_spi_start_read_blocks+0x84>)
    8eac:	6811      	ldr	r1, [r2, #0]
    8eae:	468c      	mov	ip, r1
    8eb0:	4463      	add	r3, ip
    8eb2:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    8eb4:	23ff      	movs	r3, #255	; 0xff
    8eb6:	2202      	movs	r2, #2
    8eb8:	a901      	add	r1, sp, #4
    8eba:	480b      	ldr	r0, [pc, #44]	; (8ee8 <sd_mmc_spi_start_read_blocks+0x7c>)
    8ebc:	47a8      	blx	r5
	while (nb_block--) {
    8ebe:	3c01      	subs	r4, #1
    8ec0:	b2a4      	uxth	r4, r4
    8ec2:	4b0c      	ldr	r3, [pc, #48]	; (8ef4 <sd_mmc_spi_start_read_blocks+0x88>)
    8ec4:	429c      	cmp	r4, r3
    8ec6:	d1e3      	bne.n	8e90 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    8ec8:	4640      	mov	r0, r8
    8eca:	b002      	add	sp, #8
    8ecc:	bc1c      	pop	{r2, r3, r4}
    8ece:	4690      	mov	r8, r2
    8ed0:	469a      	mov	sl, r3
    8ed2:	46a3      	mov	fp, r4
    8ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    8ed6:	2301      	movs	r3, #1
    8ed8:	4698      	mov	r8, r3
    8eda:	e7f5      	b.n	8ec8 <sd_mmc_spi_start_read_blocks+0x5c>
    8edc:	20003eb3 	.word	0x20003eb3
    8ee0:	00008ab1 	.word	0x00008ab1
    8ee4:	20003eac 	.word	0x20003eac
    8ee8:	20003e70 	.word	0x20003e70
    8eec:	0000cfed 	.word	0x0000cfed
    8ef0:	20003ebc 	.word	0x20003ebc
    8ef4:	0000ffff 	.word	0x0000ffff

00008ef8 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    8ef8:	2001      	movs	r0, #1
    8efa:	4770      	bx	lr

00008efc <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    8efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8efe:	46c6      	mov	lr, r8
    8f00:	b500      	push	{lr}
    8f02:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    8f04:	2200      	movs	r2, #0
    8f06:	4b15      	ldr	r3, [pc, #84]	; (8f5c <sd_mmc_spi_start_write_blocks+0x60>)
    8f08:	701a      	strb	r2, [r3, #0]
	pos = 0;
    8f0a:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    8f0c:	4f14      	ldr	r7, [pc, #80]	; (8f60 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    8f0e:	4e15      	ldr	r6, [pc, #84]	; (8f64 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    8f10:	e000      	b.n	8f14 <sd_mmc_spi_start_write_blocks+0x18>
{
    8f12:	0021      	movs	r1, r4
	while (nb_block--) {
    8f14:	1e4c      	subs	r4, r1, #1
    8f16:	b2a4      	uxth	r4, r4
    8f18:	2900      	cmp	r1, #0
    8f1a:	d01b      	beq.n	8f54 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    8f1c:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    8f1e:	8832      	ldrh	r2, [r6, #0]
    8f20:	4643      	mov	r3, r8
    8f22:	1959      	adds	r1, r3, r5
    8f24:	4810      	ldr	r0, [pc, #64]	; (8f68 <sd_mmc_spi_start_write_blocks+0x6c>)
    8f26:	4b11      	ldr	r3, [pc, #68]	; (8f6c <sd_mmc_spi_start_write_blocks+0x70>)
    8f28:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    8f2a:	8833      	ldrh	r3, [r6, #0]
    8f2c:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    8f2e:	4a10      	ldr	r2, [pc, #64]	; (8f70 <sd_mmc_spi_start_write_blocks+0x74>)
    8f30:	6811      	ldr	r1, [r2, #0]
    8f32:	468c      	mov	ip, r1
    8f34:	4463      	add	r3, ip
    8f36:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    8f38:	4b0e      	ldr	r3, [pc, #56]	; (8f74 <sd_mmc_spi_start_write_blocks+0x78>)
    8f3a:	4798      	blx	r3
    8f3c:	2800      	cmp	r0, #0
    8f3e:	d00a      	beq.n	8f56 <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    8f40:	2c00      	cmp	r4, #0
    8f42:	d0e6      	beq.n	8f12 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    8f44:	4b0c      	ldr	r3, [pc, #48]	; (8f78 <sd_mmc_spi_start_write_blocks+0x7c>)
    8f46:	4798      	blx	r3
    8f48:	2800      	cmp	r0, #0
    8f4a:	d1e2      	bne.n	8f12 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8f4c:	2205      	movs	r2, #5
    8f4e:	4b03      	ldr	r3, [pc, #12]	; (8f5c <sd_mmc_spi_start_write_blocks+0x60>)
    8f50:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    8f52:	e000      	b.n	8f56 <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    8f54:	2001      	movs	r0, #1
}
    8f56:	bc04      	pop	{r2}
    8f58:	4690      	mov	r8, r2
    8f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f5c:	20003eb3 	.word	0x20003eb3
    8f60:	0000898d 	.word	0x0000898d
    8f64:	20003eac 	.word	0x20003eac
    8f68:	20003e70 	.word	0x20003e70
    8f6c:	0000d1b5 	.word	0x0000d1b5
    8f70:	20003ebc 	.word	0x20003ebc
    8f74:	00008b1d 	.word	0x00008b1d
    8f78:	000089d5 	.word	0x000089d5

00008f7c <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    8f7c:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    8f7e:	4b05      	ldr	r3, [pc, #20]	; (8f94 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    8f80:	4798      	blx	r3
    8f82:	2800      	cmp	r0, #0
    8f84:	d103      	bne.n	8f8e <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    8f86:	2205      	movs	r2, #5
    8f88:	4b03      	ldr	r3, [pc, #12]	; (8f98 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    8f8a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    8f8c:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    8f8e:	4b03      	ldr	r3, [pc, #12]	; (8f9c <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    8f90:	4798      	blx	r3
    8f92:	e7fb      	b.n	8f8c <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    8f94:	000089d5 	.word	0x000089d5
    8f98:	20003eb3 	.word	0x20003eb3
    8f9c:	00008a39 	.word	0x00008a39

00008fa0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    8fa0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    8fa2:	2000      	movs	r0, #0
    8fa4:	4b08      	ldr	r3, [pc, #32]	; (8fc8 <delay_init+0x28>)
    8fa6:	4798      	blx	r3
    8fa8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    8faa:	4c08      	ldr	r4, [pc, #32]	; (8fcc <delay_init+0x2c>)
    8fac:	21fa      	movs	r1, #250	; 0xfa
    8fae:	0089      	lsls	r1, r1, #2
    8fb0:	47a0      	blx	r4
    8fb2:	4b07      	ldr	r3, [pc, #28]	; (8fd0 <delay_init+0x30>)
    8fb4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    8fb6:	4907      	ldr	r1, [pc, #28]	; (8fd4 <delay_init+0x34>)
    8fb8:	0028      	movs	r0, r5
    8fba:	47a0      	blx	r4
    8fbc:	4b06      	ldr	r3, [pc, #24]	; (8fd8 <delay_init+0x38>)
    8fbe:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    8fc0:	2205      	movs	r2, #5
    8fc2:	4b06      	ldr	r3, [pc, #24]	; (8fdc <delay_init+0x3c>)
    8fc4:	601a      	str	r2, [r3, #0]
}
    8fc6:	bd70      	pop	{r4, r5, r6, pc}
    8fc8:	0000dedd 	.word	0x0000dedd
    8fcc:	00011d75 	.word	0x00011d75
    8fd0:	200000f4 	.word	0x200000f4
    8fd4:	000f4240 	.word	0x000f4240
    8fd8:	200000f8 	.word	0x200000f8
    8fdc:	e000e010 	.word	0xe000e010

00008fe0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    8fe0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    8fe2:	4b08      	ldr	r3, [pc, #32]	; (9004 <delay_cycles_ms+0x24>)
    8fe4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    8fe6:	4a08      	ldr	r2, [pc, #32]	; (9008 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    8fe8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8fea:	2180      	movs	r1, #128	; 0x80
    8fec:	0249      	lsls	r1, r1, #9
	while (n--) {
    8fee:	3801      	subs	r0, #1
    8ff0:	d307      	bcc.n	9002 <delay_cycles_ms+0x22>
	if (n > 0) {
    8ff2:	2c00      	cmp	r4, #0
    8ff4:	d0fb      	beq.n	8fee <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    8ff6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    8ff8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    8ffa:	6813      	ldr	r3, [r2, #0]
    8ffc:	420b      	tst	r3, r1
    8ffe:	d0fc      	beq.n	8ffa <delay_cycles_ms+0x1a>
    9000:	e7f5      	b.n	8fee <delay_cycles_ms+0xe>
	}
}
    9002:	bd30      	pop	{r4, r5, pc}
    9004:	200000f4 	.word	0x200000f4
    9008:	e000e010 	.word	0xe000e010

0000900c <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    900c:	b510      	push	{r4, lr}
	if (gpfIsr) {
    900e:	4b03      	ldr	r3, [pc, #12]	; (901c <chip_isr+0x10>)
    9010:	681b      	ldr	r3, [r3, #0]
    9012:	2b00      	cmp	r3, #0
    9014:	d000      	beq.n	9018 <chip_isr+0xc>
		gpfIsr();
    9016:	4798      	blx	r3
	}
}
    9018:	bd10      	pop	{r4, pc}
    901a:	46c0      	nop			; (mov r8, r8)
    901c:	20003ec0 	.word	0x20003ec0

00009020 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    9020:	b570      	push	{r4, r5, r6, lr}
    9022:	b082      	sub	sp, #8
	gpfIsr = NULL;
    9024:	2300      	movs	r3, #0
    9026:	4a15      	ldr	r2, [pc, #84]	; (907c <nm_bsp_init+0x5c>)
    9028:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    902a:	ac01      	add	r4, sp, #4
    902c:	2501      	movs	r5, #1
    902e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    9030:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    9032:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    9034:	0021      	movs	r1, r4
    9036:	201b      	movs	r0, #27
    9038:	4e11      	ldr	r6, [pc, #68]	; (9080 <nm_bsp_init+0x60>)
    903a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    903c:	0021      	movs	r1, r4
    903e:	201c      	movs	r0, #28
    9040:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    9042:	0021      	movs	r1, r4
    9044:	2028      	movs	r0, #40	; 0x28
    9046:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    9048:	4b0e      	ldr	r3, [pc, #56]	; (9084 <nm_bsp_init+0x64>)
    904a:	2280      	movs	r2, #128	; 0x80
    904c:	0552      	lsls	r2, r2, #21
    904e:	615a      	str	r2, [r3, #20]
    9050:	2280      	movs	r2, #128	; 0x80
    9052:	0512      	lsls	r2, r2, #20
    9054:	615a      	str	r2, [r3, #20]

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    9056:	4b0c      	ldr	r3, [pc, #48]	; (9088 <nm_bsp_init+0x68>)
    9058:	681b      	ldr	r3, [r3, #0]
    905a:	421d      	tst	r5, r3
    905c:	d003      	beq.n	9066 <nm_bsp_init+0x46>
    905e:	4b0a      	ldr	r3, [pc, #40]	; (9088 <nm_bsp_init+0x68>)
    9060:	681b      	ldr	r3, [r3, #0]
    9062:	079b      	lsls	r3, r3, #30
    9064:	d401      	bmi.n	906a <nm_bsp_init+0x4a>
	    delay_init();
    9066:	4b09      	ldr	r3, [pc, #36]	; (908c <nm_bsp_init+0x6c>)
    9068:	4798      	blx	r3
	cpu_irq_enable();
    906a:	2201      	movs	r2, #1
    906c:	4b08      	ldr	r3, [pc, #32]	; (9090 <nm_bsp_init+0x70>)
    906e:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    9070:	f3bf 8f5f 	dmb	sy
    9074:	b662      	cpsie	i
    }

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
    9076:	2000      	movs	r0, #0
    9078:	b002      	add	sp, #8
    907a:	bd70      	pop	{r4, r5, r6, pc}
    907c:	20003ec0 	.word	0x20003ec0
    9080:	0000c6b9 	.word	0x0000c6b9
    9084:	41004400 	.word	0x41004400
    9088:	e000e010 	.word	0xe000e010
    908c:	00008fa1 	.word	0x00008fa1
    9090:	200000fe 	.word	0x200000fe

00009094 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    9094:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
    9096:	1e44      	subs	r4, r0, #1
    9098:	2800      	cmp	r0, #0
    909a:	d004      	beq.n	90a6 <nm_bsp_sleep+0x12>
		delay_ms(1);
    909c:	4d02      	ldr	r5, [pc, #8]	; (90a8 <nm_bsp_sleep+0x14>)
    909e:	2001      	movs	r0, #1
    90a0:	47a8      	blx	r5
	while (u32TimeMsec--) {
    90a2:	3c01      	subs	r4, #1
    90a4:	d2fb      	bcs.n	909e <nm_bsp_sleep+0xa>
	}
}
    90a6:	bd70      	pop	{r4, r5, r6, pc}
    90a8:	00008fe1 	.word	0x00008fe1

000090ac <nm_bsp_reset>:
{
    90ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90ae:	4c07      	ldr	r4, [pc, #28]	; (90cc <nm_bsp_reset+0x20>)
    90b0:	2780      	movs	r7, #128	; 0x80
    90b2:	057f      	lsls	r7, r7, #21
    90b4:	6167      	str	r7, [r4, #20]
    90b6:	2580      	movs	r5, #128	; 0x80
    90b8:	052d      	lsls	r5, r5, #20
    90ba:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
    90bc:	2001      	movs	r0, #1
    90be:	4e04      	ldr	r6, [pc, #16]	; (90d0 <nm_bsp_reset+0x24>)
    90c0:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    90c2:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
    90c4:	200a      	movs	r0, #10
    90c6:	47b0      	blx	r6
    90c8:	61a5      	str	r5, [r4, #24]
}
    90ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90cc:	41004400 	.word	0x41004400
    90d0:	00009095 	.word	0x00009095

000090d4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    90d4:	b510      	push	{r4, lr}
    90d6:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    90d8:	4b0e      	ldr	r3, [pc, #56]	; (9114 <nm_bsp_register_isr+0x40>)
    90da:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    90dc:	ac01      	add	r4, sp, #4
    90de:	0020      	movs	r0, r4
    90e0:	4b0d      	ldr	r3, [pc, #52]	; (9118 <nm_bsp_register_isr+0x44>)
    90e2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    90e4:	2329      	movs	r3, #41	; 0x29
    90e6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    90e8:	2300      	movs	r3, #0
    90ea:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    90ec:	3301      	adds	r3, #1
    90ee:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    90f0:	3301      	adds	r3, #1
    90f2:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    90f4:	0021      	movs	r1, r4
    90f6:	2009      	movs	r0, #9
    90f8:	4b08      	ldr	r3, [pc, #32]	; (911c <nm_bsp_register_isr+0x48>)
    90fa:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    90fc:	2200      	movs	r2, #0
    90fe:	2109      	movs	r1, #9
    9100:	4807      	ldr	r0, [pc, #28]	; (9120 <nm_bsp_register_isr+0x4c>)
    9102:	4b08      	ldr	r3, [pc, #32]	; (9124 <nm_bsp_register_isr+0x50>)
    9104:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    9106:	2100      	movs	r1, #0
    9108:	2009      	movs	r0, #9
    910a:	4b07      	ldr	r3, [pc, #28]	; (9128 <nm_bsp_register_isr+0x54>)
    910c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    910e:	b004      	add	sp, #16
    9110:	bd10      	pop	{r4, pc}
    9112:	46c0      	nop			; (mov r8, r8)
    9114:	20003ec0 	.word	0x20003ec0
    9118:	0000c62d 	.word	0x0000c62d
    911c:	0000c641 	.word	0x0000c641
    9120:	0000900d 	.word	0x0000900d
    9124:	0000c4e9 	.word	0x0000c4e9
    9128:	0000c515 	.word	0x0000c515

0000912c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    912c:	b510      	push	{r4, lr}
	if (u8Enable) {
    912e:	2800      	cmp	r0, #0
    9130:	d104      	bne.n	913c <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    9132:	2100      	movs	r1, #0
    9134:	2009      	movs	r0, #9
    9136:	4b04      	ldr	r3, [pc, #16]	; (9148 <nm_bsp_interrupt_ctrl+0x1c>)
    9138:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    913a:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    913c:	2100      	movs	r1, #0
    913e:	2009      	movs	r0, #9
    9140:	4b02      	ldr	r3, [pc, #8]	; (914c <nm_bsp_interrupt_ctrl+0x20>)
    9142:	4798      	blx	r3
    9144:	e7f9      	b.n	913a <nm_bsp_interrupt_ctrl+0xe>
    9146:	46c0      	nop			; (mov r8, r8)
    9148:	0000c535 	.word	0x0000c535
    914c:	0000c515 	.word	0x0000c515

00009150 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    9150:	b530      	push	{r4, r5, lr}
    9152:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    9154:	4c30      	ldr	r4, [pc, #192]	; (9218 <nm_bus_init+0xc8>)
    9156:	230e      	movs	r3, #14
    9158:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    915a:	2300      	movs	r3, #0
    915c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    915e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    9160:	a901      	add	r1, sp, #4
    9162:	2201      	movs	r2, #1
    9164:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    9166:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    9168:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    916a:	200e      	movs	r0, #14
    916c:	4b2b      	ldr	r3, [pc, #172]	; (921c <nm_bus_init+0xcc>)
    916e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    9170:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    9172:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    9174:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    9176:	2900      	cmp	r1, #0
    9178:	d104      	bne.n	9184 <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
    917a:	0953      	lsrs	r3, r2, #5
    917c:	01db      	lsls	r3, r3, #7
    917e:	4928      	ldr	r1, [pc, #160]	; (9220 <nm_bus_init+0xd0>)
    9180:	468c      	mov	ip, r1
    9182:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9184:	211f      	movs	r1, #31
    9186:	4011      	ands	r1, r2
    9188:	2201      	movs	r2, #1
    918a:	0010      	movs	r0, r2
    918c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    918e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    9190:	ac02      	add	r4, sp, #8
    9192:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    9194:	2300      	movs	r3, #0
    9196:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    9198:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    919a:	21c0      	movs	r1, #192	; 0xc0
    919c:	0389      	lsls	r1, r1, #14
    919e:	9105      	str	r1, [sp, #20]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    91a0:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    91a2:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    91a4:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    91a6:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    91a8:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    91aa:	3223      	adds	r2, #35	; 0x23
    91ac:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    91ae:	3a18      	subs	r2, #24
    91b0:	2100      	movs	r1, #0
    91b2:	a808      	add	r0, sp, #32
    91b4:	4b1b      	ldr	r3, [pc, #108]	; (9224 <nm_bus_init+0xd4>)
    91b6:	4798      	blx	r3
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    91b8:	4b1b      	ldr	r3, [pc, #108]	; (9228 <nm_bus_init+0xd8>)
    91ba:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    91bc:	4b1b      	ldr	r3, [pc, #108]	; (922c <nm_bus_init+0xdc>)
    91be:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    91c0:	2301      	movs	r3, #1
    91c2:	425b      	negs	r3, r3
    91c4:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    91c6:	4b1a      	ldr	r3, [pc, #104]	; (9230 <nm_bus_init+0xe0>)
    91c8:	6363      	str	r3, [r4, #52]	; 0x34
	config.master_slave_select_enable = false;
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    91ca:	4b1a      	ldr	r3, [pc, #104]	; (9234 <nm_bus_init+0xe4>)
    91cc:	61a3      	str	r3, [r4, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    91ce:	0022      	movs	r2, r4
    91d0:	4919      	ldr	r1, [pc, #100]	; (9238 <nm_bus_init+0xe8>)
    91d2:	481a      	ldr	r0, [pc, #104]	; (923c <nm_bus_init+0xec>)
    91d4:	4b1a      	ldr	r3, [pc, #104]	; (9240 <nm_bus_init+0xf0>)
    91d6:	4798      	blx	r3
    91d8:	2800      	cmp	r0, #0
    91da:	d11a      	bne.n	9212 <nm_bus_init+0xc2>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    91dc:	4d17      	ldr	r5, [pc, #92]	; (923c <nm_bus_init+0xec>)
    91de:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    91e0:	0020      	movs	r0, r4
    91e2:	4b18      	ldr	r3, [pc, #96]	; (9244 <nm_bus_init+0xf4>)
    91e4:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    91e6:	231f      	movs	r3, #31
    91e8:	4018      	ands	r0, r3
    91ea:	3b1e      	subs	r3, #30
    91ec:	4083      	lsls	r3, r0
    91ee:	4a16      	ldr	r2, [pc, #88]	; (9248 <nm_bus_init+0xf8>)
    91f0:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    91f2:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    91f4:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    91f6:	2b00      	cmp	r3, #0
    91f8:	d1fc      	bne.n	91f4 <nm_bus_init+0xa4>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    91fa:	6823      	ldr	r3, [r4, #0]
    91fc:	2202      	movs	r2, #2
    91fe:	4313      	orrs	r3, r2
    9200:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
    9202:	4b12      	ldr	r3, [pc, #72]	; (924c <nm_bus_init+0xfc>)
    9204:	4798      	blx	r3
	nm_bsp_sleep(1);
    9206:	2001      	movs	r0, #1
    9208:	4b11      	ldr	r3, [pc, #68]	; (9250 <nm_bus_init+0x100>)
    920a:	4798      	blx	r3
#endif
	return result;
    920c:	2000      	movs	r0, #0
}
    920e:	b011      	add	sp, #68	; 0x44
    9210:	bd30      	pop	{r4, r5, pc}
		return M2M_ERR_BUS_FAIL;
    9212:	2006      	movs	r0, #6
    9214:	4240      	negs	r0, r0
    9216:	e7fa      	b.n	920e <nm_bus_init+0xbe>
    9218:	20005a58 	.word	0x20005a58
    921c:	0000c6b9 	.word	0x0000c6b9
    9220:	41004400 	.word	0x41004400
    9224:	0001427b 	.word	0x0001427b
    9228:	000c0002 	.word	0x000c0002
    922c:	000d0002 	.word	0x000d0002
    9230:	000f0002 	.word	0x000f0002
    9234:	00124f80 	.word	0x00124f80
    9238:	42001000 	.word	0x42001000
    923c:	20005a5c 	.word	0x20005a5c
    9240:	0000ce15 	.word	0x0000ce15
    9244:	0000cccd 	.word	0x0000cccd
    9248:	e000e100 	.word	0xe000e100
    924c:	000090ad 	.word	0x000090ad
    9250:	00009095 	.word	0x00009095

00009254 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    9254:	b5f0      	push	{r4, r5, r6, r7, lr}
    9256:	46de      	mov	lr, fp
    9258:	4657      	mov	r7, sl
    925a:	464e      	mov	r6, r9
    925c:	4645      	mov	r5, r8
    925e:	b5e0      	push	{r5, r6, r7, lr}
    9260:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
    9262:	2803      	cmp	r0, #3
    9264:	d000      	beq.n	9268 <nm_bus_ioctl+0x14>
    9266:	e075      	b.n	9354 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    9268:	680e      	ldr	r6, [r1, #0]
    926a:	684d      	ldr	r5, [r1, #4]
    926c:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0xFF;
    926e:	22ff      	movs	r2, #255	; 0xff
    9270:	466b      	mov	r3, sp
    9272:	71da      	strb	r2, [r3, #7]
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    9274:	2d00      	cmp	r5, #0
    9276:	d027      	beq.n	92c8 <nm_bus_ioctl+0x74>
    9278:	2c00      	cmp	r4, #0
    927a:	d065      	beq.n	9348 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
    927c:	2e00      	cmp	r6, #0
    927e:	d100      	bne.n	9282 <nm_bus_ioctl+0x2e>
    9280:	e075      	b.n	936e <nm_bus_ioctl+0x11a>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    9282:	2300      	movs	r3, #0
    9284:	4698      	mov	r8, r3
    9286:	2300      	movs	r3, #0
    9288:	469b      	mov	fp, r3
	spi_select_slave(&master, &slave_inst, true);
    928a:	2201      	movs	r2, #1
    928c:	493a      	ldr	r1, [pc, #232]	; (9378 <nm_bus_ioctl+0x124>)
    928e:	483b      	ldr	r0, [pc, #236]	; (937c <nm_bus_ioctl+0x128>)
    9290:	4b3b      	ldr	r3, [pc, #236]	; (9380 <nm_bus_ioctl+0x12c>)
    9292:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    9294:	4b39      	ldr	r3, [pc, #228]	; (937c <nm_bus_ioctl+0x128>)
    9296:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master))
    9298:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master))
    929a:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    929c:	4699      	mov	r9, r3
			pu8Miso++;
    929e:	4659      	mov	r1, fp
    92a0:	424b      	negs	r3, r1
    92a2:	4159      	adcs	r1, r3
    92a4:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
    92a6:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    92a8:	4653      	mov	r3, sl
    92aa:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    92ac:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
    92ae:	4239      	tst	r1, r7
    92b0:	d0fc      	beq.n	92ac <nm_bus_ioctl+0x58>
    92b2:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    92b4:	4239      	tst	r1, r7
    92b6:	d0fc      	beq.n	92b2 <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    92b8:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    92ba:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master))
    92bc:	4211      	tst	r1, r2
    92be:	d0fc      	beq.n	92ba <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    92c0:	4649      	mov	r1, r9
    92c2:	7989      	ldrb	r1, [r1, #6]
    92c4:	468c      	mov	ip, r1
    92c6:	e011      	b.n	92ec <nm_bus_ioctl+0x98>
	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
    92c8:	2e00      	cmp	r6, #0
    92ca:	d03a      	beq.n	9342 <nm_bus_ioctl+0xee>
    92cc:	2c00      	cmp	r4, #0
    92ce:	d03e      	beq.n	934e <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    92d0:	2300      	movs	r3, #0
    92d2:	4698      	mov	r8, r3
		u8SkipMiso = 1;
    92d4:	3301      	adds	r3, #1
    92d6:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
    92d8:	466b      	mov	r3, sp
    92da:	1ddd      	adds	r5, r3, #7
    92dc:	e7d5      	b.n	928a <nm_bus_ioctl+0x36>
    92de:	4660      	mov	r0, ip
    92e0:	2801      	cmp	r0, #1
    92e2:	d00d      	beq.n	9300 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    92e4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    92e6:	b2c0      	uxtb	r0, r0
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    92e8:	2900      	cmp	r1, #0
    92ea:	d00d      	beq.n	9308 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    92ec:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    92ee:	4211      	tst	r1, r2
    92f0:	d0fc      	beq.n	92ec <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    92f2:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
    92f4:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    92f6:	4210      	tst	r0, r2
    92f8:	d0f1      	beq.n	92de <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    92fa:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    92fc:	311e      	adds	r1, #30
    92fe:	e7ee      	b.n	92de <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    9300:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9302:	05c0      	lsls	r0, r0, #23
    9304:	0dc0      	lsrs	r0, r0, #23
    9306:	e7ef      	b.n	92e8 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
    9308:	7028      	strb	r0, [r5, #0]
		u16Sz--;
    930a:	3c01      	subs	r4, #1
    930c:	b2a4      	uxth	r4, r4
			pu8Miso++;
    930e:	445d      	add	r5, fp
			pu8Mosi++;
    9310:	4643      	mov	r3, r8
    9312:	4259      	negs	r1, r3
    9314:	414b      	adcs	r3, r1
    9316:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
    9318:	2c00      	cmp	r4, #0
    931a:	d1c4      	bne.n	92a6 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
    931c:	4b17      	ldr	r3, [pc, #92]	; (937c <nm_bus_ioctl+0x128>)
    931e:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master))
    9320:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    9322:	7e0b      	ldrb	r3, [r1, #24]
    9324:	4213      	tst	r3, r2
    9326:	d0fc      	beq.n	9322 <nm_bus_ioctl+0xce>
	spi_select_slave(&master, &slave_inst, false);
    9328:	2200      	movs	r2, #0
    932a:	4913      	ldr	r1, [pc, #76]	; (9378 <nm_bus_ioctl+0x124>)
    932c:	4813      	ldr	r0, [pc, #76]	; (937c <nm_bus_ioctl+0x128>)
    932e:	4b14      	ldr	r3, [pc, #80]	; (9380 <nm_bus_ioctl+0x12c>)
    9330:	4798      	blx	r3
	return M2M_SUCCESS;
    9332:	2000      	movs	r0, #0
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
}
    9334:	b003      	add	sp, #12
    9336:	bc3c      	pop	{r2, r3, r4, r5}
    9338:	4690      	mov	r8, r2
    933a:	4699      	mov	r9, r3
    933c:	46a2      	mov	sl, r4
    933e:	46ab      	mov	fp, r5
    9340:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
    9342:	200f      	movs	r0, #15
    9344:	4240      	negs	r0, r0
    9346:	e7f5      	b.n	9334 <nm_bus_ioctl+0xe0>
    9348:	200f      	movs	r0, #15
    934a:	4240      	negs	r0, r0
    934c:	e7f2      	b.n	9334 <nm_bus_ioctl+0xe0>
    934e:	200f      	movs	r0, #15
    9350:	4240      	negs	r0, r0
		break;
    9352:	e7ef      	b.n	9334 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalide ioclt cmd\n");
    9354:	2283      	movs	r2, #131	; 0x83
    9356:	0052      	lsls	r2, r2, #1
    9358:	490a      	ldr	r1, [pc, #40]	; (9384 <nm_bus_ioctl+0x130>)
    935a:	480b      	ldr	r0, [pc, #44]	; (9388 <nm_bus_ioctl+0x134>)
    935c:	4c0b      	ldr	r4, [pc, #44]	; (938c <nm_bus_ioctl+0x138>)
    935e:	47a0      	blx	r4
    9360:	480b      	ldr	r0, [pc, #44]	; (9390 <nm_bus_ioctl+0x13c>)
    9362:	47a0      	blx	r4
    9364:	480b      	ldr	r0, [pc, #44]	; (9394 <nm_bus_ioctl+0x140>)
    9366:	47a0      	blx	r4
			s8Ret = -1;
    9368:	2001      	movs	r0, #1
    936a:	4240      	negs	r0, r0
	return s8Ret;
    936c:	e7e2      	b.n	9334 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
    936e:	2301      	movs	r3, #1
    9370:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
    9372:	466b      	mov	r3, sp
    9374:	1dde      	adds	r6, r3, #7
    9376:	e786      	b.n	9286 <nm_bus_ioctl+0x32>
    9378:	20005a58 	.word	0x20005a58
    937c:	20005a5c 	.word	0x20005a5c
    9380:	0000d0c1 	.word	0x0000d0c1
    9384:	00017c24 	.word	0x00017c24
    9388:	00017c34 	.word	0x00017c34
    938c:	00007fed 	.word	0x00007fed
    9390:	00017c48 	.word	0x00017c48
    9394:	00017c5c 	.word	0x00017c5c

00009398 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    9398:	b530      	push	{r4, r5, lr}
    939a:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
    939c:	ab01      	add	r3, sp, #4
    939e:	2200      	movs	r2, #0
    93a0:	701a      	strb	r2, [r3, #0]
	config->powersave  = false;
    93a2:	709a      	strb	r2, [r3, #2]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    93a4:	705a      	strb	r2, [r3, #1]
	SercomSpi *const spi_module = &(module->hw->SPI);
    93a6:	4d13      	ldr	r5, [pc, #76]	; (93f4 <nm_bus_deinit+0x5c>)
    93a8:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    93aa:	0020      	movs	r0, r4
    93ac:	4b12      	ldr	r3, [pc, #72]	; (93f8 <nm_bus_deinit+0x60>)
    93ae:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    93b0:	231f      	movs	r3, #31
    93b2:	4018      	ands	r0, r3
    93b4:	3b1e      	subs	r3, #30
    93b6:	4083      	lsls	r3, r0
    93b8:	2280      	movs	r2, #128	; 0x80
    93ba:	4910      	ldr	r1, [pc, #64]	; (93fc <nm_bus_deinit+0x64>)
    93bc:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    93be:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    93c0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    93c2:	2b00      	cmp	r3, #0
    93c4:	d1fc      	bne.n	93c0 <nm_bus_deinit+0x28>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    93c6:	338f      	adds	r3, #143	; 0x8f
    93c8:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    93ca:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    93cc:	6823      	ldr	r3, [r4, #0]
    93ce:	2202      	movs	r2, #2
    93d0:	4393      	bics	r3, r2
    93d2:	6023      	str	r3, [r4, #0]
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
    93d4:	a901      	add	r1, sp, #4
    93d6:	200c      	movs	r0, #12
    93d8:	4c09      	ldr	r4, [pc, #36]	; (9400 <nm_bus_deinit+0x68>)
    93da:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
    93dc:	a901      	add	r1, sp, #4
    93de:	200f      	movs	r0, #15
    93e0:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
    93e2:	a901      	add	r1, sp, #4
    93e4:	200d      	movs	r0, #13
    93e6:	47a0      	blx	r4
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
    93e8:	a901      	add	r1, sp, #4
    93ea:	200e      	movs	r0, #14
    93ec:	47a0      	blx	r4
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
    93ee:	2000      	movs	r0, #0
    93f0:	b003      	add	sp, #12
    93f2:	bd30      	pop	{r4, r5, pc}
    93f4:	20005a5c 	.word	0x20005a5c
    93f8:	0000cccd 	.word	0x0000cccd
    93fc:	e000e100 	.word	0xe000e100
    9400:	0000c6b9 	.word	0x0000c6b9

00009404 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    9404:	2a00      	cmp	r2, #0
    9406:	d006      	beq.n	9416 <m2m_memcpy+0x12>
    9408:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
    940a:	780b      	ldrb	r3, [r1, #0]
    940c:	7003      	strb	r3, [r0, #0]
		pDst++;
    940e:	3001      	adds	r0, #1
		pSrc++;
    9410:	3101      	adds	r1, #1
	}while(--sz);
    9412:	4290      	cmp	r0, r2
    9414:	d1f9      	bne.n	940a <m2m_memcpy+0x6>
}
    9416:	4770      	bx	lr

00009418 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    9418:	2a00      	cmp	r2, #0
    941a:	d004      	beq.n	9426 <m2m_memset+0xe>
    941c:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
    941e:	7001      	strb	r1, [r0, #0]
		pBuf++;
    9420:	3001      	adds	r0, #1
	}while(--sz);
    9422:	4290      	cmp	r0, r2
    9424:	d1fb      	bne.n	941e <m2m_memset+0x6>
}
    9426:	4770      	bx	lr

00009428 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    9428:	0003      	movs	r3, r0
	uint16	u16StrLen = 0;
	while(*pcStr)
    942a:	7802      	ldrb	r2, [r0, #0]
    942c:	2a00      	cmp	r2, #0
    942e:	d007      	beq.n	9440 <m2m_strlen+0x18>
    9430:	2000      	movs	r0, #0
	{
		u16StrLen ++;
    9432:	3001      	adds	r0, #1
    9434:	b280      	uxth	r0, r0
		pcStr++;
    9436:	3301      	adds	r3, #1
	while(*pcStr)
    9438:	781a      	ldrb	r2, [r3, #0]
    943a:	2a00      	cmp	r2, #0
    943c:	d1f9      	bne.n	9432 <m2m_strlen+0xa>
	}
	return u16StrLen;
}
    943e:	4770      	bx	lr
	uint16	u16StrLen = 0;
    9440:	2000      	movs	r0, #0
    9442:	e7fc      	b.n	943e <m2m_strlen+0x16>

00009444 <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
    9444:	4a02      	ldr	r2, [pc, #8]	; (9450 <isr+0xc>)
    9446:	78d3      	ldrb	r3, [r2, #3]
    9448:	3301      	adds	r3, #1
    944a:	b2db      	uxtb	r3, r3
    944c:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
    944e:	4770      	bx	lr
    9450:	20005a98 	.word	0x20005a98

00009454 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
    9454:	4770      	bx	lr
	...

00009458 <hif_set_rx_done>:
{
    9458:	b500      	push	{lr}
    945a:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
    945c:	2200      	movs	r2, #0
    945e:	4b0a      	ldr	r3, [pc, #40]	; (9488 <hif_set_rx_done+0x30>)
    9460:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
    9462:	2001      	movs	r0, #1
    9464:	4b09      	ldr	r3, [pc, #36]	; (948c <hif_set_rx_done+0x34>)
    9466:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    9468:	a901      	add	r1, sp, #4
    946a:	4809      	ldr	r0, [pc, #36]	; (9490 <hif_set_rx_done+0x38>)
    946c:	4b09      	ldr	r3, [pc, #36]	; (9494 <hif_set_rx_done+0x3c>)
    946e:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    9470:	2800      	cmp	r0, #0
    9472:	d001      	beq.n	9478 <hif_set_rx_done+0x20>
}
    9474:	b003      	add	sp, #12
    9476:	bd00      	pop	{pc}
	reg |= NBIT1;
    9478:	2102      	movs	r1, #2
    947a:	9b01      	ldr	r3, [sp, #4]
    947c:	4319      	orrs	r1, r3
    947e:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    9480:	4803      	ldr	r0, [pc, #12]	; (9490 <hif_set_rx_done+0x38>)
    9482:	4b05      	ldr	r3, [pc, #20]	; (9498 <hif_set_rx_done+0x40>)
    9484:	4798      	blx	r3
    9486:	e7f5      	b.n	9474 <hif_set_rx_done+0x1c>
    9488:	20005a98 	.word	0x20005a98
    948c:	0000912d 	.word	0x0000912d
    9490:	00001070 	.word	0x00001070
    9494:	0000a7d5 	.word	0x0000a7d5
    9498:	0000a7e1 	.word	0x0000a7e1

0000949c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    949c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
    949e:	4b0c      	ldr	r3, [pc, #48]	; (94d0 <hif_chip_wake+0x34>)
    94a0:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
    94a2:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
    94a4:	2b00      	cmp	r3, #0
    94a6:	d10d      	bne.n	94c4 <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
    94a8:	4b09      	ldr	r3, [pc, #36]	; (94d0 <hif_chip_wake+0x34>)
    94aa:	785b      	ldrb	r3, [r3, #1]
    94ac:	2b00      	cmp	r3, #0
    94ae:	d103      	bne.n	94b8 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    94b0:	4b07      	ldr	r3, [pc, #28]	; (94d0 <hif_chip_wake+0x34>)
    94b2:	781b      	ldrb	r3, [r3, #0]
    94b4:	2b00      	cmp	r3, #0
    94b6:	d106      	bne.n	94c6 <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
    94b8:	4a05      	ldr	r2, [pc, #20]	; (94d0 <hif_chip_wake+0x34>)
    94ba:	7853      	ldrb	r3, [r2, #1]
    94bc:	3301      	adds	r3, #1
    94be:	b2db      	uxtb	r3, r3
    94c0:	7053      	strb	r3, [r2, #1]
    94c2:	2000      	movs	r0, #0
ERR1:
	return ret;
}
    94c4:	bd10      	pop	{r4, pc}
			ret = chip_wake();
    94c6:	4b03      	ldr	r3, [pc, #12]	; (94d4 <hif_chip_wake+0x38>)
    94c8:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
    94ca:	2800      	cmp	r0, #0
    94cc:	d0f4      	beq.n	94b8 <hif_chip_wake+0x1c>
    94ce:	e7f9      	b.n	94c4 <hif_chip_wake+0x28>
    94d0:	20005a98 	.word	0x20005a98
    94d4:	0000a4d5 	.word	0x0000a4d5

000094d8 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
    94d8:	4b05      	ldr	r3, [pc, #20]	; (94f0 <hif_chip_sleep_sc+0x18>)
    94da:	785b      	ldrb	r3, [r3, #1]
    94dc:	2b00      	cmp	r3, #0
    94de:	d004      	beq.n	94ea <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
    94e0:	4a03      	ldr	r2, [pc, #12]	; (94f0 <hif_chip_sleep_sc+0x18>)
    94e2:	7853      	ldrb	r3, [r2, #1]
    94e4:	3b01      	subs	r3, #1
    94e6:	b2db      	uxtb	r3, r3
    94e8:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
    94ea:	2000      	movs	r0, #0
    94ec:	4770      	bx	lr
    94ee:	46c0      	nop			; (mov r8, r8)
    94f0:	20005a98 	.word	0x20005a98

000094f4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    94f4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
    94f6:	4b0b      	ldr	r3, [pc, #44]	; (9524 <hif_chip_sleep+0x30>)
    94f8:	785b      	ldrb	r3, [r3, #1]
    94fa:	2b00      	cmp	r3, #0
    94fc:	d004      	beq.n	9508 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
    94fe:	4a09      	ldr	r2, [pc, #36]	; (9524 <hif_chip_sleep+0x30>)
    9500:	7853      	ldrb	r3, [r2, #1]
    9502:	3b01      	subs	r3, #1
    9504:	b2db      	uxtb	r3, r3
    9506:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
    9508:	4b06      	ldr	r3, [pc, #24]	; (9524 <hif_chip_sleep+0x30>)
    950a:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
    950c:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
    950e:	2b00      	cmp	r3, #0
    9510:	d103      	bne.n	951a <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
    9512:	4b04      	ldr	r3, [pc, #16]	; (9524 <hif_chip_sleep+0x30>)
    9514:	781b      	ldrb	r3, [r3, #0]
    9516:	2b00      	cmp	r3, #0
    9518:	d100      	bne.n	951c <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
    951a:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
    951c:	4b02      	ldr	r3, [pc, #8]	; (9528 <hif_chip_sleep+0x34>)
    951e:	4798      	blx	r3
    9520:	e7fb      	b.n	951a <hif_chip_sleep+0x26>
    9522:	46c0      	nop			; (mov r8, r8)
    9524:	20005a98 	.word	0x20005a98
    9528:	0000a46d 	.word	0x0000a46d

0000952c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    952c:	b5f0      	push	{r4, r5, r6, r7, lr}
    952e:	46de      	mov	lr, fp
    9530:	4657      	mov	r7, sl
    9532:	b580      	push	{r7, lr}
    9534:	b089      	sub	sp, #36	; 0x24
    9536:	4683      	mov	fp, r0
    9538:	468a      	mov	sl, r1
    953a:	9201      	str	r2, [sp, #4]
    953c:	9300      	str	r3, [sp, #0]
    953e:	ab10      	add	r3, sp, #64	; 0x40
    9540:	cb80      	ldmia	r3!, {r7}
    9542:	881e      	ldrh	r6, [r3, #0]
    9544:	ab12      	add	r3, sp, #72	; 0x48
    9546:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    9548:	227f      	movs	r2, #127	; 0x7f
    954a:	400a      	ands	r2, r1
    954c:	ab07      	add	r3, sp, #28
    954e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    9550:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    9552:	2208      	movs	r2, #8
    9554:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    9556:	2f00      	cmp	r7, #0
    9558:	d03d      	beq.n	95d6 <hif_send+0xaa>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    955a:	885a      	ldrh	r2, [r3, #2]
    955c:	1992      	adds	r2, r2, r6
    955e:	18aa      	adds	r2, r5, r2
    9560:	b292      	uxth	r2, r2
    9562:	805a      	strh	r2, [r3, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
	ret = hif_chip_wake();
    9564:	4b68      	ldr	r3, [pc, #416]	; (9708 <hif_send+0x1dc>)
    9566:	4798      	blx	r3
    9568:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
    956a:	d000      	beq.n	956e <hif_send+0x42>
    956c:	e0c0      	b.n	96f0 <hif_send+0x1c4>
	{
		volatile uint32 reg, dma_addr = 0;
    956e:	2300      	movs	r3, #0
    9570:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
    9572:	aa02      	add	r2, sp, #8
    9574:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
    9576:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
    9578:	9b04      	ldr	r3, [sp, #16]
    957a:	465a      	mov	r2, fp
    957c:	431a      	orrs	r2, r3
    957e:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
    9580:	9a04      	ldr	r2, [sp, #16]
    9582:	4653      	mov	r3, sl
    9584:	021b      	lsls	r3, r3, #8
    9586:	4313      	orrs	r3, r2
    9588:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
    958a:	ab07      	add	r3, sp, #28
    958c:	885b      	ldrh	r3, [r3, #2]
    958e:	9a04      	ldr	r2, [sp, #16]
    9590:	041b      	lsls	r3, r3, #16
    9592:	4313      	orrs	r3, r2
    9594:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    9596:	9904      	ldr	r1, [sp, #16]
    9598:	485c      	ldr	r0, [pc, #368]	; (970c <hif_send+0x1e0>)
    959a:	4b5d      	ldr	r3, [pc, #372]	; (9710 <hif_send+0x1e4>)
    959c:	4798      	blx	r3
    959e:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    95a0:	d156      	bne.n	9650 <hif_send+0x124>

		reg = 0UL;
    95a2:	2300      	movs	r3, #0
    95a4:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
    95a6:	9b04      	ldr	r3, [sp, #16]
    95a8:	2202      	movs	r2, #2
    95aa:	4313      	orrs	r3, r2
    95ac:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    95ae:	9904      	ldr	r1, [sp, #16]
    95b0:	4858      	ldr	r0, [pc, #352]	; (9714 <hif_send+0x1e8>)
    95b2:	4b57      	ldr	r3, [pc, #348]	; (9710 <hif_send+0x1e4>)
    95b4:	4798      	blx	r3
    95b6:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
    95b8:	d14a      	bne.n	9650 <hif_send+0x124>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
    95ba:	2200      	movs	r2, #0
    95bc:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
    95be:	ab02      	add	r3, sp, #8
    95c0:	80da      	strh	r2, [r3, #6]
    95c2:	3306      	adds	r3, #6
    95c4:	881b      	ldrh	r3, [r3, #0]
    95c6:	b29b      	uxth	r3, r3
    95c8:	4a53      	ldr	r2, [pc, #332]	; (9718 <hif_send+0x1ec>)
    95ca:	4293      	cmp	r3, r2
    95cc:	d848      	bhi.n	9660 <hif_send+0x134>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    95ce:	4c53      	ldr	r4, [pc, #332]	; (971c <hif_send+0x1f0>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
    95d0:	4b53      	ldr	r3, [pc, #332]	; (9720 <hif_send+0x1f4>)
    95d2:	469a      	mov	sl, r3
    95d4:	e017      	b.n	9606 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
    95d6:	ab07      	add	r3, sp, #28
    95d8:	885a      	ldrh	r2, [r3, #2]
    95da:	9900      	ldr	r1, [sp, #0]
    95dc:	468c      	mov	ip, r1
    95de:	4462      	add	r2, ip
    95e0:	b292      	uxth	r2, r2
    95e2:	805a      	strh	r2, [r3, #2]
    95e4:	e7be      	b.n	9564 <hif_send+0x38>
				nm_bsp_sleep(1);
    95e6:	2001      	movs	r0, #1
    95e8:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
    95ea:	9b04      	ldr	r3, [sp, #16]
    95ec:	079b      	lsls	r3, r3, #30
    95ee:	d527      	bpl.n	9640 <hif_send+0x114>
		for(cnt = 0; cnt < 1000; cnt ++)
    95f0:	ab02      	add	r3, sp, #8
    95f2:	88da      	ldrh	r2, [r3, #6]
    95f4:	3201      	adds	r2, #1
    95f6:	b292      	uxth	r2, r2
    95f8:	80da      	strh	r2, [r3, #6]
    95fa:	3306      	adds	r3, #6
    95fc:	881b      	ldrh	r3, [r3, #0]
    95fe:	b29b      	uxth	r3, r3
    9600:	4a45      	ldr	r2, [pc, #276]	; (9718 <hif_send+0x1ec>)
    9602:	4293      	cmp	r3, r2
    9604:	d82c      	bhi.n	9660 <hif_send+0x134>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    9606:	a904      	add	r1, sp, #16
    9608:	4842      	ldr	r0, [pc, #264]	; (9714 <hif_send+0x1e8>)
    960a:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
    960c:	2800      	cmp	r0, #0
    960e:	d127      	bne.n	9660 <hif_send+0x134>
			if(cnt >= 500) {
    9610:	ab02      	add	r3, sp, #8
    9612:	3306      	adds	r3, #6
    9614:	881b      	ldrh	r3, [r3, #0]
    9616:	b29b      	uxth	r3, r3
    9618:	22f4      	movs	r2, #244	; 0xf4
    961a:	32ff      	adds	r2, #255	; 0xff
    961c:	4293      	cmp	r3, r2
    961e:	d9e4      	bls.n	95ea <hif_send+0xbe>
				if(cnt < 501) {
    9620:	ab02      	add	r3, sp, #8
    9622:	3306      	adds	r3, #6
    9624:	881b      	ldrh	r3, [r3, #0]
    9626:	b29b      	uxth	r3, r3
    9628:	3201      	adds	r2, #1
    962a:	4293      	cmp	r3, r2
    962c:	d8db      	bhi.n	95e6 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
    962e:	483d      	ldr	r0, [pc, #244]	; (9724 <hif_send+0x1f8>)
    9630:	4b3d      	ldr	r3, [pc, #244]	; (9728 <hif_send+0x1fc>)
    9632:	469b      	mov	fp, r3
    9634:	4798      	blx	r3
    9636:	483d      	ldr	r0, [pc, #244]	; (972c <hif_send+0x200>)
    9638:	47d8      	blx	fp
    963a:	483d      	ldr	r0, [pc, #244]	; (9730 <hif_send+0x204>)
    963c:	47d8      	blx	fp
    963e:	e7d2      	b.n	95e6 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
    9640:	a905      	add	r1, sp, #20
    9642:	483c      	ldr	r0, [pc, #240]	; (9734 <hif_send+0x208>)
    9644:	4b35      	ldr	r3, [pc, #212]	; (971c <hif_send+0x1f0>)
    9646:	4798      	blx	r3
    9648:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
    964a:	d009      	beq.n	9660 <hif_send+0x134>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
    964c:	2300      	movs	r3, #0
    964e:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
    9650:	4b39      	ldr	r3, [pc, #228]	; (9738 <hif_send+0x20c>)
    9652:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
    9654:	0020      	movs	r0, r4
    9656:	b009      	add	sp, #36	; 0x24
    9658:	bc0c      	pop	{r2, r3}
    965a:	4692      	mov	sl, r2
    965c:	469b      	mov	fp, r3
    965e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
    9660:	9b05      	ldr	r3, [sp, #20]
    9662:	2b00      	cmp	r3, #0
    9664:	d03f      	beq.n	96e6 <hif_send+0x1ba>
			u32CurrAddr = dma_addr;
    9666:	9b05      	ldr	r3, [sp, #20]
    9668:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    966a:	a907      	add	r1, sp, #28
    966c:	884b      	ldrh	r3, [r1, #2]
    966e:	b29b      	uxth	r3, r3
    9670:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    9672:	9806      	ldr	r0, [sp, #24]
    9674:	2208      	movs	r2, #8
    9676:	4b31      	ldr	r3, [pc, #196]	; (973c <hif_send+0x210>)
    9678:	4798      	blx	r3
    967a:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    967c:	d1e8      	bne.n	9650 <hif_send+0x124>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    967e:	9b06      	ldr	r3, [sp, #24]
    9680:	3308      	adds	r3, #8
    9682:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
    9684:	9b01      	ldr	r3, [sp, #4]
    9686:	2b00      	cmp	r3, #0
    9688:	d00b      	beq.n	96a2 <hif_send+0x176>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    968a:	9806      	ldr	r0, [sp, #24]
    968c:	9a00      	ldr	r2, [sp, #0]
    968e:	0019      	movs	r1, r3
    9690:	4b2a      	ldr	r3, [pc, #168]	; (973c <hif_send+0x210>)
    9692:	4798      	blx	r3
    9694:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    9696:	d1db      	bne.n	9650 <hif_send+0x124>
				u32CurrAddr += u16CtrlBufSize;
    9698:	9b06      	ldr	r3, [sp, #24]
    969a:	9a00      	ldr	r2, [sp, #0]
    969c:	4694      	mov	ip, r2
    969e:	4463      	add	r3, ip
    96a0:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
    96a2:	2f00      	cmp	r7, #0
    96a4:	d00e      	beq.n	96c4 <hif_send+0x198>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    96a6:	9b06      	ldr	r3, [sp, #24]
    96a8:	9a00      	ldr	r2, [sp, #0]
    96aa:	1aad      	subs	r5, r5, r2
    96ac:	18ed      	adds	r5, r5, r3
    96ae:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    96b0:	9806      	ldr	r0, [sp, #24]
    96b2:	0032      	movs	r2, r6
    96b4:	0039      	movs	r1, r7
    96b6:	4b21      	ldr	r3, [pc, #132]	; (973c <hif_send+0x210>)
    96b8:	4798      	blx	r3
    96ba:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
    96bc:	d1c8      	bne.n	9650 <hif_send+0x124>
				u32CurrAddr += u16DataSize;
    96be:	9b06      	ldr	r3, [sp, #24]
    96c0:	18f3      	adds	r3, r6, r3
    96c2:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
    96c4:	9b05      	ldr	r3, [sp, #20]
    96c6:	009b      	lsls	r3, r3, #2
    96c8:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
    96ca:	9b04      	ldr	r3, [sp, #16]
    96cc:	2202      	movs	r2, #2
    96ce:	4313      	orrs	r3, r2
    96d0:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    96d2:	9904      	ldr	r1, [sp, #16]
    96d4:	481a      	ldr	r0, [pc, #104]	; (9740 <hif_send+0x214>)
    96d6:	4b0e      	ldr	r3, [pc, #56]	; (9710 <hif_send+0x1e4>)
    96d8:	4798      	blx	r3
    96da:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
    96dc:	d1b8      	bne.n	9650 <hif_send+0x124>
 	ret = hif_chip_sleep();
    96de:	4b19      	ldr	r3, [pc, #100]	; (9744 <hif_send+0x218>)
    96e0:	4798      	blx	r3
    96e2:	0004      	movs	r4, r0
	return ret;
    96e4:	e7b6      	b.n	9654 <hif_send+0x128>
			ret = hif_chip_sleep();
    96e6:	4b17      	ldr	r3, [pc, #92]	; (9744 <hif_send+0x218>)
    96e8:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
    96ea:	2403      	movs	r4, #3
    96ec:	4264      	negs	r4, r4
			goto ERR2;
    96ee:	e7b1      	b.n	9654 <hif_send+0x128>
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    96f0:	2298      	movs	r2, #152	; 0x98
    96f2:	32ff      	adds	r2, #255	; 0xff
    96f4:	4914      	ldr	r1, [pc, #80]	; (9748 <hif_send+0x21c>)
    96f6:	4815      	ldr	r0, [pc, #84]	; (974c <hif_send+0x220>)
    96f8:	4d0b      	ldr	r5, [pc, #44]	; (9728 <hif_send+0x1fc>)
    96fa:	47a8      	blx	r5
    96fc:	4814      	ldr	r0, [pc, #80]	; (9750 <hif_send+0x224>)
    96fe:	47a8      	blx	r5
    9700:	480b      	ldr	r0, [pc, #44]	; (9730 <hif_send+0x204>)
    9702:	47a8      	blx	r5
		goto ERR2;
    9704:	e7a6      	b.n	9654 <hif_send+0x128>
    9706:	46c0      	nop			; (mov r8, r8)
    9708:	0000949d 	.word	0x0000949d
    970c:	0000108c 	.word	0x0000108c
    9710:	0000a7e1 	.word	0x0000a7e1
    9714:	00001078 	.word	0x00001078
    9718:	000003e7 	.word	0x000003e7
    971c:	0000a7d5 	.word	0x0000a7d5
    9720:	00009095 	.word	0x00009095
    9724:	00017f70 	.word	0x00017f70
    9728:	00007fed 	.word	0x00007fed
    972c:	00017f7c 	.word	0x00017f7c
    9730:	00017c5c 	.word	0x00017c5c
    9734:	00150400 	.word	0x00150400
    9738:	000094d9 	.word	0x000094d9
    973c:	0000a855 	.word	0x0000a855
    9740:	0000106c 	.word	0x0000106c
    9744:	000094f5 	.word	0x000094f5
    9748:	00017c80 	.word	0x00017c80
    974c:	00017c34 	.word	0x00017c34
    9750:	00017f90 	.word	0x00017f90

00009754 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    9754:	b5f0      	push	{r4, r5, r6, r7, lr}
    9756:	46ce      	mov	lr, r9
    9758:	4647      	mov	r7, r8
    975a:	b580      	push	{r7, lr}
    975c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
    975e:	2200      	movs	r2, #0
    9760:	4bc8      	ldr	r3, [pc, #800]	; (9a84 <hif_handle_isr+0x330>)
    9762:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    9764:	4699      	mov	r9, r3
    9766:	4698      	mov	r8, r3
    9768:	e07c      	b.n	9864 <hif_handle_isr+0x110>
				gstrHifCxt.u32RxAddr = address;
    976a:	4bc6      	ldr	r3, [pc, #792]	; (9a84 <hif_handle_isr+0x330>)
    976c:	9a05      	ldr	r2, [sp, #20]
    976e:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
    9770:	60df      	str	r7, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    9772:	ad04      	add	r5, sp, #16
    9774:	2204      	movs	r2, #4
    9776:	0029      	movs	r1, r5
    9778:	9805      	ldr	r0, [sp, #20]
    977a:	4bc3      	ldr	r3, [pc, #780]	; (9a88 <hif_handle_isr+0x334>)
    977c:	4798      	blx	r3
    977e:	0004      	movs	r4, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    9780:	886b      	ldrh	r3, [r5, #2]
    9782:	b29b      	uxth	r3, r3
    9784:	806b      	strh	r3, [r5, #2]
				if(M2M_SUCCESS != ret)
    9786:	2800      	cmp	r0, #0
    9788:	d132      	bne.n	97f0 <hif_handle_isr+0x9c>
				if(strHif.u16Length != size)
    978a:	ab04      	add	r3, sp, #16
    978c:	885b      	ldrh	r3, [r3, #2]
    978e:	b29b      	uxth	r3, r3
    9790:	429f      	cmp	r7, r3
    9792:	d004      	beq.n	979e <hif_handle_isr+0x4a>
					if((size - strHif.u16Length) > 4)
    9794:	ab04      	add	r3, sp, #16
    9796:	885b      	ldrh	r3, [r3, #2]
    9798:	1afb      	subs	r3, r7, r3
    979a:	2b04      	cmp	r3, #4
    979c:	dc36      	bgt.n	980c <hif_handle_isr+0xb8>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    979e:	ab04      	add	r3, sp, #16
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	2b01      	cmp	r3, #1
    97a4:	d04a      	beq.n	983c <hif_handle_isr+0xe8>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    97a6:	ab04      	add	r3, sp, #16
    97a8:	781b      	ldrb	r3, [r3, #0]
    97aa:	2b02      	cmp	r3, #2
    97ac:	d076      	beq.n	989c <hif_handle_isr+0x148>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    97ae:	ab04      	add	r3, sp, #16
    97b0:	781b      	ldrb	r3, [r3, #0]
    97b2:	2b04      	cmp	r3, #4
    97b4:	d100      	bne.n	97b8 <hif_handle_isr+0x64>
    97b6:	e08c      	b.n	98d2 <hif_handle_isr+0x17e>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    97b8:	ab04      	add	r3, sp, #16
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	2b06      	cmp	r3, #6
    97be:	d100      	bne.n	97c2 <hif_handle_isr+0x6e>
    97c0:	e0a2      	b.n	9908 <hif_handle_isr+0x1b4>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    97c2:	ab04      	add	r3, sp, #16
    97c4:	781b      	ldrb	r3, [r3, #0]
    97c6:	2b07      	cmp	r3, #7
    97c8:	d100      	bne.n	97cc <hif_handle_isr+0x78>
    97ca:	e0b8      	b.n	993e <hif_handle_isr+0x1ea>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
    97cc:	ab04      	add	r3, sp, #16
    97ce:	781b      	ldrb	r3, [r3, #0]
    97d0:	2b05      	cmp	r3, #5
    97d2:	d100      	bne.n	97d6 <hif_handle_isr+0x82>
    97d4:	e0cd      	b.n	9972 <hif_handle_isr+0x21e>
					M2M_ERR("(hif) invalid group ID\n");
    97d6:	2284      	movs	r2, #132	; 0x84
    97d8:	0092      	lsls	r2, r2, #2
    97da:	49ac      	ldr	r1, [pc, #688]	; (9a8c <hif_handle_isr+0x338>)
    97dc:	48ac      	ldr	r0, [pc, #688]	; (9a90 <hif_handle_isr+0x33c>)
    97de:	4cad      	ldr	r4, [pc, #692]	; (9a94 <hif_handle_isr+0x340>)
    97e0:	47a0      	blx	r4
    97e2:	48ad      	ldr	r0, [pc, #692]	; (9a98 <hif_handle_isr+0x344>)
    97e4:	47a0      	blx	r4
    97e6:	48ad      	ldr	r0, [pc, #692]	; (9a9c <hif_handle_isr+0x348>)
    97e8:	47a0      	blx	r4
					ret = M2M_ERR_BUS_FAIL;
    97ea:	2406      	movs	r4, #6
    97ec:	4264      	negs	r4, r4
    97ee:	e106      	b.n	99fe <hif_handle_isr+0x2aa>
					M2M_ERR("(hif) address bus fail\n");
    97f0:	22e9      	movs	r2, #233	; 0xe9
    97f2:	0052      	lsls	r2, r2, #1
    97f4:	49a5      	ldr	r1, [pc, #660]	; (9a8c <hif_handle_isr+0x338>)
    97f6:	48a6      	ldr	r0, [pc, #664]	; (9a90 <hif_handle_isr+0x33c>)
    97f8:	4da6      	ldr	r5, [pc, #664]	; (9a94 <hif_handle_isr+0x340>)
    97fa:	47a8      	blx	r5
    97fc:	48a8      	ldr	r0, [pc, #672]	; (9aa0 <hif_handle_isr+0x34c>)
    97fe:	47a8      	blx	r5
    9800:	48a6      	ldr	r0, [pc, #664]	; (9a9c <hif_handle_isr+0x348>)
    9802:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
    9804:	2001      	movs	r0, #1
    9806:	4ba7      	ldr	r3, [pc, #668]	; (9aa4 <hif_handle_isr+0x350>)
    9808:	4798      	blx	r3
    980a:	e0f8      	b.n	99fe <hif_handle_isr+0x2aa>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    980c:	22dc      	movs	r2, #220	; 0xdc
    980e:	32ff      	adds	r2, #255	; 0xff
    9810:	499e      	ldr	r1, [pc, #632]	; (9a8c <hif_handle_isr+0x338>)
    9812:	489f      	ldr	r0, [pc, #636]	; (9a90 <hif_handle_isr+0x33c>)
    9814:	4c9f      	ldr	r4, [pc, #636]	; (9a94 <hif_handle_isr+0x340>)
    9816:	47a0      	blx	r4
    9818:	a904      	add	r1, sp, #16
    981a:	884a      	ldrh	r2, [r1, #2]
    981c:	b292      	uxth	r2, r2
    981e:	780b      	ldrb	r3, [r1, #0]
    9820:	b2db      	uxtb	r3, r3
    9822:	7849      	ldrb	r1, [r1, #1]
    9824:	9100      	str	r1, [sp, #0]
    9826:	0039      	movs	r1, r7
    9828:	489f      	ldr	r0, [pc, #636]	; (9aa8 <hif_handle_isr+0x354>)
    982a:	47a0      	blx	r4
    982c:	489b      	ldr	r0, [pc, #620]	; (9a9c <hif_handle_isr+0x348>)
    982e:	47a0      	blx	r4
						nm_bsp_interrupt_ctrl(1);
    9830:	2001      	movs	r0, #1
    9832:	4b9c      	ldr	r3, [pc, #624]	; (9aa4 <hif_handle_isr+0x350>)
    9834:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    9836:	2406      	movs	r4, #6
    9838:	4264      	negs	r4, r4
    983a:	e0e0      	b.n	99fe <hif_handle_isr+0x2aa>
					if(gstrHifCxt.pfWifiCb)
    983c:	4b91      	ldr	r3, [pc, #580]	; (9a84 <hif_handle_isr+0x330>)
    983e:	691b      	ldr	r3, [r3, #16]
    9840:	2b00      	cmp	r3, #0
    9842:	d020      	beq.n	9886 <hif_handle_isr+0x132>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9844:	4b8f      	ldr	r3, [pc, #572]	; (9a84 <hif_handle_isr+0x330>)
    9846:	691b      	ldr	r3, [r3, #16]
    9848:	aa04      	add	r2, sp, #16
    984a:	7850      	ldrb	r0, [r2, #1]
    984c:	b2c0      	uxtb	r0, r0
    984e:	8851      	ldrh	r1, [r2, #2]
    9850:	9a05      	ldr	r2, [sp, #20]
    9852:	3208      	adds	r2, #8
    9854:	3908      	subs	r1, #8
    9856:	b289      	uxth	r1, r1
    9858:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
    985a:	4b8a      	ldr	r3, [pc, #552]	; (9a84 <hif_handle_isr+0x330>)
    985c:	789b      	ldrb	r3, [r3, #2]
    985e:	2b00      	cmp	r3, #0
    9860:	d000      	beq.n	9864 <hif_handle_isr+0x110>
    9862:	e097      	b.n	9994 <hif_handle_isr+0x240>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
    9864:	464b      	mov	r3, r9
    9866:	78db      	ldrb	r3, [r3, #3]
    9868:	2b00      	cmp	r3, #0
    986a:	d100      	bne.n	986e <hif_handle_isr+0x11a>
    986c:	e103      	b.n	9a76 <hif_handle_isr+0x322>
    986e:	4643      	mov	r3, r8
    9870:	791b      	ldrb	r3, [r3, #4]
    9872:	2b00      	cmp	r3, #0
    9874:	d000      	beq.n	9878 <hif_handle_isr+0x124>
    9876:	e0fe      	b.n	9a76 <hif_handle_isr+0x322>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
    9878:	4a82      	ldr	r2, [pc, #520]	; (9a84 <hif_handle_isr+0x330>)
    987a:	78d3      	ldrb	r3, [r2, #3]
    987c:	3b01      	subs	r3, #1
    987e:	b2db      	uxtb	r3, r3
    9880:	70d3      	strb	r3, [r2, #3]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    9882:	4e8a      	ldr	r6, [pc, #552]	; (9aac <hif_handle_isr+0x358>)
    9884:	e0c5      	b.n	9a12 <hif_handle_isr+0x2be>
						M2M_ERR("WIFI callback is not registered\n");
    9886:	22e8      	movs	r2, #232	; 0xe8
    9888:	32ff      	adds	r2, #255	; 0xff
    988a:	4980      	ldr	r1, [pc, #512]	; (9a8c <hif_handle_isr+0x338>)
    988c:	4880      	ldr	r0, [pc, #512]	; (9a90 <hif_handle_isr+0x33c>)
    988e:	4c81      	ldr	r4, [pc, #516]	; (9a94 <hif_handle_isr+0x340>)
    9890:	47a0      	blx	r4
    9892:	4887      	ldr	r0, [pc, #540]	; (9ab0 <hif_handle_isr+0x35c>)
    9894:	47a0      	blx	r4
    9896:	4881      	ldr	r0, [pc, #516]	; (9a9c <hif_handle_isr+0x348>)
    9898:	47a0      	blx	r4
    989a:	e7de      	b.n	985a <hif_handle_isr+0x106>
					if(gstrHifCxt.pfIpCb)
    989c:	4b79      	ldr	r3, [pc, #484]	; (9a84 <hif_handle_isr+0x330>)
    989e:	695b      	ldr	r3, [r3, #20]
    98a0:	2b00      	cmp	r3, #0
    98a2:	d00b      	beq.n	98bc <hif_handle_isr+0x168>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    98a4:	4b77      	ldr	r3, [pc, #476]	; (9a84 <hif_handle_isr+0x330>)
    98a6:	695b      	ldr	r3, [r3, #20]
    98a8:	aa04      	add	r2, sp, #16
    98aa:	7850      	ldrb	r0, [r2, #1]
    98ac:	b2c0      	uxtb	r0, r0
    98ae:	8851      	ldrh	r1, [r2, #2]
    98b0:	9a05      	ldr	r2, [sp, #20]
    98b2:	3208      	adds	r2, #8
    98b4:	3908      	subs	r1, #8
    98b6:	b289      	uxth	r1, r1
    98b8:	4798      	blx	r3
    98ba:	e7ce      	b.n	985a <hif_handle_isr+0x106>
						M2M_ERR("Scoket callback is not registered\n");
    98bc:	22f0      	movs	r2, #240	; 0xf0
    98be:	32ff      	adds	r2, #255	; 0xff
    98c0:	4972      	ldr	r1, [pc, #456]	; (9a8c <hif_handle_isr+0x338>)
    98c2:	4873      	ldr	r0, [pc, #460]	; (9a90 <hif_handle_isr+0x33c>)
    98c4:	4c73      	ldr	r4, [pc, #460]	; (9a94 <hif_handle_isr+0x340>)
    98c6:	47a0      	blx	r4
    98c8:	487a      	ldr	r0, [pc, #488]	; (9ab4 <hif_handle_isr+0x360>)
    98ca:	47a0      	blx	r4
    98cc:	4873      	ldr	r0, [pc, #460]	; (9a9c <hif_handle_isr+0x348>)
    98ce:	47a0      	blx	r4
    98d0:	e7c3      	b.n	985a <hif_handle_isr+0x106>
					if(gstrHifCxt.pfOtaCb)
    98d2:	4b6c      	ldr	r3, [pc, #432]	; (9a84 <hif_handle_isr+0x330>)
    98d4:	699b      	ldr	r3, [r3, #24]
    98d6:	2b00      	cmp	r3, #0
    98d8:	d00b      	beq.n	98f2 <hif_handle_isr+0x19e>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    98da:	4b6a      	ldr	r3, [pc, #424]	; (9a84 <hif_handle_isr+0x330>)
    98dc:	699b      	ldr	r3, [r3, #24]
    98de:	aa04      	add	r2, sp, #16
    98e0:	7850      	ldrb	r0, [r2, #1]
    98e2:	b2c0      	uxtb	r0, r0
    98e4:	8851      	ldrh	r1, [r2, #2]
    98e6:	9a05      	ldr	r2, [sp, #20]
    98e8:	3208      	adds	r2, #8
    98ea:	3908      	subs	r1, #8
    98ec:	b289      	uxth	r1, r1
    98ee:	4798      	blx	r3
    98f0:	e7b3      	b.n	985a <hif_handle_isr+0x106>
						M2M_ERR("Ota callback is not registered\n");
    98f2:	22f8      	movs	r2, #248	; 0xf8
    98f4:	32ff      	adds	r2, #255	; 0xff
    98f6:	4965      	ldr	r1, [pc, #404]	; (9a8c <hif_handle_isr+0x338>)
    98f8:	4865      	ldr	r0, [pc, #404]	; (9a90 <hif_handle_isr+0x33c>)
    98fa:	4c66      	ldr	r4, [pc, #408]	; (9a94 <hif_handle_isr+0x340>)
    98fc:	47a0      	blx	r4
    98fe:	486e      	ldr	r0, [pc, #440]	; (9ab8 <hif_handle_isr+0x364>)
    9900:	47a0      	blx	r4
    9902:	4866      	ldr	r0, [pc, #408]	; (9a9c <hif_handle_isr+0x348>)
    9904:	47a0      	blx	r4
    9906:	e7a8      	b.n	985a <hif_handle_isr+0x106>
					if(gstrHifCxt.pfCryptoCb)
    9908:	4b5e      	ldr	r3, [pc, #376]	; (9a84 <hif_handle_isr+0x330>)
    990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    990c:	2b00      	cmp	r3, #0
    990e:	d00b      	beq.n	9928 <hif_handle_isr+0x1d4>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9910:	4b5c      	ldr	r3, [pc, #368]	; (9a84 <hif_handle_isr+0x330>)
    9912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9914:	aa04      	add	r2, sp, #16
    9916:	7850      	ldrb	r0, [r2, #1]
    9918:	b2c0      	uxtb	r0, r0
    991a:	8851      	ldrh	r1, [r2, #2]
    991c:	9a05      	ldr	r2, [sp, #20]
    991e:	3208      	adds	r2, #8
    9920:	3908      	subs	r1, #8
    9922:	b289      	uxth	r1, r1
    9924:	4798      	blx	r3
    9926:	e798      	b.n	985a <hif_handle_isr+0x106>
						M2M_ERR("Crypto callback is not registered\n");
    9928:	2280      	movs	r2, #128	; 0x80
    992a:	0092      	lsls	r2, r2, #2
    992c:	4957      	ldr	r1, [pc, #348]	; (9a8c <hif_handle_isr+0x338>)
    992e:	4858      	ldr	r0, [pc, #352]	; (9a90 <hif_handle_isr+0x33c>)
    9930:	4c58      	ldr	r4, [pc, #352]	; (9a94 <hif_handle_isr+0x340>)
    9932:	47a0      	blx	r4
    9934:	4861      	ldr	r0, [pc, #388]	; (9abc <hif_handle_isr+0x368>)
    9936:	47a0      	blx	r4
    9938:	4858      	ldr	r0, [pc, #352]	; (9a9c <hif_handle_isr+0x348>)
    993a:	47a0      	blx	r4
    993c:	e78d      	b.n	985a <hif_handle_isr+0x106>
					if(gstrHifCxt.pfSigmaCb)
    993e:	4b51      	ldr	r3, [pc, #324]	; (9a84 <hif_handle_isr+0x330>)
    9940:	69db      	ldr	r3, [r3, #28]
    9942:	2b00      	cmp	r3, #0
    9944:	d00b      	beq.n	995e <hif_handle_isr+0x20a>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    9946:	4b4f      	ldr	r3, [pc, #316]	; (9a84 <hif_handle_isr+0x330>)
    9948:	69db      	ldr	r3, [r3, #28]
    994a:	aa04      	add	r2, sp, #16
    994c:	7850      	ldrb	r0, [r2, #1]
    994e:	b2c0      	uxtb	r0, r0
    9950:	8851      	ldrh	r1, [r2, #2]
    9952:	9a05      	ldr	r2, [sp, #20]
    9954:	3208      	adds	r2, #8
    9956:	3908      	subs	r1, #8
    9958:	b289      	uxth	r1, r1
    995a:	4798      	blx	r3
    995c:	e77d      	b.n	985a <hif_handle_isr+0x106>
						M2M_ERR("Sigma callback is not registered\n");
    995e:	4a58      	ldr	r2, [pc, #352]	; (9ac0 <hif_handle_isr+0x36c>)
    9960:	494a      	ldr	r1, [pc, #296]	; (9a8c <hif_handle_isr+0x338>)
    9962:	484b      	ldr	r0, [pc, #300]	; (9a90 <hif_handle_isr+0x33c>)
    9964:	4c4b      	ldr	r4, [pc, #300]	; (9a94 <hif_handle_isr+0x340>)
    9966:	47a0      	blx	r4
    9968:	4856      	ldr	r0, [pc, #344]	; (9ac4 <hif_handle_isr+0x370>)
    996a:	47a0      	blx	r4
    996c:	484b      	ldr	r0, [pc, #300]	; (9a9c <hif_handle_isr+0x348>)
    996e:	47a0      	blx	r4
    9970:	e773      	b.n	985a <hif_handle_isr+0x106>
				    if(gstrHifCxt.pfSslCb)
    9972:	4b44      	ldr	r3, [pc, #272]	; (9a84 <hif_handle_isr+0x330>)
    9974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9976:	2b00      	cmp	r3, #0
    9978:	d100      	bne.n	997c <hif_handle_isr+0x228>
    997a:	e76e      	b.n	985a <hif_handle_isr+0x106>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    997c:	4b41      	ldr	r3, [pc, #260]	; (9a84 <hif_handle_isr+0x330>)
    997e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9980:	aa04      	add	r2, sp, #16
    9982:	7850      	ldrb	r0, [r2, #1]
    9984:	b2c0      	uxtb	r0, r0
    9986:	8851      	ldrh	r1, [r2, #2]
    9988:	9a05      	ldr	r2, [sp, #20]
    998a:	3208      	adds	r2, #8
    998c:	3908      	subs	r1, #8
    998e:	b289      	uxth	r1, r1
    9990:	4798      	blx	r3
    9992:	e762      	b.n	985a <hif_handle_isr+0x106>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
    9994:	4a4c      	ldr	r2, [pc, #304]	; (9ac8 <hif_handle_isr+0x374>)
    9996:	493d      	ldr	r1, [pc, #244]	; (9a8c <hif_handle_isr+0x338>)
    9998:	483d      	ldr	r0, [pc, #244]	; (9a90 <hif_handle_isr+0x33c>)
    999a:	4c3e      	ldr	r4, [pc, #248]	; (9a94 <hif_handle_isr+0x340>)
    999c:	47a0      	blx	r4
    999e:	ab04      	add	r3, sp, #16
    99a0:	7819      	ldrb	r1, [r3, #0]
    99a2:	b2c9      	uxtb	r1, r1
    99a4:	785a      	ldrb	r2, [r3, #1]
    99a6:	b2d2      	uxtb	r2, r2
    99a8:	4848      	ldr	r0, [pc, #288]	; (9acc <hif_handle_isr+0x378>)
    99aa:	47a0      	blx	r4
    99ac:	483b      	ldr	r0, [pc, #236]	; (9a9c <hif_handle_isr+0x348>)
    99ae:	47a0      	blx	r4
					ret = hif_set_rx_done();
    99b0:	4b47      	ldr	r3, [pc, #284]	; (9ad0 <hif_handle_isr+0x37c>)
    99b2:	4798      	blx	r3
    99b4:	1e04      	subs	r4, r0, #0
					if(ret != M2M_SUCCESS) goto ERR1;
    99b6:	d122      	bne.n	99fe <hif_handle_isr+0x2aa>
    99b8:	e754      	b.n	9864 <hif_handle_isr+0x110>
				M2M_ERR("(hif) Wrong Size\n");
    99ba:	4a46      	ldr	r2, [pc, #280]	; (9ad4 <hif_handle_isr+0x380>)
    99bc:	4933      	ldr	r1, [pc, #204]	; (9a8c <hif_handle_isr+0x338>)
    99be:	4834      	ldr	r0, [pc, #208]	; (9a90 <hif_handle_isr+0x33c>)
    99c0:	4c34      	ldr	r4, [pc, #208]	; (9a94 <hif_handle_isr+0x340>)
    99c2:	47a0      	blx	r4
    99c4:	4844      	ldr	r0, [pc, #272]	; (9ad8 <hif_handle_isr+0x384>)
    99c6:	47a0      	blx	r4
    99c8:	4834      	ldr	r0, [pc, #208]	; (9a9c <hif_handle_isr+0x348>)
    99ca:	47a0      	blx	r4
				ret = M2M_ERR_RCV;
    99cc:	2402      	movs	r4, #2
    99ce:	4264      	negs	r4, r4
    99d0:	e015      	b.n	99fe <hif_handle_isr+0x2aa>
			M2M_ERR("(hif) False interrupt %lx",reg);
    99d2:	4a42      	ldr	r2, [pc, #264]	; (9adc <hif_handle_isr+0x388>)
    99d4:	492d      	ldr	r1, [pc, #180]	; (9a8c <hif_handle_isr+0x338>)
    99d6:	482e      	ldr	r0, [pc, #184]	; (9a90 <hif_handle_isr+0x33c>)
    99d8:	4c2e      	ldr	r4, [pc, #184]	; (9a94 <hif_handle_isr+0x340>)
    99da:	47a0      	blx	r4
    99dc:	9903      	ldr	r1, [sp, #12]
    99de:	4840      	ldr	r0, [pc, #256]	; (9ae0 <hif_handle_isr+0x38c>)
    99e0:	47a0      	blx	r4
    99e2:	482e      	ldr	r0, [pc, #184]	; (9a9c <hif_handle_isr+0x348>)
    99e4:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    99e6:	240c      	movs	r4, #12
    99e8:	4264      	negs	r4, r4
    99ea:	e008      	b.n	99fe <hif_handle_isr+0x2aa>
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
    99ec:	4a3d      	ldr	r2, [pc, #244]	; (9ae4 <hif_handle_isr+0x390>)
    99ee:	4927      	ldr	r1, [pc, #156]	; (9a8c <hif_handle_isr+0x338>)
    99f0:	4827      	ldr	r0, [pc, #156]	; (9a90 <hif_handle_isr+0x33c>)
    99f2:	4d28      	ldr	r5, [pc, #160]	; (9a94 <hif_handle_isr+0x340>)
    99f4:	47a8      	blx	r5
    99f6:	483c      	ldr	r0, [pc, #240]	; (9ae8 <hif_handle_isr+0x394>)
    99f8:	47a8      	blx	r5
    99fa:	4828      	ldr	r0, [pc, #160]	; (9a9c <hif_handle_isr+0x348>)
    99fc:	47a8      	blx	r5
			if(ret == M2M_SUCCESS) {
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    99fe:	4a3b      	ldr	r2, [pc, #236]	; (9aec <hif_handle_isr+0x398>)
    9a00:	493b      	ldr	r1, [pc, #236]	; (9af0 <hif_handle_isr+0x39c>)
    9a02:	4823      	ldr	r0, [pc, #140]	; (9a90 <hif_handle_isr+0x33c>)
    9a04:	4d23      	ldr	r5, [pc, #140]	; (9a94 <hif_handle_isr+0x340>)
    9a06:	47a8      	blx	r5
    9a08:	0021      	movs	r1, r4
    9a0a:	483a      	ldr	r0, [pc, #232]	; (9af4 <hif_handle_isr+0x3a0>)
    9a0c:	47a8      	blx	r5
    9a0e:	4823      	ldr	r0, [pc, #140]	; (9a9c <hif_handle_isr+0x348>)
    9a10:	47a8      	blx	r5
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    9a12:	a903      	add	r1, sp, #12
    9a14:	4838      	ldr	r0, [pc, #224]	; (9af8 <hif_handle_isr+0x3a4>)
    9a16:	47b0      	blx	r6
    9a18:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
    9a1a:	d1e7      	bne.n	99ec <hif_handle_isr+0x298>
		if(reg & 0x1)	/* New interrupt has been received */
    9a1c:	9b03      	ldr	r3, [sp, #12]
    9a1e:	07db      	lsls	r3, r3, #31
    9a20:	d5d7      	bpl.n	99d2 <hif_handle_isr+0x27e>
			nm_bsp_interrupt_ctrl(0);
    9a22:	2000      	movs	r0, #0
    9a24:	4b1f      	ldr	r3, [pc, #124]	; (9aa4 <hif_handle_isr+0x350>)
    9a26:	4798      	blx	r3
			reg &= ~NBIT0;
    9a28:	2301      	movs	r3, #1
    9a2a:	9903      	ldr	r1, [sp, #12]
    9a2c:	4399      	bics	r1, r3
    9a2e:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    9a30:	4831      	ldr	r0, [pc, #196]	; (9af8 <hif_handle_isr+0x3a4>)
    9a32:	4b32      	ldr	r3, [pc, #200]	; (9afc <hif_handle_isr+0x3a8>)
    9a34:	4798      	blx	r3
    9a36:	1e04      	subs	r4, r0, #0
			if(ret != M2M_SUCCESS)goto ERR1;
    9a38:	d1e1      	bne.n	99fe <hif_handle_isr+0x2aa>
			gstrHifCxt.u8HifRXDone = 1;
    9a3a:	2201      	movs	r2, #1
    9a3c:	4b11      	ldr	r3, [pc, #68]	; (9a84 <hif_handle_isr+0x330>)
    9a3e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
    9a40:	9b03      	ldr	r3, [sp, #12]
    9a42:	049f      	lsls	r7, r3, #18
    9a44:	0d3f      	lsrs	r7, r7, #20
			if (size > 0) {
    9a46:	d0b8      	beq.n	99ba <hif_handle_isr+0x266>
				uint32 address = 0;
    9a48:	2300      	movs	r3, #0
    9a4a:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    9a4c:	a905      	add	r1, sp, #20
    9a4e:	482c      	ldr	r0, [pc, #176]	; (9b00 <hif_handle_isr+0x3ac>)
    9a50:	4b16      	ldr	r3, [pc, #88]	; (9aac <hif_handle_isr+0x358>)
    9a52:	4798      	blx	r3
    9a54:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
    9a56:	d100      	bne.n	9a5a <hif_handle_isr+0x306>
    9a58:	e687      	b.n	976a <hif_handle_isr+0x16>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    9a5a:	22e4      	movs	r2, #228	; 0xe4
    9a5c:	0052      	lsls	r2, r2, #1
    9a5e:	490b      	ldr	r1, [pc, #44]	; (9a8c <hif_handle_isr+0x338>)
    9a60:	480b      	ldr	r0, [pc, #44]	; (9a90 <hif_handle_isr+0x33c>)
    9a62:	4d0c      	ldr	r5, [pc, #48]	; (9a94 <hif_handle_isr+0x340>)
    9a64:	47a8      	blx	r5
    9a66:	4827      	ldr	r0, [pc, #156]	; (9b04 <hif_handle_isr+0x3b0>)
    9a68:	47a8      	blx	r5
    9a6a:	480c      	ldr	r0, [pc, #48]	; (9a9c <hif_handle_isr+0x348>)
    9a6c:	47a8      	blx	r5
					nm_bsp_interrupt_ctrl(1);
    9a6e:	2001      	movs	r0, #1
    9a70:	4b0c      	ldr	r3, [pc, #48]	; (9aa4 <hif_handle_isr+0x350>)
    9a72:	4798      	blx	r3
    9a74:	e7c3      	b.n	99fe <hif_handle_isr+0x2aa>
			}
		}
	}

	return ret;
}
    9a76:	2000      	movs	r0, #0
    9a78:	b007      	add	sp, #28
    9a7a:	bc0c      	pop	{r2, r3}
    9a7c:	4690      	mov	r8, r2
    9a7e:	4699      	mov	r9, r3
    9a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a82:	46c0      	nop			; (mov r8, r8)
    9a84:	20005a98 	.word	0x20005a98
    9a88:	0000a7ed 	.word	0x0000a7ed
    9a8c:	00017c8c 	.word	0x00017c8c
    9a90:	00017c34 	.word	0x00017c34
    9a94:	00007fed 	.word	0x00007fed
    9a98:	00017df0 	.word	0x00017df0
    9a9c:	00017c5c 	.word	0x00017c5c
    9aa0:	00017ce8 	.word	0x00017ce8
    9aa4:	0000912d 	.word	0x0000912d
    9aa8:	00017d00 	.word	0x00017d00
    9aac:	0000a7d5 	.word	0x0000a7d5
    9ab0:	00017d40 	.word	0x00017d40
    9ab4:	00017d64 	.word	0x00017d64
    9ab8:	00017d88 	.word	0x00017d88
    9abc:	00017da8 	.word	0x00017da8
    9ac0:	00000207 	.word	0x00000207
    9ac4:	00017dcc 	.word	0x00017dcc
    9ac8:	00000216 	.word	0x00000216
    9acc:	00017e08 	.word	0x00017e08
    9ad0:	00009459 	.word	0x00009459
    9ad4:	0000021d 	.word	0x0000021d
    9ad8:	00017e34 	.word	0x00017e34
    9adc:	00000225 	.word	0x00000225
    9ae0:	00017e48 	.word	0x00017e48
    9ae4:	0000022e 	.word	0x0000022e
    9ae8:	00017e64 	.word	0x00017e64
    9aec:	00000257 	.word	0x00000257
    9af0:	00017c94 	.word	0x00017c94
    9af4:	00017e88 	.word	0x00017e88
    9af8:	00001070 	.word	0x00001070
    9afc:	0000a7e1 	.word	0x0000a7e1
    9b00:	00001084 	.word	0x00001084
    9b04:	00017cc0 	.word	0x00017cc0

00009b08 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    9b08:	b570      	push	{r4, r5, r6, lr}
    9b0a:	0014      	movs	r4, r2
    9b0c:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
    9b0e:	2800      	cmp	r0, #0
    9b10:	d003      	beq.n	9b1a <hif_receive+0x12>
    9b12:	2900      	cmp	r1, #0
    9b14:	d001      	beq.n	9b1a <hif_receive+0x12>
    9b16:	2a00      	cmp	r2, #0
    9b18:	d111      	bne.n	9b3e <hif_receive+0x36>
	{
		if(isDone)
    9b1a:	2d00      	cmp	r5, #0
    9b1c:	d002      	beq.n	9b24 <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
    9b1e:	4b25      	ldr	r3, [pc, #148]	; (9bb4 <hif_receive+0xac>)
    9b20:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
    9b22:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
    9b24:	229e      	movs	r2, #158	; 0x9e
    9b26:	0092      	lsls	r2, r2, #2
    9b28:	4923      	ldr	r1, [pc, #140]	; (9bb8 <hif_receive+0xb0>)
    9b2a:	4824      	ldr	r0, [pc, #144]	; (9bbc <hif_receive+0xb4>)
    9b2c:	4c24      	ldr	r4, [pc, #144]	; (9bc0 <hif_receive+0xb8>)
    9b2e:	47a0      	blx	r4
    9b30:	4824      	ldr	r0, [pc, #144]	; (9bc4 <hif_receive+0xbc>)
    9b32:	47a0      	blx	r4
    9b34:	4824      	ldr	r0, [pc, #144]	; (9bc8 <hif_receive+0xc0>)
    9b36:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    9b38:	200c      	movs	r0, #12
    9b3a:	4240      	negs	r0, r0
    9b3c:	e7f1      	b.n	9b22 <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
    9b3e:	4b23      	ldr	r3, [pc, #140]	; (9bcc <hif_receive+0xc4>)
    9b40:	68db      	ldr	r3, [r3, #12]
    9b42:	429a      	cmp	r2, r3
    9b44:	d81a      	bhi.n	9b7c <hif_receive+0x74>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
    9b46:	4b21      	ldr	r3, [pc, #132]	; (9bcc <hif_receive+0xc4>)
    9b48:	689b      	ldr	r3, [r3, #8]
    9b4a:	4298      	cmp	r0, r3
    9b4c:	d326      	bcc.n	9b9c <hif_receive+0x94>
    9b4e:	1886      	adds	r6, r0, r2
    9b50:	4a1e      	ldr	r2, [pc, #120]	; (9bcc <hif_receive+0xc4>)
    9b52:	6893      	ldr	r3, [r2, #8]
    9b54:	68d2      	ldr	r2, [r2, #12]
    9b56:	189b      	adds	r3, r3, r2
    9b58:	429e      	cmp	r6, r3
    9b5a:	d81f      	bhi.n	9b9c <hif_receive+0x94>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    9b5c:	0022      	movs	r2, r4
    9b5e:	4b1c      	ldr	r3, [pc, #112]	; (9bd0 <hif_receive+0xc8>)
    9b60:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    9b62:	2800      	cmp	r0, #0
    9b64:	d1dd      	bne.n	9b22 <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
    9b66:	4a19      	ldr	r2, [pc, #100]	; (9bcc <hif_receive+0xc4>)
    9b68:	6893      	ldr	r3, [r2, #8]
    9b6a:	68d2      	ldr	r2, [r2, #12]
    9b6c:	189b      	adds	r3, r3, r2
    9b6e:	429e      	cmp	r6, r3
    9b70:	d001      	beq.n	9b76 <hif_receive+0x6e>
    9b72:	2d00      	cmp	r5, #0
    9b74:	d0d5      	beq.n	9b22 <hif_receive+0x1a>
		ret = hif_set_rx_done();
    9b76:	4b0f      	ldr	r3, [pc, #60]	; (9bb4 <hif_receive+0xac>)
    9b78:	4798      	blx	r3
    9b7a:	e7d2      	b.n	9b22 <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
    9b7c:	22a0      	movs	r2, #160	; 0xa0
    9b7e:	0092      	lsls	r2, r2, #2
    9b80:	490d      	ldr	r1, [pc, #52]	; (9bb8 <hif_receive+0xb0>)
    9b82:	480e      	ldr	r0, [pc, #56]	; (9bbc <hif_receive+0xb4>)
    9b84:	4d0e      	ldr	r5, [pc, #56]	; (9bc0 <hif_receive+0xb8>)
    9b86:	47a8      	blx	r5
    9b88:	4b10      	ldr	r3, [pc, #64]	; (9bcc <hif_receive+0xc4>)
    9b8a:	68da      	ldr	r2, [r3, #12]
    9b8c:	0021      	movs	r1, r4
    9b8e:	4811      	ldr	r0, [pc, #68]	; (9bd4 <hif_receive+0xcc>)
    9b90:	47a8      	blx	r5
    9b92:	480d      	ldr	r0, [pc, #52]	; (9bc8 <hif_receive+0xc0>)
    9b94:	47a8      	blx	r5
		ret = M2M_ERR_FAIL;
    9b96:	200c      	movs	r0, #12
    9b98:	4240      	negs	r0, r0
		goto ERR1;
    9b9a:	e7c2      	b.n	9b22 <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    9b9c:	4a0e      	ldr	r2, [pc, #56]	; (9bd8 <hif_receive+0xd0>)
    9b9e:	4906      	ldr	r1, [pc, #24]	; (9bb8 <hif_receive+0xb0>)
    9ba0:	4806      	ldr	r0, [pc, #24]	; (9bbc <hif_receive+0xb4>)
    9ba2:	4c07      	ldr	r4, [pc, #28]	; (9bc0 <hif_receive+0xb8>)
    9ba4:	47a0      	blx	r4
    9ba6:	480d      	ldr	r0, [pc, #52]	; (9bdc <hif_receive+0xd4>)
    9ba8:	47a0      	blx	r4
    9baa:	4807      	ldr	r0, [pc, #28]	; (9bc8 <hif_receive+0xc0>)
    9bac:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
    9bae:	200c      	movs	r0, #12
    9bb0:	4240      	negs	r0, r0
		goto ERR1;
    9bb2:	e7b6      	b.n	9b22 <hif_receive+0x1a>
    9bb4:	00009459 	.word	0x00009459
    9bb8:	00017ca4 	.word	0x00017ca4
    9bbc:	00017c34 	.word	0x00017c34
    9bc0:	00007fed 	.word	0x00007fed
    9bc4:	00017eb8 	.word	0x00017eb8
    9bc8:	00017c5c 	.word	0x00017c5c
    9bcc:	20005a98 	.word	0x20005a98
    9bd0:	0000a7ed 	.word	0x0000a7ed
    9bd4:	00017ed8 	.word	0x00017ed8
    9bd8:	00000286 	.word	0x00000286
    9bdc:	00017f20 	.word	0x00017f20

00009be0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    9be0:	b570      	push	{r4, r5, r6, lr}
    9be2:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
    9be4:	2807      	cmp	r0, #7
    9be6:	d81f      	bhi.n	9c28 <hif_register_cb+0x48>
    9be8:	0083      	lsls	r3, r0, #2
    9bea:	4a16      	ldr	r2, [pc, #88]	; (9c44 <hif_register_cb+0x64>)
    9bec:	58d3      	ldr	r3, [r2, r3]
    9bee:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
    9bf0:	4b15      	ldr	r3, [pc, #84]	; (9c48 <hif_register_cb+0x68>)
    9bf2:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
    9bf4:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
    9bf6:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
    9bf8:	4b13      	ldr	r3, [pc, #76]	; (9c48 <hif_register_cb+0x68>)
    9bfa:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
    9bfc:	2000      	movs	r0, #0
			break;
    9bfe:	e7fa      	b.n	9bf6 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
    9c00:	4b11      	ldr	r3, [pc, #68]	; (9c48 <hif_register_cb+0x68>)
    9c02:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
    9c04:	2000      	movs	r0, #0
			break;
    9c06:	e7f6      	b.n	9bf6 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
    9c08:	4b0f      	ldr	r3, [pc, #60]	; (9c48 <hif_register_cb+0x68>)
    9c0a:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
    9c0c:	2000      	movs	r0, #0
			break;
    9c0e:	e7f2      	b.n	9bf6 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
    9c10:	4b0d      	ldr	r3, [pc, #52]	; (9c48 <hif_register_cb+0x68>)
    9c12:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
    9c14:	2000      	movs	r0, #0
			break;
    9c16:	e7ee      	b.n	9bf6 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
    9c18:	4b0b      	ldr	r3, [pc, #44]	; (9c48 <hif_register_cb+0x68>)
    9c1a:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
    9c1c:	2000      	movs	r0, #0
			break;
    9c1e:	e7ea      	b.n	9bf6 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
    9c20:	4b09      	ldr	r3, [pc, #36]	; (9c48 <hif_register_cb+0x68>)
    9c22:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
    9c24:	2000      	movs	r0, #0
			break;
    9c26:	e7e6      	b.n	9bf6 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
    9c28:	4a08      	ldr	r2, [pc, #32]	; (9c4c <hif_register_cb+0x6c>)
    9c2a:	4909      	ldr	r1, [pc, #36]	; (9c50 <hif_register_cb+0x70>)
    9c2c:	4809      	ldr	r0, [pc, #36]	; (9c54 <hif_register_cb+0x74>)
    9c2e:	4d0a      	ldr	r5, [pc, #40]	; (9c58 <hif_register_cb+0x78>)
    9c30:	47a8      	blx	r5
    9c32:	0021      	movs	r1, r4
    9c34:	4809      	ldr	r0, [pc, #36]	; (9c5c <hif_register_cb+0x7c>)
    9c36:	47a8      	blx	r5
    9c38:	4809      	ldr	r0, [pc, #36]	; (9c60 <hif_register_cb+0x80>)
    9c3a:	47a8      	blx	r5
			ret = M2M_ERR_FAIL;
    9c3c:	200c      	movs	r0, #12
    9c3e:	4240      	negs	r0, r0
			break;
    9c40:	e7d9      	b.n	9bf6 <hif_register_cb+0x16>
    9c42:	46c0      	nop			; (mov r8, r8)
    9c44:	00017c60 	.word	0x00017c60
    9c48:	20005a98 	.word	0x20005a98
    9c4c:	000002be 	.word	0x000002be
    9c50:	00017cb0 	.word	0x00017cb0
    9c54:	00017c34 	.word	0x00017c34
    9c58:	00007fed 	.word	0x00007fed
    9c5c:	00017f64 	.word	0x00017f64
    9c60:	00017c5c 	.word	0x00017c5c

00009c64 <hif_init>:
{
    9c64:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
    9c66:	222c      	movs	r2, #44	; 0x2c
    9c68:	2100      	movs	r1, #0
    9c6a:	4806      	ldr	r0, [pc, #24]	; (9c84 <hif_init+0x20>)
    9c6c:	4b06      	ldr	r3, [pc, #24]	; (9c88 <hif_init+0x24>)
    9c6e:	4798      	blx	r3
	nm_bsp_register_isr(isr);
    9c70:	4806      	ldr	r0, [pc, #24]	; (9c8c <hif_init+0x28>)
    9c72:	4b07      	ldr	r3, [pc, #28]	; (9c90 <hif_init+0x2c>)
    9c74:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    9c76:	4907      	ldr	r1, [pc, #28]	; (9c94 <hif_init+0x30>)
    9c78:	2003      	movs	r0, #3
    9c7a:	4b07      	ldr	r3, [pc, #28]	; (9c98 <hif_init+0x34>)
    9c7c:	4798      	blx	r3
}
    9c7e:	2000      	movs	r0, #0
    9c80:	bd10      	pop	{r4, pc}
    9c82:	46c0      	nop			; (mov r8, r8)
    9c84:	20005a98 	.word	0x20005a98
    9c88:	00009419 	.word	0x00009419
    9c8c:	00009445 	.word	0x00009445
    9c90:	000090d5 	.word	0x000090d5
    9c94:	00009455 	.word	0x00009455
    9c98:	00009be1 	.word	0x00009be1

00009c9c <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    9c9c:	b530      	push	{r4, r5, lr}
    9c9e:	b09f      	sub	sp, #124	; 0x7c
    9ca0:	0004      	movs	r4, r0
    9ca2:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    9ca4:	282c      	cmp	r0, #44	; 0x2c
    9ca6:	d02e      	beq.n	9d06 <m2m_wifi_cb+0x6a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    9ca8:	281b      	cmp	r0, #27
    9caa:	d03c      	beq.n	9d26 <m2m_wifi_cb+0x8a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    9cac:	2806      	cmp	r0, #6
    9cae:	d04a      	beq.n	9d46 <m2m_wifi_cb+0xaa>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    9cb0:	280e      	cmp	r0, #14
    9cb2:	d026      	beq.n	9d02 <m2m_wifi_cb+0x66>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    9cb4:	2832      	cmp	r0, #50	; 0x32
    9cb6:	d056      	beq.n	9d66 <m2m_wifi_cb+0xca>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    9cb8:	282f      	cmp	r0, #47	; 0x2f
    9cba:	d064      	beq.n	9d86 <m2m_wifi_cb+0xea>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    9cbc:	2834      	cmp	r0, #52	; 0x34
    9cbe:	d100      	bne.n	9cc2 <m2m_wifi_cb+0x26>
    9cc0:	e076      	b.n	9db0 <m2m_wifi_cb+0x114>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    9cc2:	2811      	cmp	r0, #17
    9cc4:	d100      	bne.n	9cc8 <m2m_wifi_cb+0x2c>
    9cc6:	e094      	b.n	9df2 <m2m_wifi_cb+0x156>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    9cc8:	2813      	cmp	r0, #19
    9cca:	d100      	bne.n	9cce <m2m_wifi_cb+0x32>
    9ccc:	e0aa      	b.n	9e24 <m2m_wifi_cb+0x188>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    9cce:	2804      	cmp	r0, #4
    9cd0:	d100      	bne.n	9cd4 <m2m_wifi_cb+0x38>
    9cd2:	e0b9      	b.n	9e48 <m2m_wifi_cb+0x1ac>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    9cd4:	2865      	cmp	r0, #101	; 0x65
    9cd6:	d100      	bne.n	9cda <m2m_wifi_cb+0x3e>
    9cd8:	e0c8      	b.n	9e6c <m2m_wifi_cb+0x1d0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    9cda:	2809      	cmp	r0, #9
    9cdc:	d100      	bne.n	9ce0 <m2m_wifi_cb+0x44>
    9cde:	e0d7      	b.n	9e90 <m2m_wifi_cb+0x1f4>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    9ce0:	282a      	cmp	r0, #42	; 0x2a
    9ce2:	d100      	bne.n	9ce6 <m2m_wifi_cb+0x4a>
    9ce4:	e0e6      	b.n	9eb4 <m2m_wifi_cb+0x218>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    9ce6:	2820      	cmp	r0, #32
    9ce8:	d100      	bne.n	9cec <m2m_wifi_cb+0x50>
    9cea:	e0f5      	b.n	9ed8 <m2m_wifi_cb+0x23c>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    9cec:	2224      	movs	r2, #36	; 0x24
    9cee:	32ff      	adds	r2, #255	; 0xff
    9cf0:	4988      	ldr	r1, [pc, #544]	; (9f14 <m2m_wifi_cb+0x278>)
    9cf2:	4889      	ldr	r0, [pc, #548]	; (9f18 <m2m_wifi_cb+0x27c>)
    9cf4:	4d89      	ldr	r5, [pc, #548]	; (9f1c <m2m_wifi_cb+0x280>)
    9cf6:	47a8      	blx	r5
    9cf8:	0021      	movs	r1, r4
    9cfa:	4889      	ldr	r0, [pc, #548]	; (9f20 <m2m_wifi_cb+0x284>)
    9cfc:	47a8      	blx	r5
    9cfe:	4889      	ldr	r0, [pc, #548]	; (9f24 <m2m_wifi_cb+0x288>)
    9d00:	47a8      	blx	r5
	}
}
    9d02:	b01f      	add	sp, #124	; 0x7c
    9d04:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    9d06:	2300      	movs	r3, #0
    9d08:	2204      	movs	r2, #4
    9d0a:	a903      	add	r1, sp, #12
    9d0c:	0028      	movs	r0, r5
    9d0e:	4c86      	ldr	r4, [pc, #536]	; (9f28 <m2m_wifi_cb+0x28c>)
    9d10:	47a0      	blx	r4
    9d12:	2800      	cmp	r0, #0
    9d14:	d1f5      	bne.n	9d02 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    9d16:	4b85      	ldr	r3, [pc, #532]	; (9f2c <m2m_wifi_cb+0x290>)
    9d18:	681b      	ldr	r3, [r3, #0]
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d0f1      	beq.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    9d1e:	a903      	add	r1, sp, #12
    9d20:	302c      	adds	r0, #44	; 0x2c
    9d22:	4798      	blx	r3
    9d24:	e7ed      	b.n	9d02 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    9d26:	2300      	movs	r3, #0
    9d28:	2208      	movs	r2, #8
    9d2a:	a903      	add	r1, sp, #12
    9d2c:	0028      	movs	r0, r5
    9d2e:	4c7e      	ldr	r4, [pc, #504]	; (9f28 <m2m_wifi_cb+0x28c>)
    9d30:	47a0      	blx	r4
    9d32:	2800      	cmp	r0, #0
    9d34:	d1e5      	bne.n	9d02 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    9d36:	4b7d      	ldr	r3, [pc, #500]	; (9f2c <m2m_wifi_cb+0x290>)
    9d38:	681b      	ldr	r3, [r3, #0]
    9d3a:	2b00      	cmp	r3, #0
    9d3c:	d0e1      	beq.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    9d3e:	a903      	add	r1, sp, #12
    9d40:	301b      	adds	r0, #27
    9d42:	4798      	blx	r3
    9d44:	e7dd      	b.n	9d02 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    9d46:	2301      	movs	r3, #1
    9d48:	2230      	movs	r2, #48	; 0x30
    9d4a:	a903      	add	r1, sp, #12
    9d4c:	0028      	movs	r0, r5
    9d4e:	4c76      	ldr	r4, [pc, #472]	; (9f28 <m2m_wifi_cb+0x28c>)
    9d50:	47a0      	blx	r4
    9d52:	2800      	cmp	r0, #0
    9d54:	d1d5      	bne.n	9d02 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
    9d56:	4b75      	ldr	r3, [pc, #468]	; (9f2c <m2m_wifi_cb+0x290>)
    9d58:	681b      	ldr	r3, [r3, #0]
    9d5a:	2b00      	cmp	r3, #0
    9d5c:	d0d1      	beq.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    9d5e:	a903      	add	r1, sp, #12
    9d60:	3006      	adds	r0, #6
    9d62:	4798      	blx	r3
    9d64:	e7cd      	b.n	9d02 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    9d66:	2300      	movs	r3, #0
    9d68:	2218      	movs	r2, #24
    9d6a:	a903      	add	r1, sp, #12
    9d6c:	0028      	movs	r0, r5
    9d6e:	4c6e      	ldr	r4, [pc, #440]	; (9f28 <m2m_wifi_cb+0x28c>)
    9d70:	47a0      	blx	r4
    9d72:	2800      	cmp	r0, #0
    9d74:	d1c5      	bne.n	9d02 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    9d76:	4b6d      	ldr	r3, [pc, #436]	; (9f2c <m2m_wifi_cb+0x290>)
    9d78:	681b      	ldr	r3, [r3, #0]
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d0c1      	beq.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    9d7e:	a903      	add	r1, sp, #12
    9d80:	3032      	adds	r0, #50	; 0x32
    9d82:	4798      	blx	r3
    9d84:	e7bd      	b.n	9d02 <m2m_wifi_cb+0x66>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    9d86:	2264      	movs	r2, #100	; 0x64
    9d88:	2100      	movs	r1, #0
    9d8a:	a803      	add	r0, sp, #12
    9d8c:	4b68      	ldr	r3, [pc, #416]	; (9f30 <m2m_wifi_cb+0x294>)
    9d8e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    9d90:	2300      	movs	r3, #0
    9d92:	2264      	movs	r2, #100	; 0x64
    9d94:	a903      	add	r1, sp, #12
    9d96:	0028      	movs	r0, r5
    9d98:	4c63      	ldr	r4, [pc, #396]	; (9f28 <m2m_wifi_cb+0x28c>)
    9d9a:	47a0      	blx	r4
    9d9c:	2800      	cmp	r0, #0
    9d9e:	d1b0      	bne.n	9d02 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    9da0:	4b62      	ldr	r3, [pc, #392]	; (9f2c <m2m_wifi_cb+0x290>)
    9da2:	681b      	ldr	r3, [r3, #0]
    9da4:	2b00      	cmp	r3, #0
    9da6:	d0ac      	beq.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    9da8:	a903      	add	r1, sp, #12
    9daa:	302f      	adds	r0, #47	; 0x2f
    9dac:	4798      	blx	r3
    9dae:	e7a8      	b.n	9d02 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    9db0:	2300      	movs	r3, #0
    9db2:	2204      	movs	r2, #4
    9db4:	a903      	add	r1, sp, #12
    9db6:	0028      	movs	r0, r5
    9db8:	4c5b      	ldr	r4, [pc, #364]	; (9f28 <m2m_wifi_cb+0x28c>)
    9dba:	47a0      	blx	r4
    9dbc:	2800      	cmp	r0, #0
    9dbe:	d1a0      	bne.n	9d02 <m2m_wifi_cb+0x66>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    9dc0:	485c      	ldr	r0, [pc, #368]	; (9f34 <m2m_wifi_cb+0x298>)
    9dc2:	4d56      	ldr	r5, [pc, #344]	; (9f1c <m2m_wifi_cb+0x280>)
    9dc4:	47a8      	blx	r5
    9dc6:	9c03      	ldr	r4, [sp, #12]
    9dc8:	0a23      	lsrs	r3, r4, #8
    9dca:	20ff      	movs	r0, #255	; 0xff
    9dcc:	4003      	ands	r3, r0
    9dce:	0c22      	lsrs	r2, r4, #16
    9dd0:	4002      	ands	r2, r0
    9dd2:	0e21      	lsrs	r1, r4, #24
    9dd4:	4020      	ands	r0, r4
    9dd6:	9000      	str	r0, [sp, #0]
    9dd8:	4857      	ldr	r0, [pc, #348]	; (9f38 <m2m_wifi_cb+0x29c>)
    9dda:	47a8      	blx	r5
    9ddc:	4851      	ldr	r0, [pc, #324]	; (9f24 <m2m_wifi_cb+0x288>)
    9dde:	47a8      	blx	r5
			if (gpfAppWifiCb)
    9de0:	4b52      	ldr	r3, [pc, #328]	; (9f2c <m2m_wifi_cb+0x290>)
    9de2:	681b      	ldr	r3, [r3, #0]
    9de4:	2b00      	cmp	r3, #0
    9de6:	d100      	bne.n	9dea <m2m_wifi_cb+0x14e>
    9de8:	e78b      	b.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    9dea:	2100      	movs	r1, #0
    9dec:	2034      	movs	r0, #52	; 0x34
    9dee:	4798      	blx	r3
    9df0:	e787      	b.n	9d02 <m2m_wifi_cb+0x66>
		gu8scanInProgress = 0;
    9df2:	2200      	movs	r2, #0
    9df4:	4b51      	ldr	r3, [pc, #324]	; (9f3c <m2m_wifi_cb+0x2a0>)
    9df6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    9df8:	2300      	movs	r3, #0
    9dfa:	3204      	adds	r2, #4
    9dfc:	a903      	add	r1, sp, #12
    9dfe:	0028      	movs	r0, r5
    9e00:	4c49      	ldr	r4, [pc, #292]	; (9f28 <m2m_wifi_cb+0x28c>)
    9e02:	47a0      	blx	r4
    9e04:	2800      	cmp	r0, #0
    9e06:	d000      	beq.n	9e0a <m2m_wifi_cb+0x16e>
    9e08:	e77b      	b.n	9d02 <m2m_wifi_cb+0x66>
			gu8ChNum = strState.u8NumofCh;
    9e0a:	ab03      	add	r3, sp, #12
    9e0c:	781a      	ldrb	r2, [r3, #0]
    9e0e:	4b4c      	ldr	r3, [pc, #304]	; (9f40 <m2m_wifi_cb+0x2a4>)
    9e10:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    9e12:	4b46      	ldr	r3, [pc, #280]	; (9f2c <m2m_wifi_cb+0x290>)
    9e14:	681b      	ldr	r3, [r3, #0]
    9e16:	2b00      	cmp	r3, #0
    9e18:	d100      	bne.n	9e1c <m2m_wifi_cb+0x180>
    9e1a:	e772      	b.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    9e1c:	a903      	add	r1, sp, #12
    9e1e:	3011      	adds	r0, #17
    9e20:	4798      	blx	r3
    9e22:	e76e      	b.n	9d02 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    9e24:	2300      	movs	r3, #0
    9e26:	222c      	movs	r2, #44	; 0x2c
    9e28:	a903      	add	r1, sp, #12
    9e2a:	0028      	movs	r0, r5
    9e2c:	4c3e      	ldr	r4, [pc, #248]	; (9f28 <m2m_wifi_cb+0x28c>)
    9e2e:	47a0      	blx	r4
    9e30:	2800      	cmp	r0, #0
    9e32:	d000      	beq.n	9e36 <m2m_wifi_cb+0x19a>
    9e34:	e765      	b.n	9d02 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    9e36:	4b3d      	ldr	r3, [pc, #244]	; (9f2c <m2m_wifi_cb+0x290>)
    9e38:	681b      	ldr	r3, [r3, #0]
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d100      	bne.n	9e40 <m2m_wifi_cb+0x1a4>
    9e3e:	e760      	b.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    9e40:	a903      	add	r1, sp, #12
    9e42:	3013      	adds	r0, #19
    9e44:	4798      	blx	r3
    9e46:	e75c      	b.n	9d02 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9e48:	2300      	movs	r3, #0
    9e4a:	2204      	movs	r2, #4
    9e4c:	a91c      	add	r1, sp, #112	; 0x70
    9e4e:	0028      	movs	r0, r5
    9e50:	4c35      	ldr	r4, [pc, #212]	; (9f28 <m2m_wifi_cb+0x28c>)
    9e52:	47a0      	blx	r4
    9e54:	2800      	cmp	r0, #0
    9e56:	d000      	beq.n	9e5a <m2m_wifi_cb+0x1be>
    9e58:	e753      	b.n	9d02 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    9e5a:	4b34      	ldr	r3, [pc, #208]	; (9f2c <m2m_wifi_cb+0x290>)
    9e5c:	681b      	ldr	r3, [r3, #0]
    9e5e:	2b00      	cmp	r3, #0
    9e60:	d100      	bne.n	9e64 <m2m_wifi_cb+0x1c8>
    9e62:	e74e      	b.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    9e64:	a91c      	add	r1, sp, #112	; 0x70
    9e66:	3004      	adds	r0, #4
    9e68:	4798      	blx	r3
    9e6a:	e74a      	b.n	9d02 <m2m_wifi_cb+0x66>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    9e6c:	2300      	movs	r3, #0
    9e6e:	2204      	movs	r2, #4
    9e70:	a91c      	add	r1, sp, #112	; 0x70
    9e72:	0028      	movs	r0, r5
    9e74:	4c2c      	ldr	r4, [pc, #176]	; (9f28 <m2m_wifi_cb+0x28c>)
    9e76:	47a0      	blx	r4
    9e78:	2800      	cmp	r0, #0
    9e7a:	d000      	beq.n	9e7e <m2m_wifi_cb+0x1e2>
    9e7c:	e741      	b.n	9d02 <m2m_wifi_cb+0x66>
			if (gpfAppWifiCb)
    9e7e:	4b2b      	ldr	r3, [pc, #172]	; (9f2c <m2m_wifi_cb+0x290>)
    9e80:	681b      	ldr	r3, [r3, #0]
    9e82:	2b00      	cmp	r3, #0
    9e84:	d100      	bne.n	9e88 <m2m_wifi_cb+0x1ec>
    9e86:	e73c      	b.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    9e88:	a91c      	add	r1, sp, #112	; 0x70
    9e8a:	3065      	adds	r0, #101	; 0x65
    9e8c:	4798      	blx	r3
    9e8e:	e738      	b.n	9d02 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    9e90:	2301      	movs	r3, #1
    9e92:	2264      	movs	r2, #100	; 0x64
    9e94:	a903      	add	r1, sp, #12
    9e96:	0028      	movs	r0, r5
    9e98:	4c23      	ldr	r4, [pc, #140]	; (9f28 <m2m_wifi_cb+0x28c>)
    9e9a:	47a0      	blx	r4
    9e9c:	2800      	cmp	r0, #0
    9e9e:	d000      	beq.n	9ea2 <m2m_wifi_cb+0x206>
    9ea0:	e72f      	b.n	9d02 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
    9ea2:	4b22      	ldr	r3, [pc, #136]	; (9f2c <m2m_wifi_cb+0x290>)
    9ea4:	681b      	ldr	r3, [r3, #0]
    9ea6:	2b00      	cmp	r3, #0
    9ea8:	d100      	bne.n	9eac <m2m_wifi_cb+0x210>
    9eaa:	e72a      	b.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    9eac:	a903      	add	r1, sp, #12
    9eae:	3009      	adds	r0, #9
    9eb0:	4798      	blx	r3
    9eb2:	e726      	b.n	9d02 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    9eb4:	2301      	movs	r3, #1
    9eb6:	2204      	movs	r2, #4
    9eb8:	a903      	add	r1, sp, #12
    9eba:	0028      	movs	r0, r5
    9ebc:	4c1a      	ldr	r4, [pc, #104]	; (9f28 <m2m_wifi_cb+0x28c>)
    9ebe:	47a0      	blx	r4
    9ec0:	2800      	cmp	r0, #0
    9ec2:	d000      	beq.n	9ec6 <m2m_wifi_cb+0x22a>
    9ec4:	e71d      	b.n	9d02 <m2m_wifi_cb+0x66>
			if(gpfAppWifiCb)
    9ec6:	4b19      	ldr	r3, [pc, #100]	; (9f2c <m2m_wifi_cb+0x290>)
    9ec8:	681b      	ldr	r3, [r3, #0]
    9eca:	2b00      	cmp	r3, #0
    9ecc:	d100      	bne.n	9ed0 <m2m_wifi_cb+0x234>
    9ece:	e718      	b.n	9d02 <m2m_wifi_cb+0x66>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    9ed0:	a903      	add	r1, sp, #12
    9ed2:	302a      	adds	r0, #42	; 0x2a
    9ed4:	4798      	blx	r3
    9ed6:	e714      	b.n	9d02 <m2m_wifi_cb+0x66>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    9ed8:	2300      	movs	r3, #0
    9eda:	2208      	movs	r2, #8
    9edc:	a903      	add	r1, sp, #12
    9ede:	0028      	movs	r0, r5
    9ee0:	4c11      	ldr	r4, [pc, #68]	; (9f28 <m2m_wifi_cb+0x28c>)
    9ee2:	47a0      	blx	r4
    9ee4:	2800      	cmp	r0, #0
    9ee6:	d000      	beq.n	9eea <m2m_wifi_cb+0x24e>
    9ee8:	e70b      	b.n	9d02 <m2m_wifi_cb+0x66>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    9eea:	ab03      	add	r3, sp, #12
    9eec:	889a      	ldrh	r2, [r3, #4]
    9eee:	0028      	movs	r0, r5
    9ef0:	3008      	adds	r0, #8
    9ef2:	2301      	movs	r3, #1
    9ef4:	9903      	ldr	r1, [sp, #12]
    9ef6:	4c0c      	ldr	r4, [pc, #48]	; (9f28 <m2m_wifi_cb+0x28c>)
    9ef8:	47a0      	blx	r4
    9efa:	2800      	cmp	r0, #0
    9efc:	d000      	beq.n	9f00 <m2m_wifi_cb+0x264>
    9efe:	e700      	b.n	9d02 <m2m_wifi_cb+0x66>
				if(gpfAppWifiCb)
    9f00:	4b0a      	ldr	r3, [pc, #40]	; (9f2c <m2m_wifi_cb+0x290>)
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	2b00      	cmp	r3, #0
    9f06:	d100      	bne.n	9f0a <m2m_wifi_cb+0x26e>
    9f08:	e6fb      	b.n	9d02 <m2m_wifi_cb+0x66>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    9f0a:	a903      	add	r1, sp, #12
    9f0c:	3020      	adds	r0, #32
    9f0e:	4798      	blx	r3
    9f10:	e6f7      	b.n	9d02 <m2m_wifi_cb+0x66>
    9f12:	46c0      	nop			; (mov r8, r8)
    9f14:	00017fb0 	.word	0x00017fb0
    9f18:	00017c34 	.word	0x00017c34
    9f1c:	00007fed 	.word	0x00007fed
    9f20:	00018000 	.word	0x00018000
    9f24:	00017c5c 	.word	0x00017c5c
    9f28:	00009b09 	.word	0x00009b09
    9f2c:	20003ec4 	.word	0x20003ec4
    9f30:	00009419 	.word	0x00009419
    9f34:	00017f70 	.word	0x00017f70
    9f38:	00017fe0 	.word	0x00017fe0
    9f3c:	20003ec9 	.word	0x20003ec9
    9f40:	20003ec8 	.word	0x20003ec8

00009f44 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    9f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f46:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    9f48:	2201      	movs	r2, #1
    9f4a:	230f      	movs	r3, #15
    9f4c:	446b      	add	r3, sp
    9f4e:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    9f50:	2800      	cmp	r0, #0
    9f52:	d05f      	beq.n	a014 <m2m_wifi_init+0xd0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    9f54:	6802      	ldr	r2, [r0, #0]
    9f56:	4b31      	ldr	r3, [pc, #196]	; (a01c <m2m_wifi_init+0xd8>)
    9f58:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    9f5a:	2200      	movs	r2, #0
    9f5c:	4b30      	ldr	r3, [pc, #192]	; (a020 <m2m_wifi_init+0xdc>)
    9f5e:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    9f60:	200f      	movs	r0, #15
    9f62:	4468      	add	r0, sp
    9f64:	4b2f      	ldr	r3, [pc, #188]	; (a024 <m2m_wifi_init+0xe0>)
    9f66:	4798      	blx	r3
    9f68:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    9f6a:	d002      	beq.n	9f72 <m2m_wifi_init+0x2e>

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
}
    9f6c:	0020      	movs	r0, r4
    9f6e:	b00f      	add	sp, #60	; 0x3c
    9f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = hif_init(NULL);
    9f72:	2000      	movs	r0, #0
    9f74:	4b2c      	ldr	r3, [pc, #176]	; (a028 <m2m_wifi_init+0xe4>)
    9f76:	4798      	blx	r3
    9f78:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    9f7a:	d147      	bne.n	a00c <m2m_wifi_init+0xc8>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    9f7c:	492b      	ldr	r1, [pc, #172]	; (a02c <m2m_wifi_init+0xe8>)
    9f7e:	2001      	movs	r0, #1
    9f80:	4b2b      	ldr	r3, [pc, #172]	; (a030 <m2m_wifi_init+0xec>)
    9f82:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    9f84:	ad04      	add	r5, sp, #16
    9f86:	0028      	movs	r0, r5
    9f88:	4b2a      	ldr	r3, [pc, #168]	; (a034 <m2m_wifi_init+0xf0>)
    9f8a:	4798      	blx	r3
    9f8c:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    9f8e:	4f2a      	ldr	r7, [pc, #168]	; (a038 <m2m_wifi_init+0xf4>)
    9f90:	0038      	movs	r0, r7
    9f92:	4e2a      	ldr	r6, [pc, #168]	; (a03c <m2m_wifi_init+0xf8>)
    9f94:	47b0      	blx	r6
    9f96:	79ab      	ldrb	r3, [r5, #6]
    9f98:	796a      	ldrb	r2, [r5, #5]
    9f9a:	7929      	ldrb	r1, [r5, #4]
    9f9c:	8c28      	ldrh	r0, [r5, #32]
    9f9e:	9000      	str	r0, [sp, #0]
    9fa0:	4827      	ldr	r0, [pc, #156]	; (a040 <m2m_wifi_init+0xfc>)
    9fa2:	47b0      	blx	r6
    9fa4:	4827      	ldr	r0, [pc, #156]	; (a044 <m2m_wifi_init+0x100>)
    9fa6:	47b0      	blx	r6
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    9fa8:	0038      	movs	r0, r7
    9faa:	47b0      	blx	r6
    9fac:	2226      	movs	r2, #38	; 0x26
    9fae:	446a      	add	r2, sp
    9fb0:	211a      	movs	r1, #26
    9fb2:	4469      	add	r1, sp
    9fb4:	4824      	ldr	r0, [pc, #144]	; (a048 <m2m_wifi_init+0x104>)
    9fb6:	47b0      	blx	r6
    9fb8:	4822      	ldr	r0, [pc, #136]	; (a044 <m2m_wifi_init+0x100>)
    9fba:	47b0      	blx	r6
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    9fbc:	0038      	movs	r0, r7
    9fbe:	47b0      	blx	r6
    9fc0:	7a6b      	ldrb	r3, [r5, #9]
    9fc2:	7a2a      	ldrb	r2, [r5, #8]
    9fc4:	79e9      	ldrb	r1, [r5, #7]
    9fc6:	4821      	ldr	r0, [pc, #132]	; (a04c <m2m_wifi_init+0x108>)
    9fc8:	47b0      	blx	r6
    9fca:	481e      	ldr	r0, [pc, #120]	; (a044 <m2m_wifi_init+0x100>)
    9fcc:	47b0      	blx	r6
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    9fce:	0038      	movs	r0, r7
    9fd0:	47b0      	blx	r6
    9fd2:	2304      	movs	r3, #4
    9fd4:	2205      	movs	r2, #5
    9fd6:	2113      	movs	r1, #19
    9fd8:	481d      	ldr	r0, [pc, #116]	; (a050 <m2m_wifi_init+0x10c>)
    9fda:	47b0      	blx	r6
    9fdc:	4819      	ldr	r0, [pc, #100]	; (a044 <m2m_wifi_init+0x100>)
    9fde:	47b0      	blx	r6
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    9fe0:	0038      	movs	r0, r7
    9fe2:	47b0      	blx	r6
    9fe4:	4a1b      	ldr	r2, [pc, #108]	; (a054 <m2m_wifi_init+0x110>)
    9fe6:	491c      	ldr	r1, [pc, #112]	; (a058 <m2m_wifi_init+0x114>)
    9fe8:	481c      	ldr	r0, [pc, #112]	; (a05c <m2m_wifi_init+0x118>)
    9fea:	47b0      	blx	r6
    9fec:	4815      	ldr	r0, [pc, #84]	; (a044 <m2m_wifi_init+0x100>)
    9fee:	47b0      	blx	r6
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    9ff0:	0023      	movs	r3, r4
    9ff2:	330d      	adds	r3, #13
    9ff4:	d1ba      	bne.n	9f6c <m2m_wifi_init+0x28>
		M2M_ERR("Mismatch Firmawre Version\n");
    9ff6:	22e8      	movs	r2, #232	; 0xe8
    9ff8:	32ff      	adds	r2, #255	; 0xff
    9ffa:	4919      	ldr	r1, [pc, #100]	; (a060 <m2m_wifi_init+0x11c>)
    9ffc:	4819      	ldr	r0, [pc, #100]	; (a064 <m2m_wifi_init+0x120>)
    9ffe:	4d0f      	ldr	r5, [pc, #60]	; (a03c <m2m_wifi_init+0xf8>)
    a000:	47a8      	blx	r5
    a002:	4819      	ldr	r0, [pc, #100]	; (a068 <m2m_wifi_init+0x124>)
    a004:	47a8      	blx	r5
    a006:	480f      	ldr	r0, [pc, #60]	; (a044 <m2m_wifi_init+0x100>)
    a008:	47a8      	blx	r5
    a00a:	e7af      	b.n	9f6c <m2m_wifi_init+0x28>
	nm_drv_deinit(NULL);
    a00c:	2000      	movs	r0, #0
    a00e:	4b17      	ldr	r3, [pc, #92]	; (a06c <m2m_wifi_init+0x128>)
    a010:	4798      	blx	r3
    a012:	e7ab      	b.n	9f6c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    a014:	240c      	movs	r4, #12
    a016:	4264      	negs	r4, r4
    a018:	e7a8      	b.n	9f6c <m2m_wifi_init+0x28>
    a01a:	46c0      	nop			; (mov r8, r8)
    a01c:	20003ec4 	.word	0x20003ec4
    a020:	20003ec9 	.word	0x20003ec9
    a024:	0000a9a1 	.word	0x0000a9a1
    a028:	00009c65 	.word	0x00009c65
    a02c:	00009c9d 	.word	0x00009c9d
    a030:	00009be1 	.word	0x00009be1
    a034:	0000a8bd 	.word	0x0000a8bd
    a038:	00017f70 	.word	0x00017f70
    a03c:	00007fed 	.word	0x00007fed
    a040:	000180c0 	.word	0x000180c0
    a044:	00017c5c 	.word	0x00017c5c
    a048:	000180e8 	.word	0x000180e8
    a04c:	00018104 	.word	0x00018104
    a050:	00018128 	.word	0x00018128
    a054:	00018140 	.word	0x00018140
    a058:	0001814c 	.word	0x0001814c
    a05c:	00018158 	.word	0x00018158
    a060:	00017fbc 	.word	0x00017fbc
    a064:	00017c34 	.word	0x00017c34
    a068:	00018170 	.word	0x00018170
    a06c:	0000aa69 	.word	0x0000aa69

0000a070 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    a070:	b510      	push	{r4, lr}
	return hif_handle_isr();
    a072:	4b01      	ldr	r3, [pc, #4]	; (a078 <m2m_wifi_handle_events+0x8>)
    a074:	4798      	blx	r3
}
    a076:	bd10      	pop	{r4, pc}
    a078:	00009755 	.word	0x00009755

0000a07c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    a07c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a07e:	46ce      	mov	lr, r9
    a080:	4647      	mov	r7, r8
    a082:	b580      	push	{r7, lr}
    a084:	b0a3      	sub	sp, #140	; 0x8c
    a086:	9005      	str	r0, [sp, #20]
    a088:	000c      	movs	r4, r1
    a08a:	0015      	movs	r5, r2
    a08c:	001f      	movs	r7, r3
    a08e:	ab2a      	add	r3, sp, #168	; 0xa8
    a090:	881b      	ldrh	r3, [r3, #0]
    a092:	4699      	mov	r9, r3
    a094:	ab2b      	add	r3, sp, #172	; 0xac
    a096:	781b      	ldrb	r3, [r3, #0]
    a098:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    a09a:	2a01      	cmp	r2, #1
    a09c:	d003      	beq.n	a0a6 <m2m_wifi_connect_sc+0x2a>
	{
		if(pvAuthInfo == NULL)
    a09e:	2f00      	cmp	r7, #0
    a0a0:	d03f      	beq.n	a122 <m2m_wifi_connect_sc+0xa6>
		{
			M2M_ERR("Key is not valid\n");
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    a0a2:	2a02      	cmp	r2, #2
    a0a4:	d049      	beq.n	a13a <m2m_wifi_connect_sc+0xbe>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    a0a6:	1e63      	subs	r3, r4, #1
    a0a8:	2b1f      	cmp	r3, #31
    a0aa:	d900      	bls.n	a0ae <m2m_wifi_connect_sc+0x32>
    a0ac:	e073      	b.n	a196 <m2m_wifi_connect_sc+0x11a>
		M2M_ERR("SSID LEN INVALID\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
    a0ae:	464b      	mov	r3, r9
    a0b0:	3b01      	subs	r3, #1
    a0b2:	b29b      	uxth	r3, r3
    a0b4:	2b0d      	cmp	r3, #13
    a0b6:	d903      	bls.n	a0c0 <m2m_wifi_connect_sc+0x44>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    a0b8:	464b      	mov	r3, r9
    a0ba:	2bff      	cmp	r3, #255	; 0xff
    a0bc:	d000      	beq.n	a0c0 <m2m_wifi_connect_sc+0x44>
    a0be:	e077      	b.n	a1b0 <m2m_wifi_connect_sc+0x134>
			goto ERR1;
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    a0c0:	ae07      	add	r6, sp, #28
    a0c2:	0022      	movs	r2, r4
    a0c4:	9905      	ldr	r1, [sp, #20]
    a0c6:	205a      	movs	r0, #90	; 0x5a
    a0c8:	ab02      	add	r3, sp, #8
    a0ca:	469c      	mov	ip, r3
    a0cc:	4460      	add	r0, ip
    a0ce:	4b71      	ldr	r3, [pc, #452]	; (a294 <m2m_wifi_connect_sc+0x218>)
    a0d0:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    a0d2:	1934      	adds	r4, r6, r4
    a0d4:	3446      	adds	r4, #70	; 0x46
    a0d6:	2300      	movs	r3, #0
    a0d8:	7023      	strb	r3, [r4, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    a0da:	3344      	adds	r3, #68	; 0x44
    a0dc:	464a      	mov	r2, r9
    a0de:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    a0e0:	4643      	mov	r3, r8
    a0e2:	1e5a      	subs	r2, r3, #1
    a0e4:	4193      	sbcs	r3, r2
    a0e6:	2267      	movs	r2, #103	; 0x67
    a0e8:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    a0ea:	2341      	movs	r3, #65	; 0x41
    a0ec:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    a0ee:	2d03      	cmp	r5, #3
    a0f0:	d06a      	beq.n	a1c8 <m2m_wifi_connect_sc+0x14c>
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    a0f2:	2d02      	cmp	r5, #2
    a0f4:	d100      	bne.n	a0f8 <m2m_wifi_connect_sc+0x7c>
    a0f6:	e0a2      	b.n	a23e <m2m_wifi_connect_sc+0x1c2>
			ret = M2M_ERR_FAIL;
			goto ERR1;
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    a0f8:	2d04      	cmp	r5, #4
    a0fa:	d100      	bne.n	a0fe <m2m_wifi_connect_sc+0x82>
    a0fc:	e0b8      	b.n	a270 <m2m_wifi_connect_sc+0x1f4>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    a0fe:	2d01      	cmp	r5, #1
    a100:	d000      	beq.n	a104 <m2m_wifi_connect_sc+0x88>
    a102:	e0bb      	b.n	a27c <m2m_wifi_connect_sc+0x200>
		M2M_ERR("undefined sec type\n");
		ret = M2M_ERR_FAIL;
		goto ERR1;
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    a104:	2300      	movs	r3, #0
    a106:	9302      	str	r3, [sp, #8]
    a108:	9301      	str	r3, [sp, #4]
    a10a:	9300      	str	r3, [sp, #0]
    a10c:	336c      	adds	r3, #108	; 0x6c
    a10e:	aa07      	add	r2, sp, #28
    a110:	2128      	movs	r1, #40	; 0x28
    a112:	2001      	movs	r0, #1
    a114:	4c60      	ldr	r4, [pc, #384]	; (a298 <m2m_wifi_connect_sc+0x21c>)
    a116:	47a0      	blx	r4

ERR1:
	return ret;
}
    a118:	b023      	add	sp, #140	; 0x8c
    a11a:	bc0c      	pop	{r2, r3}
    a11c:	4690      	mov	r8, r2
    a11e:	4699      	mov	r9, r3
    a120:	bdf0      	pop	{r4, r5, r6, r7, pc}
			M2M_ERR("Key is not valid\n");
    a122:	4a5e      	ldr	r2, [pc, #376]	; (a29c <m2m_wifi_connect_sc+0x220>)
    a124:	495e      	ldr	r1, [pc, #376]	; (a2a0 <m2m_wifi_connect_sc+0x224>)
    a126:	485f      	ldr	r0, [pc, #380]	; (a2a4 <m2m_wifi_connect_sc+0x228>)
    a128:	4c5f      	ldr	r4, [pc, #380]	; (a2a8 <m2m_wifi_connect_sc+0x22c>)
    a12a:	47a0      	blx	r4
    a12c:	485f      	ldr	r0, [pc, #380]	; (a2ac <m2m_wifi_connect_sc+0x230>)
    a12e:	47a0      	blx	r4
    a130:	485f      	ldr	r0, [pc, #380]	; (a2b0 <m2m_wifi_connect_sc+0x234>)
    a132:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    a134:	200c      	movs	r0, #12
    a136:	4240      	negs	r0, r0
			goto ERR1;
    a138:	e7ee      	b.n	a118 <m2m_wifi_connect_sc+0x9c>
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    a13a:	0038      	movs	r0, r7
    a13c:	4b5d      	ldr	r3, [pc, #372]	; (a2b4 <m2m_wifi_connect_sc+0x238>)
    a13e:	4798      	blx	r3
    a140:	2840      	cmp	r0, #64	; 0x40
    a142:	d1b0      	bne.n	a0a6 <m2m_wifi_connect_sc+0x2a>
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    a144:	783b      	ldrb	r3, [r7, #0]
    a146:	001a      	movs	r2, r3
    a148:	3a30      	subs	r2, #48	; 0x30
    a14a:	2a36      	cmp	r2, #54	; 0x36
    a14c:	d817      	bhi.n	a17e <m2m_wifi_connect_sc+0x102>
    a14e:	3a0a      	subs	r2, #10
    a150:	2a06      	cmp	r2, #6
    a152:	d914      	bls.n	a17e <m2m_wifi_connect_sc+0x102>
    a154:	3b47      	subs	r3, #71	; 0x47
    a156:	2b19      	cmp	r3, #25
    a158:	d911      	bls.n	a17e <m2m_wifi_connect_sc+0x102>
    a15a:	1c7a      	adds	r2, r7, #1
    a15c:	0038      	movs	r0, r7
    a15e:	3040      	adds	r0, #64	; 0x40
    a160:	7813      	ldrb	r3, [r2, #0]
    a162:	0019      	movs	r1, r3
    a164:	3930      	subs	r1, #48	; 0x30
    a166:	2936      	cmp	r1, #54	; 0x36
    a168:	d809      	bhi.n	a17e <m2m_wifi_connect_sc+0x102>
    a16a:	390a      	subs	r1, #10
    a16c:	2906      	cmp	r1, #6
    a16e:	d906      	bls.n	a17e <m2m_wifi_connect_sc+0x102>
    a170:	3b47      	subs	r3, #71	; 0x47
    a172:	2b19      	cmp	r3, #25
    a174:	d903      	bls.n	a17e <m2m_wifi_connect_sc+0x102>
    a176:	3201      	adds	r2, #1
			while(i < (M2M_MAX_PSK_LEN-1))
    a178:	4282      	cmp	r2, r0
    a17a:	d1f1      	bne.n	a160 <m2m_wifi_connect_sc+0xe4>
    a17c:	e793      	b.n	a0a6 <m2m_wifi_connect_sc+0x2a>
					M2M_ERR("Invalid Key\n");
    a17e:	4a4e      	ldr	r2, [pc, #312]	; (a2b8 <m2m_wifi_connect_sc+0x23c>)
    a180:	4947      	ldr	r1, [pc, #284]	; (a2a0 <m2m_wifi_connect_sc+0x224>)
    a182:	4848      	ldr	r0, [pc, #288]	; (a2a4 <m2m_wifi_connect_sc+0x228>)
    a184:	4c48      	ldr	r4, [pc, #288]	; (a2a8 <m2m_wifi_connect_sc+0x22c>)
    a186:	47a0      	blx	r4
    a188:	484c      	ldr	r0, [pc, #304]	; (a2bc <m2m_wifi_connect_sc+0x240>)
    a18a:	47a0      	blx	r4
    a18c:	4848      	ldr	r0, [pc, #288]	; (a2b0 <m2m_wifi_connect_sc+0x234>)
    a18e:	47a0      	blx	r4
					ret = M2M_ERR_FAIL;
    a190:	200c      	movs	r0, #12
    a192:	4240      	negs	r0, r0
					goto ERR1;
    a194:	e7c0      	b.n	a118 <m2m_wifi_connect_sc+0x9c>
		M2M_ERR("SSID LEN INVALID\n");
    a196:	228c      	movs	r2, #140	; 0x8c
    a198:	0092      	lsls	r2, r2, #2
    a19a:	4941      	ldr	r1, [pc, #260]	; (a2a0 <m2m_wifi_connect_sc+0x224>)
    a19c:	4841      	ldr	r0, [pc, #260]	; (a2a4 <m2m_wifi_connect_sc+0x228>)
    a19e:	4c42      	ldr	r4, [pc, #264]	; (a2a8 <m2m_wifi_connect_sc+0x22c>)
    a1a0:	47a0      	blx	r4
    a1a2:	4847      	ldr	r0, [pc, #284]	; (a2c0 <m2m_wifi_connect_sc+0x244>)
    a1a4:	47a0      	blx	r4
    a1a6:	4842      	ldr	r0, [pc, #264]	; (a2b0 <m2m_wifi_connect_sc+0x234>)
    a1a8:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
    a1aa:	200c      	movs	r0, #12
    a1ac:	4240      	negs	r0, r0
		goto ERR1;
    a1ae:	e7b3      	b.n	a118 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("CH INVALID\n");
    a1b0:	4a44      	ldr	r2, [pc, #272]	; (a2c4 <m2m_wifi_connect_sc+0x248>)
    a1b2:	493b      	ldr	r1, [pc, #236]	; (a2a0 <m2m_wifi_connect_sc+0x224>)
    a1b4:	483b      	ldr	r0, [pc, #236]	; (a2a4 <m2m_wifi_connect_sc+0x228>)
    a1b6:	4c3c      	ldr	r4, [pc, #240]	; (a2a8 <m2m_wifi_connect_sc+0x22c>)
    a1b8:	47a0      	blx	r4
    a1ba:	4843      	ldr	r0, [pc, #268]	; (a2c8 <m2m_wifi_connect_sc+0x24c>)
    a1bc:	47a0      	blx	r4
    a1be:	483c      	ldr	r0, [pc, #240]	; (a2b0 <m2m_wifi_connect_sc+0x234>)
    a1c0:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    a1c2:	200c      	movs	r0, #12
    a1c4:	4240      	negs	r0, r0
			goto ERR1;
    a1c6:	e7a7      	b.n	a118 <m2m_wifi_connect_sc+0x9c>
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    a1c8:	783b      	ldrb	r3, [r7, #0]
    a1ca:	3b01      	subs	r3, #1
    a1cc:	b2db      	uxtb	r3, r3
    a1ce:	aa07      	add	r2, sp, #28
    a1d0:	7013      	strb	r3, [r2, #0]
		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    a1d2:	2b03      	cmp	r3, #3
    a1d4:	d816      	bhi.n	a204 <m2m_wifi_connect_sc+0x188>
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    a1d6:	787a      	ldrb	r2, [r7, #1]
    a1d8:	1e51      	subs	r1, r2, #1
    a1da:	ab07      	add	r3, sp, #28
    a1dc:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    a1de:	2310      	movs	r3, #16
    a1e0:	0011      	movs	r1, r2
    a1e2:	4399      	bics	r1, r3
    a1e4:	290b      	cmp	r1, #11
    a1e6:	d01c      	beq.n	a222 <m2m_wifi_connect_sc+0x1a6>
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    a1e8:	4a38      	ldr	r2, [pc, #224]	; (a2cc <m2m_wifi_connect_sc+0x250>)
    a1ea:	492d      	ldr	r1, [pc, #180]	; (a2a0 <m2m_wifi_connect_sc+0x224>)
    a1ec:	482d      	ldr	r0, [pc, #180]	; (a2a4 <m2m_wifi_connect_sc+0x228>)
    a1ee:	4c2e      	ldr	r4, [pc, #184]	; (a2a8 <m2m_wifi_connect_sc+0x22c>)
    a1f0:	47a0      	blx	r4
    a1f2:	ab07      	add	r3, sp, #28
    a1f4:	7859      	ldrb	r1, [r3, #1]
    a1f6:	4836      	ldr	r0, [pc, #216]	; (a2d0 <m2m_wifi_connect_sc+0x254>)
    a1f8:	47a0      	blx	r4
    a1fa:	482d      	ldr	r0, [pc, #180]	; (a2b0 <m2m_wifi_connect_sc+0x234>)
    a1fc:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    a1fe:	200c      	movs	r0, #12
    a200:	4240      	negs	r0, r0
			goto ERR1;
    a202:	e789      	b.n	a118 <m2m_wifi_connect_sc+0x9c>
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    a204:	2294      	movs	r2, #148	; 0x94
    a206:	0092      	lsls	r2, r2, #2
    a208:	4925      	ldr	r1, [pc, #148]	; (a2a0 <m2m_wifi_connect_sc+0x224>)
    a20a:	4826      	ldr	r0, [pc, #152]	; (a2a4 <m2m_wifi_connect_sc+0x228>)
    a20c:	4c26      	ldr	r4, [pc, #152]	; (a2a8 <m2m_wifi_connect_sc+0x22c>)
    a20e:	47a0      	blx	r4
    a210:	ab07      	add	r3, sp, #28
    a212:	7819      	ldrb	r1, [r3, #0]
    a214:	482f      	ldr	r0, [pc, #188]	; (a2d4 <m2m_wifi_connect_sc+0x258>)
    a216:	47a0      	blx	r4
    a218:	4825      	ldr	r0, [pc, #148]	; (a2b0 <m2m_wifi_connect_sc+0x234>)
    a21a:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    a21c:	200c      	movs	r0, #12
    a21e:	4240      	negs	r0, r0
			goto ERR1;
    a220:	e77a      	b.n	a118 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    a222:	1cb9      	adds	r1, r7, #2
    a224:	2016      	movs	r0, #22
    a226:	ab02      	add	r3, sp, #8
    a228:	469c      	mov	ip, r3
    a22a:	4460      	add	r0, ip
    a22c:	4b19      	ldr	r3, [pc, #100]	; (a294 <m2m_wifi_connect_sc+0x218>)
    a22e:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    a230:	787b      	ldrb	r3, [r7, #1]
    a232:	aa07      	add	r2, sp, #28
    a234:	4694      	mov	ip, r2
    a236:	4463      	add	r3, ip
    a238:	2200      	movs	r2, #0
    a23a:	709a      	strb	r2, [r3, #2]
    a23c:	e762      	b.n	a104 <m2m_wifi_connect_sc+0x88>
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    a23e:	0038      	movs	r0, r7
    a240:	4b1c      	ldr	r3, [pc, #112]	; (a2b4 <m2m_wifi_connect_sc+0x238>)
    a242:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    a244:	1e43      	subs	r3, r0, #1
    a246:	b29b      	uxth	r3, r3
    a248:	2b3f      	cmp	r3, #63	; 0x3f
    a24a:	d805      	bhi.n	a258 <m2m_wifi_connect_sc+0x1dc>
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    a24c:	1c42      	adds	r2, r0, #1
    a24e:	0039      	movs	r1, r7
    a250:	a807      	add	r0, sp, #28
    a252:	4b10      	ldr	r3, [pc, #64]	; (a294 <m2m_wifi_connect_sc+0x218>)
    a254:	4798      	blx	r3
    a256:	e755      	b.n	a104 <m2m_wifi_connect_sc+0x88>
			M2M_ERR("Incorrect PSK key length\n");
    a258:	4a1f      	ldr	r2, [pc, #124]	; (a2d8 <m2m_wifi_connect_sc+0x25c>)
    a25a:	4911      	ldr	r1, [pc, #68]	; (a2a0 <m2m_wifi_connect_sc+0x224>)
    a25c:	4811      	ldr	r0, [pc, #68]	; (a2a4 <m2m_wifi_connect_sc+0x228>)
    a25e:	4c12      	ldr	r4, [pc, #72]	; (a2a8 <m2m_wifi_connect_sc+0x22c>)
    a260:	47a0      	blx	r4
    a262:	481e      	ldr	r0, [pc, #120]	; (a2dc <m2m_wifi_connect_sc+0x260>)
    a264:	47a0      	blx	r4
    a266:	4812      	ldr	r0, [pc, #72]	; (a2b0 <m2m_wifi_connect_sc+0x234>)
    a268:	47a0      	blx	r4
			ret = M2M_ERR_FAIL;
    a26a:	200c      	movs	r0, #12
    a26c:	4240      	negs	r0, r0
			goto ERR1;
    a26e:	e753      	b.n	a118 <m2m_wifi_connect_sc+0x9c>
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    a270:	223e      	movs	r2, #62	; 0x3e
    a272:	0039      	movs	r1, r7
    a274:	a807      	add	r0, sp, #28
    a276:	4b07      	ldr	r3, [pc, #28]	; (a294 <m2m_wifi_connect_sc+0x218>)
    a278:	4798      	blx	r3
    a27a:	e743      	b.n	a104 <m2m_wifi_connect_sc+0x88>
		M2M_ERR("undefined sec type\n");
    a27c:	4a18      	ldr	r2, [pc, #96]	; (a2e0 <m2m_wifi_connect_sc+0x264>)
    a27e:	4908      	ldr	r1, [pc, #32]	; (a2a0 <m2m_wifi_connect_sc+0x224>)
    a280:	4808      	ldr	r0, [pc, #32]	; (a2a4 <m2m_wifi_connect_sc+0x228>)
    a282:	4c09      	ldr	r4, [pc, #36]	; (a2a8 <m2m_wifi_connect_sc+0x22c>)
    a284:	47a0      	blx	r4
    a286:	4817      	ldr	r0, [pc, #92]	; (a2e4 <m2m_wifi_connect_sc+0x268>)
    a288:	47a0      	blx	r4
    a28a:	4809      	ldr	r0, [pc, #36]	; (a2b0 <m2m_wifi_connect_sc+0x234>)
    a28c:	47a0      	blx	r4
		ret = M2M_ERR_FAIL;
    a28e:	200c      	movs	r0, #12
    a290:	4240      	negs	r0, r0
		goto ERR1;
    a292:	e741      	b.n	a118 <m2m_wifi_connect_sc+0x9c>
    a294:	00009405 	.word	0x00009405
    a298:	0000952d 	.word	0x0000952d
    a29c:	0000021a 	.word	0x0000021a
    a2a0:	00017fcc 	.word	0x00017fcc
    a2a4:	00017c34 	.word	0x00017c34
    a2a8:	00007fed 	.word	0x00007fed
    a2ac:	00018014 	.word	0x00018014
    a2b0:	00017c5c 	.word	0x00017c5c
    a2b4:	00009429 	.word	0x00009429
    a2b8:	00000226 	.word	0x00000226
    a2bc:	00018028 	.word	0x00018028
    a2c0:	00018038 	.word	0x00018038
    a2c4:	00000239 	.word	0x00000239
    a2c8:	0001804c 	.word	0x0001804c
    a2cc:	00000257 	.word	0x00000257
    a2d0:	00018074 	.word	0x00018074
    a2d4:	00018058 	.word	0x00018058
    a2d8:	00000266 	.word	0x00000266
    a2dc:	00018090 	.word	0x00018090
    a2e0:	00000276 	.word	0x00000276
    a2e4:	000180ac 	.word	0x000180ac

0000a2e8 <m2m_wifi_connect>:
{
    a2e8:	b530      	push	{r4, r5, lr}
    a2ea:	b083      	sub	sp, #12
    a2ec:	ac06      	add	r4, sp, #24
    a2ee:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    a2f0:	2500      	movs	r5, #0
    a2f2:	9501      	str	r5, [sp, #4]
    a2f4:	9400      	str	r4, [sp, #0]
    a2f6:	4c02      	ldr	r4, [pc, #8]	; (a300 <m2m_wifi_connect+0x18>)
    a2f8:	47a0      	blx	r4
}
    a2fa:	b003      	add	sp, #12
    a2fc:	bd30      	pop	{r4, r5, pc}
    a2fe:	46c0      	nop			; (mov r8, r8)
    a300:	0000a07d 	.word	0x0000a07d

0000a304 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    a304:	2000      	movs	r0, #0
    a306:	4770      	bx	lr

0000a308 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    a308:	b5f0      	push	{r4, r5, r6, r7, lr}
    a30a:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    a30c:	2580      	movs	r5, #128	; 0x80
    a30e:	006d      	lsls	r5, r5, #1
    a310:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    a312:	24a5      	movs	r4, #165	; 0xa5
    a314:	0164      	lsls	r4, r4, #5
    a316:	4f08      	ldr	r7, [pc, #32]	; (a338 <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    a318:	4e08      	ldr	r6, [pc, #32]	; (a33c <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    a31a:	0029      	movs	r1, r5
    a31c:	0020      	movs	r0, r4
    a31e:	47b8      	blx	r7
			uint32 reg = 0;
    a320:	2300      	movs	r3, #0
    a322:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    a324:	a901      	add	r1, sp, #4
    a326:	0020      	movs	r0, r4
    a328:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    a32a:	2800      	cmp	r0, #0
    a32c:	d1f5      	bne.n	a31a <chip_apply_conf+0x12>
				if(reg == val32)
    a32e:	9b01      	ldr	r3, [sp, #4]
    a330:	429d      	cmp	r5, r3
    a332:	d1f2      	bne.n	a31a <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    a334:	b003      	add	sp, #12
    a336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a338:	0000a7e1 	.word	0x0000a7e1
    a33c:	0000a7d5 	.word	0x0000a7d5

0000a340 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    a340:	b500      	push	{lr}
    a342:	b083      	sub	sp, #12
	uint32 reg = 0;
    a344:	2300      	movs	r3, #0
    a346:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    a348:	a901      	add	r1, sp, #4
    a34a:	4811      	ldr	r0, [pc, #68]	; (a390 <enable_interrupts+0x50>)
    a34c:	4b11      	ldr	r3, [pc, #68]	; (a394 <enable_interrupts+0x54>)
    a34e:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    a350:	2800      	cmp	r0, #0
    a352:	d001      	beq.n	a358 <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    a354:	b003      	add	sp, #12
    a356:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    a358:	2180      	movs	r1, #128	; 0x80
    a35a:	0049      	lsls	r1, r1, #1
    a35c:	9b01      	ldr	r3, [sp, #4]
    a35e:	4319      	orrs	r1, r3
    a360:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    a362:	480b      	ldr	r0, [pc, #44]	; (a390 <enable_interrupts+0x50>)
    a364:	4b0c      	ldr	r3, [pc, #48]	; (a398 <enable_interrupts+0x58>)
    a366:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    a368:	2800      	cmp	r0, #0
    a36a:	d1f3      	bne.n	a354 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    a36c:	a901      	add	r1, sp, #4
    a36e:	20d0      	movs	r0, #208	; 0xd0
    a370:	0140      	lsls	r0, r0, #5
    a372:	4b08      	ldr	r3, [pc, #32]	; (a394 <enable_interrupts+0x54>)
    a374:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    a376:	2800      	cmp	r0, #0
    a378:	d1ec      	bne.n	a354 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    a37a:	2180      	movs	r1, #128	; 0x80
    a37c:	0249      	lsls	r1, r1, #9
    a37e:	9b01      	ldr	r3, [sp, #4]
    a380:	4319      	orrs	r1, r3
    a382:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    a384:	20d0      	movs	r0, #208	; 0xd0
    a386:	0140      	lsls	r0, r0, #5
    a388:	4b03      	ldr	r3, [pc, #12]	; (a398 <enable_interrupts+0x58>)
    a38a:	4798      	blx	r3
    a38c:	e7e2      	b.n	a354 <enable_interrupts+0x14>
    a38e:	46c0      	nop			; (mov r8, r8)
    a390:	00001408 	.word	0x00001408
    a394:	0000a7d5 	.word	0x0000a7d5
    a398:	0000a7e1 	.word	0x0000a7e1

0000a39c <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    a39c:	b510      	push	{r4, lr}
    a39e:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    a3a0:	4b28      	ldr	r3, [pc, #160]	; (a444 <nmi_get_chipid+0xa8>)
    a3a2:	681c      	ldr	r4, [r3, #0]
    a3a4:	2c00      	cmp	r4, #0
    a3a6:	d004      	beq.n	a3b2 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    a3a8:	4b26      	ldr	r3, [pc, #152]	; (a444 <nmi_get_chipid+0xa8>)
    a3aa:	681c      	ldr	r4, [r3, #0]
}
    a3ac:	0020      	movs	r0, r4
    a3ae:	b002      	add	sp, #8
    a3b0:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    a3b2:	0019      	movs	r1, r3
    a3b4:	2080      	movs	r0, #128	; 0x80
    a3b6:	0140      	lsls	r0, r0, #5
    a3b8:	4b23      	ldr	r3, [pc, #140]	; (a448 <nmi_get_chipid+0xac>)
    a3ba:	4798      	blx	r3
    a3bc:	2800      	cmp	r0, #0
    a3be:	d003      	beq.n	a3c8 <nmi_get_chipid+0x2c>
			chipid = 0;
    a3c0:	2200      	movs	r2, #0
    a3c2:	4b20      	ldr	r3, [pc, #128]	; (a444 <nmi_get_chipid+0xa8>)
    a3c4:	601a      	str	r2, [r3, #0]
			return 0;
    a3c6:	e7f1      	b.n	a3ac <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    a3c8:	a901      	add	r1, sp, #4
    a3ca:	4820      	ldr	r0, [pc, #128]	; (a44c <nmi_get_chipid+0xb0>)
    a3cc:	4b1e      	ldr	r3, [pc, #120]	; (a448 <nmi_get_chipid+0xac>)
    a3ce:	4798      	blx	r3
    a3d0:	2800      	cmp	r0, #0
    a3d2:	d003      	beq.n	a3dc <nmi_get_chipid+0x40>
			chipid = 0;
    a3d4:	2200      	movs	r2, #0
    a3d6:	4b1b      	ldr	r3, [pc, #108]	; (a444 <nmi_get_chipid+0xa8>)
    a3d8:	601a      	str	r2, [r3, #0]
			return 0;
    a3da:	e7e7      	b.n	a3ac <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    a3dc:	4b19      	ldr	r3, [pc, #100]	; (a444 <nmi_get_chipid+0xa8>)
    a3de:	681b      	ldr	r3, [r3, #0]
    a3e0:	4a1b      	ldr	r2, [pc, #108]	; (a450 <nmi_get_chipid+0xb4>)
    a3e2:	4293      	cmp	r3, r2
    a3e4:	d00e      	beq.n	a404 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    a3e6:	4a1b      	ldr	r2, [pc, #108]	; (a454 <nmi_get_chipid+0xb8>)
    a3e8:	4293      	cmp	r3, r2
    a3ea:	d012      	beq.n	a412 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    a3ec:	4a1a      	ldr	r2, [pc, #104]	; (a458 <nmi_get_chipid+0xbc>)
    a3ee:	4293      	cmp	r3, r2
    a3f0:	d01c      	beq.n	a42c <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    a3f2:	4914      	ldr	r1, [pc, #80]	; (a444 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    a3f4:	4a19      	ldr	r2, [pc, #100]	; (a45c <nmi_get_chipid+0xc0>)
    a3f6:	680b      	ldr	r3, [r1, #0]
    a3f8:	401a      	ands	r2, r3
		chipid |= 0x050000;
    a3fa:	23a0      	movs	r3, #160	; 0xa0
    a3fc:	02db      	lsls	r3, r3, #11
    a3fe:	4313      	orrs	r3, r2
    a400:	600b      	str	r3, [r1, #0]
    a402:	e7d1      	b.n	a3a8 <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    a404:	9b01      	ldr	r3, [sp, #4]
    a406:	2b01      	cmp	r3, #1
    a408:	d0f3      	beq.n	a3f2 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    a40a:	4a15      	ldr	r2, [pc, #84]	; (a460 <nmi_get_chipid+0xc4>)
    a40c:	4b0d      	ldr	r3, [pc, #52]	; (a444 <nmi_get_chipid+0xa8>)
    a40e:	601a      	str	r2, [r3, #0]
    a410:	e7ef      	b.n	a3f2 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    a412:	9b01      	ldr	r3, [sp, #4]
    a414:	2b03      	cmp	r3, #3
    a416:	d0ec      	beq.n	a3f2 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    a418:	2b04      	cmp	r3, #4
    a41a:	d003      	beq.n	a424 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    a41c:	4a11      	ldr	r2, [pc, #68]	; (a464 <nmi_get_chipid+0xc8>)
    a41e:	4b09      	ldr	r3, [pc, #36]	; (a444 <nmi_get_chipid+0xa8>)
    a420:	601a      	str	r2, [r3, #0]
    a422:	e7e6      	b.n	a3f2 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    a424:	4a10      	ldr	r2, [pc, #64]	; (a468 <nmi_get_chipid+0xcc>)
    a426:	4b07      	ldr	r3, [pc, #28]	; (a444 <nmi_get_chipid+0xa8>)
    a428:	601a      	str	r2, [r3, #0]
    a42a:	e7e2      	b.n	a3f2 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    a42c:	4905      	ldr	r1, [pc, #20]	; (a444 <nmi_get_chipid+0xa8>)
    a42e:	20ec      	movs	r0, #236	; 0xec
    a430:	0380      	lsls	r0, r0, #14
    a432:	4b05      	ldr	r3, [pc, #20]	; (a448 <nmi_get_chipid+0xac>)
    a434:	4798      	blx	r3
    a436:	2800      	cmp	r0, #0
    a438:	d0db      	beq.n	a3f2 <nmi_get_chipid+0x56>
			chipid = 0;
    a43a:	2200      	movs	r2, #0
    a43c:	4b01      	ldr	r3, [pc, #4]	; (a444 <nmi_get_chipid+0xa8>)
    a43e:	601a      	str	r2, [r3, #0]
			return 0;
    a440:	e7b4      	b.n	a3ac <nmi_get_chipid+0x10>
    a442:	46c0      	nop			; (mov r8, r8)
    a444:	20003ecc 	.word	0x20003ecc
    a448:	0000a7d5 	.word	0x0000a7d5
    a44c:	000013f4 	.word	0x000013f4
    a450:	001002a0 	.word	0x001002a0
    a454:	001002b0 	.word	0x001002b0
    a458:	001000f0 	.word	0x001000f0
    a45c:	fff0ffff 	.word	0xfff0ffff
    a460:	001002a1 	.word	0x001002a1
    a464:	001002b2 	.word	0x001002b2
    a468:	001002b1 	.word	0x001002b1

0000a46c <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    a46c:	b530      	push	{r4, r5, lr}
    a46e:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    a470:	4c16      	ldr	r4, [pc, #88]	; (a4cc <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    a472:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    a474:	a901      	add	r1, sp, #4
    a476:	2010      	movs	r0, #16
    a478:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    a47a:	2800      	cmp	r0, #0
    a47c:	d11c      	bne.n	a4b8 <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    a47e:	9b01      	ldr	r3, [sp, #4]
    a480:	422b      	tst	r3, r5
    a482:	d1f7      	bne.n	a474 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a484:	a901      	add	r1, sp, #4
    a486:	3001      	adds	r0, #1
    a488:	4b10      	ldr	r3, [pc, #64]	; (a4cc <chip_sleep+0x60>)
    a48a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a48c:	2800      	cmp	r0, #0
    a48e:	d113      	bne.n	a4b8 <chip_sleep+0x4c>
	if(reg & NBIT1)
    a490:	9901      	ldr	r1, [sp, #4]
    a492:	078b      	lsls	r3, r1, #30
    a494:	d507      	bpl.n	a4a6 <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    a496:	2302      	movs	r3, #2
    a498:	4399      	bics	r1, r3
    a49a:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    a49c:	3001      	adds	r0, #1
    a49e:	4b0c      	ldr	r3, [pc, #48]	; (a4d0 <chip_sleep+0x64>)
    a4a0:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    a4a2:	2800      	cmp	r0, #0
    a4a4:	d108      	bne.n	a4b8 <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a4a6:	a901      	add	r1, sp, #4
    a4a8:	200b      	movs	r0, #11
    a4aa:	4b08      	ldr	r3, [pc, #32]	; (a4cc <chip_sleep+0x60>)
    a4ac:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    a4ae:	2800      	cmp	r0, #0
    a4b0:	d102      	bne.n	a4b8 <chip_sleep+0x4c>
	if(reg & NBIT0)
    a4b2:	9901      	ldr	r1, [sp, #4]
    a4b4:	07cb      	lsls	r3, r1, #31
    a4b6:	d401      	bmi.n	a4bc <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    a4b8:	b003      	add	sp, #12
    a4ba:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    a4bc:	2301      	movs	r3, #1
    a4be:	4399      	bics	r1, r3
    a4c0:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    a4c2:	300b      	adds	r0, #11
    a4c4:	4b02      	ldr	r3, [pc, #8]	; (a4d0 <chip_sleep+0x64>)
    a4c6:	4798      	blx	r3
    a4c8:	e7f6      	b.n	a4b8 <chip_sleep+0x4c>
    a4ca:	46c0      	nop			; (mov r8, r8)
    a4cc:	0000a7d5 	.word	0x0000a7d5
    a4d0:	0000a7e1 	.word	0x0000a7e1

0000a4d4 <chip_wake>:
sint8 chip_wake(void)
{
    a4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4d6:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    a4d8:	2300      	movs	r3, #0
    a4da:	9301      	str	r3, [sp, #4]
    a4dc:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    a4de:	a901      	add	r1, sp, #4
    a4e0:	200b      	movs	r0, #11
    a4e2:	4b27      	ldr	r3, [pc, #156]	; (a580 <chip_wake+0xac>)
    a4e4:	4798      	blx	r3
    a4e6:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a4e8:	d12e      	bne.n	a548 <chip_wake+0x74>
	
	if(!(reg & NBIT0))
    a4ea:	9901      	ldr	r1, [sp, #4]
    a4ec:	07cb      	lsls	r3, r1, #31
    a4ee:	d406      	bmi.n	a4fe <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    a4f0:	2301      	movs	r3, #1
    a4f2:	4319      	orrs	r1, r3
    a4f4:	200b      	movs	r0, #11
    a4f6:	4b23      	ldr	r3, [pc, #140]	; (a584 <chip_wake+0xb0>)
    a4f8:	4798      	blx	r3
    a4fa:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a4fc:	d124      	bne.n	a548 <chip_wake+0x74>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    a4fe:	a901      	add	r1, sp, #4
    a500:	2001      	movs	r0, #1
    a502:	4b1f      	ldr	r3, [pc, #124]	; (a580 <chip_wake+0xac>)
    a504:	4798      	blx	r3
    a506:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    a508:	d11e      	bne.n	a548 <chip_wake+0x74>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    a50a:	9901      	ldr	r1, [sp, #4]
    a50c:	078b      	lsls	r3, r1, #30
    a50e:	d51e      	bpl.n	a54e <chip_wake+0x7a>
{
    a510:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a512:	4f1b      	ldr	r7, [pc, #108]	; (a580 <chip_wake+0xac>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    a514:	4e1c      	ldr	r6, [pc, #112]	; (a588 <chip_wake+0xb4>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    a516:	4669      	mov	r1, sp
    a518:	200f      	movs	r0, #15
    a51a:	47b8      	blx	r7
    a51c:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    a51e:	d11e      	bne.n	a55e <chip_wake+0x8a>
		if(clk_status_reg & NBIT2) {
    a520:	9b00      	ldr	r3, [sp, #0]
    a522:	075b      	lsls	r3, r3, #29
    a524:	d428      	bmi.n	a578 <chip_wake+0xa4>
		nm_bsp_sleep(2);
    a526:	2002      	movs	r0, #2
    a528:	47b0      	blx	r6
    a52a:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    a52c:	2d00      	cmp	r5, #0
    a52e:	d1f2      	bne.n	a516 <chip_wake+0x42>
		{
			M2M_ERR("Failed to wakup the chip\n");
    a530:	22ad      	movs	r2, #173	; 0xad
    a532:	0052      	lsls	r2, r2, #1
    a534:	4915      	ldr	r1, [pc, #84]	; (a58c <chip_wake+0xb8>)
    a536:	4816      	ldr	r0, [pc, #88]	; (a590 <chip_wake+0xbc>)
    a538:	4c16      	ldr	r4, [pc, #88]	; (a594 <chip_wake+0xc0>)
    a53a:	47a0      	blx	r4
    a53c:	4816      	ldr	r0, [pc, #88]	; (a598 <chip_wake+0xc4>)
    a53e:	47a0      	blx	r4
    a540:	4816      	ldr	r0, [pc, #88]	; (a59c <chip_wake+0xc8>)
    a542:	47a0      	blx	r4
			ret = M2M_ERR_TIME_OUT;
    a544:	2404      	movs	r4, #4
    a546:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    a548:	0020      	movs	r0, r4
    a54a:	b003      	add	sp, #12
    a54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    a54e:	2302      	movs	r3, #2
    a550:	4319      	orrs	r1, r3
    a552:	2001      	movs	r0, #1
    a554:	4b0b      	ldr	r3, [pc, #44]	; (a584 <chip_wake+0xb0>)
    a556:	4798      	blx	r3
    a558:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    a55a:	d0d9      	beq.n	a510 <chip_wake+0x3c>
    a55c:	e7f4      	b.n	a548 <chip_wake+0x74>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    a55e:	22a8      	movs	r2, #168	; 0xa8
    a560:	0052      	lsls	r2, r2, #1
    a562:	490a      	ldr	r1, [pc, #40]	; (a58c <chip_wake+0xb8>)
    a564:	480a      	ldr	r0, [pc, #40]	; (a590 <chip_wake+0xbc>)
    a566:	4d0b      	ldr	r5, [pc, #44]	; (a594 <chip_wake+0xc0>)
    a568:	47a8      	blx	r5
    a56a:	9a00      	ldr	r2, [sp, #0]
    a56c:	0021      	movs	r1, r4
    a56e:	480c      	ldr	r0, [pc, #48]	; (a5a0 <chip_wake+0xcc>)
    a570:	47a8      	blx	r5
    a572:	480a      	ldr	r0, [pc, #40]	; (a59c <chip_wake+0xc8>)
    a574:	47a8      	blx	r5
			goto _WAKE_EXIT;
    a576:	e7e7      	b.n	a548 <chip_wake+0x74>
	nm_bus_reset();
    a578:	4b0a      	ldr	r3, [pc, #40]	; (a5a4 <chip_wake+0xd0>)
    a57a:	4798      	blx	r3
    a57c:	e7e4      	b.n	a548 <chip_wake+0x74>
    a57e:	46c0      	nop			; (mov r8, r8)
    a580:	0000a7d5 	.word	0x0000a7d5
    a584:	0000a7e1 	.word	0x0000a7e1
    a588:	00009095 	.word	0x00009095
    a58c:	0001818c 	.word	0x0001818c
    a590:	00017c34 	.word	0x00017c34
    a594:	00007fed 	.word	0x00007fed
    a598:	000181d8 	.word	0x000181d8
    a59c:	00017c5c 	.word	0x00017c5c
    a5a0:	000181c0 	.word	0x000181c0
    a5a4:	0000a7bd 	.word	0x0000a7bd

0000a5a8 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5aa:	0007      	movs	r7, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a5ac:	4d2c      	ldr	r5, [pc, #176]	; (a660 <wait_for_bootrom+0xb8>)
    a5ae:	4c2d      	ldr	r4, [pc, #180]	; (a664 <wait_for_bootrom+0xbc>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a5b0:	4e2d      	ldr	r6, [pc, #180]	; (a668 <wait_for_bootrom+0xc0>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a5b2:	0028      	movs	r0, r5
    a5b4:	47a0      	blx	r4
		if (reg & 0x80000000) {
    a5b6:	2800      	cmp	r0, #0
    a5b8:	db02      	blt.n	a5c0 <wait_for_bootrom+0x18>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    a5ba:	2001      	movs	r0, #1
    a5bc:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    a5be:	e7f8      	b.n	a5b2 <wait_for_bootrom+0xa>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    a5c0:	482a      	ldr	r0, [pc, #168]	; (a66c <wait_for_bootrom+0xc4>)
    a5c2:	4b28      	ldr	r3, [pc, #160]	; (a664 <wait_for_bootrom+0xbc>)
    a5c4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    a5c6:	07c3      	lsls	r3, r0, #31
    a5c8:	d409      	bmi.n	a5de <wait_for_bootrom+0x36>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    a5ca:	4e27      	ldr	r6, [pc, #156]	; (a668 <wait_for_bootrom+0xc0>)
			reg = nm_read_reg(BOOTROM_REG);
    a5cc:	4c28      	ldr	r4, [pc, #160]	; (a670 <wait_for_bootrom+0xc8>)
    a5ce:	4d25      	ldr	r5, [pc, #148]	; (a664 <wait_for_bootrom+0xbc>)
			nm_bsp_sleep(1);
    a5d0:	2001      	movs	r0, #1
    a5d2:	47b0      	blx	r6
			reg = nm_read_reg(BOOTROM_REG);
    a5d4:	0020      	movs	r0, r4
    a5d6:	47a8      	blx	r5
		while(reg != M2M_FINISH_BOOT_ROM)
    a5d8:	4b26      	ldr	r3, [pc, #152]	; (a674 <wait_for_bootrom+0xcc>)
    a5da:	4298      	cmp	r0, r3
    a5dc:	d1f8      	bne.n	a5d0 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    a5de:	2f02      	cmp	r7, #2
    a5e0:	d020      	beq.n	a624 <wait_for_bootrom+0x7c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    a5e2:	2f03      	cmp	r7, #3
    a5e4:	d028      	beq.n	a638 <wait_for_bootrom+0x90>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    a5e6:	2f04      	cmp	r7, #4
    a5e8:	d02f      	beq.n	a64a <wait_for_bootrom+0xa2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a5ea:	4923      	ldr	r1, [pc, #140]	; (a678 <wait_for_bootrom+0xd0>)
    a5ec:	4823      	ldr	r0, [pc, #140]	; (a67c <wait_for_bootrom+0xd4>)
    a5ee:	4b24      	ldr	r3, [pc, #144]	; (a680 <wait_for_bootrom+0xd8>)
    a5f0:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    a5f2:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    a5f4:	4b23      	ldr	r3, [pc, #140]	; (a684 <wait_for_bootrom+0xdc>)
    a5f6:	4798      	blx	r3
    a5f8:	0500      	lsls	r0, r0, #20
    a5fa:	0d00      	lsrs	r0, r0, #20
    a5fc:	4b22      	ldr	r3, [pc, #136]	; (a688 <wait_for_bootrom+0xe0>)
    a5fe:	4298      	cmp	r0, r3
    a600:	d829      	bhi.n	a656 <wait_for_bootrom+0xae>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
	} else {
		chip_apply_conf(u32GpReg1);
    a602:	0020      	movs	r0, r4
    a604:	4b21      	ldr	r3, [pc, #132]	; (a68c <wait_for_bootrom+0xe4>)
    a606:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    a608:	4821      	ldr	r0, [pc, #132]	; (a690 <wait_for_bootrom+0xe8>)
    a60a:	4c22      	ldr	r4, [pc, #136]	; (a694 <wait_for_bootrom+0xec>)
    a60c:	47a0      	blx	r4
    a60e:	491a      	ldr	r1, [pc, #104]	; (a678 <wait_for_bootrom+0xd0>)
    a610:	4821      	ldr	r0, [pc, #132]	; (a698 <wait_for_bootrom+0xf0>)
    a612:	47a0      	blx	r4
    a614:	4821      	ldr	r0, [pc, #132]	; (a69c <wait_for_bootrom+0xf4>)
    a616:	47a0      	blx	r4

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    a618:	4921      	ldr	r1, [pc, #132]	; (a6a0 <wait_for_bootrom+0xf8>)
    a61a:	4815      	ldr	r0, [pc, #84]	; (a670 <wait_for_bootrom+0xc8>)
    a61c:	4b18      	ldr	r3, [pc, #96]	; (a680 <wait_for_bootrom+0xd8>)
    a61e:	4798      	blx	r3
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    a620:	2000      	movs	r0, #0
    a622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a624:	491f      	ldr	r1, [pc, #124]	; (a6a4 <wait_for_bootrom+0xfc>)
    a626:	4820      	ldr	r0, [pc, #128]	; (a6a8 <wait_for_bootrom+0x100>)
    a628:	4c15      	ldr	r4, [pc, #84]	; (a680 <wait_for_bootrom+0xd8>)
    a62a:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    a62c:	2180      	movs	r1, #128	; 0x80
    a62e:	0349      	lsls	r1, r1, #13
    a630:	4812      	ldr	r0, [pc, #72]	; (a67c <wait_for_bootrom+0xd4>)
    a632:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    a634:	2400      	movs	r4, #0
    a636:	e7dd      	b.n	a5f4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    a638:	491a      	ldr	r1, [pc, #104]	; (a6a4 <wait_for_bootrom+0xfc>)
    a63a:	481b      	ldr	r0, [pc, #108]	; (a6a8 <wait_for_bootrom+0x100>)
    a63c:	4c10      	ldr	r4, [pc, #64]	; (a680 <wait_for_bootrom+0xd8>)
    a63e:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    a640:	2100      	movs	r1, #0
    a642:	480e      	ldr	r0, [pc, #56]	; (a67c <wait_for_bootrom+0xd4>)
    a644:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    a646:	2400      	movs	r4, #0
    a648:	e7d4      	b.n	a5f4 <wait_for_bootrom+0x4c>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    a64a:	490b      	ldr	r1, [pc, #44]	; (a678 <wait_for_bootrom+0xd0>)
    a64c:	480b      	ldr	r0, [pc, #44]	; (a67c <wait_for_bootrom+0xd4>)
    a64e:	4b0c      	ldr	r3, [pc, #48]	; (a680 <wait_for_bootrom+0xd8>)
    a650:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    a652:	2480      	movs	r4, #128	; 0x80
    a654:	e7ce      	b.n	a5f4 <wait_for_bootrom+0x4c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    a656:	2002      	movs	r0, #2
    a658:	4320      	orrs	r0, r4
    a65a:	4b0c      	ldr	r3, [pc, #48]	; (a68c <wait_for_bootrom+0xe4>)
    a65c:	4798      	blx	r3
    a65e:	e7d3      	b.n	a608 <wait_for_bootrom+0x60>
    a660:	00001014 	.word	0x00001014
    a664:	0000a7c9 	.word	0x0000a7c9
    a668:	00009095 	.word	0x00009095
    a66c:	000207bc 	.word	0x000207bc
    a670:	000c000c 	.word	0x000c000c
    a674:	10add09e 	.word	0x10add09e
    a678:	13301354 	.word	0x13301354
    a67c:	0000108c 	.word	0x0000108c
    a680:	0000a7e1 	.word	0x0000a7e1
    a684:	0000a39d 	.word	0x0000a39d
    a688:	0000039f 	.word	0x0000039f
    a68c:	0000a309 	.word	0x0000a309
    a690:	00017f70 	.word	0x00017f70
    a694:	00007fed 	.word	0x00007fed
    a698:	000181f4 	.word	0x000181f4
    a69c:	00017c5c 	.word	0x00017c5c
    a6a0:	ef522f61 	.word	0xef522f61
    a6a4:	3c1cd57d 	.word	0x3c1cd57d
    a6a8:	000207ac 	.word	0x000207ac

0000a6ac <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    a6ac:	b570      	push	{r4, r5, r6, lr}
    a6ae:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    a6b0:	4b15      	ldr	r3, [pc, #84]	; (a708 <wait_for_firmware_start+0x5c>)
    a6b2:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    a6b4:	4b15      	ldr	r3, [pc, #84]	; (a70c <wait_for_firmware_start+0x60>)
    a6b6:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    a6b8:	3802      	subs	r0, #2
    a6ba:	2801      	cmp	r0, #1
    a6bc:	d911      	bls.n	a6e2 <wait_for_firmware_start+0x36>
{
    a6be:	2401      	movs	r4, #1
    a6c0:	4264      	negs	r4, r4
    a6c2:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    a6c4:	4e12      	ldr	r6, [pc, #72]	; (a710 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    a6c6:	4d13      	ldr	r5, [pc, #76]	; (a714 <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    a6c8:	9b00      	ldr	r3, [sp, #0]
    a6ca:	4298      	cmp	r0, r3
    a6cc:	d00e      	beq.n	a6ec <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    a6ce:	2002      	movs	r0, #2
    a6d0:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    a6d2:	9801      	ldr	r0, [sp, #4]
    a6d4:	47a8      	blx	r5
    a6d6:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    a6d8:	2c00      	cmp	r4, #0
    a6da:	d1f5      	bne.n	a6c8 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    a6dc:	2005      	movs	r0, #5
    a6de:	4240      	negs	r0, r0
    a6e0:	e009      	b.n	a6f6 <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    a6e2:	4b0d      	ldr	r3, [pc, #52]	; (a718 <wait_for_firmware_start+0x6c>)
    a6e4:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    a6e6:	4b0d      	ldr	r3, [pc, #52]	; (a71c <wait_for_firmware_start+0x70>)
    a6e8:	9300      	str	r3, [sp, #0]
    a6ea:	e7e8      	b.n	a6be <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    a6ec:	9a00      	ldr	r2, [sp, #0]
    a6ee:	4b07      	ldr	r3, [pc, #28]	; (a70c <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    a6f0:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    a6f2:	429a      	cmp	r2, r3
    a6f4:	d001      	beq.n	a6fa <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    a6f6:	b002      	add	sp, #8
    a6f8:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    a6fa:	2100      	movs	r1, #0
    a6fc:	4802      	ldr	r0, [pc, #8]	; (a708 <wait_for_firmware_start+0x5c>)
    a6fe:	4b08      	ldr	r3, [pc, #32]	; (a720 <wait_for_firmware_start+0x74>)
    a700:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    a702:	2000      	movs	r0, #0
    a704:	e7f7      	b.n	a6f6 <wait_for_firmware_start+0x4a>
    a706:	46c0      	nop			; (mov r8, r8)
    a708:	0000108c 	.word	0x0000108c
    a70c:	02532636 	.word	0x02532636
    a710:	00009095 	.word	0x00009095
    a714:	0000a7c9 	.word	0x0000a7c9
    a718:	000207ac 	.word	0x000207ac
    a71c:	d75dc1c3 	.word	0xd75dc1c3
    a720:	0000a7e1 	.word	0x0000a7e1

0000a724 <chip_deinit>:

sint8 chip_deinit(void)
{
    a724:	b530      	push	{r4, r5, lr}
    a726:	b083      	sub	sp, #12
	uint32 reg = 0;
    a728:	2300      	movs	r3, #0
    a72a:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    a72c:	a901      	add	r1, sp, #4
    a72e:	20a0      	movs	r0, #160	; 0xa0
    a730:	0140      	lsls	r0, r0, #5
    a732:	4b12      	ldr	r3, [pc, #72]	; (a77c <chip_deinit+0x58>)
    a734:	4798      	blx	r3
    a736:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    a738:	d113      	bne.n	a762 <chip_deinit+0x3e>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    a73a:	4911      	ldr	r1, [pc, #68]	; (a780 <chip_deinit+0x5c>)
    a73c:	9b01      	ldr	r3, [sp, #4]
    a73e:	4019      	ands	r1, r3
    a740:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    a742:	20a0      	movs	r0, #160	; 0xa0
    a744:	0140      	lsls	r0, r0, #5
    a746:	4b0f      	ldr	r3, [pc, #60]	; (a784 <chip_deinit+0x60>)
    a748:	4798      	blx	r3
    a74a:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    a74c:	d012      	beq.n	a774 <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
    a74e:	4a0e      	ldr	r2, [pc, #56]	; (a788 <chip_deinit+0x64>)
    a750:	490e      	ldr	r1, [pc, #56]	; (a78c <chip_deinit+0x68>)
    a752:	480f      	ldr	r0, [pc, #60]	; (a790 <chip_deinit+0x6c>)
    a754:	4d0f      	ldr	r5, [pc, #60]	; (a794 <chip_deinit+0x70>)
    a756:	47a8      	blx	r5
    a758:	480f      	ldr	r0, [pc, #60]	; (a798 <chip_deinit+0x74>)
    a75a:	47a8      	blx	r5
    a75c:	480f      	ldr	r0, [pc, #60]	; (a79c <chip_deinit+0x78>)
    a75e:	47a8      	blx	r5
		goto ERR1;
    a760:	e008      	b.n	a774 <chip_deinit+0x50>
		M2M_ERR("failed to de-initialize\n");
    a762:	4a0f      	ldr	r2, [pc, #60]	; (a7a0 <chip_deinit+0x7c>)
    a764:	4909      	ldr	r1, [pc, #36]	; (a78c <chip_deinit+0x68>)
    a766:	480a      	ldr	r0, [pc, #40]	; (a790 <chip_deinit+0x6c>)
    a768:	4d0a      	ldr	r5, [pc, #40]	; (a794 <chip_deinit+0x70>)
    a76a:	47a8      	blx	r5
    a76c:	480a      	ldr	r0, [pc, #40]	; (a798 <chip_deinit+0x74>)
    a76e:	47a8      	blx	r5
    a770:	480a      	ldr	r0, [pc, #40]	; (a79c <chip_deinit+0x78>)
    a772:	47a8      	blx	r5
	}

ERR1:
	return ret;
}
    a774:	0020      	movs	r0, r4
    a776:	b003      	add	sp, #12
    a778:	bd30      	pop	{r4, r5, pc}
    a77a:	46c0      	nop			; (mov r8, r8)
    a77c:	0000a7d5 	.word	0x0000a7d5
    a780:	fffffbff 	.word	0xfffffbff
    a784:	0000a7e1 	.word	0x0000a7e1
    a788:	00000207 	.word	0x00000207
    a78c:	00018198 	.word	0x00018198
    a790:	00017c34 	.word	0x00017c34
    a794:	00007fed 	.word	0x00007fed
    a798:	000181a4 	.word	0x000181a4
    a79c:	00017c5c 	.word	0x00017c5c
    a7a0:	00000201 	.word	0x00000201

0000a7a4 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    a7a4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    a7a6:	4b01      	ldr	r3, [pc, #4]	; (a7ac <nm_bus_iface_init+0x8>)
    a7a8:	4798      	blx	r3
	return ret;
}
    a7aa:	bd10      	pop	{r4, pc}
    a7ac:	00009151 	.word	0x00009151

0000a7b0 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    a7b0:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    a7b2:	4b01      	ldr	r3, [pc, #4]	; (a7b8 <nm_bus_iface_deinit+0x8>)
    a7b4:	4798      	blx	r3

	return ret;
}
    a7b6:	bd10      	pop	{r4, pc}
    a7b8:	00009399 	.word	0x00009399

0000a7bc <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    a7bc:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    a7be:	4b01      	ldr	r3, [pc, #4]	; (a7c4 <nm_bus_reset+0x8>)
    a7c0:	4798      	blx	r3
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
    a7c2:	bd10      	pop	{r4, pc}
    a7c4:	0000b4f5 	.word	0x0000b4f5

0000a7c8 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    a7c8:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    a7ca:	4b01      	ldr	r3, [pc, #4]	; (a7d0 <nm_read_reg+0x8>)
    a7cc:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    a7ce:	bd10      	pop	{r4, pc}
    a7d0:	0000b52d 	.word	0x0000b52d

0000a7d4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    a7d4:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    a7d6:	4b01      	ldr	r3, [pc, #4]	; (a7dc <nm_read_reg_with_ret+0x8>)
    a7d8:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    a7da:	bd10      	pop	{r4, pc}
    a7dc:	0000b541 	.word	0x0000b541

0000a7e0 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    a7e0:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    a7e2:	4b01      	ldr	r3, [pc, #4]	; (a7e8 <nm_write_reg+0x8>)
    a7e4:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    a7e6:	bd10      	pop	{r4, pc}
    a7e8:	0000b559 	.word	0x0000b559

0000a7ec <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    a7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7ee:	46d6      	mov	lr, sl
    a7f0:	464f      	mov	r7, r9
    a7f2:	4646      	mov	r6, r8
    a7f4:	b5c0      	push	{r6, r7, lr}
    a7f6:	b082      	sub	sp, #8
    a7f8:	4680      	mov	r8, r0
    a7fa:	4689      	mov	r9, r1
    a7fc:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    a7fe:	4b13      	ldr	r3, [pc, #76]	; (a84c <nm_read_block+0x60>)
    a800:	881f      	ldrh	r7, [r3, #0]
    a802:	3f08      	subs	r7, #8
    a804:	b2bb      	uxth	r3, r7
    a806:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    a808:	001e      	movs	r6, r3
    a80a:	0004      	movs	r4, r0
    a80c:	429a      	cmp	r2, r3
    a80e:	d91a      	bls.n	a846 <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    a810:	4b0f      	ldr	r3, [pc, #60]	; (a850 <nm_read_block+0x64>)
    a812:	469a      	mov	sl, r3
    a814:	1a37      	subs	r7, r6, r0
    a816:	4643      	mov	r3, r8
    a818:	1ae1      	subs	r1, r4, r3
    a81a:	4449      	add	r1, r9
    a81c:	9a01      	ldr	r2, [sp, #4]
    a81e:	0020      	movs	r0, r4
    a820:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    a822:	2800      	cmp	r0, #0
    a824:	d109      	bne.n	a83a <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    a826:	1bad      	subs	r5, r5, r6
    a828:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    a82a:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    a82c:	42b5      	cmp	r5, r6
    a82e:	d8f2      	bhi.n	a816 <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    a830:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    a832:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    a834:	0020      	movs	r0, r4
    a836:	4b06      	ldr	r3, [pc, #24]	; (a850 <nm_read_block+0x64>)
    a838:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    a83a:	b002      	add	sp, #8
    a83c:	bc1c      	pop	{r2, r3, r4}
    a83e:	4690      	mov	r8, r2
    a840:	4699      	mov	r9, r3
    a842:	46a2      	mov	sl, r4
    a844:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    a846:	2100      	movs	r1, #0
    a848:	e7f2      	b.n	a830 <nm_read_block+0x44>
    a84a:	46c0      	nop			; (mov r8, r8)
    a84c:	200000fc 	.word	0x200000fc
    a850:	0000b685 	.word	0x0000b685

0000a854 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    a854:	b5f0      	push	{r4, r5, r6, r7, lr}
    a856:	46d6      	mov	lr, sl
    a858:	464f      	mov	r7, r9
    a85a:	4646      	mov	r6, r8
    a85c:	b5c0      	push	{r6, r7, lr}
    a85e:	b082      	sub	sp, #8
    a860:	4680      	mov	r8, r0
    a862:	4689      	mov	r9, r1
    a864:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    a866:	4b13      	ldr	r3, [pc, #76]	; (a8b4 <nm_write_block+0x60>)
    a868:	881f      	ldrh	r7, [r3, #0]
    a86a:	3f08      	subs	r7, #8
    a86c:	b2bb      	uxth	r3, r7
    a86e:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    a870:	001e      	movs	r6, r3
    a872:	0004      	movs	r4, r0
    a874:	429a      	cmp	r2, r3
    a876:	d91a      	bls.n	a8ae <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    a878:	4b0f      	ldr	r3, [pc, #60]	; (a8b8 <nm_write_block+0x64>)
    a87a:	469a      	mov	sl, r3
    a87c:	1a37      	subs	r7, r6, r0
    a87e:	4643      	mov	r3, r8
    a880:	1ae1      	subs	r1, r4, r3
    a882:	4449      	add	r1, r9
    a884:	9a01      	ldr	r2, [sp, #4]
    a886:	0020      	movs	r0, r4
    a888:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    a88a:	2800      	cmp	r0, #0
    a88c:	d109      	bne.n	a8a2 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    a88e:	1bad      	subs	r5, r5, r6
    a890:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    a892:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    a894:	42b5      	cmp	r5, r6
    a896:	d8f2      	bhi.n	a87e <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    a898:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    a89a:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    a89c:	0020      	movs	r0, r4
    a89e:	4b06      	ldr	r3, [pc, #24]	; (a8b8 <nm_write_block+0x64>)
    a8a0:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    a8a2:	b002      	add	sp, #8
    a8a4:	bc1c      	pop	{r2, r3, r4}
    a8a6:	4690      	mov	r8, r2
    a8a8:	4699      	mov	r9, r3
    a8aa:	46a2      	mov	sl, r4
    a8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    a8ae:	2100      	movs	r1, #0
    a8b0:	e7f2      	b.n	a898 <nm_write_block+0x44>
    a8b2:	46c0      	nop			; (mov r8, r8)
    a8b4:	200000fc 	.word	0x200000fc
    a8b8:	0000b751 	.word	0x0000b751

0000a8bc <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    a8bc:	b570      	push	{r4, r5, r6, lr}
    a8be:	b084      	sub	sp, #16
    a8c0:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    a8c2:	2300      	movs	r3, #0
    a8c4:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    a8c6:	2208      	movs	r2, #8
    a8c8:	2100      	movs	r1, #0
    a8ca:	a801      	add	r0, sp, #4
    a8cc:	4b2d      	ldr	r3, [pc, #180]	; (a984 <nm_get_firmware_full_info+0xc8>)
    a8ce:	4798      	blx	r3
	if (pstrRev != NULL)
    a8d0:	2c00      	cmp	r4, #0
    a8d2:	d044      	beq.n	a95e <nm_get_firmware_full_info+0xa2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    a8d4:	2228      	movs	r2, #40	; 0x28
    a8d6:	2100      	movs	r1, #0
    a8d8:	0020      	movs	r0, r4
    a8da:	4b2b      	ldr	r3, [pc, #172]	; (a988 <nm_get_firmware_full_info+0xcc>)
    a8dc:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    a8de:	a903      	add	r1, sp, #12
    a8e0:	482a      	ldr	r0, [pc, #168]	; (a98c <nm_get_firmware_full_info+0xd0>)
    a8e2:	4b2b      	ldr	r3, [pc, #172]	; (a990 <nm_get_firmware_full_info+0xd4>)
    a8e4:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    a8e6:	2800      	cmp	r0, #0
    a8e8:	d13a      	bne.n	a960 <nm_get_firmware_full_info+0xa4>
		{
			if(reg != 0)
    a8ea:	9b03      	ldr	r3, [sp, #12]
    a8ec:	2b00      	cmp	r3, #0
    a8ee:	d039      	beq.n	a964 <nm_get_firmware_full_info+0xa8>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    a8f0:	20c0      	movs	r0, #192	; 0xc0
    a8f2:	0280      	lsls	r0, r0, #10
    a8f4:	4318      	orrs	r0, r3
    a8f6:	2208      	movs	r2, #8
    a8f8:	a901      	add	r1, sp, #4
    a8fa:	4b26      	ldr	r3, [pc, #152]	; (a994 <nm_get_firmware_full_info+0xd8>)
    a8fc:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    a8fe:	2800      	cmp	r0, #0
    a900:	d12e      	bne.n	a960 <nm_get_firmware_full_info+0xa4>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    a902:	9b02      	ldr	r3, [sp, #8]
    a904:	0418      	lsls	r0, r3, #16
    a906:	0c00      	lsrs	r0, r0, #16
    a908:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    a90a:	d02e      	beq.n	a96a <nm_get_firmware_full_info+0xae>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    a90c:	23c0      	movs	r3, #192	; 0xc0
    a90e:	029b      	lsls	r3, r3, #10
    a910:	4318      	orrs	r0, r3
    a912:	2228      	movs	r2, #40	; 0x28
    a914:	0021      	movs	r1, r4
    a916:	4b1f      	ldr	r3, [pc, #124]	; (a994 <nm_get_firmware_full_info+0xd8>)
    a918:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    a91a:	2800      	cmp	r0, #0
    a91c:	d120      	bne.n	a960 <nm_get_firmware_full_info+0xa4>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    a91e:	7921      	ldrb	r1, [r4, #4]
    a920:	0209      	lsls	r1, r1, #8
    a922:	79a2      	ldrb	r2, [r4, #6]
    a924:	230f      	movs	r3, #15
    a926:	401a      	ands	r2, r3
    a928:	430a      	orrs	r2, r1
    a92a:	7961      	ldrb	r1, [r4, #5]
    a92c:	0109      	lsls	r1, r1, #4
    a92e:	25ff      	movs	r5, #255	; 0xff
    a930:	4029      	ands	r1, r5
    a932:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    a934:	79e1      	ldrb	r1, [r4, #7]
    a936:	0209      	lsls	r1, r1, #8
    a938:	7a66      	ldrb	r6, [r4, #9]
    a93a:	4033      	ands	r3, r6
    a93c:	430b      	orrs	r3, r1
    a93e:	7a21      	ldrb	r1, [r4, #8]
    a940:	0109      	lsls	r1, r1, #4
    a942:	400d      	ands	r5, r1
    a944:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    a946:	2a00      	cmp	r2, #0
    a948:	d012      	beq.n	a970 <nm_get_firmware_full_info+0xb4>
    a94a:	2b00      	cmp	r3, #0
    a94c:	d013      	beq.n	a976 <nm_get_firmware_full_info+0xba>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    a94e:	4912      	ldr	r1, [pc, #72]	; (a998 <nm_get_firmware_full_info+0xdc>)
    a950:	428b      	cmp	r3, r1
    a952:	d813      	bhi.n	a97c <nm_get_firmware_full_info+0xc0>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    a954:	4b11      	ldr	r3, [pc, #68]	; (a99c <nm_get_firmware_full_info+0xe0>)
    a956:	429a      	cmp	r2, r3
    a958:	d802      	bhi.n	a960 <nm_get_firmware_full_info+0xa4>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    a95a:	380d      	subs	r0, #13
    a95c:	e000      	b.n	a960 <nm_get_firmware_full_info+0xa4>
	sint8	ret = M2M_SUCCESS;
    a95e:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    a960:	b004      	add	sp, #16
    a962:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    a964:	200c      	movs	r0, #12
    a966:	4240      	negs	r0, r0
    a968:	e7fa      	b.n	a960 <nm_get_firmware_full_info+0xa4>
						ret = M2M_ERR_FAIL;
    a96a:	200c      	movs	r0, #12
    a96c:	4240      	negs	r0, r0
    a96e:	e7f7      	b.n	a960 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FAIL;
    a970:	200c      	movs	r0, #12
    a972:	4240      	negs	r0, r0
    a974:	e7f4      	b.n	a960 <nm_get_firmware_full_info+0xa4>
    a976:	200c      	movs	r0, #12
    a978:	4240      	negs	r0, r0
    a97a:	e7f1      	b.n	a960 <nm_get_firmware_full_info+0xa4>
								ret = M2M_ERR_FW_VER_MISMATCH;
    a97c:	200d      	movs	r0, #13
    a97e:	4240      	negs	r0, r0
    a980:	e7ee      	b.n	a960 <nm_get_firmware_full_info+0xa4>
    a982:	46c0      	nop			; (mov r8, r8)
    a984:	0001427b 	.word	0x0001427b
    a988:	00009419 	.word	0x00009419
    a98c:	000c0008 	.word	0x000c0008
    a990:	0000a7d5 	.word	0x0000a7d5
    a994:	0000a7ed 	.word	0x0000a7ed
    a998:	00001354 	.word	0x00001354
    a99c:	00001353 	.word	0x00001353

0000a9a0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    a9a0:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode;
	
	if(NULL != arg) {
    a9a2:	2800      	cmp	r0, #0
    a9a4:	d034      	beq.n	aa10 <nm_drv_init+0x70>
		u8Mode = *((uint8 *)arg);
    a9a6:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    a9a8:	1e6b      	subs	r3, r5, #1
    a9aa:	2b03      	cmp	r3, #3
    a9ac:	d900      	bls.n	a9b0 <nm_drv_init+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    a9ae:	2501      	movs	r5, #1
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
	}
	
	ret = nm_bus_iface_init(NULL);
    a9b0:	2000      	movs	r0, #0
    a9b2:	4b1e      	ldr	r3, [pc, #120]	; (aa2c <nm_drv_init+0x8c>)
    a9b4:	4798      	blx	r3
    a9b6:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a9b8:	d12c      	bne.n	aa14 <nm_drv_init+0x74>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    a9ba:	481d      	ldr	r0, [pc, #116]	; (aa30 <nm_drv_init+0x90>)
    a9bc:	4c1d      	ldr	r4, [pc, #116]	; (aa34 <nm_drv_init+0x94>)
    a9be:	47a0      	blx	r4
    a9c0:	4b1d      	ldr	r3, [pc, #116]	; (aa38 <nm_drv_init+0x98>)
    a9c2:	4798      	blx	r3
    a9c4:	0001      	movs	r1, r0
    a9c6:	481d      	ldr	r0, [pc, #116]	; (aa3c <nm_drv_init+0x9c>)
    a9c8:	47a0      	blx	r4
    a9ca:	481d      	ldr	r0, [pc, #116]	; (aa40 <nm_drv_init+0xa0>)
    a9cc:	47a0      	blx	r4
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    a9ce:	4b1d      	ldr	r3, [pc, #116]	; (aa44 <nm_drv_init+0xa4>)
    a9d0:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
    a9d2:	0028      	movs	r0, r5
    a9d4:	4b1c      	ldr	r3, [pc, #112]	; (aa48 <nm_drv_init+0xa8>)
    a9d6:	4798      	blx	r3
    a9d8:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a9da:	d115      	bne.n	aa08 <nm_drv_init+0x68>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    a9dc:	0028      	movs	r0, r5
    a9de:	4b1b      	ldr	r3, [pc, #108]	; (aa4c <nm_drv_init+0xac>)
    a9e0:	4798      	blx	r3
    a9e2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a9e4:	d110      	bne.n	aa08 <nm_drv_init+0x68>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    a9e6:	3d02      	subs	r5, #2
    a9e8:	2d01      	cmp	r5, #1
    a9ea:	d90f      	bls.n	aa0c <nm_drv_init+0x6c>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    a9ec:	4b18      	ldr	r3, [pc, #96]	; (aa50 <nm_drv_init+0xb0>)
    a9ee:	4798      	blx	r3
    a9f0:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    a9f2:	d00b      	beq.n	aa0c <nm_drv_init+0x6c>
		M2M_ERR("failed to enable interrupts..\n");
    a9f4:	22a7      	movs	r2, #167	; 0xa7
    a9f6:	0052      	lsls	r2, r2, #1
    a9f8:	4916      	ldr	r1, [pc, #88]	; (aa54 <nm_drv_init+0xb4>)
    a9fa:	4817      	ldr	r0, [pc, #92]	; (aa58 <nm_drv_init+0xb8>)
    a9fc:	4d0d      	ldr	r5, [pc, #52]	; (aa34 <nm_drv_init+0x94>)
    a9fe:	47a8      	blx	r5
    aa00:	4816      	ldr	r0, [pc, #88]	; (aa5c <nm_drv_init+0xbc>)
    aa02:	47a8      	blx	r5
    aa04:	480e      	ldr	r0, [pc, #56]	; (aa40 <nm_drv_init+0xa0>)
    aa06:	47a8      	blx	r5
		goto ERR2;
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    aa08:	4b15      	ldr	r3, [pc, #84]	; (aa60 <nm_drv_init+0xc0>)
    aa0a:	4798      	blx	r3
ERR1:
	return ret;
}
    aa0c:	0020      	movs	r0, r4
    aa0e:	bd70      	pop	{r4, r5, r6, pc}
		u8Mode = M2M_WIFI_MODE_NORMAL;
    aa10:	2501      	movs	r5, #1
    aa12:	e7cd      	b.n	a9b0 <nm_drv_init+0x10>
		M2M_ERR("[nmi start]: fail init bus\n");
    aa14:	2290      	movs	r2, #144	; 0x90
    aa16:	0052      	lsls	r2, r2, #1
    aa18:	490e      	ldr	r1, [pc, #56]	; (aa54 <nm_drv_init+0xb4>)
    aa1a:	480f      	ldr	r0, [pc, #60]	; (aa58 <nm_drv_init+0xb8>)
    aa1c:	4d05      	ldr	r5, [pc, #20]	; (aa34 <nm_drv_init+0x94>)
    aa1e:	47a8      	blx	r5
    aa20:	4810      	ldr	r0, [pc, #64]	; (aa64 <nm_drv_init+0xc4>)
    aa22:	47a8      	blx	r5
    aa24:	4806      	ldr	r0, [pc, #24]	; (aa40 <nm_drv_init+0xa0>)
    aa26:	47a8      	blx	r5
		goto ERR1;
    aa28:	e7f0      	b.n	aa0c <nm_drv_init+0x6c>
    aa2a:	46c0      	nop			; (mov r8, r8)
    aa2c:	0000a7a5 	.word	0x0000a7a5
    aa30:	00017f70 	.word	0x00017f70
    aa34:	00007fed 	.word	0x00007fed
    aa38:	0000a39d 	.word	0x0000a39d
    aa3c:	000182c4 	.word	0x000182c4
    aa40:	00017c5c 	.word	0x00017c5c
    aa44:	0000b571 	.word	0x0000b571
    aa48:	0000a5a9 	.word	0x0000a5a9
    aa4c:	0000a6ad 	.word	0x0000a6ad
    aa50:	0000a341 	.word	0x0000a341
    aa54:	0001820c 	.word	0x0001820c
    aa58:	00017c34 	.word	0x00017c34
    aa5c:	00018288 	.word	0x00018288
    aa60:	0000a7b1 	.word	0x0000a7b1
    aa64:	000182a8 	.word	0x000182a8

0000aa68 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    aa68:	b570      	push	{r4, r5, r6, lr}
	sint8 ret;

	ret = chip_deinit();
    aa6a:	4b19      	ldr	r3, [pc, #100]	; (aad0 <nm_drv_deinit+0x68>)
    aa6c:	4798      	blx	r3
    aa6e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    aa70:	d10b      	bne.n	aa8a <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    aa72:	2000      	movs	r0, #0
    aa74:	4b17      	ldr	r3, [pc, #92]	; (aad4 <nm_drv_deinit+0x6c>)
    aa76:	4798      	blx	r3
    aa78:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    aa7a:	d112      	bne.n	aaa2 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    aa7c:	4b16      	ldr	r3, [pc, #88]	; (aad8 <nm_drv_deinit+0x70>)
    aa7e:	4798      	blx	r3
    aa80:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    aa82:	d119      	bne.n	aab8 <nm_drv_deinit+0x50>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    aa84:	4b15      	ldr	r3, [pc, #84]	; (aadc <nm_drv_deinit+0x74>)
    aa86:	4798      	blx	r3
    aa88:	e009      	b.n	aa9e <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    aa8a:	2266      	movs	r2, #102	; 0x66
    aa8c:	32ff      	adds	r2, #255	; 0xff
    aa8e:	4914      	ldr	r1, [pc, #80]	; (aae0 <nm_drv_deinit+0x78>)
    aa90:	4814      	ldr	r0, [pc, #80]	; (aae4 <nm_drv_deinit+0x7c>)
    aa92:	4d15      	ldr	r5, [pc, #84]	; (aae8 <nm_drv_deinit+0x80>)
    aa94:	47a8      	blx	r5
    aa96:	4815      	ldr	r0, [pc, #84]	; (aaec <nm_drv_deinit+0x84>)
    aa98:	47a8      	blx	r5
    aa9a:	4815      	ldr	r0, [pc, #84]	; (aaf0 <nm_drv_deinit+0x88>)
    aa9c:	47a8      	blx	r5
#endif

ERR1:
	return ret;
}
    aa9e:	0020      	movs	r0, r4
    aaa0:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    aaa2:	22b6      	movs	r2, #182	; 0xb6
    aaa4:	0052      	lsls	r2, r2, #1
    aaa6:	490e      	ldr	r1, [pc, #56]	; (aae0 <nm_drv_deinit+0x78>)
    aaa8:	480e      	ldr	r0, [pc, #56]	; (aae4 <nm_drv_deinit+0x7c>)
    aaaa:	4d0f      	ldr	r5, [pc, #60]	; (aae8 <nm_drv_deinit+0x80>)
    aaac:	47a8      	blx	r5
    aaae:	4811      	ldr	r0, [pc, #68]	; (aaf4 <nm_drv_deinit+0x8c>)
    aab0:	47a8      	blx	r5
    aab2:	480f      	ldr	r0, [pc, #60]	; (aaf0 <nm_drv_deinit+0x88>)
    aab4:	47a8      	blx	r5
		goto ERR1;
    aab6:	e7f2      	b.n	aa9e <nm_drv_deinit+0x36>
		M2M_ERR("[nmi stop]: fail init bus\n");
    aab8:	22b9      	movs	r2, #185	; 0xb9
    aaba:	0052      	lsls	r2, r2, #1
    aabc:	4908      	ldr	r1, [pc, #32]	; (aae0 <nm_drv_deinit+0x78>)
    aabe:	4809      	ldr	r0, [pc, #36]	; (aae4 <nm_drv_deinit+0x7c>)
    aac0:	4d09      	ldr	r5, [pc, #36]	; (aae8 <nm_drv_deinit+0x80>)
    aac2:	47a8      	blx	r5
    aac4:	480c      	ldr	r0, [pc, #48]	; (aaf8 <nm_drv_deinit+0x90>)
    aac6:	47a8      	blx	r5
    aac8:	4809      	ldr	r0, [pc, #36]	; (aaf0 <nm_drv_deinit+0x88>)
    aaca:	47a8      	blx	r5
		goto ERR1;
    aacc:	e7e7      	b.n	aa9e <nm_drv_deinit+0x36>
    aace:	46c0      	nop			; (mov r8, r8)
    aad0:	0000a725 	.word	0x0000a725
    aad4:	0000c2c5 	.word	0x0000c2c5
    aad8:	0000a7b1 	.word	0x0000a7b1
    aadc:	0000b51d 	.word	0x0000b51d
    aae0:	00018218 	.word	0x00018218
    aae4:	00017c34 	.word	0x00017c34
    aae8:	00007fed 	.word	0x00007fed
    aaec:	00018228 	.word	0x00018228
    aaf0:	00017c5c 	.word	0x00017c5c
    aaf4:	00018248 	.word	0x00018248
    aaf8:	0001826c 	.word	0x0001826c

0000aafc <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    aafc:	b500      	push	{lr}
    aafe:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    ab00:	ab01      	add	r3, sp, #4
    ab02:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    ab04:	2200      	movs	r2, #0
    ab06:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    ab08:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    ab0a:	0019      	movs	r1, r3
    ab0c:	2003      	movs	r0, #3
    ab0e:	4b02      	ldr	r3, [pc, #8]	; (ab18 <nmi_spi_write+0x1c>)
    ab10:	4798      	blx	r3
}
    ab12:	b005      	add	sp, #20
    ab14:	bd00      	pop	{pc}
    ab16:	46c0      	nop			; (mov r8, r8)
    ab18:	00009255 	.word	0x00009255

0000ab1c <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    ab1c:	b570      	push	{r4, r5, r6, lr}
    ab1e:	b084      	sub	sp, #16
    ab20:	ac08      	add	r4, sp, #32
    ab22:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    ab24:	ac01      	add	r4, sp, #4
    ab26:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    ab28:	303f      	adds	r0, #63	; 0x3f
    ab2a:	b2c4      	uxtb	r4, r0
    ab2c:	2c0e      	cmp	r4, #14
    ab2e:	d900      	bls.n	ab32 <spi_cmd+0x16>
    ab30:	e082      	b.n	ac38 <spi_cmd+0x11c>
    ab32:	00a0      	lsls	r0, r4, #2
    ab34:	4c4e      	ldr	r4, [pc, #312]	; (ac70 <spi_cmd+0x154>)
    ab36:	5820      	ldr	r0, [r4, r0]
    ab38:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    ab3a:	ab01      	add	r3, sp, #4
    ab3c:	0c0a      	lsrs	r2, r1, #16
    ab3e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    ab40:	0a0a      	lsrs	r2, r1, #8
    ab42:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    ab44:	70d9      	strb	r1, [r3, #3]
		len = 5;
    ab46:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    ab48:	4b4a      	ldr	r3, [pc, #296]	; (ac74 <spi_cmd+0x158>)
    ab4a:	781b      	ldrb	r3, [r3, #0]
    ab4c:	2b00      	cmp	r3, #0
    ab4e:	d075      	beq.n	ac3c <spi_cmd+0x120>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    ab50:	3901      	subs	r1, #1
    ab52:	b2c9      	uxtb	r1, r1
    ab54:	e081      	b.n	ac5a <spi_cmd+0x13e>
		bc[1] = (uint8)(adr >> 8);
    ab56:	0a0b      	lsrs	r3, r1, #8
    ab58:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    ab5a:	2d00      	cmp	r5, #0
    ab5c:	d107      	bne.n	ab6e <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    ab5e:	aa01      	add	r2, sp, #4
    ab60:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    ab62:	ab01      	add	r3, sp, #4
    ab64:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    ab66:	2200      	movs	r2, #0
    ab68:	70da      	strb	r2, [r3, #3]
		len = 5;
    ab6a:	2105      	movs	r1, #5
		break;
    ab6c:	e7ec      	b.n	ab48 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    ab6e:	2280      	movs	r2, #128	; 0x80
    ab70:	4252      	negs	r2, r2
    ab72:	4313      	orrs	r3, r2
    ab74:	aa01      	add	r2, sp, #4
    ab76:	7053      	strb	r3, [r2, #1]
    ab78:	e7f3      	b.n	ab62 <spi_cmd+0x46>
		bc[1] = 0x00;
    ab7a:	ab01      	add	r3, sp, #4
    ab7c:	2200      	movs	r2, #0
    ab7e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    ab80:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    ab82:	70da      	strb	r2, [r3, #3]
		len = 5;
    ab84:	2105      	movs	r1, #5
		break;
    ab86:	e7df      	b.n	ab48 <spi_cmd+0x2c>
		bc[1] = 0x00;
    ab88:	ab01      	add	r3, sp, #4
    ab8a:	2200      	movs	r2, #0
    ab8c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    ab8e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    ab90:	70da      	strb	r2, [r3, #3]
		len = 5;
    ab92:	2105      	movs	r1, #5
		break;
    ab94:	e7d8      	b.n	ab48 <spi_cmd+0x2c>
		bc[1] = 0xff;
    ab96:	ab01      	add	r3, sp, #4
    ab98:	22ff      	movs	r2, #255	; 0xff
    ab9a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    ab9c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    ab9e:	70da      	strb	r2, [r3, #3]
		len = 5;
    aba0:	2105      	movs	r1, #5
		break;
    aba2:	e7d1      	b.n	ab48 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    aba4:	aa01      	add	r2, sp, #4
    aba6:	0c08      	lsrs	r0, r1, #16
    aba8:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    abaa:	0a08      	lsrs	r0, r1, #8
    abac:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    abae:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    abb0:	0a19      	lsrs	r1, r3, #8
    abb2:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    abb4:	7153      	strb	r3, [r2, #5]
		len = 7;
    abb6:	2107      	movs	r1, #7
		break;
    abb8:	e7c6      	b.n	ab48 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    abba:	aa01      	add	r2, sp, #4
    abbc:	0c08      	lsrs	r0, r1, #16
    abbe:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    abc0:	0a08      	lsrs	r0, r1, #8
    abc2:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    abc4:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    abc6:	0c19      	lsrs	r1, r3, #16
    abc8:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    abca:	0a19      	lsrs	r1, r3, #8
    abcc:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    abce:	7193      	strb	r3, [r2, #6]
		len = 8;
    abd0:	2108      	movs	r1, #8
		break;
    abd2:	e7b9      	b.n	ab48 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    abd4:	0a0b      	lsrs	r3, r1, #8
    abd6:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    abd8:	2d00      	cmp	r5, #0
    abda:	d10c      	bne.n	abf6 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    abdc:	a801      	add	r0, sp, #4
    abde:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    abe0:	ab01      	add	r3, sp, #4
    abe2:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    abe4:	0e11      	lsrs	r1, r2, #24
    abe6:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    abe8:	0c11      	lsrs	r1, r2, #16
    abea:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    abec:	0a11      	lsrs	r1, r2, #8
    abee:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    abf0:	719a      	strb	r2, [r3, #6]
		len = 8;
    abf2:	2108      	movs	r1, #8
		break;
    abf4:	e7a8      	b.n	ab48 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    abf6:	2080      	movs	r0, #128	; 0x80
    abf8:	4240      	negs	r0, r0
    abfa:	4303      	orrs	r3, r0
    abfc:	a801      	add	r0, sp, #4
    abfe:	7043      	strb	r3, [r0, #1]
    ac00:	e7ee      	b.n	abe0 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    ac02:	ab01      	add	r3, sp, #4
    ac04:	0c08      	lsrs	r0, r1, #16
    ac06:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    ac08:	0a08      	lsrs	r0, r1, #8
    ac0a:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    ac0c:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    ac0e:	0e11      	lsrs	r1, r2, #24
    ac10:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    ac12:	0c11      	lsrs	r1, r2, #16
    ac14:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    ac16:	0a11      	lsrs	r1, r2, #8
    ac18:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    ac1a:	71da      	strb	r2, [r3, #7]
		len = 9;
    ac1c:	2109      	movs	r1, #9
		break;
    ac1e:	e793      	b.n	ab48 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    ac20:	2290      	movs	r2, #144	; 0x90
    ac22:	0052      	lsls	r2, r2, #1
    ac24:	4914      	ldr	r1, [pc, #80]	; (ac78 <spi_cmd+0x15c>)
    ac26:	4815      	ldr	r0, [pc, #84]	; (ac7c <spi_cmd+0x160>)
    ac28:	4c15      	ldr	r4, [pc, #84]	; (ac80 <spi_cmd+0x164>)
    ac2a:	47a0      	blx	r4
    ac2c:	4815      	ldr	r0, [pc, #84]	; (ac84 <spi_cmd+0x168>)
    ac2e:	47a0      	blx	r4
    ac30:	4815      	ldr	r0, [pc, #84]	; (ac88 <spi_cmd+0x16c>)
    ac32:	47a0      	blx	r4
			result = N_FAIL;
    ac34:	2300      	movs	r3, #0
    ac36:	e017      	b.n	ac68 <spi_cmd+0x14c>
	switch (cmd) {
    ac38:	2300      	movs	r3, #0
    ac3a:	e015      	b.n	ac68 <spi_cmd+0x14c>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    ac3c:	1e4e      	subs	r6, r1, #1
    ac3e:	aa01      	add	r2, sp, #4
    ac40:	1995      	adds	r5, r2, r6
    ac42:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    ac44:	4c11      	ldr	r4, [pc, #68]	; (ac8c <spi_cmd+0x170>)
    ac46:	005b      	lsls	r3, r3, #1
    ac48:	7810      	ldrb	r0, [r2, #0]
    ac4a:	4043      	eors	r3, r0
    ac4c:	5ce3      	ldrb	r3, [r4, r3]
    ac4e:	3201      	adds	r2, #1
	while (len--)
    ac50:	42aa      	cmp	r2, r5
    ac52:	d1f8      	bne.n	ac46 <spi_cmd+0x12a>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    ac54:	005b      	lsls	r3, r3, #1
    ac56:	aa01      	add	r2, sp, #4
    ac58:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    ac5a:	b289      	uxth	r1, r1
    ac5c:	a801      	add	r0, sp, #4
    ac5e:	4b0c      	ldr	r3, [pc, #48]	; (ac90 <spi_cmd+0x174>)
    ac60:	4798      	blx	r3
    ac62:	2301      	movs	r3, #1
    ac64:	2800      	cmp	r0, #0
    ac66:	d1db      	bne.n	ac20 <spi_cmd+0x104>
		}
	}

	return result;
}
    ac68:	0018      	movs	r0, r3
    ac6a:	b004      	add	sp, #16
    ac6c:	bd70      	pop	{r4, r5, r6, pc}
    ac6e:	46c0      	nop			; (mov r8, r8)
    ac70:	000182d4 	.word	0x000182d4
    ac74:	20003ed0 	.word	0x20003ed0
    ac78:	00018350 	.word	0x00018350
    ac7c:	00017c34 	.word	0x00017c34
    ac80:	00007fed 	.word	0x00007fed
    ac84:	00018754 	.word	0x00018754
    ac88:	00017c5c 	.word	0x00017c5c
    ac8c:	000183e0 	.word	0x000183e0
    ac90:	0000aafd 	.word	0x0000aafd

0000ac94 <nmi_spi_read>:
{
    ac94:	b500      	push	{lr}
    ac96:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    ac98:	ab01      	add	r3, sp, #4
    ac9a:	2200      	movs	r2, #0
    ac9c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    ac9e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    aca0:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    aca2:	0019      	movs	r1, r3
    aca4:	2003      	movs	r0, #3
    aca6:	4b02      	ldr	r3, [pc, #8]	; (acb0 <nmi_spi_read+0x1c>)
    aca8:	4798      	blx	r3
}
    acaa:	b005      	add	sp, #20
    acac:	bd00      	pop	{pc}
    acae:	46c0      	nop			; (mov r8, r8)
    acb0:	00009255 	.word	0x00009255

0000acb4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    acb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    acb6:	46c6      	mov	lr, r8
    acb8:	b500      	push	{lr}
    acba:	b082      	sub	sp, #8
    acbc:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    acbe:	28cf      	cmp	r0, #207	; 0xcf
    acc0:	d02b      	beq.n	ad1a <spi_cmd_rsp+0x66>
    acc2:	0003      	movs	r3, r0
    acc4:	333b      	adds	r3, #59	; 0x3b
    acc6:	b2db      	uxtb	r3, r3
    acc8:	2b01      	cmp	r3, #1
    acca:	d926      	bls.n	ad1a <spi_cmd_rsp+0x66>
{
    accc:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    acce:	466b      	mov	r3, sp
    acd0:	1dde      	adds	r6, r3, #7
    acd2:	4b24      	ldr	r3, [pc, #144]	; (ad64 <spi_cmd_rsp+0xb0>)
    acd4:	4698      	mov	r8, r3
    acd6:	2101      	movs	r1, #1
    acd8:	0030      	movs	r0, r6
    acda:	47c0      	blx	r8
    acdc:	1e05      	subs	r5, r0, #0
    acde:	d125      	bne.n	ad2c <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    ace0:	7833      	ldrb	r3, [r6, #0]
    ace2:	42bb      	cmp	r3, r7
    ace4:	d02e      	beq.n	ad44 <spi_cmd_rsp+0x90>
    ace6:	3c01      	subs	r4, #1
    ace8:	b2e4      	uxtb	r4, r4
    acea:	2c00      	cmp	r4, #0
    acec:	d1f3      	bne.n	acd6 <spi_cmd_rsp+0x22>
    acee:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    acf0:	466b      	mov	r3, sp
    acf2:	1dde      	adds	r6, r3, #7
    acf4:	4f1b      	ldr	r7, [pc, #108]	; (ad64 <spi_cmd_rsp+0xb0>)
    acf6:	2101      	movs	r1, #1
    acf8:	0030      	movs	r0, r6
    acfa:	47b8      	blx	r7
    acfc:	2800      	cmp	r0, #0
    acfe:	d123      	bne.n	ad48 <spi_cmd_rsp+0x94>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    ad00:	7833      	ldrb	r3, [r6, #0]
    ad02:	2b00      	cmp	r3, #0
    ad04:	d02b      	beq.n	ad5e <spi_cmd_rsp+0xaa>
    ad06:	3c01      	subs	r4, #1
    ad08:	b2e4      	uxtb	r4, r4
    ad0a:	2c00      	cmp	r4, #0
    ad0c:	d1f3      	bne.n	acf6 <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    ad0e:	2501      	movs	r5, #1

_fail_:

	return result;
}
    ad10:	0028      	movs	r0, r5
    ad12:	b002      	add	sp, #8
    ad14:	bc04      	pop	{r2}
    ad16:	4690      	mov	r8, r2
    ad18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    ad1a:	2101      	movs	r1, #1
    ad1c:	466b      	mov	r3, sp
    ad1e:	1dd8      	adds	r0, r3, #7
    ad20:	4b10      	ldr	r3, [pc, #64]	; (ad64 <spi_cmd_rsp+0xb0>)
    ad22:	4798      	blx	r3
			result = N_FAIL;
    ad24:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    ad26:	2800      	cmp	r0, #0
    ad28:	d0d0      	beq.n	accc <spi_cmd_rsp+0x18>
    ad2a:	e7f1      	b.n	ad10 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    ad2c:	225c      	movs	r2, #92	; 0x5c
    ad2e:	32ff      	adds	r2, #255	; 0xff
    ad30:	490d      	ldr	r1, [pc, #52]	; (ad68 <spi_cmd_rsp+0xb4>)
    ad32:	480e      	ldr	r0, [pc, #56]	; (ad6c <spi_cmd_rsp+0xb8>)
    ad34:	4c0e      	ldr	r4, [pc, #56]	; (ad70 <spi_cmd_rsp+0xbc>)
    ad36:	47a0      	blx	r4
    ad38:	480e      	ldr	r0, [pc, #56]	; (ad74 <spi_cmd_rsp+0xc0>)
    ad3a:	47a0      	blx	r4
    ad3c:	480e      	ldr	r0, [pc, #56]	; (ad78 <spi_cmd_rsp+0xc4>)
    ad3e:	47a0      	blx	r4
			result = N_FAIL;
    ad40:	2500      	movs	r5, #0
			goto _fail_;
    ad42:	e7e5      	b.n	ad10 <spi_cmd_rsp+0x5c>
    ad44:	240b      	movs	r4, #11
    ad46:	e7d3      	b.n	acf0 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    ad48:	226a      	movs	r2, #106	; 0x6a
    ad4a:	32ff      	adds	r2, #255	; 0xff
    ad4c:	4906      	ldr	r1, [pc, #24]	; (ad68 <spi_cmd_rsp+0xb4>)
    ad4e:	4807      	ldr	r0, [pc, #28]	; (ad6c <spi_cmd_rsp+0xb8>)
    ad50:	4c07      	ldr	r4, [pc, #28]	; (ad70 <spi_cmd_rsp+0xbc>)
    ad52:	47a0      	blx	r4
    ad54:	4807      	ldr	r0, [pc, #28]	; (ad74 <spi_cmd_rsp+0xc0>)
    ad56:	47a0      	blx	r4
    ad58:	4807      	ldr	r0, [pc, #28]	; (ad78 <spi_cmd_rsp+0xc4>)
    ad5a:	47a0      	blx	r4
			goto _fail_;
    ad5c:	e7d8      	b.n	ad10 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    ad5e:	2501      	movs	r5, #1
    ad60:	e7d6      	b.n	ad10 <spi_cmd_rsp+0x5c>
    ad62:	46c0      	nop			; (mov r8, r8)
    ad64:	0000ac95 	.word	0x0000ac95
    ad68:	00018368 	.word	0x00018368
    ad6c:	00017c34 	.word	0x00017c34
    ad70:	00007fed 	.word	0x00007fed
    ad74:	00018950 	.word	0x00018950
    ad78:	00017c5c 	.word	0x00017c5c

0000ad7c <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
    ad7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad7e:	46de      	mov	lr, fp
    ad80:	4657      	mov	r7, sl
    ad82:	464e      	mov	r6, r9
    ad84:	4645      	mov	r5, r8
    ad86:	b5e0      	push	{r5, r6, r7, lr}
    ad88:	b097      	sub	sp, #92	; 0x5c
    ad8a:	0005      	movs	r5, r0
    ad8c:	4690      	mov	r8, r2
    ad8e:	9300      	str	r3, [sp, #0]
    ad90:	ab20      	add	r3, sp, #128	; 0x80
    ad92:	7818      	ldrb	r0, [r3, #0]
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
	int result = N_OK;

	wb[0] = cmd;
    ad94:	ab0e      	add	r3, sp, #56	; 0x38
    ad96:	701d      	strb	r5, [r3, #0]
	switch (cmd) {
    ad98:	002b      	movs	r3, r5
    ad9a:	333f      	adds	r3, #63	; 0x3f
    ad9c:	b2da      	uxtb	r2, r3
    ad9e:	2a0e      	cmp	r2, #14
    ada0:	d900      	bls.n	ada4 <spi_cmd_complete+0x28>
    ada2:	e263      	b.n	b26c <spi_cmd_complete+0x4f0>
    ada4:	0093      	lsls	r3, r2, #2
    ada6:	4acc      	ldr	r2, [pc, #816]	; (b0d8 <spi_cmd_complete+0x35c>)
    ada8:	58d3      	ldr	r3, [r2, r3]
    adaa:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
    adac:	ab0e      	add	r3, sp, #56	; 0x38
    adae:	0c0a      	lsrs	r2, r1, #16
    adb0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    adb2:	0a0a      	lsrs	r2, r1, #8
    adb4:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    adb6:	70d9      	strb	r1, [r3, #3]
		len = 5;
    adb8:	2305      	movs	r3, #5
    adba:	4699      	mov	r9, r3

	if (result != N_OK) {
		return result;
	}

	if (!gu8Crc_off) {
    adbc:	4bc7      	ldr	r3, [pc, #796]	; (b0dc <spi_cmd_complete+0x360>)
    adbe:	781f      	ldrb	r7, [r3, #0]
    adc0:	2f00      	cmp	r7, #0
    adc2:	d100      	bne.n	adc6 <spi_cmd_complete+0x4a>
    adc4:	e254      	b.n	b270 <spi_cmd_complete+0x4f4>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
	} else {
		len -=1;
    adc6:	2301      	movs	r3, #1
    adc8:	425b      	negs	r3, r3
    adca:	469c      	mov	ip, r3
    adcc:	44e1      	add	r9, ip
    adce:	e263      	b.n	b298 <spi_cmd_complete+0x51c>
		wb[1] = (uint8_t)(adr >> 8);
    add0:	0a0b      	lsrs	r3, r1, #8
    add2:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
    add4:	2801      	cmp	r0, #1
    add6:	d008      	beq.n	adea <spi_cmd_complete+0x6e>
		wb[1] = (uint8_t)(adr >> 8);
    add8:	aa0e      	add	r2, sp, #56	; 0x38
    adda:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)adr;
    addc:	ab0e      	add	r3, sp, #56	; 0x38
    adde:	7099      	strb	r1, [r3, #2]
		wb[3] = 0x00;
    ade0:	2200      	movs	r2, #0
    ade2:	70da      	strb	r2, [r3, #3]
		len = 5;
    ade4:	2305      	movs	r3, #5
    ade6:	4699      	mov	r9, r3
		break;
    ade8:	e7e8      	b.n	adbc <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
    adea:	2280      	movs	r2, #128	; 0x80
    adec:	4252      	negs	r2, r2
    adee:	4313      	orrs	r3, r2
    adf0:	aa0e      	add	r2, sp, #56	; 0x38
    adf2:	7053      	strb	r3, [r2, #1]
    adf4:	e7f2      	b.n	addc <spi_cmd_complete+0x60>
		wb[1] = 0x00;
    adf6:	ab0e      	add	r3, sp, #56	; 0x38
    adf8:	2200      	movs	r2, #0
    adfa:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
    adfc:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    adfe:	70da      	strb	r2, [r3, #3]
		len = 5;
    ae00:	2305      	movs	r3, #5
    ae02:	4699      	mov	r9, r3
		break;
    ae04:	e7da      	b.n	adbc <spi_cmd_complete+0x40>
		wb[1] = 0x00;
    ae06:	ab0e      	add	r3, sp, #56	; 0x38
    ae08:	2200      	movs	r2, #0
    ae0a:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
    ae0c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
    ae0e:	70da      	strb	r2, [r3, #3]
		len = 5;
    ae10:	2305      	movs	r3, #5
    ae12:	4699      	mov	r9, r3
		break;
    ae14:	e7d2      	b.n	adbc <spi_cmd_complete+0x40>
		wb[1] = 0xff;
    ae16:	ab0e      	add	r3, sp, #56	; 0x38
    ae18:	22ff      	movs	r2, #255	; 0xff
    ae1a:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
    ae1c:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
    ae1e:	70da      	strb	r2, [r3, #3]
		len = 5;
    ae20:	2305      	movs	r3, #5
    ae22:	4699      	mov	r9, r3
		break;
    ae24:	e7ca      	b.n	adbc <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
    ae26:	ab0e      	add	r3, sp, #56	; 0x38
    ae28:	0c0a      	lsrs	r2, r1, #16
    ae2a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    ae2c:	0a0a      	lsrs	r2, r1, #8
    ae2e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    ae30:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
    ae32:	9900      	ldr	r1, [sp, #0]
    ae34:	0a0a      	lsrs	r2, r1, #8
    ae36:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
    ae38:	7159      	strb	r1, [r3, #5]
		len = 7;
    ae3a:	2307      	movs	r3, #7
    ae3c:	4699      	mov	r9, r3
		break;
    ae3e:	e7bd      	b.n	adbc <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 16);
    ae40:	ab0e      	add	r3, sp, #56	; 0x38
    ae42:	0c0a      	lsrs	r2, r1, #16
    ae44:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    ae46:	0a0a      	lsrs	r2, r1, #8
    ae48:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
    ae4a:	70d9      	strb	r1, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
    ae4c:	9900      	ldr	r1, [sp, #0]
    ae4e:	0c0a      	lsrs	r2, r1, #16
    ae50:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
    ae52:	0a0a      	lsrs	r2, r1, #8
    ae54:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
    ae56:	7199      	strb	r1, [r3, #6]
		len = 8;
    ae58:	2308      	movs	r3, #8
    ae5a:	4699      	mov	r9, r3
		break;
    ae5c:	e7ae      	b.n	adbc <spi_cmd_complete+0x40>
		wb[1] = (uint8_t)(adr >> 8);
    ae5e:	0a0b      	lsrs	r3, r1, #8
    ae60:	b2db      	uxtb	r3, r3
		if(clockless == 1)  wb[1] |= (1 << 7);
    ae62:	2801      	cmp	r0, #1
    ae64:	d012      	beq.n	ae8c <spi_cmd_complete+0x110>
		wb[1] = (uint8_t)(adr >> 8);
    ae66:	aa0e      	add	r2, sp, #56	; 0x38
    ae68:	7053      	strb	r3, [r2, #1]
		wb[2] = (uint8_t)(adr);
    ae6a:	ab0e      	add	r3, sp, #56	; 0x38
    ae6c:	7099      	strb	r1, [r3, #2]
		wb[3] = b[3];
    ae6e:	4642      	mov	r2, r8
    ae70:	78d2      	ldrb	r2, [r2, #3]
    ae72:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
    ae74:	4642      	mov	r2, r8
    ae76:	7892      	ldrb	r2, [r2, #2]
    ae78:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
    ae7a:	4642      	mov	r2, r8
    ae7c:	7852      	ldrb	r2, [r2, #1]
    ae7e:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
    ae80:	4642      	mov	r2, r8
    ae82:	7812      	ldrb	r2, [r2, #0]
    ae84:	719a      	strb	r2, [r3, #6]
		len = 8;
    ae86:	2308      	movs	r3, #8
    ae88:	4699      	mov	r9, r3
		break;
    ae8a:	e797      	b.n	adbc <spi_cmd_complete+0x40>
		if(clockless == 1)  wb[1] |= (1 << 7);
    ae8c:	2280      	movs	r2, #128	; 0x80
    ae8e:	4252      	negs	r2, r2
    ae90:	4313      	orrs	r3, r2
    ae92:	aa0e      	add	r2, sp, #56	; 0x38
    ae94:	7053      	strb	r3, [r2, #1]
    ae96:	e7e8      	b.n	ae6a <spi_cmd_complete+0xee>
		wb[1] = (uint8_t)(adr >> 16);
    ae98:	ab0e      	add	r3, sp, #56	; 0x38
    ae9a:	0c0a      	lsrs	r2, r1, #16
    ae9c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
    ae9e:	0a0a      	lsrs	r2, r1, #8
    aea0:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
    aea2:	70d9      	strb	r1, [r3, #3]
		wb[4] = b[3];
    aea4:	4642      	mov	r2, r8
    aea6:	78d2      	ldrb	r2, [r2, #3]
    aea8:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
    aeaa:	4642      	mov	r2, r8
    aeac:	7892      	ldrb	r2, [r2, #2]
    aeae:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
    aeb0:	4642      	mov	r2, r8
    aeb2:	7852      	ldrb	r2, [r2, #1]
    aeb4:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
    aeb6:	4642      	mov	r2, r8
    aeb8:	7812      	ldrb	r2, [r2, #0]
    aeba:	71da      	strb	r2, [r3, #7]
		len = 9;
    aebc:	2309      	movs	r3, #9
    aebe:	4699      	mov	r9, r3
		break;
    aec0:	e77c      	b.n	adbc <spi_cmd_complete+0x40>
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
    aec2:	464b      	mov	r3, r9
    aec4:	1d9e      	adds	r6, r3, #6
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
    aec6:	2e20      	cmp	r6, #32
    aec8:	d844      	bhi.n	af54 <spi_cmd_complete+0x1d8>
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
		return result;
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
    aeca:	464b      	mov	r3, r9
    aecc:	466a      	mov	r2, sp
    aece:	71d3      	strb	r3, [r2, #7]
    aed0:	79d7      	ldrb	r7, [r2, #7]
    aed2:	42b7      	cmp	r7, r6
    aed4:	d207      	bcs.n	aee6 <spi_cmd_complete+0x16a>
    aed6:	003b      	movs	r3, r7
		wb[wix] = 0;
    aed8:	a90e      	add	r1, sp, #56	; 0x38
    aeda:	2200      	movs	r2, #0
    aedc:	54ca      	strb	r2, [r1, r3]
	for(wix = len; wix< len2; wix++) {
    aede:	3301      	adds	r3, #1
    aee0:	b2db      	uxtb	r3, r3
    aee2:	429e      	cmp	r6, r3
    aee4:	d8fa      	bhi.n	aedc <spi_cmd_complete+0x160>
	spi.pu8InBuf = bin;
    aee6:	ab0e      	add	r3, sp, #56	; 0x38
    aee8:	9302      	str	r3, [sp, #8]
	spi.pu8OutBuf = bout;
    aeea:	ab06      	add	r3, sp, #24
    aeec:	9303      	str	r3, [sp, #12]
	spi.u16Sz = sz;
    aeee:	ab02      	add	r3, sp, #8
    aef0:	811e      	strh	r6, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
    aef2:	0019      	movs	r1, r3
    aef4:	2003      	movs	r0, #3
    aef6:	4b7a      	ldr	r3, [pc, #488]	; (b0e0 <spi_cmd_complete+0x364>)
    aef8:	4798      	blx	r3
	}
	rix = len;

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
    aefa:	2800      	cmp	r0, #0
    aefc:	d138      	bne.n	af70 <spi_cmd_complete+0x1f4>
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    aefe:	2dcf      	cmp	r5, #207	; 0xcf
    af00:	d004      	beq.n	af0c <spi_cmd_complete+0x190>
    af02:	002b      	movs	r3, r5
    af04:	333b      	adds	r3, #59	; 0x3b
    af06:	b2db      	uxtb	r3, r3
    af08:	2b01      	cmp	r3, #1
    af0a:	d801      	bhi.n	af10 <spi_cmd_complete+0x194>
		(cmd == CMD_TERMINATE) ||
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
    af0c:	3701      	adds	r7, #1
    af0e:	b2ff      	uxtb	r7, r7
	}

	rsp = rb[rix++];
    af10:	ab06      	add	r3, sp, #24
    af12:	5ddb      	ldrb	r3, [r3, r7]
    af14:	220f      	movs	r2, #15
    af16:	a902      	add	r1, sp, #8
    af18:	468c      	mov	ip, r1
    af1a:	4462      	add	r2, ip
    af1c:	7013      	strb	r3, [r2, #0]


	if (rsp != cmd) {
    af1e:	429d      	cmp	r5, r3
    af20:	d132      	bne.n	af88 <spi_cmd_complete+0x20c>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
    af22:	1cbc      	adds	r4, r7, #2
    af24:	b2e4      	uxtb	r4, r4
	rsp = rb[rix++];
    af26:	1c7b      	adds	r3, r7, #1
	rsp = rb[rix++];
    af28:	b2db      	uxtb	r3, r3
    af2a:	aa06      	add	r2, sp, #24
    af2c:	5cd0      	ldrb	r0, [r2, r3]
    af2e:	230f      	movs	r3, #15
    af30:	aa02      	add	r2, sp, #8
    af32:	4694      	mov	ip, r2
    af34:	4463      	add	r3, ip
    af36:	7018      	strb	r0, [r3, #0]
	if (rsp != 0x00) {
    af38:	2800      	cmp	r0, #0
    af3a:	d13c      	bne.n	afb6 <spi_cmd_complete+0x23a>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
		result = N_FAIL;
		return result;
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
    af3c:	002b      	movs	r3, r5
    af3e:	333c      	adds	r3, #60	; 0x3c
    af40:	22fb      	movs	r2, #251	; 0xfb
    af42:	4213      	tst	r3, r2
    af44:	d047      	beq.n	afd6 <spi_cmd_complete+0x25a>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
    af46:	2308      	movs	r3, #8
    af48:	002a      	movs	r2, r5
    af4a:	439a      	bics	r2, r3
    af4c:	2ac2      	cmp	r2, #194	; 0xc2
    af4e:	d042      	beq.n	afd6 <spi_cmd_complete+0x25a>
    af50:	2001      	movs	r0, #1
    af52:	e029      	b.n	afa8 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
    af54:	22f7      	movs	r2, #247	; 0xf7
    af56:	0052      	lsls	r2, r2, #1
    af58:	4962      	ldr	r1, [pc, #392]	; (b0e4 <spi_cmd_complete+0x368>)
    af5a:	4863      	ldr	r0, [pc, #396]	; (b0e8 <spi_cmd_complete+0x36c>)
    af5c:	4c63      	ldr	r4, [pc, #396]	; (b0ec <spi_cmd_complete+0x370>)
    af5e:	47a0      	blx	r4
    af60:	2220      	movs	r2, #32
    af62:	0031      	movs	r1, r6
    af64:	4862      	ldr	r0, [pc, #392]	; (b0f0 <spi_cmd_complete+0x374>)
    af66:	47a0      	blx	r4
    af68:	4862      	ldr	r0, [pc, #392]	; (b0f4 <spi_cmd_complete+0x378>)
    af6a:	47a0      	blx	r4
		return result;
    af6c:	2000      	movs	r0, #0
    af6e:	e01b      	b.n	afa8 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    af70:	22fa      	movs	r2, #250	; 0xfa
    af72:	32ff      	adds	r2, #255	; 0xff
    af74:	495b      	ldr	r1, [pc, #364]	; (b0e4 <spi_cmd_complete+0x368>)
    af76:	485c      	ldr	r0, [pc, #368]	; (b0e8 <spi_cmd_complete+0x36c>)
    af78:	4c5c      	ldr	r4, [pc, #368]	; (b0ec <spi_cmd_complete+0x370>)
    af7a:	47a0      	blx	r4
    af7c:	485e      	ldr	r0, [pc, #376]	; (b0f8 <spi_cmd_complete+0x37c>)
    af7e:	47a0      	blx	r4
    af80:	485c      	ldr	r0, [pc, #368]	; (b0f4 <spi_cmd_complete+0x378>)
    af82:	47a0      	blx	r4
		return result;
    af84:	2000      	movs	r0, #0
    af86:	e00f      	b.n	afa8 <spi_cmd_complete+0x22c>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
    af88:	4a5c      	ldr	r2, [pc, #368]	; (b0fc <spi_cmd_complete+0x380>)
    af8a:	4956      	ldr	r1, [pc, #344]	; (b0e4 <spi_cmd_complete+0x368>)
    af8c:	4856      	ldr	r0, [pc, #344]	; (b0e8 <spi_cmd_complete+0x36c>)
    af8e:	4c57      	ldr	r4, [pc, #348]	; (b0ec <spi_cmd_complete+0x370>)
    af90:	47a0      	blx	r4
    af92:	230f      	movs	r3, #15
    af94:	aa02      	add	r2, sp, #8
    af96:	4694      	mov	ip, r2
    af98:	4463      	add	r3, ip
    af9a:	781a      	ldrb	r2, [r3, #0]
    af9c:	0029      	movs	r1, r5
    af9e:	4858      	ldr	r0, [pc, #352]	; (b100 <spi_cmd_complete+0x384>)
    afa0:	47a0      	blx	r4
    afa2:	4854      	ldr	r0, [pc, #336]	; (b0f4 <spi_cmd_complete+0x378>)
    afa4:	47a0      	blx	r4
		return result;
    afa6:	2000      	movs	r0, #0
				}
			}
	}
_error_:
	return result;
}
    afa8:	b017      	add	sp, #92	; 0x5c
    afaa:	bc3c      	pop	{r2, r3, r4, r5}
    afac:	4690      	mov	r8, r2
    afae:	4699      	mov	r9, r3
    afb0:	46a2      	mov	sl, r4
    afb2:	46ab      	mov	fp, r5
    afb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
    afb6:	4a53      	ldr	r2, [pc, #332]	; (b104 <spi_cmd_complete+0x388>)
    afb8:	494a      	ldr	r1, [pc, #296]	; (b0e4 <spi_cmd_complete+0x368>)
    afba:	484b      	ldr	r0, [pc, #300]	; (b0e8 <spi_cmd_complete+0x36c>)
    afbc:	4c4b      	ldr	r4, [pc, #300]	; (b0ec <spi_cmd_complete+0x370>)
    afbe:	47a0      	blx	r4
    afc0:	230f      	movs	r3, #15
    afc2:	aa02      	add	r2, sp, #8
    afc4:	4694      	mov	ip, r2
    afc6:	4463      	add	r3, ip
    afc8:	7819      	ldrb	r1, [r3, #0]
    afca:	484f      	ldr	r0, [pc, #316]	; (b108 <spi_cmd_complete+0x38c>)
    afcc:	47a0      	blx	r4
    afce:	4849      	ldr	r0, [pc, #292]	; (b0f4 <spi_cmd_complete+0x378>)
    afd0:	47a0      	blx	r4
		return result;
    afd2:	2000      	movs	r0, #0
    afd4:	e7e8      	b.n	afa8 <spi_cmd_complete+0x22c>
    afd6:	370d      	adds	r7, #13
    afd8:	b2fb      	uxtb	r3, r7
    afda:	469a      	mov	sl, r3
	for(wix = len; wix< len2; wix++) {
    afdc:	2200      	movs	r2, #0
    afde:	270a      	movs	r7, #10
					rsp = rb[rix++];
    afe0:	a906      	add	r1, sp, #24
    afe2:	e000      	b.n	afe6 <spi_cmd_complete+0x26a>
    afe4:	001c      	movs	r4, r3
				if(rix < len2) { 
    afe6:	42a6      	cmp	r6, r4
    afe8:	d956      	bls.n	b098 <spi_cmd_complete+0x31c>
					rsp = rb[rix++];
    afea:	1c63      	adds	r3, r4, #1
    afec:	b2db      	uxtb	r3, r3
    afee:	5d08      	ldrb	r0, [r1, r4]
				if (((rsp >> 4) & 0xf) == 0xf)
    aff0:	0902      	lsrs	r2, r0, #4
    aff2:	2a0f      	cmp	r2, #15
    aff4:	d06a      	beq.n	b0cc <spi_cmd_complete+0x350>
			} while (retry--);
    aff6:	3f01      	subs	r7, #1
    aff8:	2201      	movs	r2, #1
    affa:	4553      	cmp	r3, sl
    affc:	d1f2      	bne.n	afe4 <spi_cmd_complete+0x268>
    affe:	320e      	adds	r2, #14
    b000:	a902      	add	r1, sp, #8
    b002:	468c      	mov	ip, r1
    b004:	4462      	add	r2, ip
    b006:	7010      	strb	r0, [r2, #0]
			if (retry <= 0) {
    b008:	2f00      	cmp	r7, #0
    b00a:	dd47      	ble.n	b09c <spi_cmd_complete+0x320>
			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
    b00c:	2dc4      	cmp	r5, #196	; 0xc4
    b00e:	d100      	bne.n	b012 <spi_cmd_complete+0x296>
    b010:	e080      	b.n	b114 <spi_cmd_complete+0x398>
    b012:	2dca      	cmp	r5, #202	; 0xca
    b014:	d100      	bne.n	b018 <spi_cmd_complete+0x29c>
    b016:	e07d      	b.n	b114 <spi_cmd_complete+0x398>
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
    b018:	2dc2      	cmp	r5, #194	; 0xc2
    b01a:	d002      	beq.n	b022 <spi_cmd_complete+0x2a6>
    b01c:	2001      	movs	r0, #1
    b01e:	2dc8      	cmp	r5, #200	; 0xc8
    b020:	d1c2      	bne.n	afa8 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
    b022:	429e      	cmp	r6, r3
    b024:	d800      	bhi.n	b028 <spi_cmd_complete+0x2ac>
    b026:	e0ac      	b.n	b182 <spi_cmd_complete+0x406>
    b028:	9a00      	ldr	r2, [sp, #0]
    b02a:	2a00      	cmp	r2, #0
    b02c:	d100      	bne.n	b030 <spi_cmd_complete+0x2b4>
    b02e:	e11b      	b.n	b268 <spi_cmd_complete+0x4ec>
    b030:	4442      	add	r2, r8
    b032:	0014      	movs	r4, r2
    b034:	4640      	mov	r0, r8
    b036:	2701      	movs	r7, #1
    b038:	1a3f      	subs	r7, r7, r0
					b[ix++] = rb[rix++];				
    b03a:	a906      	add	r1, sp, #24
    b03c:	183d      	adds	r5, r7, r0
    b03e:	1c5a      	adds	r2, r3, #1
    b040:	b2d2      	uxtb	r2, r2
    b042:	5ccb      	ldrb	r3, [r1, r3]
    b044:	7003      	strb	r3, [r0, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
    b046:	4296      	cmp	r6, r2
    b048:	d903      	bls.n	b052 <spi_cmd_complete+0x2d6>
    b04a:	3001      	adds	r0, #1
					b[ix++] = rb[rix++];				
    b04c:	0013      	movs	r3, r2
				for(ix=0; (rix < len2) && (ix < sz);) {
    b04e:	42a0      	cmp	r0, r4
    b050:	d1f4      	bne.n	b03c <spi_cmd_complete+0x2c0>
				sz -= ix;
    b052:	002b      	movs	r3, r5
    b054:	9a00      	ldr	r2, [sp, #0]
    b056:	1b54      	subs	r4, r2, r5
    b058:	2001      	movs	r0, #1
				if(sz > 0) {
    b05a:	2c00      	cmp	r4, #0
    b05c:	d0a4      	beq.n	afa8 <spi_cmd_complete+0x22c>
					if (sz <= (DATA_PKT_SZ-ix)) {
    b05e:	2680      	movs	r6, #128	; 0x80
    b060:	01b6      	lsls	r6, r6, #6
    b062:	1b76      	subs	r6, r6, r5
    b064:	42b4      	cmp	r4, r6
    b066:	d800      	bhi.n	b06a <spi_cmd_complete+0x2ee>
						nbytes = sz;
    b068:	0026      	movs	r6, r4
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
    b06a:	b2b1      	uxth	r1, r6
    b06c:	4443      	add	r3, r8
    b06e:	0018      	movs	r0, r3
    b070:	4b26      	ldr	r3, [pc, #152]	; (b10c <spi_cmd_complete+0x390>)
    b072:	4798      	blx	r3
    b074:	2800      	cmp	r0, #0
    b076:	d000      	beq.n	b07a <spi_cmd_complete+0x2fe>
    b078:	e085      	b.n	b186 <spi_cmd_complete+0x40a>
					if (!gu8Crc_off) {
    b07a:	4b18      	ldr	r3, [pc, #96]	; (b0dc <spi_cmd_complete+0x360>)
    b07c:	781b      	ldrb	r3, [r3, #0]
    b07e:	2b00      	cmp	r3, #0
    b080:	d100      	bne.n	b084 <spi_cmd_complete+0x308>
    b082:	e08b      	b.n	b19c <spi_cmd_complete+0x420>
					ix += nbytes;
    b084:	46aa      	mov	sl, r5
    b086:	44b2      	add	sl, r6
					sz -= nbytes;
    b088:	1ba6      	subs	r6, r4, r6
				while(sz > 0) {
    b08a:	2001      	movs	r0, #1
    b08c:	2e00      	cmp	r6, #0
    b08e:	d100      	bne.n	b092 <spi_cmd_complete+0x316>
    b090:	e78a      	b.n	afa8 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
    b092:	4f1e      	ldr	r7, [pc, #120]	; (b10c <spi_cmd_complete+0x390>)
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
    b094:	46bb      	mov	fp, r7
    b096:	e0b5      	b.n	b204 <spi_cmd_complete+0x488>
    b098:	2a00      	cmp	r2, #0
    b09a:	d111      	bne.n	b0c0 <spi_cmd_complete+0x344>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
    b09c:	2295      	movs	r2, #149	; 0x95
    b09e:	0092      	lsls	r2, r2, #2
    b0a0:	4910      	ldr	r1, [pc, #64]	; (b0e4 <spi_cmd_complete+0x368>)
    b0a2:	4811      	ldr	r0, [pc, #68]	; (b0e8 <spi_cmd_complete+0x36c>)
    b0a4:	4c11      	ldr	r4, [pc, #68]	; (b0ec <spi_cmd_complete+0x370>)
    b0a6:	47a0      	blx	r4
    b0a8:	230f      	movs	r3, #15
    b0aa:	aa02      	add	r2, sp, #8
    b0ac:	4694      	mov	ip, r2
    b0ae:	4463      	add	r3, ip
    b0b0:	7819      	ldrb	r1, [r3, #0]
    b0b2:	4817      	ldr	r0, [pc, #92]	; (b110 <spi_cmd_complete+0x394>)
    b0b4:	47a0      	blx	r4
    b0b6:	480f      	ldr	r0, [pc, #60]	; (b0f4 <spi_cmd_complete+0x378>)
    b0b8:	47a0      	blx	r4
				return result;
    b0ba:	2001      	movs	r0, #1
    b0bc:	4240      	negs	r0, r0
    b0be:	e773      	b.n	afa8 <spi_cmd_complete+0x22c>
    b0c0:	230f      	movs	r3, #15
    b0c2:	aa02      	add	r2, sp, #8
    b0c4:	4694      	mov	ip, r2
    b0c6:	4463      	add	r3, ip
    b0c8:	7018      	strb	r0, [r3, #0]
    b0ca:	e7e7      	b.n	b09c <spi_cmd_complete+0x320>
    b0cc:	a902      	add	r1, sp, #8
    b0ce:	468c      	mov	ip, r1
    b0d0:	4462      	add	r2, ip
    b0d2:	7010      	strb	r0, [r2, #0]
    b0d4:	e798      	b.n	b008 <spi_cmd_complete+0x28c>
    b0d6:	46c0      	nop			; (mov r8, r8)
    b0d8:	00018310 	.word	0x00018310
    b0dc:	20003ed0 	.word	0x20003ed0
    b0e0:	00009255 	.word	0x00009255
    b0e4:	00018374 	.word	0x00018374
    b0e8:	00017c34 	.word	0x00017c34
    b0ec:	00007fed 	.word	0x00007fed
    b0f0:	00018780 	.word	0x00018780
    b0f4:	00017c5c 	.word	0x00017c5c
    b0f8:	00018754 	.word	0x00018754
    b0fc:	0000022f 	.word	0x0000022f
    b100:	000187b0 	.word	0x000187b0
    b104:	00000239 	.word	0x00000239
    b108:	000187ec 	.word	0x000187ec
    b10c:	0000ac95 	.word	0x0000ac95
    b110:	00018820 	.word	0x00018820
				if((rix+3) < len2) { 
    b114:	1cda      	adds	r2, r3, #3
    b116:	4296      	cmp	r6, r2
    b118:	d928      	bls.n	b16c <spi_cmd_complete+0x3f0>
					b[0] = rb[rix++];
    b11a:	aa06      	add	r2, sp, #24
    b11c:	5cd3      	ldrb	r3, [r2, r3]
    b11e:	4641      	mov	r1, r8
    b120:	700b      	strb	r3, [r1, #0]
    b122:	1ca3      	adds	r3, r4, #2
					b[1] = rb[rix++];
    b124:	b2db      	uxtb	r3, r3
    b126:	5cd3      	ldrb	r3, [r2, r3]
    b128:	704b      	strb	r3, [r1, #1]
    b12a:	1ce3      	adds	r3, r4, #3
					b[2] = rb[rix++];
    b12c:	b2db      	uxtb	r3, r3
    b12e:	5cd3      	ldrb	r3, [r2, r3]
    b130:	708b      	strb	r3, [r1, #2]
    b132:	1d23      	adds	r3, r4, #4
					b[3] = rb[rix++];
    b134:	b2db      	uxtb	r3, r3
    b136:	5cd3      	ldrb	r3, [r2, r3]
    b138:	70cb      	strb	r3, [r1, #3]
				if (!gu8Crc_off) {						
    b13a:	4b63      	ldr	r3, [pc, #396]	; (b2c8 <spi_cmd_complete+0x54c>)
    b13c:	781b      	ldrb	r3, [r3, #0]
    b13e:	2001      	movs	r0, #1
    b140:	2b00      	cmp	r3, #0
    b142:	d000      	beq.n	b146 <spi_cmd_complete+0x3ca>
    b144:	e730      	b.n	afa8 <spi_cmd_complete+0x22c>
					b[3] = rb[rix++];
    b146:	1d63      	adds	r3, r4, #5
					if((rix+1) < len2) { 
    b148:	b2db      	uxtb	r3, r3
    b14a:	3301      	adds	r3, #1
    b14c:	2001      	movs	r0, #1
    b14e:	429e      	cmp	r6, r3
    b150:	d900      	bls.n	b154 <spi_cmd_complete+0x3d8>
    b152:	e729      	b.n	afa8 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
    b154:	229c      	movs	r2, #156	; 0x9c
    b156:	0092      	lsls	r2, r2, #2
    b158:	495c      	ldr	r1, [pc, #368]	; (b2cc <spi_cmd_complete+0x550>)
    b15a:	485d      	ldr	r0, [pc, #372]	; (b2d0 <spi_cmd_complete+0x554>)
    b15c:	4c5d      	ldr	r4, [pc, #372]	; (b2d4 <spi_cmd_complete+0x558>)
    b15e:	47a0      	blx	r4
    b160:	485d      	ldr	r0, [pc, #372]	; (b2d8 <spi_cmd_complete+0x55c>)
    b162:	47a0      	blx	r4
    b164:	485d      	ldr	r0, [pc, #372]	; (b2dc <spi_cmd_complete+0x560>)
    b166:	47a0      	blx	r4
						return result;
    b168:	2000      	movs	r0, #0
    b16a:	e71d      	b.n	afa8 <spi_cmd_complete+0x22c>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
    b16c:	4a5c      	ldr	r2, [pc, #368]	; (b2e0 <spi_cmd_complete+0x564>)
    b16e:	4957      	ldr	r1, [pc, #348]	; (b2cc <spi_cmd_complete+0x550>)
    b170:	4857      	ldr	r0, [pc, #348]	; (b2d0 <spi_cmd_complete+0x554>)
    b172:	4c58      	ldr	r4, [pc, #352]	; (b2d4 <spi_cmd_complete+0x558>)
    b174:	47a0      	blx	r4
    b176:	485b      	ldr	r0, [pc, #364]	; (b2e4 <spi_cmd_complete+0x568>)
    b178:	47a0      	blx	r4
    b17a:	4858      	ldr	r0, [pc, #352]	; (b2dc <spi_cmd_complete+0x560>)
    b17c:	47a0      	blx	r4
					return result;
    b17e:	2000      	movs	r0, #0
    b180:	e712      	b.n	afa8 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
    b182:	2500      	movs	r5, #0
    b184:	e765      	b.n	b052 <spi_cmd_complete+0x2d6>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    b186:	4a58      	ldr	r2, [pc, #352]	; (b2e8 <spi_cmd_complete+0x56c>)
    b188:	4950      	ldr	r1, [pc, #320]	; (b2cc <spi_cmd_complete+0x550>)
    b18a:	4851      	ldr	r0, [pc, #324]	; (b2d0 <spi_cmd_complete+0x554>)
    b18c:	4c51      	ldr	r4, [pc, #324]	; (b2d4 <spi_cmd_complete+0x558>)
    b18e:	47a0      	blx	r4
    b190:	4856      	ldr	r0, [pc, #344]	; (b2ec <spi_cmd_complete+0x570>)
    b192:	47a0      	blx	r4
    b194:	4851      	ldr	r0, [pc, #324]	; (b2dc <spi_cmd_complete+0x560>)
    b196:	47a0      	blx	r4
						goto _error_;
    b198:	2000      	movs	r0, #0
    b19a:	e705      	b.n	afa8 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
    b19c:	2102      	movs	r1, #2
    b19e:	a802      	add	r0, sp, #8
    b1a0:	4b53      	ldr	r3, [pc, #332]	; (b2f0 <spi_cmd_complete+0x574>)
    b1a2:	4798      	blx	r3
    b1a4:	2800      	cmp	r0, #0
    b1a6:	d100      	bne.n	b1aa <spi_cmd_complete+0x42e>
    b1a8:	e76c      	b.n	b084 <spi_cmd_complete+0x308>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    b1aa:	22a6      	movs	r2, #166	; 0xa6
    b1ac:	0092      	lsls	r2, r2, #2
    b1ae:	4947      	ldr	r1, [pc, #284]	; (b2cc <spi_cmd_complete+0x550>)
    b1b0:	4847      	ldr	r0, [pc, #284]	; (b2d0 <spi_cmd_complete+0x554>)
    b1b2:	4c48      	ldr	r4, [pc, #288]	; (b2d4 <spi_cmd_complete+0x558>)
    b1b4:	47a0      	blx	r4
    b1b6:	484f      	ldr	r0, [pc, #316]	; (b2f4 <spi_cmd_complete+0x578>)
    b1b8:	47a0      	blx	r4
    b1ba:	4848      	ldr	r0, [pc, #288]	; (b2dc <spi_cmd_complete+0x560>)
    b1bc:	47a0      	blx	r4
							goto _error_;
    b1be:	e7eb      	b.n	b198 <spi_cmd_complete+0x41c>
    b1c0:	9b00      	ldr	r3, [sp, #0]
    b1c2:	4699      	mov	r9, r3
				for(ix=0; (rix < len2) && (ix < sz);) {
    b1c4:	240b      	movs	r4, #11
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
    b1c6:	250f      	movs	r5, #15
    b1c8:	ab02      	add	r3, sp, #8
    b1ca:	469c      	mov	ip, r3
    b1cc:	4465      	add	r5, ip
    b1ce:	2101      	movs	r1, #1
    b1d0:	0028      	movs	r0, r5
    b1d2:	47b8      	blx	r7
    b1d4:	2800      	cmp	r0, #0
    b1d6:	d11c      	bne.n	b212 <spi_cmd_complete+0x496>
						if (((rsp >> 4) & 0xf) == 0xf)
    b1d8:	782b      	ldrb	r3, [r5, #0]
    b1da:	091b      	lsrs	r3, r3, #4
    b1dc:	2b0f      	cmp	r3, #15
    b1de:	d002      	beq.n	b1e6 <spi_cmd_complete+0x46a>
    b1e0:	3c01      	subs	r4, #1
					} while (retry--);
    b1e2:	2c00      	cmp	r4, #0
    b1e4:	d1f3      	bne.n	b1ce <spi_cmd_complete+0x452>
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
    b1e6:	466b      	mov	r3, sp
    b1e8:	8819      	ldrh	r1, [r3, #0]
    b1ea:	4640      	mov	r0, r8
    b1ec:	4450      	add	r0, sl
    b1ee:	47d8      	blx	fp
    b1f0:	2800      	cmp	r0, #0
    b1f2:	d11a      	bne.n	b22a <spi_cmd_complete+0x4ae>
					if (!gu8Crc_off) {
    b1f4:	4b34      	ldr	r3, [pc, #208]	; (b2c8 <spi_cmd_complete+0x54c>)
    b1f6:	781b      	ldrb	r3, [r3, #0]
    b1f8:	2b00      	cmp	r3, #0
    b1fa:	d022      	beq.n	b242 <spi_cmd_complete+0x4c6>
					ix += nbytes;
    b1fc:	44ca      	add	sl, r9
					sz -= nbytes;
    b1fe:	9b00      	ldr	r3, [sp, #0]
    b200:	1af6      	subs	r6, r6, r3
				while(sz > 0) {
    b202:	d02f      	beq.n	b264 <spi_cmd_complete+0x4e8>
    b204:	9600      	str	r6, [sp, #0]
    b206:	2380      	movs	r3, #128	; 0x80
    b208:	019b      	lsls	r3, r3, #6
    b20a:	429e      	cmp	r6, r3
    b20c:	d9d8      	bls.n	b1c0 <spi_cmd_complete+0x444>
    b20e:	9300      	str	r3, [sp, #0]
    b210:	e7d6      	b.n	b1c0 <spi_cmd_complete+0x444>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    b212:	22ae      	movs	r2, #174	; 0xae
    b214:	0092      	lsls	r2, r2, #2
    b216:	492d      	ldr	r1, [pc, #180]	; (b2cc <spi_cmd_complete+0x550>)
    b218:	482d      	ldr	r0, [pc, #180]	; (b2d0 <spi_cmd_complete+0x554>)
    b21a:	4c2e      	ldr	r4, [pc, #184]	; (b2d4 <spi_cmd_complete+0x558>)
    b21c:	47a0      	blx	r4
    b21e:	4836      	ldr	r0, [pc, #216]	; (b2f8 <spi_cmd_complete+0x57c>)
    b220:	47a0      	blx	r4
    b222:	482e      	ldr	r0, [pc, #184]	; (b2dc <spi_cmd_complete+0x560>)
    b224:	47a0      	blx	r4
    b226:	2000      	movs	r0, #0
    b228:	e6be      	b.n	afa8 <spi_cmd_complete+0x22c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    b22a:	22b2      	movs	r2, #178	; 0xb2
    b22c:	0092      	lsls	r2, r2, #2
    b22e:	4927      	ldr	r1, [pc, #156]	; (b2cc <spi_cmd_complete+0x550>)
    b230:	4827      	ldr	r0, [pc, #156]	; (b2d0 <spi_cmd_complete+0x554>)
    b232:	4c28      	ldr	r4, [pc, #160]	; (b2d4 <spi_cmd_complete+0x558>)
    b234:	47a0      	blx	r4
    b236:	482d      	ldr	r0, [pc, #180]	; (b2ec <spi_cmd_complete+0x570>)
    b238:	47a0      	blx	r4
    b23a:	4828      	ldr	r0, [pc, #160]	; (b2dc <spi_cmd_complete+0x560>)
    b23c:	47a0      	blx	r4
						result = N_FAIL;
    b23e:	2000      	movs	r0, #0
						break;
    b240:	e6b2      	b.n	afa8 <spi_cmd_complete+0x22c>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
    b242:	2102      	movs	r1, #2
    b244:	a802      	add	r0, sp, #8
    b246:	4b2a      	ldr	r3, [pc, #168]	; (b2f0 <spi_cmd_complete+0x574>)
    b248:	4798      	blx	r3
    b24a:	2800      	cmp	r0, #0
    b24c:	d0d6      	beq.n	b1fc <spi_cmd_complete+0x480>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    b24e:	4a2b      	ldr	r2, [pc, #172]	; (b2fc <spi_cmd_complete+0x580>)
    b250:	491e      	ldr	r1, [pc, #120]	; (b2cc <spi_cmd_complete+0x550>)
    b252:	481f      	ldr	r0, [pc, #124]	; (b2d0 <spi_cmd_complete+0x554>)
    b254:	4c1f      	ldr	r4, [pc, #124]	; (b2d4 <spi_cmd_complete+0x558>)
    b256:	47a0      	blx	r4
    b258:	4826      	ldr	r0, [pc, #152]	; (b2f4 <spi_cmd_complete+0x578>)
    b25a:	47a0      	blx	r4
    b25c:	481f      	ldr	r0, [pc, #124]	; (b2dc <spi_cmd_complete+0x560>)
    b25e:	47a0      	blx	r4
							result = N_FAIL;
    b260:	2000      	movs	r0, #0
							break;
    b262:	e6a1      	b.n	afa8 <spi_cmd_complete+0x22c>
    b264:	2001      	movs	r0, #1
    b266:	e69f      	b.n	afa8 <spi_cmd_complete+0x22c>
				for(ix=0; (rix < len2) && (ix < sz);) {
    b268:	2001      	movs	r0, #1
    b26a:	e69d      	b.n	afa8 <spi_cmd_complete+0x22c>
		return result;
    b26c:	2000      	movs	r0, #0
    b26e:	e69b      	b.n	afa8 <spi_cmd_complete+0x22c>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
    b270:	2301      	movs	r3, #1
    b272:	425b      	negs	r3, r3
    b274:	444b      	add	r3, r9
    b276:	469c      	mov	ip, r3
    b278:	001c      	movs	r4, r3
    b27a:	2200      	movs	r2, #0
    b27c:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    b27e:	4e20      	ldr	r6, [pc, #128]	; (b300 <spi_cmd_complete+0x584>)
		crc = crc7_byte(crc, *buffer++);
    b280:	a90e      	add	r1, sp, #56	; 0x38
	return crc7_syndrome_table[(crc << 1) ^ data];
    b282:	005b      	lsls	r3, r3, #1
    b284:	5c50      	ldrb	r0, [r2, r1]
    b286:	4043      	eors	r3, r0
    b288:	5cf3      	ldrb	r3, [r6, r3]
    b28a:	3201      	adds	r2, #1
	while (len--)
    b28c:	42a2      	cmp	r2, r4
    b28e:	d1f8      	bne.n	b282 <spi_cmd_complete+0x506>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
    b290:	005b      	lsls	r3, r3, #1
    b292:	aa0e      	add	r2, sp, #56	; 0x38
    b294:	4661      	mov	r1, ip
    b296:	5453      	strb	r3, [r2, r1]
	if ((cmd == CMD_RESET) ||
    b298:	2dcf      	cmp	r5, #207	; 0xcf
    b29a:	d100      	bne.n	b29e <spi_cmd_complete+0x522>
    b29c:	e611      	b.n	aec2 <spi_cmd_complete+0x146>
    b29e:	002b      	movs	r3, r5
    b2a0:	333b      	adds	r3, #59	; 0x3b
    b2a2:	b2db      	uxtb	r3, r3
    b2a4:	2b01      	cmp	r3, #1
    b2a6:	d800      	bhi.n	b2aa <spi_cmd_complete+0x52e>
    b2a8:	e60b      	b.n	aec2 <spi_cmd_complete+0x146>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
    b2aa:	2dc4      	cmp	r5, #196	; 0xc4
    b2ac:	d004      	beq.n	b2b8 <spi_cmd_complete+0x53c>
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
    b2ae:	464b      	mov	r3, r9
    b2b0:	1d5e      	adds	r6, r3, #5
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
    b2b2:	2dca      	cmp	r5, #202	; 0xca
    b2b4:	d000      	beq.n	b2b8 <spi_cmd_complete+0x53c>
    b2b6:	e606      	b.n	aec6 <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
    b2b8:	464e      	mov	r6, r9
    b2ba:	360a      	adds	r6, #10
		if (!gu8Crc_off) {
    b2bc:	2f00      	cmp	r7, #0
    b2be:	d000      	beq.n	b2c2 <spi_cmd_complete+0x546>
    b2c0:	e601      	b.n	aec6 <spi_cmd_complete+0x14a>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
    b2c2:	3602      	adds	r6, #2
    b2c4:	e5ff      	b.n	aec6 <spi_cmd_complete+0x14a>
    b2c6:	46c0      	nop			; (mov r8, r8)
    b2c8:	20003ed0 	.word	0x20003ed0
    b2cc:	00018374 	.word	0x00018374
    b2d0:	00017c34 	.word	0x00017c34
    b2d4:	00007fed 	.word	0x00007fed
    b2d8:	00018880 	.word	0x00018880
    b2dc:	00017c5c 	.word	0x00017c5c
    b2e0:	00000263 	.word	0x00000263
    b2e4:	00018850 	.word	0x00018850
    b2e8:	0000028e 	.word	0x0000028e
    b2ec:	000188b0 	.word	0x000188b0
    b2f0:	0000ac95 	.word	0x0000ac95
    b2f4:	000188e4 	.word	0x000188e4
    b2f8:	0001891c 	.word	0x0001891c
    b2fc:	000002d2 	.word	0x000002d2
    b300:	000183e0 	.word	0x000183e0

0000b304 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    b304:	b5f0      	push	{r4, r5, r6, r7, lr}
    b306:	46de      	mov	lr, fp
    b308:	4657      	mov	r7, sl
    b30a:	464e      	mov	r6, r9
    b30c:	4645      	mov	r5, r8
    b30e:	b5e0      	push	{r5, r6, r7, lr}
    b310:	b087      	sub	sp, #28
    b312:	9003      	str	r0, [sp, #12]
    b314:	9105      	str	r1, [sp, #20]
    b316:	2830      	cmp	r0, #48	; 0x30
    b318:	d80e      	bhi.n	b338 <spi_write_reg+0x34>
    b31a:	4b27      	ldr	r3, [pc, #156]	; (b3b8 <spi_write_reg+0xb4>)
    b31c:	781b      	ldrb	r3, [r3, #0]
    b31e:	b2db      	uxtb	r3, r3
    b320:	9304      	str	r3, [sp, #16]
    b322:	2300      	movs	r3, #0
    b324:	2230      	movs	r2, #48	; 0x30
    b326:	9903      	ldr	r1, [sp, #12]
    b328:	428a      	cmp	r2, r1
    b32a:	415b      	adcs	r3, r3
    b32c:	b2db      	uxtb	r3, r3
    b32e:	469a      	mov	sl, r3
    b330:	260a      	movs	r6, #10
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
    b332:	4b22      	ldr	r3, [pc, #136]	; (b3bc <spi_write_reg+0xb8>)
    b334:	469b      	mov	fp, r3
    b336:	e02b      	b.n	b390 <spi_write_reg+0x8c>
    b338:	4b21      	ldr	r3, [pc, #132]	; (b3c0 <spi_write_reg+0xbc>)
    b33a:	781b      	ldrb	r3, [r3, #0]
    b33c:	e7ef      	b.n	b31e <spi_write_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
    b33e:	4a21      	ldr	r2, [pc, #132]	; (b3c4 <spi_write_reg+0xc0>)
    b340:	4921      	ldr	r1, [pc, #132]	; (b3c8 <spi_write_reg+0xc4>)
    b342:	4822      	ldr	r0, [pc, #136]	; (b3cc <spi_write_reg+0xc8>)
    b344:	4c22      	ldr	r4, [pc, #136]	; (b3d0 <spi_write_reg+0xcc>)
    b346:	47a0      	blx	r4
    b348:	9703      	str	r7, [sp, #12]
    b34a:	0039      	movs	r1, r7
    b34c:	4821      	ldr	r0, [pc, #132]	; (b3d4 <spi_write_reg+0xd0>)
    b34e:	47a0      	blx	r4
    b350:	4821      	ldr	r0, [pc, #132]	; (b3d8 <spi_write_reg+0xd4>)
    b352:	47a0      	blx	r4

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    b354:	2001      	movs	r0, #1
    b356:	4f21      	ldr	r7, [pc, #132]	; (b3dc <spi_write_reg+0xd8>)
    b358:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b35a:	2300      	movs	r3, #0
    b35c:	9300      	str	r3, [sp, #0]
    b35e:	2200      	movs	r2, #0
    b360:	2100      	movs	r1, #0
    b362:	20cf      	movs	r0, #207	; 0xcf
    b364:	4d1e      	ldr	r5, [pc, #120]	; (b3e0 <spi_write_reg+0xdc>)
    b366:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    b368:	20cf      	movs	r0, #207	; 0xcf
    b36a:	4b1e      	ldr	r3, [pc, #120]	; (b3e4 <spi_write_reg+0xe0>)
    b36c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    b36e:	22ea      	movs	r2, #234	; 0xea
    b370:	0092      	lsls	r2, r2, #2
    b372:	4915      	ldr	r1, [pc, #84]	; (b3c8 <spi_write_reg+0xc4>)
    b374:	4815      	ldr	r0, [pc, #84]	; (b3cc <spi_write_reg+0xc8>)
    b376:	47a0      	blx	r4
    b378:	9b05      	ldr	r3, [sp, #20]
    b37a:	9a03      	ldr	r2, [sp, #12]
    b37c:	0031      	movs	r1, r6
    b37e:	481a      	ldr	r0, [pc, #104]	; (b3e8 <spi_write_reg+0xe4>)
    b380:	47a0      	blx	r4
    b382:	4815      	ldr	r0, [pc, #84]	; (b3d8 <spi_write_reg+0xd4>)
    b384:	47a0      	blx	r4
		nm_bsp_sleep(1);
    b386:	2001      	movs	r0, #1
    b388:	47b8      	blx	r7
    b38a:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
    b38c:	2e00      	cmp	r6, #0
    b38e:	d00b      	beq.n	b3a8 <spi_write_reg+0xa4>
	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
    b390:	4653      	mov	r3, sl
    b392:	9300      	str	r3, [sp, #0]
    b394:	2304      	movs	r3, #4
    b396:	aa05      	add	r2, sp, #20
    b398:	9f03      	ldr	r7, [sp, #12]
    b39a:	0039      	movs	r1, r7
    b39c:	9804      	ldr	r0, [sp, #16]
    b39e:	47d8      	blx	fp
    b3a0:	b243      	sxtb	r3, r0
    b3a2:	4698      	mov	r8, r3
	if (result != N_OK) {
    b3a4:	2b01      	cmp	r3, #1
    b3a6:	d1ca      	bne.n	b33e <spi_write_reg+0x3a>
	}

	return result;
}
    b3a8:	4640      	mov	r0, r8
    b3aa:	b007      	add	sp, #28
    b3ac:	bc3c      	pop	{r2, r3, r4, r5}
    b3ae:	4690      	mov	r8, r2
    b3b0:	4699      	mov	r9, r3
    b3b2:	46a2      	mov	sl, r4
    b3b4:	46ab      	mov	fp, r5
    b3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b3b8:	0001834c 	.word	0x0001834c
    b3bc:	0000ad7d 	.word	0x0000ad7d
    b3c0:	0001834d 	.word	0x0001834d
    b3c4:	0000039d 	.word	0x0000039d
    b3c8:	00018398 	.word	0x00018398
    b3cc:	00017c34 	.word	0x00017c34
    b3d0:	00007fed 	.word	0x00007fed
    b3d4:	000189c8 	.word	0x000189c8
    b3d8:	00017c5c 	.word	0x00017c5c
    b3dc:	00009095 	.word	0x00009095
    b3e0:	0000ab1d 	.word	0x0000ab1d
    b3e4:	0000acb5 	.word	0x0000acb5
    b3e8:	000189f4 	.word	0x000189f4

0000b3ec <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    b3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3ee:	46de      	mov	lr, fp
    b3f0:	4657      	mov	r7, sl
    b3f2:	464e      	mov	r6, r9
    b3f4:	4645      	mov	r5, r8
    b3f6:	b5e0      	push	{r5, r6, r7, lr}
    b3f8:	b089      	sub	sp, #36	; 0x24
    b3fa:	9003      	str	r0, [sp, #12]
    b3fc:	468a      	mov	sl, r1
    b3fe:	28ff      	cmp	r0, #255	; 0xff
    b400:	d80e      	bhi.n	b420 <spi_read_reg+0x34>
    b402:	4b2e      	ldr	r3, [pc, #184]	; (b4bc <spi_read_reg+0xd0>)
    b404:	781b      	ldrb	r3, [r3, #0]
    b406:	b2db      	uxtb	r3, r3
    b408:	9305      	str	r3, [sp, #20]
    b40a:	2300      	movs	r3, #0
    b40c:	22ff      	movs	r2, #255	; 0xff
    b40e:	9903      	ldr	r1, [sp, #12]
    b410:	428a      	cmp	r2, r1
    b412:	415b      	adcs	r3, r3
    b414:	b2db      	uxtb	r3, r3
    b416:	4698      	mov	r8, r3
    b418:	260a      	movs	r6, #10
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
    b41a:	4b29      	ldr	r3, [pc, #164]	; (b4c0 <spi_read_reg+0xd4>)
    b41c:	469b      	mov	fp, r3
    b41e:	e029      	b.n	b474 <spi_read_reg+0x88>
    b420:	4b28      	ldr	r3, [pc, #160]	; (b4c4 <spi_read_reg+0xd8>)
    b422:	781b      	ldrb	r3, [r3, #0]
    b424:	e7ef      	b.n	b406 <spi_read_reg+0x1a>
	if (result != N_OK) {
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
    b426:	4a28      	ldr	r2, [pc, #160]	; (b4c8 <spi_read_reg+0xdc>)
    b428:	4928      	ldr	r1, [pc, #160]	; (b4cc <spi_read_reg+0xe0>)
    b42a:	4829      	ldr	r0, [pc, #164]	; (b4d0 <spi_read_reg+0xe4>)
    b42c:	4c29      	ldr	r4, [pc, #164]	; (b4d4 <spi_read_reg+0xe8>)
    b42e:	47a0      	blx	r4
    b430:	9703      	str	r7, [sp, #12]
    b432:	0039      	movs	r1, r7
    b434:	4828      	ldr	r0, [pc, #160]	; (b4d8 <spi_read_reg+0xec>)
    b436:	47a0      	blx	r4
    b438:	4828      	ldr	r0, [pc, #160]	; (b4dc <spi_read_reg+0xf0>)
    b43a:	47a0      	blx	r4
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    b43c:	2001      	movs	r0, #1
    b43e:	4f28      	ldr	r7, [pc, #160]	; (b4e0 <spi_read_reg+0xf4>)
    b440:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b442:	2300      	movs	r3, #0
    b444:	9300      	str	r3, [sp, #0]
    b446:	2200      	movs	r2, #0
    b448:	2100      	movs	r1, #0
    b44a:	20cf      	movs	r0, #207	; 0xcf
    b44c:	4d25      	ldr	r5, [pc, #148]	; (b4e4 <spi_read_reg+0xf8>)
    b44e:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    b450:	20cf      	movs	r0, #207	; 0xcf
    b452:	4b25      	ldr	r3, [pc, #148]	; (b4e8 <spi_read_reg+0xfc>)
    b454:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    b456:	4a25      	ldr	r2, [pc, #148]	; (b4ec <spi_read_reg+0x100>)
    b458:	491c      	ldr	r1, [pc, #112]	; (b4cc <spi_read_reg+0xe0>)
    b45a:	481d      	ldr	r0, [pc, #116]	; (b4d0 <spi_read_reg+0xe4>)
    b45c:	47a0      	blx	r4
    b45e:	9a03      	ldr	r2, [sp, #12]
    b460:	0031      	movs	r1, r6
    b462:	4823      	ldr	r0, [pc, #140]	; (b4f0 <spi_read_reg+0x104>)
    b464:	47a0      	blx	r4
    b466:	481d      	ldr	r0, [pc, #116]	; (b4dc <spi_read_reg+0xf0>)
    b468:	47a0      	blx	r4
		nm_bsp_sleep(1);
    b46a:	2001      	movs	r0, #1
    b46c:	47b8      	blx	r7
    b46e:	3e01      	subs	r6, #1
		retry--;
		if(retry) goto _RETRY_;
    b470:	2e00      	cmp	r6, #0
    b472:	d021      	beq.n	b4b8 <spi_read_reg+0xcc>
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
    b474:	4643      	mov	r3, r8
    b476:	9300      	str	r3, [sp, #0]
    b478:	2304      	movs	r3, #4
    b47a:	aa07      	add	r2, sp, #28
    b47c:	9f03      	ldr	r7, [sp, #12]
    b47e:	0039      	movs	r1, r7
    b480:	9805      	ldr	r0, [sp, #20]
    b482:	47d8      	blx	fp
    b484:	b243      	sxtb	r3, r0
    b486:	9304      	str	r3, [sp, #16]
	if (result != N_OK) {
    b488:	2b01      	cmp	r3, #1
    b48a:	d1cc      	bne.n	b426 <spi_read_reg+0x3a>
    b48c:	9d04      	ldr	r5, [sp, #16]
		((uint32)tmp[1] << 8) |
    b48e:	aa07      	add	r2, sp, #28
    b490:	7853      	ldrb	r3, [r2, #1]
    b492:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    b494:	7891      	ldrb	r1, [r2, #2]
    b496:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    b498:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    b49a:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    b49c:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    b49e:	78d2      	ldrb	r2, [r2, #3]
    b4a0:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    b4a2:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    b4a4:	4652      	mov	r2, sl
    b4a6:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    b4a8:	0028      	movs	r0, r5
    b4aa:	b009      	add	sp, #36	; 0x24
    b4ac:	bc3c      	pop	{r2, r3, r4, r5}
    b4ae:	4690      	mov	r8, r2
    b4b0:	4699      	mov	r9, r3
    b4b2:	46a2      	mov	sl, r4
    b4b4:	46ab      	mov	fp, r5
    b4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b4b8:	9d04      	ldr	r5, [sp, #16]
    b4ba:	e7f5      	b.n	b4a8 <spi_read_reg+0xbc>
    b4bc:	0001834e 	.word	0x0001834e
    b4c0:	0000ad7d 	.word	0x0000ad7d
    b4c4:	0001834f 	.word	0x0001834f
    b4c8:	00000423 	.word	0x00000423
    b4cc:	000183b8 	.word	0x000183b8
    b4d0:	00017c34 	.word	0x00017c34
    b4d4:	00007fed 	.word	0x00007fed
    b4d8:	00018984 	.word	0x00018984
    b4dc:	00017c5c 	.word	0x00017c5c
    b4e0:	00009095 	.word	0x00009095
    b4e4:	0000ab1d 	.word	0x0000ab1d
    b4e8:	0000acb5 	.word	0x0000acb5
    b4ec:	00000435 	.word	0x00000435
    b4f0:	000189b0 	.word	0x000189b0

0000b4f4 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    b4f4:	b510      	push	{r4, lr}
    b4f6:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b4f8:	2300      	movs	r3, #0
    b4fa:	9300      	str	r3, [sp, #0]
    b4fc:	2200      	movs	r2, #0
    b4fe:	2100      	movs	r1, #0
    b500:	20cf      	movs	r0, #207	; 0xcf
    b502:	4c04      	ldr	r4, [pc, #16]	; (b514 <nm_spi_reset+0x20>)
    b504:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    b506:	20cf      	movs	r0, #207	; 0xcf
    b508:	4b03      	ldr	r3, [pc, #12]	; (b518 <nm_spi_reset+0x24>)
    b50a:	4798      	blx	r3
	return M2M_SUCCESS;
}
    b50c:	2000      	movs	r0, #0
    b50e:	b002      	add	sp, #8
    b510:	bd10      	pop	{r4, pc}
    b512:	46c0      	nop			; (mov r8, r8)
    b514:	0000ab1d 	.word	0x0000ab1d
    b518:	0000acb5 	.word	0x0000acb5

0000b51c <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    b51c:	2200      	movs	r2, #0
    b51e:	4b02      	ldr	r3, [pc, #8]	; (b528 <nm_spi_deinit+0xc>)
    b520:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    b522:	2000      	movs	r0, #0
    b524:	4770      	bx	lr
    b526:	46c0      	nop			; (mov r8, r8)
    b528:	20003ed0 	.word	0x20003ed0

0000b52c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    b52c:	b500      	push	{lr}
    b52e:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    b530:	a901      	add	r1, sp, #4
    b532:	4b02      	ldr	r3, [pc, #8]	; (b53c <nm_spi_read_reg+0x10>)
    b534:	4798      	blx	r3

	return u32Val;
}
    b536:	9801      	ldr	r0, [sp, #4]
    b538:	b003      	add	sp, #12
    b53a:	bd00      	pop	{pc}
    b53c:	0000b3ed 	.word	0x0000b3ed

0000b540 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    b540:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    b542:	4b04      	ldr	r3, [pc, #16]	; (b554 <nm_spi_read_reg_with_ret+0x14>)
    b544:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    b546:	2300      	movs	r3, #0
    b548:	2801      	cmp	r0, #1
    b54a:	d101      	bne.n	b550 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    b54c:	0018      	movs	r0, r3
    b54e:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    b550:	3b06      	subs	r3, #6
    b552:	e7fb      	b.n	b54c <nm_spi_read_reg_with_ret+0xc>
    b554:	0000b3ed 	.word	0x0000b3ed

0000b558 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    b558:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    b55a:	4b04      	ldr	r3, [pc, #16]	; (b56c <nm_spi_write_reg+0x14>)
    b55c:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    b55e:	2300      	movs	r3, #0
    b560:	2801      	cmp	r0, #1
    b562:	d101      	bne.n	b568 <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    b564:	0018      	movs	r0, r3
    b566:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    b568:	3b06      	subs	r3, #6
    b56a:	e7fb      	b.n	b564 <nm_spi_write_reg+0xc>
    b56c:	0000b305 	.word	0x0000b305

0000b570 <nm_spi_init>:
{
    b570:	b530      	push	{r4, r5, lr}
    b572:	b083      	sub	sp, #12
	uint32 reg = 0;
    b574:	2300      	movs	r3, #0
    b576:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    b578:	4a31      	ldr	r2, [pc, #196]	; (b640 <nm_spi_init+0xd0>)
    b57a:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    b57c:	4669      	mov	r1, sp
    b57e:	4831      	ldr	r0, [pc, #196]	; (b644 <nm_spi_init+0xd4>)
    b580:	4b31      	ldr	r3, [pc, #196]	; (b648 <nm_spi_init+0xd8>)
    b582:	4798      	blx	r3
    b584:	2800      	cmp	r0, #0
    b586:	d028      	beq.n	b5da <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    b588:	4b2d      	ldr	r3, [pc, #180]	; (b640 <nm_spi_init+0xd0>)
    b58a:	781b      	ldrb	r3, [r3, #0]
    b58c:	2b00      	cmp	r3, #0
    b58e:	d10d      	bne.n	b5ac <nm_spi_init+0x3c>
		reg &= ~0x70;
    b590:	337c      	adds	r3, #124	; 0x7c
    b592:	9900      	ldr	r1, [sp, #0]
    b594:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    b596:	3b2c      	subs	r3, #44	; 0x2c
    b598:	4319      	orrs	r1, r3
    b59a:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    b59c:	4829      	ldr	r0, [pc, #164]	; (b644 <nm_spi_init+0xd4>)
    b59e:	4b2b      	ldr	r3, [pc, #172]	; (b64c <nm_spi_init+0xdc>)
    b5a0:	4798      	blx	r3
    b5a2:	1e04      	subs	r4, r0, #0
    b5a4:	d036      	beq.n	b614 <nm_spi_init+0xa4>
		gu8Crc_off = 1;
    b5a6:	2201      	movs	r2, #1
    b5a8:	4b25      	ldr	r3, [pc, #148]	; (b640 <nm_spi_init+0xd0>)
    b5aa:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    b5ac:	a901      	add	r1, sp, #4
    b5ae:	2080      	movs	r0, #128	; 0x80
    b5b0:	0140      	lsls	r0, r0, #5
    b5b2:	4b25      	ldr	r3, [pc, #148]	; (b648 <nm_spi_init+0xd8>)
    b5b4:	4798      	blx	r3
    b5b6:	2800      	cmp	r0, #0
    b5b8:	d036      	beq.n	b628 <nm_spi_init+0xb8>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    b5ba:	4c22      	ldr	r4, [pc, #136]	; (b644 <nm_spi_init+0xd4>)
    b5bc:	0020      	movs	r0, r4
    b5be:	4b24      	ldr	r3, [pc, #144]	; (b650 <nm_spi_init+0xe0>)
    b5c0:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    b5c2:	2370      	movs	r3, #112	; 0x70
    b5c4:	0001      	movs	r1, r0
    b5c6:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    b5c8:	2050      	movs	r0, #80	; 0x50
    b5ca:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    b5cc:	0020      	movs	r0, r4
    b5ce:	4b21      	ldr	r3, [pc, #132]	; (b654 <nm_spi_init+0xe4>)
    b5d0:	4798      	blx	r3
	return M2M_SUCCESS;
    b5d2:	2400      	movs	r4, #0
}
    b5d4:	0020      	movs	r0, r4
    b5d6:	b003      	add	sp, #12
    b5d8:	bd30      	pop	{r4, r5, pc}
		gu8Crc_off = 1;
    b5da:	2201      	movs	r2, #1
    b5dc:	4b18      	ldr	r3, [pc, #96]	; (b640 <nm_spi_init+0xd0>)
    b5de:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    b5e0:	2298      	movs	r2, #152	; 0x98
    b5e2:	00d2      	lsls	r2, r2, #3
    b5e4:	491c      	ldr	r1, [pc, #112]	; (b658 <nm_spi_init+0xe8>)
    b5e6:	481d      	ldr	r0, [pc, #116]	; (b65c <nm_spi_init+0xec>)
    b5e8:	4c1d      	ldr	r4, [pc, #116]	; (b660 <nm_spi_init+0xf0>)
    b5ea:	47a0      	blx	r4
    b5ec:	481d      	ldr	r0, [pc, #116]	; (b664 <nm_spi_init+0xf4>)
    b5ee:	47a0      	blx	r4
    b5f0:	481d      	ldr	r0, [pc, #116]	; (b668 <nm_spi_init+0xf8>)
    b5f2:	47a0      	blx	r4
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    b5f4:	4669      	mov	r1, sp
    b5f6:	4813      	ldr	r0, [pc, #76]	; (b644 <nm_spi_init+0xd4>)
    b5f8:	4b13      	ldr	r3, [pc, #76]	; (b648 <nm_spi_init+0xd8>)
    b5fa:	4798      	blx	r3
    b5fc:	1e04      	subs	r4, r0, #0
    b5fe:	d1c3      	bne.n	b588 <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    b600:	4a1a      	ldr	r2, [pc, #104]	; (b66c <nm_spi_init+0xfc>)
    b602:	4915      	ldr	r1, [pc, #84]	; (b658 <nm_spi_init+0xe8>)
    b604:	4815      	ldr	r0, [pc, #84]	; (b65c <nm_spi_init+0xec>)
    b606:	4d16      	ldr	r5, [pc, #88]	; (b660 <nm_spi_init+0xf0>)
    b608:	47a8      	blx	r5
    b60a:	4819      	ldr	r0, [pc, #100]	; (b670 <nm_spi_init+0x100>)
    b60c:	47a8      	blx	r5
    b60e:	4816      	ldr	r0, [pc, #88]	; (b668 <nm_spi_init+0xf8>)
    b610:	47a8      	blx	r5
			return 0;
    b612:	e7df      	b.n	b5d4 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    b614:	4a17      	ldr	r2, [pc, #92]	; (b674 <nm_spi_init+0x104>)
    b616:	4910      	ldr	r1, [pc, #64]	; (b658 <nm_spi_init+0xe8>)
    b618:	4810      	ldr	r0, [pc, #64]	; (b65c <nm_spi_init+0xec>)
    b61a:	4d11      	ldr	r5, [pc, #68]	; (b660 <nm_spi_init+0xf0>)
    b61c:	47a8      	blx	r5
    b61e:	4816      	ldr	r0, [pc, #88]	; (b678 <nm_spi_init+0x108>)
    b620:	47a8      	blx	r5
    b622:	4811      	ldr	r0, [pc, #68]	; (b668 <nm_spi_init+0xf8>)
    b624:	47a8      	blx	r5
			return 0;
    b626:	e7d5      	b.n	b5d4 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    b628:	4a14      	ldr	r2, [pc, #80]	; (b67c <nm_spi_init+0x10c>)
    b62a:	490b      	ldr	r1, [pc, #44]	; (b658 <nm_spi_init+0xe8>)
    b62c:	480b      	ldr	r0, [pc, #44]	; (b65c <nm_spi_init+0xec>)
    b62e:	4c0c      	ldr	r4, [pc, #48]	; (b660 <nm_spi_init+0xf0>)
    b630:	47a0      	blx	r4
    b632:	4813      	ldr	r0, [pc, #76]	; (b680 <nm_spi_init+0x110>)
    b634:	47a0      	blx	r4
    b636:	480c      	ldr	r0, [pc, #48]	; (b668 <nm_spi_init+0xf8>)
    b638:	47a0      	blx	r4
		return M2M_ERR_BUS_FAIL;
    b63a:	2406      	movs	r4, #6
    b63c:	4264      	negs	r4, r4
    b63e:	e7c9      	b.n	b5d4 <nm_spi_init+0x64>
    b640:	20003ed0 	.word	0x20003ed0
    b644:	0000e824 	.word	0x0000e824
    b648:	0000b3ed 	.word	0x0000b3ed
    b64c:	0000b305 	.word	0x0000b305
    b650:	0000b52d 	.word	0x0000b52d
    b654:	0000b559 	.word	0x0000b559
    b658:	000183d4 	.word	0x000183d4
    b65c:	00017c34 	.word	0x00017c34
    b660:	00007fed 	.word	0x00007fed
    b664:	000184e0 	.word	0x000184e0
    b668:	00017c5c 	.word	0x00017c5c
    b66c:	000004c3 	.word	0x000004c3
    b670:	00018530 	.word	0x00018530
    b674:	000004cd 	.word	0x000004cd
    b678:	00018560 	.word	0x00018560
    b67c:	000004d7 	.word	0x000004d7
    b680:	00018594 	.word	0x00018594

0000b684 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    b684:	b5f0      	push	{r4, r5, r6, r7, lr}
    b686:	46de      	mov	lr, fp
    b688:	464f      	mov	r7, r9
    b68a:	4646      	mov	r6, r8
    b68c:	b5c0      	push	{r6, r7, lr}
    b68e:	b086      	sub	sp, #24
    b690:	9003      	str	r0, [sp, #12]
    b692:	9105      	str	r1, [sp, #20]
    b694:	9204      	str	r2, [sp, #16]
    b696:	250a      	movs	r5, #10
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
    b698:	4b21      	ldr	r3, [pc, #132]	; (b720 <nm_spi_read_block+0x9c>)
    b69a:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
    b69c:	002f      	movs	r7, r5
    b69e:	e029      	b.n	b6f4 <nm_spi_read_block+0x70>
    b6a0:	4a20      	ldr	r2, [pc, #128]	; (b724 <nm_spi_read_block+0xa0>)
    b6a2:	4921      	ldr	r1, [pc, #132]	; (b728 <nm_spi_read_block+0xa4>)
    b6a4:	4821      	ldr	r0, [pc, #132]	; (b72c <nm_spi_read_block+0xa8>)
    b6a6:	4c22      	ldr	r4, [pc, #136]	; (b730 <nm_spi_read_block+0xac>)
    b6a8:	47a0      	blx	r4
    b6aa:	9503      	str	r5, [sp, #12]
    b6ac:	0029      	movs	r1, r5
    b6ae:	4821      	ldr	r0, [pc, #132]	; (b734 <nm_spi_read_block+0xb0>)
    b6b0:	47a0      	blx	r4
    b6b2:	4d21      	ldr	r5, [pc, #132]	; (b738 <nm_spi_read_block+0xb4>)
    b6b4:	0028      	movs	r0, r5
    b6b6:	47a0      	blx	r4
		nm_bsp_sleep(1);
    b6b8:	2001      	movs	r0, #1
    b6ba:	4920      	ldr	r1, [pc, #128]	; (b73c <nm_spi_read_block+0xb8>)
    b6bc:	4689      	mov	r9, r1
    b6be:	4788      	blx	r1
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b6c0:	2300      	movs	r3, #0
    b6c2:	9300      	str	r3, [sp, #0]
    b6c4:	2200      	movs	r2, #0
    b6c6:	2100      	movs	r1, #0
    b6c8:	20cf      	movs	r0, #207	; 0xcf
    b6ca:	4e1d      	ldr	r6, [pc, #116]	; (b740 <nm_spi_read_block+0xbc>)
    b6cc:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    b6ce:	20cf      	movs	r0, #207	; 0xcf
    b6d0:	4b1c      	ldr	r3, [pc, #112]	; (b744 <nm_spi_read_block+0xc0>)
    b6d2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    b6d4:	4a1c      	ldr	r2, [pc, #112]	; (b748 <nm_spi_read_block+0xc4>)
    b6d6:	4914      	ldr	r1, [pc, #80]	; (b728 <nm_spi_read_block+0xa4>)
    b6d8:	4814      	ldr	r0, [pc, #80]	; (b72c <nm_spi_read_block+0xa8>)
    b6da:	47a0      	blx	r4
    b6dc:	9b04      	ldr	r3, [sp, #16]
    b6de:	9a03      	ldr	r2, [sp, #12]
    b6e0:	0039      	movs	r1, r7
    b6e2:	481a      	ldr	r0, [pc, #104]	; (b74c <nm_spi_read_block+0xc8>)
    b6e4:	47a0      	blx	r4
    b6e6:	0028      	movs	r0, r5
    b6e8:	47a0      	blx	r4
		nm_bsp_sleep(1);
    b6ea:	2001      	movs	r0, #1
    b6ec:	47c8      	blx	r9
    b6ee:	3f01      	subs	r7, #1
		if(retry) goto _RETRY_;
    b6f0:	2f00      	cmp	r7, #0
    b6f2:	d011      	beq.n	b718 <nm_spi_read_block+0x94>
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
    b6f4:	2300      	movs	r3, #0
    b6f6:	9300      	str	r3, [sp, #0]
    b6f8:	9b04      	ldr	r3, [sp, #16]
    b6fa:	9a05      	ldr	r2, [sp, #20]
    b6fc:	9d03      	ldr	r5, [sp, #12]
    b6fe:	0029      	movs	r1, r5
    b700:	20c8      	movs	r0, #200	; 0xc8
    b702:	47c0      	blx	r8
	if (result != N_OK) {
    b704:	b240      	sxtb	r0, r0
    b706:	2801      	cmp	r0, #1
    b708:	d1ca      	bne.n	b6a0 <nm_spi_read_block+0x1c>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    b70a:	2000      	movs	r0, #0
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    b70c:	b006      	add	sp, #24
    b70e:	bc1c      	pop	{r2, r3, r4}
    b710:	4690      	mov	r8, r2
    b712:	4699      	mov	r9, r3
    b714:	46a3      	mov	fp, r4
    b716:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    b718:	2006      	movs	r0, #6
    b71a:	4240      	negs	r0, r0
    b71c:	e7f6      	b.n	b70c <nm_spi_read_block+0x88>
    b71e:	46c0      	nop			; (mov r8, r8)
    b720:	0000ad7d 	.word	0x0000ad7d
    b724:	00000472 	.word	0x00000472
    b728:	000183c8 	.word	0x000183c8
    b72c:	00017c34 	.word	0x00017c34
    b730:	00007fed 	.word	0x00007fed
    b734:	000185bc 	.word	0x000185bc
    b738:	00017c5c 	.word	0x00017c5c
    b73c:	00009095 	.word	0x00009095
    b740:	0000ab1d 	.word	0x0000ab1d
    b744:	0000acb5 	.word	0x0000acb5
    b748:	0000047d 	.word	0x0000047d
    b74c:	000185ec 	.word	0x000185ec

0000b750 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    b750:	b5f0      	push	{r4, r5, r6, r7, lr}
    b752:	46de      	mov	lr, fp
    b754:	4647      	mov	r7, r8
    b756:	b580      	push	{r7, lr}
    b758:	b089      	sub	sp, #36	; 0x24
    b75a:	9004      	str	r0, [sp, #16]
    b75c:	468b      	mov	fp, r1
    b75e:	9203      	str	r2, [sp, #12]
    b760:	230a      	movs	r3, #10
    b762:	4698      	mov	r8, r3
    b764:	2780      	movs	r7, #128	; 0x80
    b766:	01bf      	lsls	r7, r7, #6
    b768:	466b      	mov	r3, sp
    b76a:	82df      	strh	r7, [r3, #22]
    b76c:	e068      	b.n	b840 <nm_spi_write_block+0xf0>
	uint8 cmd, order, crc[2] = {0};
    b76e:	2200      	movs	r2, #0
    b770:	ab07      	add	r3, sp, #28
    b772:	801a      	strh	r2, [r3, #0]
    b774:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    b776:	2500      	movs	r5, #0
    b778:	e021      	b.n	b7be <nm_spi_write_block+0x6e>
				order = 0x2;
    b77a:	2300      	movs	r3, #0
    b77c:	42a7      	cmp	r7, r4
    b77e:	415b      	adcs	r3, r3
    b780:	3302      	adds	r3, #2
		cmd |= order;
    b782:	200b      	movs	r0, #11
    b784:	aa04      	add	r2, sp, #16
    b786:	4694      	mov	ip, r2
    b788:	4460      	add	r0, ip
    b78a:	2210      	movs	r2, #16
    b78c:	4252      	negs	r2, r2
    b78e:	4313      	orrs	r3, r2
    b790:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    b792:	2101      	movs	r1, #1
    b794:	4b65      	ldr	r3, [pc, #404]	; (b92c <nm_spi_write_block+0x1dc>)
    b796:	4798      	blx	r3
    b798:	2800      	cmp	r0, #0
    b79a:	d11d      	bne.n	b7d8 <nm_spi_write_block+0x88>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    b79c:	465b      	mov	r3, fp
    b79e:	1958      	adds	r0, r3, r5
    b7a0:	0031      	movs	r1, r6
    b7a2:	4b62      	ldr	r3, [pc, #392]	; (b92c <nm_spi_write_block+0x1dc>)
    b7a4:	4798      	blx	r3
    b7a6:	2800      	cmp	r0, #0
    b7a8:	d161      	bne.n	b86e <nm_spi_write_block+0x11e>
		if (!gu8Crc_off) {
    b7aa:	4b61      	ldr	r3, [pc, #388]	; (b930 <nm_spi_write_block+0x1e0>)
    b7ac:	781b      	ldrb	r3, [r3, #0]
    b7ae:	2b00      	cmp	r3, #0
    b7b0:	d067      	beq.n	b882 <nm_spi_write_block+0x132>
		ix += nbytes;
    b7b2:	1975      	adds	r5, r6, r5
    b7b4:	b22d      	sxth	r5, r5
		sz -= nbytes;
    b7b6:	1ba4      	subs	r4, r4, r6
    b7b8:	b2a4      	uxth	r4, r4
	} while (sz);
    b7ba:	2c00      	cmp	r4, #0
    b7bc:	d07d      	beq.n	b8ba <nm_spi_write_block+0x16a>
    b7be:	1c26      	adds	r6, r4, #0
    b7c0:	42bc      	cmp	r4, r7
    b7c2:	d901      	bls.n	b7c8 <nm_spi_write_block+0x78>
    b7c4:	466b      	mov	r3, sp
    b7c6:	8ade      	ldrh	r6, [r3, #22]
    b7c8:	b2b6      	uxth	r6, r6
		if (ix == 0)  {
    b7ca:	2d00      	cmp	r5, #0
    b7cc:	d1d5      	bne.n	b77a <nm_spi_write_block+0x2a>
				order = 0x3;
    b7ce:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    b7d0:	42bc      	cmp	r4, r7
    b7d2:	d9d6      	bls.n	b782 <nm_spi_write_block+0x32>
				order = 0x1;
    b7d4:	3b02      	subs	r3, #2
    b7d6:	e7d4      	b.n	b782 <nm_spi_write_block+0x32>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    b7d8:	4a56      	ldr	r2, [pc, #344]	; (b934 <nm_spi_write_block+0x1e4>)
    b7da:	4957      	ldr	r1, [pc, #348]	; (b938 <nm_spi_write_block+0x1e8>)
    b7dc:	4857      	ldr	r0, [pc, #348]	; (b93c <nm_spi_write_block+0x1ec>)
    b7de:	4c58      	ldr	r4, [pc, #352]	; (b940 <nm_spi_write_block+0x1f0>)
    b7e0:	47a0      	blx	r4
    b7e2:	4858      	ldr	r0, [pc, #352]	; (b944 <nm_spi_write_block+0x1f4>)
    b7e4:	47a0      	blx	r4
    b7e6:	4858      	ldr	r0, [pc, #352]	; (b948 <nm_spi_write_block+0x1f8>)
    b7e8:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    b7ea:	4a58      	ldr	r2, [pc, #352]	; (b94c <nm_spi_write_block+0x1fc>)
    b7ec:	4958      	ldr	r1, [pc, #352]	; (b950 <nm_spi_write_block+0x200>)
    b7ee:	4853      	ldr	r0, [pc, #332]	; (b93c <nm_spi_write_block+0x1ec>)
    b7f0:	4c53      	ldr	r4, [pc, #332]	; (b940 <nm_spi_write_block+0x1f0>)
    b7f2:	47a0      	blx	r4
    b7f4:	4857      	ldr	r0, [pc, #348]	; (b954 <nm_spi_write_block+0x204>)
    b7f6:	47a0      	blx	r4
    b7f8:	4853      	ldr	r0, [pc, #332]	; (b948 <nm_spi_write_block+0x1f8>)
    b7fa:	47a0      	blx	r4
		nm_bsp_sleep(1);
    b7fc:	2001      	movs	r0, #1
    b7fe:	4d56      	ldr	r5, [pc, #344]	; (b958 <nm_spi_write_block+0x208>)
    b800:	47a8      	blx	r5
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    b802:	2300      	movs	r3, #0
    b804:	9300      	str	r3, [sp, #0]
    b806:	2200      	movs	r2, #0
    b808:	2100      	movs	r1, #0
    b80a:	20cf      	movs	r0, #207	; 0xcf
    b80c:	4c53      	ldr	r4, [pc, #332]	; (b95c <nm_spi_write_block+0x20c>)
    b80e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
    b810:	20cf      	movs	r0, #207	; 0xcf
    b812:	4b53      	ldr	r3, [pc, #332]	; (b960 <nm_spi_write_block+0x210>)
    b814:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    b816:	4a53      	ldr	r2, [pc, #332]	; (b964 <nm_spi_write_block+0x214>)
    b818:	494d      	ldr	r1, [pc, #308]	; (b950 <nm_spi_write_block+0x200>)
    b81a:	4848      	ldr	r0, [pc, #288]	; (b93c <nm_spi_write_block+0x1ec>)
    b81c:	4c48      	ldr	r4, [pc, #288]	; (b940 <nm_spi_write_block+0x1f0>)
    b81e:	47a0      	blx	r4
    b820:	9b03      	ldr	r3, [sp, #12]
    b822:	9a04      	ldr	r2, [sp, #16]
    b824:	4641      	mov	r1, r8
    b826:	4850      	ldr	r0, [pc, #320]	; (b968 <nm_spi_write_block+0x218>)
    b828:	47a0      	blx	r4
    b82a:	4847      	ldr	r0, [pc, #284]	; (b948 <nm_spi_write_block+0x1f8>)
    b82c:	47a0      	blx	r4
		nm_bsp_sleep(1);
    b82e:	2001      	movs	r0, #1
    b830:	47a8      	blx	r5
    b832:	2301      	movs	r3, #1
    b834:	425b      	negs	r3, r3
    b836:	469c      	mov	ip, r3
    b838:	44e0      	add	r8, ip
		if(retry) goto _RETRY_;
    b83a:	4643      	mov	r3, r8
    b83c:	2b00      	cmp	r3, #0
    b83e:	d06e      	beq.n	b91e <nm_spi_write_block+0x1ce>
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
    b840:	2300      	movs	r3, #0
    b842:	9300      	str	r3, [sp, #0]
    b844:	9b03      	ldr	r3, [sp, #12]
    b846:	2200      	movs	r2, #0
    b848:	9d04      	ldr	r5, [sp, #16]
    b84a:	0029      	movs	r1, r5
    b84c:	20c7      	movs	r0, #199	; 0xc7
    b84e:	4c47      	ldr	r4, [pc, #284]	; (b96c <nm_spi_write_block+0x21c>)
    b850:	47a0      	blx	r4
	if (result != N_OK) {
    b852:	b240      	sxtb	r0, r0
    b854:	2801      	cmp	r0, #1
    b856:	d08a      	beq.n	b76e <nm_spi_write_block+0x1e>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
    b858:	4a45      	ldr	r2, [pc, #276]	; (b970 <nm_spi_write_block+0x220>)
    b85a:	493d      	ldr	r1, [pc, #244]	; (b950 <nm_spi_write_block+0x200>)
    b85c:	4837      	ldr	r0, [pc, #220]	; (b93c <nm_spi_write_block+0x1ec>)
    b85e:	4c38      	ldr	r4, [pc, #224]	; (b940 <nm_spi_write_block+0x1f0>)
    b860:	47a0      	blx	r4
    b862:	0029      	movs	r1, r5
    b864:	4843      	ldr	r0, [pc, #268]	; (b974 <nm_spi_write_block+0x224>)
    b866:	47a0      	blx	r4
    b868:	4837      	ldr	r0, [pc, #220]	; (b948 <nm_spi_write_block+0x1f8>)
    b86a:	47a0      	blx	r4
    b86c:	e7c6      	b.n	b7fc <nm_spi_write_block+0xac>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    b86e:	4a42      	ldr	r2, [pc, #264]	; (b978 <nm_spi_write_block+0x228>)
    b870:	4931      	ldr	r1, [pc, #196]	; (b938 <nm_spi_write_block+0x1e8>)
    b872:	4832      	ldr	r0, [pc, #200]	; (b93c <nm_spi_write_block+0x1ec>)
    b874:	4c32      	ldr	r4, [pc, #200]	; (b940 <nm_spi_write_block+0x1f0>)
    b876:	47a0      	blx	r4
    b878:	4840      	ldr	r0, [pc, #256]	; (b97c <nm_spi_write_block+0x22c>)
    b87a:	47a0      	blx	r4
    b87c:	4832      	ldr	r0, [pc, #200]	; (b948 <nm_spi_write_block+0x1f8>)
    b87e:	47a0      	blx	r4
    b880:	e7b3      	b.n	b7ea <nm_spi_write_block+0x9a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    b882:	2102      	movs	r1, #2
    b884:	a807      	add	r0, sp, #28
    b886:	4b29      	ldr	r3, [pc, #164]	; (b92c <nm_spi_write_block+0x1dc>)
    b888:	4798      	blx	r3
    b88a:	2800      	cmp	r0, #0
    b88c:	d091      	beq.n	b7b2 <nm_spi_write_block+0x62>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    b88e:	22d7      	movs	r2, #215	; 0xd7
    b890:	0092      	lsls	r2, r2, #2
    b892:	4929      	ldr	r1, [pc, #164]	; (b938 <nm_spi_write_block+0x1e8>)
    b894:	4829      	ldr	r0, [pc, #164]	; (b93c <nm_spi_write_block+0x1ec>)
    b896:	4c2a      	ldr	r4, [pc, #168]	; (b940 <nm_spi_write_block+0x1f0>)
    b898:	47a0      	blx	r4
    b89a:	4839      	ldr	r0, [pc, #228]	; (b980 <nm_spi_write_block+0x230>)
    b89c:	47a0      	blx	r4
    b89e:	482a      	ldr	r0, [pc, #168]	; (b948 <nm_spi_write_block+0x1f8>)
    b8a0:	47a0      	blx	r4
    b8a2:	e7a2      	b.n	b7ea <nm_spi_write_block+0x9a>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    b8a4:	229a      	movs	r2, #154	; 0x9a
    b8a6:	0052      	lsls	r2, r2, #1
    b8a8:	4936      	ldr	r1, [pc, #216]	; (b984 <nm_spi_write_block+0x234>)
    b8aa:	4824      	ldr	r0, [pc, #144]	; (b93c <nm_spi_write_block+0x1ec>)
    b8ac:	4c24      	ldr	r4, [pc, #144]	; (b940 <nm_spi_write_block+0x1f0>)
    b8ae:	47a0      	blx	r4
    b8b0:	4835      	ldr	r0, [pc, #212]	; (b988 <nm_spi_write_block+0x238>)
    b8b2:	47a0      	blx	r4
    b8b4:	4824      	ldr	r0, [pc, #144]	; (b948 <nm_spi_write_block+0x1f8>)
    b8b6:	47a0      	blx	r4
    b8b8:	e025      	b.n	b906 <nm_spi_write_block+0x1b6>
    if (!gu8Crc_off)
    b8ba:	4b1d      	ldr	r3, [pc, #116]	; (b930 <nm_spi_write_block+0x1e0>)
    b8bc:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    b8be:	1e63      	subs	r3, r4, #1
    b8c0:	419c      	sbcs	r4, r3
    b8c2:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    b8c4:	b2a1      	uxth	r1, r4
    b8c6:	a807      	add	r0, sp, #28
    b8c8:	4b30      	ldr	r3, [pc, #192]	; (b98c <nm_spi_write_block+0x23c>)
    b8ca:	4798      	blx	r3
    b8cc:	2800      	cmp	r0, #0
    b8ce:	d1e9      	bne.n	b8a4 <nm_spi_write_block+0x154>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    b8d0:	ab08      	add	r3, sp, #32
    b8d2:	191b      	adds	r3, r3, r4
    b8d4:	3b05      	subs	r3, #5
    b8d6:	781b      	ldrb	r3, [r3, #0]
    b8d8:	2b00      	cmp	r3, #0
    b8da:	d106      	bne.n	b8ea <nm_spi_write_block+0x19a>
    b8dc:	ab08      	add	r3, sp, #32
    b8de:	469c      	mov	ip, r3
    b8e0:	4464      	add	r4, ip
    b8e2:	3c06      	subs	r4, #6
    b8e4:	7823      	ldrb	r3, [r4, #0]
    b8e6:	2bc3      	cmp	r3, #195	; 0xc3
    b8e8:	d017      	beq.n	b91a <nm_spi_write_block+0x1ca>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    b8ea:	223c      	movs	r2, #60	; 0x3c
    b8ec:	32ff      	adds	r2, #255	; 0xff
    b8ee:	4925      	ldr	r1, [pc, #148]	; (b984 <nm_spi_write_block+0x234>)
    b8f0:	4812      	ldr	r0, [pc, #72]	; (b93c <nm_spi_write_block+0x1ec>)
    b8f2:	4c13      	ldr	r4, [pc, #76]	; (b940 <nm_spi_write_block+0x1f0>)
    b8f4:	47a0      	blx	r4
    b8f6:	a907      	add	r1, sp, #28
    b8f8:	788b      	ldrb	r3, [r1, #2]
    b8fa:	784a      	ldrb	r2, [r1, #1]
    b8fc:	7809      	ldrb	r1, [r1, #0]
    b8fe:	4824      	ldr	r0, [pc, #144]	; (b990 <nm_spi_write_block+0x240>)
    b900:	47a0      	blx	r4
    b902:	4811      	ldr	r0, [pc, #68]	; (b948 <nm_spi_write_block+0x1f8>)
    b904:	47a0      	blx	r4
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    b906:	4a23      	ldr	r2, [pc, #140]	; (b994 <nm_spi_write_block+0x244>)
    b908:	4911      	ldr	r1, [pc, #68]	; (b950 <nm_spi_write_block+0x200>)
    b90a:	480c      	ldr	r0, [pc, #48]	; (b93c <nm_spi_write_block+0x1ec>)
    b90c:	4c0c      	ldr	r4, [pc, #48]	; (b940 <nm_spi_write_block+0x1f0>)
    b90e:	47a0      	blx	r4
    b910:	4810      	ldr	r0, [pc, #64]	; (b954 <nm_spi_write_block+0x204>)
    b912:	47a0      	blx	r4
    b914:	480c      	ldr	r0, [pc, #48]	; (b948 <nm_spi_write_block+0x1f8>)
    b916:	47a0      	blx	r4
    b918:	e770      	b.n	b7fc <nm_spi_write_block+0xac>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    b91a:	2000      	movs	r0, #0
    b91c:	e001      	b.n	b922 <nm_spi_write_block+0x1d2>
	else s8Ret = M2M_ERR_BUS_FAIL;
    b91e:	2006      	movs	r0, #6
    b920:	4240      	negs	r0, r0

	return s8Ret;
}
    b922:	b009      	add	sp, #36	; 0x24
    b924:	bc0c      	pop	{r2, r3}
    b926:	4690      	mov	r8, r2
    b928:	469b      	mov	fp, r3
    b92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b92c:	0000aafd 	.word	0x0000aafd
    b930:	20003ed0 	.word	0x20003ed0
    b934:	00000349 	.word	0x00000349
    b938:	00018388 	.word	0x00018388
    b93c:	00017c34 	.word	0x00017c34
    b940:	00007fed 	.word	0x00007fed
    b944:	00018638 	.word	0x00018638
    b948:	00017c5c 	.word	0x00017c5c
    b94c:	000003d9 	.word	0x000003d9
    b950:	000183a8 	.word	0x000183a8
    b954:	0001872c 	.word	0x0001872c
    b958:	00009095 	.word	0x00009095
    b95c:	0000ab1d 	.word	0x0000ab1d
    b960:	0000acb5 	.word	0x0000acb5
    b964:	000003eb 	.word	0x000003eb
    b968:	000185ec 	.word	0x000185ec
    b96c:	0000ad7d 	.word	0x0000ad7d
    b970:	000003cf 	.word	0x000003cf
    b974:	00018608 	.word	0x00018608
    b978:	00000352 	.word	0x00000352
    b97c:	00018670 	.word	0x00018670
    b980:	000186a4 	.word	0x000186a4
    b984:	00018358 	.word	0x00018358
    b988:	000186dc 	.word	0x000186dc
    b98c:	0000ac95 	.word	0x0000ac95
    b990:	000186fc 	.word	0x000186fc
    b994:	000003e1 	.word	0x000003e1

0000b998 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    b998:	b5f0      	push	{r4, r5, r6, r7, lr}
    b99a:	46de      	mov	lr, fp
    b99c:	4657      	mov	r7, sl
    b99e:	464e      	mov	r6, r9
    b9a0:	4645      	mov	r5, r8
    b9a2:	b5e0      	push	{r5, r6, r7, lr}
    b9a4:	b085      	sub	sp, #20
    b9a6:	9001      	str	r0, [sp, #4]
    b9a8:	000e      	movs	r6, r1
    b9aa:	9202      	str	r2, [sp, #8]
    b9ac:	001d      	movs	r5, r3
    b9ae:	ab0e      	add	r3, sp, #56	; 0x38
    b9b0:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    b9b2:	2c00      	cmp	r4, #0
    b9b4:	d063      	beq.n	ba7e <Socket_ReadSocketData+0xe6>
    b9b6:	0103      	lsls	r3, r0, #4
    b9b8:	4934      	ldr	r1, [pc, #208]	; (ba8c <Socket_ReadSocketData+0xf4>)
    b9ba:	585b      	ldr	r3, [r3, r1]
    b9bc:	2b00      	cmp	r3, #0
    b9be:	d05e      	beq.n	ba7e <Socket_ReadSocketData+0xe6>
    b9c0:	0101      	lsls	r1, r0, #4
    b9c2:	4b32      	ldr	r3, [pc, #200]	; (ba8c <Socket_ReadSocketData+0xf4>)
    b9c4:	185b      	adds	r3, r3, r1
    b9c6:	889b      	ldrh	r3, [r3, #4]
    b9c8:	b29b      	uxth	r3, r3
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	d057      	beq.n	ba7e <Socket_ReadSocketData+0xe6>
    b9ce:	4b2f      	ldr	r3, [pc, #188]	; (ba8c <Socket_ReadSocketData+0xf4>)
    b9d0:	185b      	adds	r3, r3, r1
    b9d2:	7a9b      	ldrb	r3, [r3, #10]
    b9d4:	2b01      	cmp	r3, #1
    b9d6:	d152      	bne.n	ba7e <Socket_ReadSocketData+0xe6>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    b9d8:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    b9da:	4b2c      	ldr	r3, [pc, #176]	; (ba8c <Socket_ReadSocketData+0xf4>)
    b9dc:	469b      	mov	fp, r3
    b9de:	448b      	add	fp, r1
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);

				u16ReadCount -= u16Read;
				u32Address += u16Read;

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    b9e0:	465b      	mov	r3, fp
    b9e2:	220a      	movs	r2, #10
    b9e4:	4690      	mov	r8, r2
    b9e6:	44d8      	add	r8, fp
    b9e8:	468a      	mov	sl, r1
    b9ea:	9500      	str	r5, [sp, #0]
    b9ec:	9303      	str	r3, [sp, #12]
    b9ee:	e014      	b.n	ba1a <Socket_ReadSocketData+0x82>
    b9f0:	0025      	movs	r5, r4
			u8SetRxDone = 1;
    b9f2:	2301      	movs	r3, #1
    b9f4:	e01b      	b.n	ba2e <Socket_ReadSocketData+0x96>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    b9f6:	3301      	adds	r3, #1
    b9f8:	2200      	movs	r2, #0
    b9fa:	2100      	movs	r1, #0
    b9fc:	2000      	movs	r0, #0
    b9fe:	4c24      	ldr	r4, [pc, #144]	; (ba90 <Socket_ReadSocketData+0xf8>)
    ba00:	47a0      	blx	r4
    ba02:	e03c      	b.n	ba7e <Socket_ReadSocketData+0xe6>
					break;
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    ba04:	4823      	ldr	r0, [pc, #140]	; (ba94 <Socket_ReadSocketData+0xfc>)
    ba06:	4d24      	ldr	r5, [pc, #144]	; (ba98 <Socket_ReadSocketData+0x100>)
    ba08:	47a8      	blx	r5
    ba0a:	0021      	movs	r1, r4
    ba0c:	4823      	ldr	r0, [pc, #140]	; (ba9c <Socket_ReadSocketData+0x104>)
    ba0e:	47a8      	blx	r5
    ba10:	4823      	ldr	r0, [pc, #140]	; (baa0 <Socket_ReadSocketData+0x108>)
    ba12:	47a8      	blx	r5
				break;
    ba14:	e033      	b.n	ba7e <Socket_ReadSocketData+0xe6>
			}
		}while(u16ReadCount != 0);
    ba16:	2c00      	cmp	r4, #0
    ba18:	d031      	beq.n	ba7e <Socket_ReadSocketData+0xe6>
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    ba1a:	465b      	mov	r3, fp
    ba1c:	889b      	ldrh	r3, [r3, #4]
    ba1e:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    ba20:	b21b      	sxth	r3, r3
    ba22:	2b00      	cmp	r3, #0
    ba24:	dde4      	ble.n	b9f0 <Socket_ReadSocketData+0x58>
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    ba26:	9b03      	ldr	r3, [sp, #12]
    ba28:	889d      	ldrh	r5, [r3, #4]
    ba2a:	b2ad      	uxth	r5, r5
				u8SetRxDone = 0;
    ba2c:	2300      	movs	r3, #0
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    ba2e:	4a17      	ldr	r2, [pc, #92]	; (ba8c <Socket_ReadSocketData+0xf4>)
    ba30:	4651      	mov	r1, sl
    ba32:	5889      	ldr	r1, [r1, r2]
    ba34:	002a      	movs	r2, r5
    ba36:	9800      	ldr	r0, [sp, #0]
    ba38:	4f15      	ldr	r7, [pc, #84]	; (ba90 <Socket_ReadSocketData+0xf8>)
    ba3a:	47b8      	blx	r7
    ba3c:	2800      	cmp	r0, #0
    ba3e:	d1e1      	bne.n	ba04 <Socket_ReadSocketData+0x6c>
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    ba40:	4b12      	ldr	r3, [pc, #72]	; (ba8c <Socket_ReadSocketData+0xf4>)
    ba42:	4652      	mov	r2, sl
    ba44:	58d3      	ldr	r3, [r2, r3]
    ba46:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    ba48:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    ba4a:	88f3      	ldrh	r3, [r6, #6]
    ba4c:	1b5b      	subs	r3, r3, r5
    ba4e:	80f3      	strh	r3, [r6, #6]
				if (gpfAppSocketCb)
    ba50:	4b14      	ldr	r3, [pc, #80]	; (baa4 <Socket_ReadSocketData+0x10c>)
    ba52:	681b      	ldr	r3, [r3, #0]
    ba54:	2b00      	cmp	r3, #0
    ba56:	d005      	beq.n	ba64 <Socket_ReadSocketData+0xcc>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    ba58:	4b12      	ldr	r3, [pc, #72]	; (baa4 <Socket_ReadSocketData+0x10c>)
    ba5a:	681b      	ldr	r3, [r3, #0]
    ba5c:	0032      	movs	r2, r6
    ba5e:	9902      	ldr	r1, [sp, #8]
    ba60:	9801      	ldr	r0, [sp, #4]
    ba62:	4798      	blx	r3
				u16ReadCount -= u16Read;
    ba64:	1b64      	subs	r4, r4, r5
    ba66:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    ba68:	9b00      	ldr	r3, [sp, #0]
    ba6a:	469c      	mov	ip, r3
    ba6c:	44ac      	add	ip, r5
    ba6e:	4663      	mov	r3, ip
    ba70:	9300      	str	r3, [sp, #0]
				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
    ba72:	4643      	mov	r3, r8
    ba74:	781b      	ldrb	r3, [r3, #0]
    ba76:	2b00      	cmp	r3, #0
    ba78:	d1cd      	bne.n	ba16 <Socket_ReadSocketData+0x7e>
    ba7a:	2c00      	cmp	r4, #0
    ba7c:	d1bb      	bne.n	b9f6 <Socket_ReadSocketData+0x5e>
	}
}
    ba7e:	b005      	add	sp, #20
    ba80:	bc3c      	pop	{r2, r3, r4, r5}
    ba82:	4690      	mov	r8, r2
    ba84:	4699      	mov	r9, r3
    ba86:	46a2      	mov	sl, r4
    ba88:	46ab      	mov	fp, r5
    ba8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ba8c:	20005ac8 	.word	0x20005ac8
    ba90:	00009b09 	.word	0x00009b09
    ba94:	00017f70 	.word	0x00017f70
    ba98:	00007fed 	.word	0x00007fed
    ba9c:	00018a10 	.word	0x00018a10
    baa0:	00017c5c 	.word	0x00017c5c
    baa4:	20005b78 	.word	0x20005b78

0000baa8 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
    baa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    baaa:	46d6      	mov	lr, sl
    baac:	464f      	mov	r7, r9
    baae:	4646      	mov	r6, r8
    bab0:	b5c0      	push	{r6, r7, lr}
    bab2:	b09a      	sub	sp, #104	; 0x68
    bab4:	000d      	movs	r5, r1
    bab6:	0014      	movs	r4, r2
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
    bab8:	2841      	cmp	r0, #65	; 0x41
    baba:	d039      	beq.n	bb30 <m2m_ip_cb+0x88>
    babc:	2854      	cmp	r0, #84	; 0x54
    babe:	d037      	beq.n	bb30 <m2m_ip_cb+0x88>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    bac0:	2842      	cmp	r0, #66	; 0x42
    bac2:	d053      	beq.n	bb6c <m2m_ip_cb+0xc4>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    bac4:	2843      	cmp	r0, #67	; 0x43
    bac6:	d06a      	beq.n	bb9e <m2m_ip_cb+0xf6>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    bac8:	2844      	cmp	r0, #68	; 0x44
    baca:	d100      	bne.n	bace <m2m_ip_cb+0x26>
    bacc:	e0af      	b.n	bc2e <m2m_ip_cb+0x186>
    bace:	284b      	cmp	r0, #75	; 0x4b
    bad0:	d100      	bne.n	bad4 <m2m_ip_cb+0x2c>
    bad2:	e0ac      	b.n	bc2e <m2m_ip_cb+0x186>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    bad4:	284a      	cmp	r0, #74	; 0x4a
    bad6:	d100      	bne.n	bada <m2m_ip_cb+0x32>
    bad8:	e0cf      	b.n	bc7a <m2m_ip_cb+0x1d2>
		{
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    bada:	2846      	cmp	r0, #70	; 0x46
    badc:	d100      	bne.n	bae0 <m2m_ip_cb+0x38>
    bade:	e0e5      	b.n	bcac <m2m_ip_cb+0x204>
    bae0:	2848      	cmp	r0, #72	; 0x48
    bae2:	d100      	bne.n	bae6 <m2m_ip_cb+0x3e>
    bae4:	e10e      	b.n	bd04 <m2m_ip_cb+0x25c>
    bae6:	284d      	cmp	r0, #77	; 0x4d
    bae8:	d100      	bne.n	baec <m2m_ip_cb+0x44>
    baea:	e0dc      	b.n	bca6 <m2m_ip_cb+0x1fe>
						M2M_DBG("hif_receive Fail\n");
				}
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    baec:	2845      	cmp	r0, #69	; 0x45
    baee:	d100      	bne.n	baf2 <m2m_ip_cb+0x4a>
    baf0:	e12c      	b.n	bd4c <m2m_ip_cb+0x2a4>
    baf2:	2847      	cmp	r0, #71	; 0x47
    baf4:	d100      	bne.n	baf8 <m2m_ip_cb+0x50>
    baf6:	e14d      	b.n	bd94 <m2m_ip_cb+0x2ec>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    baf8:	2507      	movs	r5, #7
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    bafa:	284c      	cmp	r0, #76	; 0x4c
    bafc:	d100      	bne.n	bb00 <m2m_ip_cb+0x58>
    bafe:	e126      	b.n	bd4e <m2m_ip_cb+0x2a6>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    bb00:	2852      	cmp	r0, #82	; 0x52
    bb02:	d12d      	bne.n	bb60 <m2m_ip_cb+0xb8>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    bb04:	2301      	movs	r3, #1
    bb06:	2214      	movs	r2, #20
    bb08:	a909      	add	r1, sp, #36	; 0x24
    bb0a:	0020      	movs	r0, r4
    bb0c:	4ca2      	ldr	r4, [pc, #648]	; (bd98 <m2m_ip_cb+0x2f0>)
    bb0e:	47a0      	blx	r4
    bb10:	2800      	cmp	r0, #0
    bb12:	d125      	bne.n	bb60 <m2m_ip_cb+0xb8>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    bb14:	4ba1      	ldr	r3, [pc, #644]	; (bd9c <m2m_ip_cb+0x2f4>)
    bb16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bb18:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    bb1a:	681b      	ldr	r3, [r3, #0]
    bb1c:	2b00      	cmp	r3, #0
    bb1e:	d01f      	beq.n	bb60 <m2m_ip_cb+0xb8>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    bb20:	4b9e      	ldr	r3, [pc, #632]	; (bd9c <m2m_ip_cb+0x2f4>)
    bb22:	681c      	ldr	r4, [r3, #0]
    bb24:	ab09      	add	r3, sp, #36	; 0x24
    bb26:	7c1a      	ldrb	r2, [r3, #16]
    bb28:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bb2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb2c:	47a0      	blx	r4
			}
		}
	}
}
    bb2e:	e017      	b.n	bb60 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    bb30:	2300      	movs	r3, #0
    bb32:	2204      	movs	r2, #4
    bb34:	a909      	add	r1, sp, #36	; 0x24
    bb36:	0020      	movs	r0, r4
    bb38:	4c97      	ldr	r4, [pc, #604]	; (bd98 <m2m_ip_cb+0x2f0>)
    bb3a:	47a0      	blx	r4
    bb3c:	2800      	cmp	r0, #0
    bb3e:	d10f      	bne.n	bb60 <m2m_ip_cb+0xb8>
			strBind.status = strBindReply.s8Status;
    bb40:	ab09      	add	r3, sp, #36	; 0x24
    bb42:	785a      	ldrb	r2, [r3, #1]
    bb44:	ab05      	add	r3, sp, #20
    bb46:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    bb48:	4b95      	ldr	r3, [pc, #596]	; (bda0 <m2m_ip_cb+0x2f8>)
    bb4a:	681b      	ldr	r3, [r3, #0]
    bb4c:	2b00      	cmp	r3, #0
    bb4e:	d007      	beq.n	bb60 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    bb50:	4b93      	ldr	r3, [pc, #588]	; (bda0 <m2m_ip_cb+0x2f8>)
    bb52:	681b      	ldr	r3, [r3, #0]
    bb54:	aa09      	add	r2, sp, #36	; 0x24
    bb56:	2000      	movs	r0, #0
    bb58:	5610      	ldrsb	r0, [r2, r0]
    bb5a:	aa05      	add	r2, sp, #20
    bb5c:	2101      	movs	r1, #1
    bb5e:	4798      	blx	r3
}
    bb60:	b01a      	add	sp, #104	; 0x68
    bb62:	bc1c      	pop	{r2, r3, r4}
    bb64:	4690      	mov	r8, r2
    bb66:	4699      	mov	r9, r3
    bb68:	46a2      	mov	sl, r4
    bb6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    bb6c:	2300      	movs	r3, #0
    bb6e:	2204      	movs	r2, #4
    bb70:	a909      	add	r1, sp, #36	; 0x24
    bb72:	0020      	movs	r0, r4
    bb74:	4c88      	ldr	r4, [pc, #544]	; (bd98 <m2m_ip_cb+0x2f0>)
    bb76:	47a0      	blx	r4
    bb78:	2800      	cmp	r0, #0
    bb7a:	d1f1      	bne.n	bb60 <m2m_ip_cb+0xb8>
			strListen.status = strListenReply.s8Status;
    bb7c:	ab09      	add	r3, sp, #36	; 0x24
    bb7e:	785a      	ldrb	r2, [r3, #1]
    bb80:	ab05      	add	r3, sp, #20
    bb82:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    bb84:	4b86      	ldr	r3, [pc, #536]	; (bda0 <m2m_ip_cb+0x2f8>)
    bb86:	681b      	ldr	r3, [r3, #0]
    bb88:	2b00      	cmp	r3, #0
    bb8a:	d0e9      	beq.n	bb60 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    bb8c:	4b84      	ldr	r3, [pc, #528]	; (bda0 <m2m_ip_cb+0x2f8>)
    bb8e:	681b      	ldr	r3, [r3, #0]
    bb90:	aa09      	add	r2, sp, #36	; 0x24
    bb92:	2000      	movs	r0, #0
    bb94:	5610      	ldrsb	r0, [r2, r0]
    bb96:	aa05      	add	r2, sp, #20
    bb98:	2102      	movs	r1, #2
    bb9a:	4798      	blx	r3
    bb9c:	e7e0      	b.n	bb60 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    bb9e:	2300      	movs	r3, #0
    bba0:	220c      	movs	r2, #12
    bba2:	a905      	add	r1, sp, #20
    bba4:	0020      	movs	r0, r4
    bba6:	4c7c      	ldr	r4, [pc, #496]	; (bd98 <m2m_ip_cb+0x2f0>)
    bba8:	47a0      	blx	r4
    bbaa:	2800      	cmp	r0, #0
    bbac:	d1d8      	bne.n	bb60 <m2m_ip_cb+0xb8>
			if(strAcceptReply.sConnectedSock >= 0)
    bbae:	ab05      	add	r3, sp, #20
    bbb0:	2209      	movs	r2, #9
    bbb2:	569a      	ldrsb	r2, [r3, r2]
    bbb4:	2a00      	cmp	r2, #0
    bbb6:	db24      	blt.n	bc02 <m2m_ip_cb+0x15a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
    bbb8:	0018      	movs	r0, r3
    bbba:	2108      	movs	r1, #8
    bbbc:	5659      	ldrsb	r1, [r3, r1]
    bbbe:	4b79      	ldr	r3, [pc, #484]	; (bda4 <m2m_ip_cb+0x2fc>)
    bbc0:	0109      	lsls	r1, r1, #4
    bbc2:	1859      	adds	r1, r3, r1
    bbc4:	7ac9      	ldrb	r1, [r1, #11]
    bbc6:	b2c9      	uxtb	r1, r1
    bbc8:	0114      	lsls	r4, r2, #4
    bbca:	191b      	adds	r3, r3, r4
    bbcc:	72d9      	strb	r1, [r3, #11]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
    bbce:	2101      	movs	r1, #1
    bbd0:	7299      	strb	r1, [r3, #10]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    bbd2:	8941      	ldrh	r1, [r0, #10]
    bbd4:	3908      	subs	r1, #8
    bbd6:	b289      	uxth	r1, r1
    bbd8:	8119      	strh	r1, [r3, #8]
				++gu16SessionID;
    bbda:	4973      	ldr	r1, [pc, #460]	; (bda8 <m2m_ip_cb+0x300>)
    bbdc:	880b      	ldrh	r3, [r1, #0]
    bbde:	3301      	adds	r3, #1
    bbe0:	b29b      	uxth	r3, r3
    bbe2:	800b      	strh	r3, [r1, #0]
				if(gu16SessionID == 0)
    bbe4:	880b      	ldrh	r3, [r1, #0]
    bbe6:	b29b      	uxth	r3, r3
    bbe8:	2b00      	cmp	r3, #0
    bbea:	d103      	bne.n	bbf4 <m2m_ip_cb+0x14c>
					++gu16SessionID;
    bbec:	880b      	ldrh	r3, [r1, #0]
    bbee:	3301      	adds	r3, #1
    bbf0:	b29b      	uxth	r3, r3
    bbf2:	800b      	strh	r3, [r1, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    bbf4:	4b6c      	ldr	r3, [pc, #432]	; (bda8 <m2m_ip_cb+0x300>)
    bbf6:	8819      	ldrh	r1, [r3, #0]
    bbf8:	b289      	uxth	r1, r1
    bbfa:	0110      	lsls	r0, r2, #4
    bbfc:	4b69      	ldr	r3, [pc, #420]	; (bda4 <m2m_ip_cb+0x2fc>)
    bbfe:	181b      	adds	r3, r3, r0
    bc00:	80d9      	strh	r1, [r3, #6]
			strAccept.sock = strAcceptReply.sConnectedSock;
    bc02:	ab09      	add	r3, sp, #36	; 0x24
    bc04:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    bc06:	2202      	movs	r2, #2
    bc08:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    bc0a:	aa05      	add	r2, sp, #20
    bc0c:	8851      	ldrh	r1, [r2, #2]
    bc0e:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    bc10:	9a06      	ldr	r2, [sp, #24]
    bc12:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    bc14:	4b62      	ldr	r3, [pc, #392]	; (bda0 <m2m_ip_cb+0x2f8>)
    bc16:	681b      	ldr	r3, [r3, #0]
    bc18:	2b00      	cmp	r3, #0
    bc1a:	d0a1      	beq.n	bb60 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    bc1c:	4b60      	ldr	r3, [pc, #384]	; (bda0 <m2m_ip_cb+0x2f8>)
    bc1e:	681b      	ldr	r3, [r3, #0]
    bc20:	aa05      	add	r2, sp, #20
    bc22:	2008      	movs	r0, #8
    bc24:	5610      	ldrsb	r0, [r2, r0]
    bc26:	aa09      	add	r2, sp, #36	; 0x24
    bc28:	2104      	movs	r1, #4
    bc2a:	4798      	blx	r3
    bc2c:	e798      	b.n	bb60 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    bc2e:	2300      	movs	r3, #0
    bc30:	2204      	movs	r2, #4
    bc32:	a909      	add	r1, sp, #36	; 0x24
    bc34:	0020      	movs	r0, r4
    bc36:	4c58      	ldr	r4, [pc, #352]	; (bd98 <m2m_ip_cb+0x2f0>)
    bc38:	47a0      	blx	r4
    bc3a:	2800      	cmp	r0, #0
    bc3c:	d000      	beq.n	bc40 <m2m_ip_cb+0x198>
    bc3e:	e78f      	b.n	bb60 <m2m_ip_cb+0xb8>
			strConnMsg.sock		= strConnectReply.sock;
    bc40:	ab09      	add	r3, sp, #36	; 0x24
    bc42:	2000      	movs	r0, #0
    bc44:	5618      	ldrsb	r0, [r3, r0]
    bc46:	aa05      	add	r2, sp, #20
    bc48:	7010      	strb	r0, [r2, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    bc4a:	785b      	ldrb	r3, [r3, #1]
    bc4c:	b25b      	sxtb	r3, r3
    bc4e:	7053      	strb	r3, [r2, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    bc50:	2b00      	cmp	r3, #0
    bc52:	d107      	bne.n	bc64 <m2m_ip_cb+0x1bc>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    bc54:	ab09      	add	r3, sp, #36	; 0x24
    bc56:	885b      	ldrh	r3, [r3, #2]
    bc58:	3b08      	subs	r3, #8
    bc5a:	b29b      	uxth	r3, r3
    bc5c:	0101      	lsls	r1, r0, #4
    bc5e:	4a51      	ldr	r2, [pc, #324]	; (bda4 <m2m_ip_cb+0x2fc>)
    bc60:	1852      	adds	r2, r2, r1
    bc62:	8113      	strh	r3, [r2, #8]
			if(gpfAppSocketCb)
    bc64:	4b4e      	ldr	r3, [pc, #312]	; (bda0 <m2m_ip_cb+0x2f8>)
    bc66:	681b      	ldr	r3, [r3, #0]
    bc68:	2b00      	cmp	r3, #0
    bc6a:	d100      	bne.n	bc6e <m2m_ip_cb+0x1c6>
    bc6c:	e778      	b.n	bb60 <m2m_ip_cb+0xb8>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    bc6e:	4b4c      	ldr	r3, [pc, #304]	; (bda0 <m2m_ip_cb+0x2f8>)
    bc70:	681b      	ldr	r3, [r3, #0]
    bc72:	aa05      	add	r2, sp, #20
    bc74:	2105      	movs	r1, #5
    bc76:	4798      	blx	r3
	{
    bc78:	e772      	b.n	bb60 <m2m_ip_cb+0xb8>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    bc7a:	2300      	movs	r3, #0
    bc7c:	2244      	movs	r2, #68	; 0x44
    bc7e:	a909      	add	r1, sp, #36	; 0x24
    bc80:	0020      	movs	r0, r4
    bc82:	4c45      	ldr	r4, [pc, #276]	; (bd98 <m2m_ip_cb+0x2f0>)
    bc84:	47a0      	blx	r4
    bc86:	2800      	cmp	r0, #0
    bc88:	d000      	beq.n	bc8c <m2m_ip_cb+0x1e4>
    bc8a:	e769      	b.n	bb60 <m2m_ip_cb+0xb8>
			if(gpfAppResolveCb)
    bc8c:	4b47      	ldr	r3, [pc, #284]	; (bdac <m2m_ip_cb+0x304>)
    bc8e:	681b      	ldr	r3, [r3, #0]
    bc90:	2b00      	cmp	r3, #0
    bc92:	d100      	bne.n	bc96 <m2m_ip_cb+0x1ee>
    bc94:	e764      	b.n	bb60 <m2m_ip_cb+0xb8>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    bc96:	4b45      	ldr	r3, [pc, #276]	; (bdac <m2m_ip_cb+0x304>)
    bc98:	681b      	ldr	r3, [r3, #0]
    bc9a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    bc9c:	9203      	str	r2, [sp, #12]
    bc9e:	0011      	movs	r1, r2
    bca0:	a809      	add	r0, sp, #36	; 0x24
    bca2:	4798      	blx	r3
    bca4:	e75c      	b.n	bb60 <m2m_ip_cb+0xb8>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    bca6:	2306      	movs	r3, #6
    bca8:	469a      	mov	sl, r3
    bcaa:	e001      	b.n	bcb0 <m2m_ip_cb+0x208>
    bcac:	2306      	movs	r3, #6
    bcae:	469a      	mov	sl, r3
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    bcb0:	2300      	movs	r3, #0
    bcb2:	2210      	movs	r2, #16
    bcb4:	a905      	add	r1, sp, #20
    bcb6:	0020      	movs	r0, r4
    bcb8:	4f37      	ldr	r7, [pc, #220]	; (bd98 <m2m_ip_cb+0x2f0>)
    bcba:	47b8      	blx	r7
    bcbc:	2800      	cmp	r0, #0
    bcbe:	d000      	beq.n	bcc2 <m2m_ip_cb+0x21a>
    bcc0:	e74e      	b.n	bb60 <m2m_ip_cb+0xb8>
			sock			= strRecvReply.sock;
    bcc2:	aa05      	add	r2, sp, #20
    bcc4:	200c      	movs	r0, #12
    bcc6:	5610      	ldrsb	r0, [r2, r0]
			u16SessionID = strRecvReply.u16SessionID;
    bcc8:	89d3      	ldrh	r3, [r2, #14]
			gastrSockets[sock].bIsRecvPending = 0;
    bcca:	0107      	lsls	r7, r0, #4
    bccc:	4935      	ldr	r1, [pc, #212]	; (bda4 <m2m_ip_cb+0x2fc>)
    bcce:	19c9      	adds	r1, r1, r7
    bcd0:	2700      	movs	r7, #0
    bcd2:	730f      	strb	r7, [r1, #12]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    bcd4:	2608      	movs	r6, #8
    bcd6:	5f97      	ldrsh	r7, [r2, r6]
    bcd8:	46b8      	mov	r8, r7
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    bcda:	8957      	ldrh	r7, [r2, #10]
    bcdc:	46b9      	mov	r9, r7
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    bcde:	af09      	add	r7, sp, #36	; 0x24
    bce0:	8856      	ldrh	r6, [r2, #2]
    bce2:	817e      	strh	r6, [r7, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    bce4:	9a06      	ldr	r2, [sp, #24]
    bce6:	920c      	str	r2, [sp, #48]	; 0x30
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    bce8:	88ca      	ldrh	r2, [r1, #6]
    bcea:	b292      	uxth	r2, r2
    bcec:	4293      	cmp	r3, r2
    bcee:	d00c      	beq.n	bd0a <m2m_ip_cb+0x262>
				if(u16ReadSize < u16BufferSize)
    bcf0:	2d10      	cmp	r5, #16
    bcf2:	d800      	bhi.n	bcf6 <m2m_ip_cb+0x24e>
    bcf4:	e734      	b.n	bb60 <m2m_ip_cb+0xb8>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
    bcf6:	2301      	movs	r3, #1
    bcf8:	2200      	movs	r2, #0
    bcfa:	2100      	movs	r1, #0
    bcfc:	2000      	movs	r0, #0
    bcfe:	4c26      	ldr	r4, [pc, #152]	; (bd98 <m2m_ip_cb+0x2f0>)
    bd00:	47a0      	blx	r4
	{
    bd02:	e72d      	b.n	bb60 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    bd04:	2309      	movs	r3, #9
    bd06:	469a      	mov	sl, r3
    bd08:	e7d2      	b.n	bcb0 <m2m_ip_cb+0x208>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    bd0a:	4643      	mov	r3, r8
    bd0c:	2b00      	cmp	r3, #0
    bd0e:	dd01      	ble.n	bd14 <m2m_ip_cb+0x26c>
    bd10:	45a8      	cmp	r8, r5
    bd12:	db0f      	blt.n	bd34 <m2m_ip_cb+0x28c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    bd14:	ab09      	add	r3, sp, #36	; 0x24
    bd16:	4642      	mov	r2, r8
    bd18:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    bd1a:	2300      	movs	r3, #0
    bd1c:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    bd1e:	4b20      	ldr	r3, [pc, #128]	; (bda0 <m2m_ip_cb+0x2f8>)
    bd20:	681b      	ldr	r3, [r3, #0]
    bd22:	2b00      	cmp	r3, #0
    bd24:	d100      	bne.n	bd28 <m2m_ip_cb+0x280>
    bd26:	e71b      	b.n	bb60 <m2m_ip_cb+0xb8>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    bd28:	4b1d      	ldr	r3, [pc, #116]	; (bda0 <m2m_ip_cb+0x2f8>)
    bd2a:	681b      	ldr	r3, [r3, #0]
    bd2c:	aa09      	add	r2, sp, #36	; 0x24
    bd2e:	4651      	mov	r1, sl
    bd30:	4798      	blx	r3
    bd32:	e715      	b.n	bb60 <m2m_ip_cb+0xb8>
					u32Address += u16DataOffset;
    bd34:	0023      	movs	r3, r4
    bd36:	444b      	add	r3, r9
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    bd38:	4642      	mov	r2, r8
    bd3a:	4669      	mov	r1, sp
    bd3c:	818a      	strh	r2, [r1, #12]
    bd3e:	898a      	ldrh	r2, [r1, #12]
    bd40:	9200      	str	r2, [sp, #0]
    bd42:	4652      	mov	r2, sl
    bd44:	0039      	movs	r1, r7
    bd46:	4c1a      	ldr	r4, [pc, #104]	; (bdb0 <m2m_ip_cb+0x308>)
    bd48:	47a0      	blx	r4
    bd4a:	e709      	b.n	bb60 <m2m_ip_cb+0xb8>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    bd4c:	2507      	movs	r5, #7
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    bd4e:	2300      	movs	r3, #0
    bd50:	2208      	movs	r2, #8
    bd52:	a909      	add	r1, sp, #36	; 0x24
    bd54:	0020      	movs	r0, r4
    bd56:	4c10      	ldr	r4, [pc, #64]	; (bd98 <m2m_ip_cb+0x2f0>)
    bd58:	47a0      	blx	r4
    bd5a:	2800      	cmp	r0, #0
    bd5c:	d000      	beq.n	bd60 <m2m_ip_cb+0x2b8>
    bd5e:	e6ff      	b.n	bb60 <m2m_ip_cb+0xb8>
			sock = strReply.sock;
    bd60:	ab09      	add	r3, sp, #36	; 0x24
    bd62:	2000      	movs	r0, #0
    bd64:	5618      	ldrsb	r0, [r3, r0]
			u16SessionID = strReply.u16SessionID;
    bd66:	889a      	ldrh	r2, [r3, #4]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    bd68:	8859      	ldrh	r1, [r3, #2]
    bd6a:	ab05      	add	r3, sp, #20
    bd6c:	8019      	strh	r1, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
    bd6e:	0101      	lsls	r1, r0, #4
    bd70:	4b0c      	ldr	r3, [pc, #48]	; (bda4 <m2m_ip_cb+0x2fc>)
    bd72:	185b      	adds	r3, r3, r1
    bd74:	88db      	ldrh	r3, [r3, #6]
    bd76:	b29b      	uxth	r3, r3
    bd78:	429a      	cmp	r2, r3
    bd7a:	d000      	beq.n	bd7e <m2m_ip_cb+0x2d6>
    bd7c:	e6f0      	b.n	bb60 <m2m_ip_cb+0xb8>
				if(gpfAppSocketCb)
    bd7e:	4b08      	ldr	r3, [pc, #32]	; (bda0 <m2m_ip_cb+0x2f8>)
    bd80:	681b      	ldr	r3, [r3, #0]
    bd82:	2b00      	cmp	r3, #0
    bd84:	d100      	bne.n	bd88 <m2m_ip_cb+0x2e0>
    bd86:	e6eb      	b.n	bb60 <m2m_ip_cb+0xb8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    bd88:	4b05      	ldr	r3, [pc, #20]	; (bda0 <m2m_ip_cb+0x2f8>)
    bd8a:	681b      	ldr	r3, [r3, #0]
    bd8c:	aa05      	add	r2, sp, #20
    bd8e:	0029      	movs	r1, r5
    bd90:	4798      	blx	r3
	{
    bd92:	e6e5      	b.n	bb60 <m2m_ip_cb+0xb8>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    bd94:	2508      	movs	r5, #8
    bd96:	e7da      	b.n	bd4e <m2m_ip_cb+0x2a6>
    bd98:	00009b09 	.word	0x00009b09
    bd9c:	20005b7c 	.word	0x20005b7c
    bda0:	20005b78 	.word	0x20005b78
    bda4:	20005ac8 	.word	0x20005ac8
    bda8:	20003ed2 	.word	0x20003ed2
    bdac:	20005b80 	.word	0x20005b80
    bdb0:	0000b999 	.word	0x0000b999

0000bdb4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    bdb4:	b510      	push	{r4, lr}
	if(gbSocketInit == 0)
    bdb6:	4b0a      	ldr	r3, [pc, #40]	; (bde0 <socketInit+0x2c>)
    bdb8:	781b      	ldrb	r3, [r3, #0]
    bdba:	2b00      	cmp	r3, #0
    bdbc:	d000      	beq.n	bdc0 <socketInit+0xc>
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
		gbSocketInit	= 1;
		gu16SessionID	= 0;
	}
}
    bdbe:	bd10      	pop	{r4, pc}
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    bdc0:	22b0      	movs	r2, #176	; 0xb0
    bdc2:	2100      	movs	r1, #0
    bdc4:	4807      	ldr	r0, [pc, #28]	; (bde4 <socketInit+0x30>)
    bdc6:	4b08      	ldr	r3, [pc, #32]	; (bde8 <socketInit+0x34>)
    bdc8:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    bdca:	4908      	ldr	r1, [pc, #32]	; (bdec <socketInit+0x38>)
    bdcc:	2002      	movs	r0, #2
    bdce:	4b08      	ldr	r3, [pc, #32]	; (bdf0 <socketInit+0x3c>)
    bdd0:	4798      	blx	r3
		gbSocketInit	= 1;
    bdd2:	2201      	movs	r2, #1
    bdd4:	4b02      	ldr	r3, [pc, #8]	; (bde0 <socketInit+0x2c>)
    bdd6:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
    bdd8:	2200      	movs	r2, #0
    bdda:	4b06      	ldr	r3, [pc, #24]	; (bdf4 <socketInit+0x40>)
    bddc:	801a      	strh	r2, [r3, #0]
}
    bdde:	e7ee      	b.n	bdbe <socketInit+0xa>
    bde0:	20003ed1 	.word	0x20003ed1
    bde4:	20005ac8 	.word	0x20005ac8
    bde8:	00009419 	.word	0x00009419
    bdec:	0000baa9 	.word	0x0000baa9
    bdf0:	00009be1 	.word	0x00009be1
    bdf4:	20003ed2 	.word	0x20003ed2

0000bdf8 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
    bdf8:	b510      	push	{r4, lr}
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    bdfa:	22b0      	movs	r2, #176	; 0xb0
    bdfc:	2100      	movs	r1, #0
    bdfe:	4807      	ldr	r0, [pc, #28]	; (be1c <socketDeinit+0x24>)
    be00:	4b07      	ldr	r3, [pc, #28]	; (be20 <socketDeinit+0x28>)
    be02:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
    be04:	2100      	movs	r1, #0
    be06:	2002      	movs	r0, #2
    be08:	4b06      	ldr	r3, [pc, #24]	; (be24 <socketDeinit+0x2c>)
    be0a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
    be0c:	2300      	movs	r3, #0
    be0e:	4a06      	ldr	r2, [pc, #24]	; (be28 <socketDeinit+0x30>)
    be10:	6013      	str	r3, [r2, #0]
	gpfAppResolveCb	= NULL;
    be12:	4a06      	ldr	r2, [pc, #24]	; (be2c <socketDeinit+0x34>)
    be14:	6013      	str	r3, [r2, #0]
	gbSocketInit	= 0;
    be16:	4a06      	ldr	r2, [pc, #24]	; (be30 <socketDeinit+0x38>)
    be18:	7013      	strb	r3, [r2, #0]
}
    be1a:	bd10      	pop	{r4, pc}
    be1c:	20005ac8 	.word	0x20005ac8
    be20:	00009419 	.word	0x00009419
    be24:	00009be1 	.word	0x00009be1
    be28:	20005b78 	.word	0x20005b78
    be2c:	20005b80 	.word	0x20005b80
    be30:	20003ed1 	.word	0x20003ed1

0000be34 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    be34:	4b02      	ldr	r3, [pc, #8]	; (be40 <registerSocketCallback+0xc>)
    be36:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    be38:	4b02      	ldr	r3, [pc, #8]	; (be44 <registerSocketCallback+0x10>)
    be3a:	6019      	str	r1, [r3, #0]
}
    be3c:	4770      	bx	lr
    be3e:	46c0      	nop			; (mov r8, r8)
    be40:	20005b78 	.word	0x20005b78
    be44:	20005b80 	.word	0x20005b80

0000be48 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    be48:	b5f0      	push	{r4, r5, r6, r7, lr}
    be4a:	46d6      	mov	lr, sl
    be4c:	4647      	mov	r7, r8
    be4e:	b580      	push	{r7, lr}
    be50:	b089      	sub	sp, #36	; 0x24
    be52:	9205      	str	r2, [sp, #20]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    be54:	2802      	cmp	r0, #2
    be56:	d000      	beq.n	be5a <socket+0x12>
    be58:	e09b      	b.n	bf92 <socket+0x14a>
	{
		if(u8Type == SOCK_STREAM)
    be5a:	2901      	cmp	r1, #1
    be5c:	d00a      	beq.n	be74 <socket+0x2c>
					sock = (SOCKET)u8SockID;
					break;
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
    be5e:	2902      	cmp	r1, #2
    be60:	d100      	bne.n	be64 <socket+0x1c>
    be62:	e06f      	b.n	bf44 <socket+0xfc>
	SOCKET					sock = -1;
    be64:	2501      	movs	r5, #1
    be66:	426d      	negs	r5, r5
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
			}
		}
	}
	return sock;
}
    be68:	0028      	movs	r0, r5
    be6a:	b009      	add	sp, #36	; 0x24
    be6c:	bc0c      	pop	{r2, r3}
    be6e:	4690      	mov	r8, r2
    be70:	469a      	mov	sl, r3
    be72:	bdf0      	pop	{r4, r5, r6, r7, pc}
				u8SockID	= u8NextTcpSock;
    be74:	4c48      	ldr	r4, [pc, #288]	; (bf98 <socket+0x150>)
    be76:	7827      	ldrb	r7, [r4, #0]
    be78:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    be7a:	7826      	ldrb	r6, [r4, #0]
    be7c:	b2f6      	uxtb	r6, r6
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    be7e:	7820      	ldrb	r0, [r4, #0]
    be80:	3001      	adds	r0, #1
    be82:	3106      	adds	r1, #6
    be84:	4b45      	ldr	r3, [pc, #276]	; (bf9c <socket+0x154>)
    be86:	4798      	blx	r3
    be88:	b2c9      	uxtb	r1, r1
    be8a:	7021      	strb	r1, [r4, #0]
				if(!pstrSock->bIsUsed)
    be8c:	0132      	lsls	r2, r6, #4
    be8e:	4b44      	ldr	r3, [pc, #272]	; (bfa0 <socket+0x158>)
    be90:	189b      	adds	r3, r3, r2
    be92:	7a9b      	ldrb	r3, [r3, #10]
    be94:	2506      	movs	r5, #6
    be96:	2b00      	cmp	r3, #0
    be98:	d018      	beq.n	becc <socket+0x84>
				u8SockID	= u8NextTcpSock;
    be9a:	4e3f      	ldr	r6, [pc, #252]	; (bf98 <socket+0x150>)
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    be9c:	4b3f      	ldr	r3, [pc, #252]	; (bf9c <socket+0x154>)
    be9e:	469a      	mov	sl, r3
				if(!pstrSock->bIsUsed)
    bea0:	4b3f      	ldr	r3, [pc, #252]	; (bfa0 <socket+0x158>)
    bea2:	4698      	mov	r8, r3
				u8SockID	= u8NextTcpSock;
    bea4:	7837      	ldrb	r7, [r6, #0]
    bea6:	b2ff      	uxtb	r7, r7
				pstrSock	= &gastrSockets[u8NextTcpSock];
    bea8:	7834      	ldrb	r4, [r6, #0]
    beaa:	b2e4      	uxtb	r4, r4
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
    beac:	7830      	ldrb	r0, [r6, #0]
    beae:	3001      	adds	r0, #1
    beb0:	2107      	movs	r1, #7
    beb2:	47d0      	blx	sl
    beb4:	b2c9      	uxtb	r1, r1
    beb6:	7031      	strb	r1, [r6, #0]
				if(!pstrSock->bIsUsed)
    beb8:	0123      	lsls	r3, r4, #4
    beba:	4443      	add	r3, r8
    bebc:	7a9b      	ldrb	r3, [r3, #10]
    bebe:	2b00      	cmp	r3, #0
    bec0:	d007      	beq.n	bed2 <socket+0x8a>
    bec2:	3d01      	subs	r5, #1
    bec4:	b2ed      	uxtb	r5, r5
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
    bec6:	2d00      	cmp	r5, #0
    bec8:	d1ec      	bne.n	bea4 <socket+0x5c>
    beca:	e7cb      	b.n	be64 <socket+0x1c>
				pstrSock	= &gastrSockets[u8NextTcpSock];
    becc:	4b34      	ldr	r3, [pc, #208]	; (bfa0 <socket+0x158>)
    bece:	18d4      	adds	r4, r2, r3
    bed0:	e002      	b.n	bed8 <socket+0x90>
    bed2:	0124      	lsls	r4, r4, #4
    bed4:	4b32      	ldr	r3, [pc, #200]	; (bfa0 <socket+0x158>)
    bed6:	18e4      	adds	r4, r4, r3
					sock = (SOCKET)u8SockID;
    bed8:	b27d      	sxtb	r5, r7
		if(sock >= 0)
    beda:	2d00      	cmp	r5, #0
    bedc:	dbc4      	blt.n	be68 <socket+0x20>
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    bede:	2210      	movs	r2, #16
    bee0:	2100      	movs	r1, #0
    bee2:	0020      	movs	r0, r4
    bee4:	4b2f      	ldr	r3, [pc, #188]	; (bfa4 <socket+0x15c>)
    bee6:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
    bee8:	2301      	movs	r3, #1
    beea:	72a3      	strb	r3, [r4, #10]
			++gu16SessionID;
    beec:	4a2e      	ldr	r2, [pc, #184]	; (bfa8 <socket+0x160>)
    beee:	8813      	ldrh	r3, [r2, #0]
    bef0:	3301      	adds	r3, #1
    bef2:	b29b      	uxth	r3, r3
    bef4:	8013      	strh	r3, [r2, #0]
			if(gu16SessionID == 0)
    bef6:	8813      	ldrh	r3, [r2, #0]
    bef8:	b29b      	uxth	r3, r3
    befa:	2b00      	cmp	r3, #0
    befc:	d103      	bne.n	bf06 <socket+0xbe>
				++gu16SessionID;
    befe:	8813      	ldrh	r3, [r2, #0]
    bf00:	3301      	adds	r3, #1
    bf02:	b29b      	uxth	r3, r3
    bf04:	8013      	strh	r3, [r2, #0]
			pstrSock->u16SessionID = gu16SessionID;
    bf06:	4e28      	ldr	r6, [pc, #160]	; (bfa8 <socket+0x160>)
    bf08:	8833      	ldrh	r3, [r6, #0]
    bf0a:	b29b      	uxth	r3, r3
    bf0c:	80e3      	strh	r3, [r4, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
    bf0e:	4827      	ldr	r0, [pc, #156]	; (bfac <socket+0x164>)
    bf10:	4f27      	ldr	r7, [pc, #156]	; (bfb0 <socket+0x168>)
    bf12:	47b8      	blx	r7
    bf14:	8832      	ldrh	r2, [r6, #0]
    bf16:	b292      	uxth	r2, r2
    bf18:	0029      	movs	r1, r5
    bf1a:	4826      	ldr	r0, [pc, #152]	; (bfb4 <socket+0x16c>)
    bf1c:	47b8      	blx	r7
    bf1e:	4826      	ldr	r0, [pc, #152]	; (bfb8 <socket+0x170>)
    bf20:	47b8      	blx	r7
			if(u8Flags & SOCKET_FLAGS_SSL)
    bf22:	9b05      	ldr	r3, [sp, #20]
    bf24:	07db      	lsls	r3, r3, #31
    bf26:	d59f      	bpl.n	be68 <socket+0x20>
				strSSLCreate.sslSock = sock;
    bf28:	aa07      	add	r2, sp, #28
    bf2a:	7015      	strb	r5, [r2, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    bf2c:	2321      	movs	r3, #33	; 0x21
    bf2e:	72e3      	strb	r3, [r4, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    bf30:	2300      	movs	r3, #0
    bf32:	9302      	str	r3, [sp, #8]
    bf34:	9301      	str	r3, [sp, #4]
    bf36:	9300      	str	r3, [sp, #0]
    bf38:	3304      	adds	r3, #4
    bf3a:	2150      	movs	r1, #80	; 0x50
    bf3c:	2002      	movs	r0, #2
    bf3e:	4c1f      	ldr	r4, [pc, #124]	; (bfbc <socket+0x174>)
    bf40:	47a0      	blx	r4
    bf42:	e791      	b.n	be68 <socket+0x20>
				u8SockID		= u8NextUdpSock;
    bf44:	4b1e      	ldr	r3, [pc, #120]	; (bfc0 <socket+0x178>)
    bf46:	781d      	ldrb	r5, [r3, #0]
    bf48:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    bf4a:	781c      	ldrb	r4, [r3, #0]
    bf4c:	0124      	lsls	r4, r4, #4
    bf4e:	4a1d      	ldr	r2, [pc, #116]	; (bfc4 <socket+0x17c>)
    bf50:	18a4      	adds	r4, r4, r2
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    bf52:	7819      	ldrb	r1, [r3, #0]
    bf54:	3101      	adds	r1, #1
    bf56:	2203      	movs	r2, #3
    bf58:	400a      	ands	r2, r1
    bf5a:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
    bf5c:	7aa3      	ldrb	r3, [r4, #10]
    bf5e:	2b00      	cmp	r3, #0
    bf60:	d014      	beq.n	bf8c <socket+0x144>
    bf62:	2203      	movs	r2, #3
				u8SockID		= u8NextUdpSock;
    bf64:	4916      	ldr	r1, [pc, #88]	; (bfc0 <socket+0x178>)
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    bf66:	4f17      	ldr	r7, [pc, #92]	; (bfc4 <socket+0x17c>)
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    bf68:	2003      	movs	r0, #3
				u8SockID		= u8NextUdpSock;
    bf6a:	780d      	ldrb	r5, [r1, #0]
    bf6c:	b2ed      	uxtb	r5, r5
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
    bf6e:	780c      	ldrb	r4, [r1, #0]
    bf70:	0124      	lsls	r4, r4, #4
    bf72:	19e4      	adds	r4, r4, r7
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
    bf74:	780b      	ldrb	r3, [r1, #0]
    bf76:	3301      	adds	r3, #1
    bf78:	4003      	ands	r3, r0
    bf7a:	700b      	strb	r3, [r1, #0]
				if(!pstrSock->bIsUsed)
    bf7c:	7aa3      	ldrb	r3, [r4, #10]
    bf7e:	2b00      	cmp	r3, #0
    bf80:	d004      	beq.n	bf8c <socket+0x144>
    bf82:	3a01      	subs	r2, #1
    bf84:	b2d2      	uxtb	r2, r2
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
    bf86:	2a00      	cmp	r2, #0
    bf88:	d1ef      	bne.n	bf6a <socket+0x122>
    bf8a:	e76b      	b.n	be64 <socket+0x1c>
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
    bf8c:	3507      	adds	r5, #7
    bf8e:	b26d      	sxtb	r5, r5
					break;
    bf90:	e7a3      	b.n	beda <socket+0x92>
	SOCKET					sock = -1;
    bf92:	2501      	movs	r5, #1
    bf94:	426d      	negs	r5, r5
    bf96:	e767      	b.n	be68 <socket+0x20>
    bf98:	20003ed4 	.word	0x20003ed4
    bf9c:	00012055 	.word	0x00012055
    bfa0:	20005ac8 	.word	0x20005ac8
    bfa4:	00009419 	.word	0x00009419
    bfa8:	20003ed2 	.word	0x20003ed2
    bfac:	00017f70 	.word	0x00017f70
    bfb0:	00007fed 	.word	0x00007fed
    bfb4:	00018a3c 	.word	0x00018a3c
    bfb8:	00017c5c 	.word	0x00017c5c
    bfbc:	0000952d 	.word	0x0000952d
    bfc0:	20003ed5 	.word	0x20003ed5
    bfc4:	20005b38 	.word	0x20005b38

0000bfc8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    bfc8:	b570      	push	{r4, r5, r6, lr}
    bfca:	b088      	sub	sp, #32
    bfcc:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    bfce:	db30      	blt.n	c032 <connect+0x6a>
    bfd0:	2900      	cmp	r1, #0
    bfd2:	d031      	beq.n	c038 <connect+0x70>
    bfd4:	0100      	lsls	r0, r0, #4
    bfd6:	4b1d      	ldr	r3, [pc, #116]	; (c04c <connect+0x84>)
    bfd8:	181b      	adds	r3, r3, r0
    bfda:	7a9b      	ldrb	r3, [r3, #10]
    bfdc:	2b01      	cmp	r3, #1
    bfde:	d12e      	bne.n	c03e <connect+0x76>
    bfe0:	2a00      	cmp	r2, #0
    bfe2:	d02f      	beq.n	c044 <connect+0x7c>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    bfe4:	4b19      	ldr	r3, [pc, #100]	; (c04c <connect+0x84>)
    bfe6:	181b      	adds	r3, r3, r0
    bfe8:	7adb      	ldrb	r3, [r3, #11]
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    bfea:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    bfec:	07db      	lsls	r3, r3, #31
    bfee:	d505      	bpl.n	bffc <connect+0x34>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    bff0:	4b16      	ldr	r3, [pc, #88]	; (c04c <connect+0x84>)
    bff2:	181b      	adds	r3, r3, r0
    bff4:	7ada      	ldrb	r2, [r3, #11]
    bff6:	ab05      	add	r3, sp, #20
    bff8:	725a      	strb	r2, [r3, #9]
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    bffa:	3607      	adds	r6, #7
		}
		strConnect.sock = sock;
    bffc:	ad05      	add	r5, sp, #20
    bffe:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    c000:	2208      	movs	r2, #8
    c002:	0028      	movs	r0, r5
    c004:	4b12      	ldr	r3, [pc, #72]	; (c050 <connect+0x88>)
    c006:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    c008:	0124      	lsls	r4, r4, #4
    c00a:	4b10      	ldr	r3, [pc, #64]	; (c04c <connect+0x84>)
    c00c:	191c      	adds	r4, r3, r4
    c00e:	88e3      	ldrh	r3, [r4, #6]
    c010:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    c012:	2300      	movs	r3, #0
    c014:	9302      	str	r3, [sp, #8]
    c016:	9301      	str	r3, [sp, #4]
    c018:	9300      	str	r3, [sp, #0]
    c01a:	330c      	adds	r3, #12
    c01c:	002a      	movs	r2, r5
    c01e:	0031      	movs	r1, r6
    c020:	2002      	movs	r0, #2
    c022:	4c0c      	ldr	r4, [pc, #48]	; (c054 <connect+0x8c>)
    c024:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    c026:	2800      	cmp	r0, #0
    c028:	d001      	beq.n	c02e <connect+0x66>
		{
			s8Ret = SOCK_ERR_INVALID;
    c02a:	2009      	movs	r0, #9
    c02c:	4240      	negs	r0, r0
		}
	}
	return s8Ret;
}
    c02e:	b008      	add	sp, #32
    c030:	bd70      	pop	{r4, r5, r6, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    c032:	2006      	movs	r0, #6
    c034:	4240      	negs	r0, r0
    c036:	e7fa      	b.n	c02e <connect+0x66>
    c038:	2006      	movs	r0, #6
    c03a:	4240      	negs	r0, r0
    c03c:	e7f7      	b.n	c02e <connect+0x66>
    c03e:	2006      	movs	r0, #6
    c040:	4240      	negs	r0, r0
    c042:	e7f4      	b.n	c02e <connect+0x66>
    c044:	2006      	movs	r0, #6
    c046:	4240      	negs	r0, r0
    c048:	e7f1      	b.n	c02e <connect+0x66>
    c04a:	46c0      	nop			; (mov r8, r8)
    c04c:	20005ac8 	.word	0x20005ac8
    c050:	00009405 	.word	0x00009405
    c054:	0000952d 	.word	0x0000952d

0000c058 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    c058:	b530      	push	{r4, r5, lr}
    c05a:	b089      	sub	sp, #36	; 0x24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    c05c:	2800      	cmp	r0, #0
    c05e:	db36      	blt.n	c0ce <send+0x76>
    c060:	2900      	cmp	r1, #0
    c062:	d037      	beq.n	c0d4 <send+0x7c>
    c064:	23af      	movs	r3, #175	; 0xaf
    c066:	00db      	lsls	r3, r3, #3
    c068:	429a      	cmp	r2, r3
    c06a:	d836      	bhi.n	c0da <send+0x82>
    c06c:	0104      	lsls	r4, r0, #4
    c06e:	4b1e      	ldr	r3, [pc, #120]	; (c0e8 <send+0x90>)
    c070:	191b      	adds	r3, r3, r4
    c072:	7a9b      	ldrb	r3, [r3, #10]
    c074:	2b01      	cmp	r3, #1
    c076:	d133      	bne.n	c0e0 <send+0x88>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock			= sock;
    c078:	ab04      	add	r3, sp, #16
    c07a:	7018      	strb	r0, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    c07c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    c07e:	0025      	movs	r5, r4
    c080:	4c19      	ldr	r4, [pc, #100]	; (c0e8 <send+0x90>)
    c082:	1964      	adds	r4, r4, r5
    c084:	88e4      	ldrh	r4, [r4, #6]
    c086:	819c      	strh	r4, [r3, #12]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    c088:	2550      	movs	r5, #80	; 0x50

		if(sock >= TCP_SOCK_MAX)
    c08a:	2806      	cmp	r0, #6
    c08c:	dd00      	ble.n	c090 <send+0x38>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    c08e:	3d0c      	subs	r5, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c090:	0104      	lsls	r4, r0, #4
    c092:	4b15      	ldr	r3, [pc, #84]	; (c0e8 <send+0x90>)
    c094:	191b      	adds	r3, r3, r4
    c096:	7adc      	ldrb	r4, [r3, #11]
		u8Cmd			= SOCKET_CMD_SEND;
    c098:	2345      	movs	r3, #69	; 0x45
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c09a:	07e4      	lsls	r4, r4, #31
    c09c:	d505      	bpl.n	c0aa <send+0x52>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    c09e:	0100      	lsls	r0, r0, #4
    c0a0:	4b11      	ldr	r3, [pc, #68]	; (c0e8 <send+0x90>)
    c0a2:	1818      	adds	r0, r3, r0
    c0a4:	8905      	ldrh	r5, [r0, #8]
    c0a6:	b2ad      	uxth	r5, r5
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    c0a8:	234c      	movs	r3, #76	; 0x4c
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    c0aa:	2080      	movs	r0, #128	; 0x80
    c0ac:	4318      	orrs	r0, r3
    c0ae:	9502      	str	r5, [sp, #8]
    c0b0:	9201      	str	r2, [sp, #4]
    c0b2:	9100      	str	r1, [sp, #0]
    c0b4:	2310      	movs	r3, #16
    c0b6:	aa04      	add	r2, sp, #16
    c0b8:	0001      	movs	r1, r0
    c0ba:	2002      	movs	r0, #2
    c0bc:	4c0b      	ldr	r4, [pc, #44]	; (c0ec <send+0x94>)
    c0be:	47a0      	blx	r4
    c0c0:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    c0c2:	2800      	cmp	r0, #0
    c0c4:	d000      	beq.n	c0c8 <send+0x70>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    c0c6:	3b0e      	subs	r3, #14
		}
	}
	return s16Ret;
}
    c0c8:	0018      	movs	r0, r3
    c0ca:	b009      	add	sp, #36	; 0x24
    c0cc:	bd30      	pop	{r4, r5, pc}
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    c0ce:	2306      	movs	r3, #6
    c0d0:	425b      	negs	r3, r3
    c0d2:	e7f9      	b.n	c0c8 <send+0x70>
    c0d4:	2306      	movs	r3, #6
    c0d6:	425b      	negs	r3, r3
    c0d8:	e7f6      	b.n	c0c8 <send+0x70>
    c0da:	2306      	movs	r3, #6
    c0dc:	425b      	negs	r3, r3
    c0de:	e7f3      	b.n	c0c8 <send+0x70>
    c0e0:	2306      	movs	r3, #6
    c0e2:	425b      	negs	r3, r3
    c0e4:	e7f0      	b.n	c0c8 <send+0x70>
    c0e6:	46c0      	nop			; (mov r8, r8)
    c0e8:	20005ac8 	.word	0x20005ac8
    c0ec:	0000952d 	.word	0x0000952d

0000c0f0 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    c0f0:	b530      	push	{r4, r5, lr}
    c0f2:	b087      	sub	sp, #28
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    c0f4:	2800      	cmp	r0, #0
    c0f6:	db34      	blt.n	c162 <recv+0x72>
    c0f8:	2900      	cmp	r1, #0
    c0fa:	d035      	beq.n	c168 <recv+0x78>
    c0fc:	2a00      	cmp	r2, #0
    c0fe:	d036      	beq.n	c16e <recv+0x7e>
    c100:	0105      	lsls	r5, r0, #4
    c102:	4c1e      	ldr	r4, [pc, #120]	; (c17c <recv+0x8c>)
    c104:	1964      	adds	r4, r4, r5
    c106:	7aa4      	ldrb	r4, [r4, #10]
    c108:	2c01      	cmp	r4, #1
    c10a:	d133      	bne.n	c174 <recv+0x84>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    c10c:	4c1b      	ldr	r4, [pc, #108]	; (c17c <recv+0x8c>)
    c10e:	5129      	str	r1, [r5, r4]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    c110:	1964      	adds	r4, r4, r5
    c112:	80a2      	strh	r2, [r4, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    c114:	7b21      	ldrb	r1, [r4, #12]
		s16Ret = SOCK_ERR_NO_ERROR;
    c116:	2200      	movs	r2, #0
		if(!gastrSockets[sock].bIsRecvPending)
    c118:	2900      	cmp	r1, #0
    c11a:	d11d      	bne.n	c158 <recv+0x68>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    c11c:	2101      	movs	r1, #1
    c11e:	7321      	strb	r1, [r4, #12]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c120:	7ae2      	ldrb	r2, [r4, #11]
			uint8		u8Cmd = SOCKET_CMD_RECV;
    c122:	3145      	adds	r1, #69	; 0x45
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c124:	07d2      	lsls	r2, r2, #31
    c126:	d500      	bpl.n	c12a <recv+0x3a>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    c128:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    c12a:	2b00      	cmp	r3, #0
    c12c:	d117      	bne.n	c15e <recv+0x6e>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    c12e:	3b01      	subs	r3, #1
    c130:	9304      	str	r3, [sp, #16]
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
			strRecv.sock = sock;
    c132:	aa04      	add	r2, sp, #16
    c134:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    c136:	0100      	lsls	r0, r0, #4
    c138:	4b10      	ldr	r3, [pc, #64]	; (c17c <recv+0x8c>)
    c13a:	1818      	adds	r0, r3, r0
    c13c:	88c3      	ldrh	r3, [r0, #6]
    c13e:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    c140:	2300      	movs	r3, #0
    c142:	9302      	str	r3, [sp, #8]
    c144:	9301      	str	r3, [sp, #4]
    c146:	9300      	str	r3, [sp, #0]
    c148:	3308      	adds	r3, #8
    c14a:	2002      	movs	r0, #2
    c14c:	4c0c      	ldr	r4, [pc, #48]	; (c180 <recv+0x90>)
    c14e:	47a0      	blx	r4
    c150:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    c152:	2800      	cmp	r0, #0
    c154:	d000      	beq.n	c158 <recv+0x68>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    c156:	3a0e      	subs	r2, #14
			}
		}
	}
	return s16Ret;
}
    c158:	0010      	movs	r0, r2
    c15a:	b007      	add	sp, #28
    c15c:	bd30      	pop	{r4, r5, pc}
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    c15e:	9304      	str	r3, [sp, #16]
    c160:	e7e7      	b.n	c132 <recv+0x42>
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    c162:	2206      	movs	r2, #6
    c164:	4252      	negs	r2, r2
    c166:	e7f7      	b.n	c158 <recv+0x68>
    c168:	2206      	movs	r2, #6
    c16a:	4252      	negs	r2, r2
    c16c:	e7f4      	b.n	c158 <recv+0x68>
    c16e:	2206      	movs	r2, #6
    c170:	4252      	negs	r2, r2
    c172:	e7f1      	b.n	c158 <recv+0x68>
    c174:	2206      	movs	r2, #6
    c176:	4252      	negs	r2, r2
    c178:	e7ee      	b.n	c158 <recv+0x68>
    c17a:	46c0      	nop			; (mov r8, r8)
    c17c:	20005ac8 	.word	0x20005ac8
    c180:	0000952d 	.word	0x0000952d

0000c184 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    c184:	b530      	push	{r4, r5, lr}
    c186:	b087      	sub	sp, #28
    c188:	0004      	movs	r4, r0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    M2M_INFO("Sock to delete <%d>\n", sock);
    c18a:	481d      	ldr	r0, [pc, #116]	; (c200 <close+0x7c>)
    c18c:	4d1d      	ldr	r5, [pc, #116]	; (c204 <close+0x80>)
    c18e:	47a8      	blx	r5
    c190:	0021      	movs	r1, r4
    c192:	481d      	ldr	r0, [pc, #116]	; (c208 <close+0x84>)
    c194:	47a8      	blx	r5
    c196:	481d      	ldr	r0, [pc, #116]	; (c20c <close+0x88>)
    c198:	47a8      	blx	r5
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    c19a:	2c00      	cmp	r4, #0
    c19c:	db2a      	blt.n	c1f4 <close+0x70>
    c19e:	0122      	lsls	r2, r4, #4
    c1a0:	4b1b      	ldr	r3, [pc, #108]	; (c210 <close+0x8c>)
    c1a2:	189b      	adds	r3, r3, r2
    c1a4:	7a9b      	ldrb	r3, [r3, #10]
    c1a6:	2b01      	cmp	r3, #1
    c1a8:	d127      	bne.n	c1fa <close+0x76>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    c1aa:	a905      	add	r1, sp, #20
    c1ac:	700c      	strb	r4, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    c1ae:	4b18      	ldr	r3, [pc, #96]	; (c210 <close+0x8c>)
    c1b0:	189b      	adds	r3, r3, r2
    c1b2:	88da      	ldrh	r2, [r3, #6]
    c1b4:	804a      	strh	r2, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    c1b6:	2200      	movs	r2, #0
    c1b8:	729a      	strb	r2, [r3, #10]
		gastrSockets[sock].u16SessionID =0;
    c1ba:	80da      	strh	r2, [r3, #6]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c1bc:	7adb      	ldrb	r3, [r3, #11]
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    c1be:	2149      	movs	r1, #73	; 0x49
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    c1c0:	07db      	lsls	r3, r3, #31
    c1c2:	d500      	bpl.n	c1c6 <close+0x42>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    c1c4:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    c1c6:	2300      	movs	r3, #0
    c1c8:	9302      	str	r3, [sp, #8]
    c1ca:	9301      	str	r3, [sp, #4]
    c1cc:	9300      	str	r3, [sp, #0]
    c1ce:	3304      	adds	r3, #4
    c1d0:	aa05      	add	r2, sp, #20
    c1d2:	2002      	movs	r0, #2
    c1d4:	4d0f      	ldr	r5, [pc, #60]	; (c214 <close+0x90>)
    c1d6:	47a8      	blx	r5
    c1d8:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    c1da:	d001      	beq.n	c1e0 <close+0x5c>
		{
			s8Ret = SOCK_ERR_INVALID;
    c1dc:	2509      	movs	r5, #9
    c1de:	426d      	negs	r5, r5
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    c1e0:	0124      	lsls	r4, r4, #4
    c1e2:	480b      	ldr	r0, [pc, #44]	; (c210 <close+0x8c>)
    c1e4:	1820      	adds	r0, r4, r0
    c1e6:	2210      	movs	r2, #16
    c1e8:	2100      	movs	r1, #0
    c1ea:	4b0b      	ldr	r3, [pc, #44]	; (c218 <close+0x94>)
    c1ec:	4798      	blx	r3
	}
	return s8Ret;
}
    c1ee:	0028      	movs	r0, r5
    c1f0:	b007      	add	sp, #28
    c1f2:	bd30      	pop	{r4, r5, pc}
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    c1f4:	2506      	movs	r5, #6
    c1f6:	426d      	negs	r5, r5
    c1f8:	e7f9      	b.n	c1ee <close+0x6a>
    c1fa:	2506      	movs	r5, #6
    c1fc:	426d      	negs	r5, r5
    c1fe:	e7f6      	b.n	c1ee <close+0x6a>
    c200:	00017f70 	.word	0x00017f70
    c204:	00007fed 	.word	0x00007fed
    c208:	00018a24 	.word	0x00018a24
    c20c:	00017c5c 	.word	0x00017c5c
    c210:	20005ac8 	.word	0x20005ac8
    c214:	0000952d 	.word	0x0000952d
    c218:	00009419 	.word	0x00009419

0000c21c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    c21c:	b570      	push	{r4, r5, r6, lr}
    c21e:	b082      	sub	sp, #8
	uint8	tmp;
	uint32	u32IP = 0;
    c220:	2300      	movs	r3, #0
    c222:	9301      	str	r3, [sp, #4]
    c224:	2600      	movs	r6, #0
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    c226:	2100      	movs	r1, #0
    c228:	7802      	ldrb	r2, [r0, #0]
    c22a:	1c44      	adds	r4, r0, #1
    c22c:	3005      	adds	r0, #5
    c22e:	000b      	movs	r3, r1
    c230:	e009      	b.n	c246 <nmi_inet_addr+0x2a>
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
			{
				tmp = (tmp * 10) + (c - '0');
    c232:	009d      	lsls	r5, r3, #2
    c234:	195b      	adds	r3, r3, r5
    c236:	005b      	lsls	r3, r3, #1
    c238:	189b      	adds	r3, r3, r2
    c23a:	b2db      	uxtb	r3, r3
			}
			else
			{
				return 0;
			}
			++pcIpAddr;
    c23c:	0022      	movs	r2, r4
    c23e:	3401      	adds	r4, #1
			if(j > 4)
    c240:	42a0      	cmp	r0, r4
    c242:	d00a      	beq.n	c25a <nmi_inet_addr+0x3e>
			c = *pcIpAddr;
    c244:	7812      	ldrb	r2, [r2, #0]
			if(c == '.' || c == 0)
    c246:	2a2e      	cmp	r2, #46	; 0x2e
    c248:	d00a      	beq.n	c260 <nmi_inet_addr+0x44>
    c24a:	2a00      	cmp	r2, #0
    c24c:	d00c      	beq.n	c268 <nmi_inet_addr+0x4c>
			else if(c >= '0' && c <= '9')
    c24e:	3a30      	subs	r2, #48	; 0x30
    c250:	b2d2      	uxtb	r2, r2
    c252:	2a09      	cmp	r2, #9
    c254:	d9ed      	bls.n	c232 <nmi_inet_addr+0x16>
				return 0;
    c256:	2000      	movs	r0, #0
    c258:	e000      	b.n	c25c <nmi_inet_addr+0x40>
				return 0;
    c25a:	2000      	movs	r0, #0
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    c25c:	b002      	add	sp, #8
    c25e:	bd70      	pop	{r4, r5, r6, pc}
				au8IP[i] = tmp;
    c260:	466a      	mov	r2, sp
    c262:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    c264:	0020      	movs	r0, r4
    c266:	e002      	b.n	c26e <nmi_inet_addr+0x52>
				au8IP[i] = tmp;
    c268:	466a      	mov	r2, sp
    c26a:	54b3      	strb	r3, [r6, r2]
			++pcIpAddr;
    c26c:	0020      	movs	r0, r4
    c26e:	3601      	adds	r6, #1
	for(i = 0; i < 4; ++i)
    c270:	2e04      	cmp	r6, #4
    c272:	d1d9      	bne.n	c228 <nmi_inet_addr+0xc>
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    c274:	2204      	movs	r2, #4
    c276:	4669      	mov	r1, sp
    c278:	a801      	add	r0, sp, #4
    c27a:	4b02      	ldr	r3, [pc, #8]	; (c284 <nmi_inet_addr+0x68>)
    c27c:	4798      	blx	r3
	return u32IP;
    c27e:	9801      	ldr	r0, [sp, #4]
    c280:	e7ec      	b.n	c25c <nmi_inet_addr+0x40>
    c282:	46c0      	nop			; (mov r8, r8)
    c284:	00009405 	.word	0x00009405

0000c288 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    c288:	b510      	push	{r4, lr}
    c28a:	b084      	sub	sp, #16
    c28c:	0004      	movs	r4, r0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    c28e:	4b0b      	ldr	r3, [pc, #44]	; (c2bc <gethostbyname+0x34>)
    c290:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    c292:	b2c3      	uxtb	r3, r0
    c294:	2b40      	cmp	r3, #64	; 0x40
    c296:	d80d      	bhi.n	c2b4 <gethostbyname+0x2c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    c298:	23ff      	movs	r3, #255	; 0xff
    c29a:	4003      	ands	r3, r0
    c29c:	3301      	adds	r3, #1
    c29e:	2200      	movs	r2, #0
    c2a0:	9202      	str	r2, [sp, #8]
    c2a2:	9201      	str	r2, [sp, #4]
    c2a4:	9200      	str	r2, [sp, #0]
    c2a6:	0022      	movs	r2, r4
    c2a8:	214a      	movs	r1, #74	; 0x4a
    c2aa:	2002      	movs	r0, #2
    c2ac:	4c04      	ldr	r4, [pc, #16]	; (c2c0 <gethostbyname+0x38>)
    c2ae:	47a0      	blx	r4
	}
	return s8Err;
}
    c2b0:	b004      	add	sp, #16
    c2b2:	bd10      	pop	{r4, pc}
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    c2b4:	2006      	movs	r0, #6
    c2b6:	4240      	negs	r0, r0
    c2b8:	e7fa      	b.n	c2b0 <gethostbyname+0x28>
    c2ba:	46c0      	nop			; (mov r8, r8)
    c2bc:	00009429 	.word	0x00009429
    c2c0:	0000952d 	.word	0x0000952d

0000c2c4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    c2c4:	b570      	push	{r4, r5, r6, lr}
    c2c6:	b082      	sub	sp, #8
    c2c8:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    c2ca:	4b2a      	ldr	r3, [pc, #168]	; (c374 <spi_flash_enable+0xb0>)
    c2cc:	4798      	blx	r3
    c2ce:	0500      	lsls	r0, r0, #20
    c2d0:	0d00      	lsrs	r0, r0, #20
    c2d2:	4b29      	ldr	r3, [pc, #164]	; (c378 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    c2d4:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    c2d6:	4298      	cmp	r0, r3
    c2d8:	d802      	bhi.n	c2e0 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    c2da:	0028      	movs	r0, r5
    c2dc:	b002      	add	sp, #8
    c2de:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    c2e0:	a901      	add	r1, sp, #4
    c2e2:	4826      	ldr	r0, [pc, #152]	; (c37c <spi_flash_enable+0xb8>)
    c2e4:	4b26      	ldr	r3, [pc, #152]	; (c380 <spi_flash_enable+0xbc>)
    c2e6:	4798      	blx	r3
    c2e8:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    c2ea:	d1f6      	bne.n	c2da <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    c2ec:	4b25      	ldr	r3, [pc, #148]	; (c384 <spi_flash_enable+0xc0>)
    c2ee:	9a01      	ldr	r2, [sp, #4]
    c2f0:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    c2f2:	4925      	ldr	r1, [pc, #148]	; (c388 <spi_flash_enable+0xc4>)
    c2f4:	4319      	orrs	r1, r3
    c2f6:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    c2f8:	4820      	ldr	r0, [pc, #128]	; (c37c <spi_flash_enable+0xb8>)
    c2fa:	4b24      	ldr	r3, [pc, #144]	; (c38c <spi_flash_enable+0xc8>)
    c2fc:	4798      	blx	r3
		if(enable) {
    c2fe:	2c00      	cmp	r4, #0
    c300:	d020      	beq.n	c344 <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    c302:	2100      	movs	r1, #0
    c304:	4822      	ldr	r0, [pc, #136]	; (c390 <spi_flash_enable+0xcc>)
    c306:	4c21      	ldr	r4, [pc, #132]	; (c38c <spi_flash_enable+0xc8>)
    c308:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    c30a:	21ab      	movs	r1, #171	; 0xab
    c30c:	4821      	ldr	r0, [pc, #132]	; (c394 <spi_flash_enable+0xd0>)
    c30e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    c310:	2101      	movs	r1, #1
    c312:	4821      	ldr	r0, [pc, #132]	; (c398 <spi_flash_enable+0xd4>)
    c314:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    c316:	2100      	movs	r1, #0
    c318:	4820      	ldr	r0, [pc, #128]	; (c39c <spi_flash_enable+0xd8>)
    c31a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    c31c:	2181      	movs	r1, #129	; 0x81
    c31e:	4820      	ldr	r0, [pc, #128]	; (c3a0 <spi_flash_enable+0xdc>)
    c320:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    c322:	4e20      	ldr	r6, [pc, #128]	; (c3a4 <spi_flash_enable+0xe0>)
    c324:	4c20      	ldr	r4, [pc, #128]	; (c3a8 <spi_flash_enable+0xe4>)
    c326:	0030      	movs	r0, r6
    c328:	47a0      	blx	r4
    c32a:	2801      	cmp	r0, #1
    c32c:	d1fb      	bne.n	c326 <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    c32e:	4b15      	ldr	r3, [pc, #84]	; (c384 <spi_flash_enable+0xc0>)
    c330:	9a01      	ldr	r2, [sp, #4]
    c332:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    c334:	2180      	movs	r1, #128	; 0x80
    c336:	0249      	lsls	r1, r1, #9
    c338:	4319      	orrs	r1, r3
    c33a:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    c33c:	480f      	ldr	r0, [pc, #60]	; (c37c <spi_flash_enable+0xb8>)
    c33e:	4b13      	ldr	r3, [pc, #76]	; (c38c <spi_flash_enable+0xc8>)
    c340:	4798      	blx	r3
    c342:	e7ca      	b.n	c2da <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    c344:	2100      	movs	r1, #0
    c346:	4812      	ldr	r0, [pc, #72]	; (c390 <spi_flash_enable+0xcc>)
    c348:	4c10      	ldr	r4, [pc, #64]	; (c38c <spi_flash_enable+0xc8>)
    c34a:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    c34c:	21b9      	movs	r1, #185	; 0xb9
    c34e:	4811      	ldr	r0, [pc, #68]	; (c394 <spi_flash_enable+0xd0>)
    c350:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    c352:	2101      	movs	r1, #1
    c354:	4810      	ldr	r0, [pc, #64]	; (c398 <spi_flash_enable+0xd4>)
    c356:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    c358:	2100      	movs	r1, #0
    c35a:	4810      	ldr	r0, [pc, #64]	; (c39c <spi_flash_enable+0xd8>)
    c35c:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    c35e:	2181      	movs	r1, #129	; 0x81
    c360:	480f      	ldr	r0, [pc, #60]	; (c3a0 <spi_flash_enable+0xdc>)
    c362:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    c364:	4e0f      	ldr	r6, [pc, #60]	; (c3a4 <spi_flash_enable+0xe0>)
    c366:	4c10      	ldr	r4, [pc, #64]	; (c3a8 <spi_flash_enable+0xe4>)
    c368:	0030      	movs	r0, r6
    c36a:	47a0      	blx	r4
    c36c:	2801      	cmp	r0, #1
    c36e:	d1fb      	bne.n	c368 <spi_flash_enable+0xa4>
    c370:	e7dd      	b.n	c32e <spi_flash_enable+0x6a>
    c372:	46c0      	nop			; (mov r8, r8)
    c374:	0000a39d 	.word	0x0000a39d
    c378:	0000039f 	.word	0x0000039f
    c37c:	00001410 	.word	0x00001410
    c380:	0000a7d5 	.word	0x0000a7d5
    c384:	f8888fff 	.word	0xf8888fff
    c388:	01111000 	.word	0x01111000
    c38c:	0000a7e1 	.word	0x0000a7e1
    c390:	00010208 	.word	0x00010208
    c394:	0001020c 	.word	0x0001020c
    c398:	00010214 	.word	0x00010214
    c39c:	0001021c 	.word	0x0001021c
    c3a0:	00010204 	.word	0x00010204
    c3a4:	00010218 	.word	0x00010218
    c3a8:	0000a7c9 	.word	0x0000a7c9

0000c3ac <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    c3ac:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    c3ae:	2301      	movs	r3, #1
    c3b0:	2800      	cmp	r0, #0
    c3b2:	d001      	beq.n	c3b8 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    c3b4:	0018      	movs	r0, r3
    c3b6:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    c3b8:	4b01      	ldr	r3, [pc, #4]	; (c3c0 <mem_test_unit_ready+0x14>)
    c3ba:	4798      	blx	r3
    c3bc:	0003      	movs	r3, r0
    c3be:	e7f9      	b.n	c3b4 <mem_test_unit_ready+0x8>
    c3c0:	0000888d 	.word	0x0000888d

0000c3c4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    c3c4:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    c3c6:	2301      	movs	r3, #1
    c3c8:	2800      	cmp	r0, #0
    c3ca:	d001      	beq.n	c3d0 <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    c3cc:	0018      	movs	r0, r3
    c3ce:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    c3d0:	0008      	movs	r0, r1
    c3d2:	4b02      	ldr	r3, [pc, #8]	; (c3dc <mem_read_capacity+0x18>)
    c3d4:	4798      	blx	r3
    c3d6:	0003      	movs	r3, r0
    c3d8:	e7f8      	b.n	c3cc <mem_read_capacity+0x8>
    c3da:	46c0      	nop			; (mov r8, r8)
    c3dc:	000088bd 	.word	0x000088bd

0000c3e0 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    c3e0:	4243      	negs	r3, r0
    c3e2:	4158      	adcs	r0, r3
    c3e4:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    c3e6:	4770      	bx	lr

0000c3e8 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    c3e8:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    c3ea:	2301      	movs	r3, #1
    c3ec:	2800      	cmp	r0, #0
    c3ee:	d001      	beq.n	c3f4 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    c3f0:	0018      	movs	r0, r3
    c3f2:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    c3f4:	4b01      	ldr	r3, [pc, #4]	; (c3fc <mem_wr_protect+0x14>)
    c3f6:	4798      	blx	r3
    c3f8:	0003      	movs	r3, r0
    c3fa:	e7f9      	b.n	c3f0 <mem_wr_protect+0x8>
    c3fc:	000088cd 	.word	0x000088cd

0000c400 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    c400:	b510      	push	{r4, lr}
    c402:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    c404:	2301      	movs	r3, #1
    c406:	2800      	cmp	r0, #0
    c408:	d001      	beq.n	c40e <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    c40a:	0018      	movs	r0, r3
    c40c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    c40e:	0011      	movs	r1, r2
    c410:	0020      	movs	r0, r4
    c412:	4b02      	ldr	r3, [pc, #8]	; (c41c <memory_2_ram+0x1c>)
    c414:	4798      	blx	r3
    c416:	0003      	movs	r3, r0
    c418:	e7f7      	b.n	c40a <memory_2_ram+0xa>
    c41a:	46c0      	nop			; (mov r8, r8)
    c41c:	00008921 	.word	0x00008921

0000c420 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    c420:	b510      	push	{r4, lr}
    c422:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    c424:	2301      	movs	r3, #1
    c426:	2800      	cmp	r0, #0
    c428:	d001      	beq.n	c42e <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    c42a:	0018      	movs	r0, r3
    c42c:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    c42e:	0011      	movs	r1, r2
    c430:	0020      	movs	r0, r4
    c432:	4b02      	ldr	r3, [pc, #8]	; (c43c <ram_2_memory+0x1c>)
    c434:	4798      	blx	r3
    c436:	0003      	movs	r3, r0
    c438:	e7f7      	b.n	c42a <ram_2_memory+0xa>
    c43a:	46c0      	nop			; (mov r8, r8)
    c43c:	00008979 	.word	0x00008979

0000c440 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    c440:	4b0c      	ldr	r3, [pc, #48]	; (c474 <cpu_irq_enter_critical+0x34>)
    c442:	681b      	ldr	r3, [r3, #0]
    c444:	2b00      	cmp	r3, #0
    c446:	d106      	bne.n	c456 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c448:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    c44c:	2b00      	cmp	r3, #0
    c44e:	d007      	beq.n	c460 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    c450:	2200      	movs	r2, #0
    c452:	4b09      	ldr	r3, [pc, #36]	; (c478 <cpu_irq_enter_critical+0x38>)
    c454:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    c456:	4a07      	ldr	r2, [pc, #28]	; (c474 <cpu_irq_enter_critical+0x34>)
    c458:	6813      	ldr	r3, [r2, #0]
    c45a:	3301      	adds	r3, #1
    c45c:	6013      	str	r3, [r2, #0]
}
    c45e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    c460:	b672      	cpsid	i
    c462:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    c466:	2200      	movs	r2, #0
    c468:	4b04      	ldr	r3, [pc, #16]	; (c47c <cpu_irq_enter_critical+0x3c>)
    c46a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    c46c:	3201      	adds	r2, #1
    c46e:	4b02      	ldr	r3, [pc, #8]	; (c478 <cpu_irq_enter_critical+0x38>)
    c470:	701a      	strb	r2, [r3, #0]
    c472:	e7f0      	b.n	c456 <cpu_irq_enter_critical+0x16>
    c474:	20003ed8 	.word	0x20003ed8
    c478:	20003edc 	.word	0x20003edc
    c47c:	200000fe 	.word	0x200000fe

0000c480 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    c480:	4b08      	ldr	r3, [pc, #32]	; (c4a4 <cpu_irq_leave_critical+0x24>)
    c482:	681a      	ldr	r2, [r3, #0]
    c484:	3a01      	subs	r2, #1
    c486:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    c488:	681b      	ldr	r3, [r3, #0]
    c48a:	2b00      	cmp	r3, #0
    c48c:	d109      	bne.n	c4a2 <cpu_irq_leave_critical+0x22>
    c48e:	4b06      	ldr	r3, [pc, #24]	; (c4a8 <cpu_irq_leave_critical+0x28>)
    c490:	781b      	ldrb	r3, [r3, #0]
    c492:	2b00      	cmp	r3, #0
    c494:	d005      	beq.n	c4a2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    c496:	2201      	movs	r2, #1
    c498:	4b04      	ldr	r3, [pc, #16]	; (c4ac <cpu_irq_leave_critical+0x2c>)
    c49a:	701a      	strb	r2, [r3, #0]
    c49c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c4a0:	b662      	cpsie	i
	}
}
    c4a2:	4770      	bx	lr
    c4a4:	20003ed8 	.word	0x20003ed8
    c4a8:	20003edc 	.word	0x20003edc
    c4ac:	200000fe 	.word	0x200000fe

0000c4b0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    c4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4b2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    c4b4:	ac01      	add	r4, sp, #4
    c4b6:	2501      	movs	r5, #1
    c4b8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    c4ba:	2700      	movs	r7, #0
    c4bc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    c4be:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    c4c0:	0021      	movs	r1, r4
    c4c2:	2017      	movs	r0, #23
    c4c4:	4e06      	ldr	r6, [pc, #24]	; (c4e0 <system_board_init+0x30>)
    c4c6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    c4c8:	2280      	movs	r2, #128	; 0x80
    c4ca:	0412      	lsls	r2, r2, #16
    c4cc:	4b05      	ldr	r3, [pc, #20]	; (c4e4 <system_board_init+0x34>)
    c4ce:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    c4d0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    c4d2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    c4d4:	0021      	movs	r1, r4
    c4d6:	2037      	movs	r0, #55	; 0x37
    c4d8:	47b0      	blx	r6
}
    c4da:	b003      	add	sp, #12
    c4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4de:	46c0      	nop			; (mov r8, r8)
    c4e0:	0000c6b9 	.word	0x0000c6b9
    c4e4:	41004400 	.word	0x41004400

0000c4e8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    c4e8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    c4ea:	2a00      	cmp	r2, #0
    c4ec:	d001      	beq.n	c4f2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    c4ee:	0018      	movs	r0, r3
    c4f0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    c4f2:	008b      	lsls	r3, r1, #2
    c4f4:	4a06      	ldr	r2, [pc, #24]	; (c510 <extint_register_callback+0x28>)
    c4f6:	589b      	ldr	r3, [r3, r2]
    c4f8:	2b00      	cmp	r3, #0
    c4fa:	d003      	beq.n	c504 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    c4fc:	4283      	cmp	r3, r0
    c4fe:	d005      	beq.n	c50c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    c500:	231d      	movs	r3, #29
    c502:	e7f4      	b.n	c4ee <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    c504:	0089      	lsls	r1, r1, #2
    c506:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    c508:	2300      	movs	r3, #0
    c50a:	e7f0      	b.n	c4ee <extint_register_callback+0x6>
		return STATUS_OK;
    c50c:	2300      	movs	r3, #0
    c50e:	e7ee      	b.n	c4ee <extint_register_callback+0x6>
    c510:	20005b88 	.word	0x20005b88

0000c514 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    c514:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    c516:	2900      	cmp	r1, #0
    c518:	d001      	beq.n	c51e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    c51a:	0018      	movs	r0, r3
    c51c:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    c51e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    c520:	281f      	cmp	r0, #31
    c522:	d800      	bhi.n	c526 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    c524:	4a02      	ldr	r2, [pc, #8]	; (c530 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    c526:	2301      	movs	r3, #1
    c528:	4083      	lsls	r3, r0
    c52a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    c52c:	2300      	movs	r3, #0
    c52e:	e7f4      	b.n	c51a <extint_chan_enable_callback+0x6>
    c530:	40001800 	.word	0x40001800

0000c534 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    c534:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    c536:	2900      	cmp	r1, #0
    c538:	d001      	beq.n	c53e <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    c53a:	0018      	movs	r0, r3
    c53c:	4770      	bx	lr
		return NULL;
    c53e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    c540:	281f      	cmp	r0, #31
    c542:	d800      	bhi.n	c546 <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    c544:	4a02      	ldr	r2, [pc, #8]	; (c550 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    c546:	2301      	movs	r3, #1
    c548:	4083      	lsls	r3, r0
    c54a:	6093      	str	r3, [r2, #8]
	return STATUS_OK;
    c54c:	2300      	movs	r3, #0
    c54e:	e7f4      	b.n	c53a <extint_chan_disable_callback+0x6>
    c550:	40001800 	.word	0x40001800

0000c554 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    c554:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    c556:	2200      	movs	r2, #0
    c558:	4b10      	ldr	r3, [pc, #64]	; (c59c <EIC_Handler+0x48>)
    c55a:	701a      	strb	r2, [r3, #0]
    c55c:	2300      	movs	r3, #0
    c55e:	4910      	ldr	r1, [pc, #64]	; (c5a0 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    c560:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    c562:	4e10      	ldr	r6, [pc, #64]	; (c5a4 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    c564:	4c0d      	ldr	r4, [pc, #52]	; (c59c <EIC_Handler+0x48>)
    c566:	e00a      	b.n	c57e <EIC_Handler+0x2a>
		return eics[eic_index];
    c568:	490d      	ldr	r1, [pc, #52]	; (c5a0 <EIC_Handler+0x4c>)
    c56a:	e008      	b.n	c57e <EIC_Handler+0x2a>
    c56c:	7823      	ldrb	r3, [r4, #0]
    c56e:	3301      	adds	r3, #1
    c570:	b2db      	uxtb	r3, r3
    c572:	7023      	strb	r3, [r4, #0]
    c574:	2b0f      	cmp	r3, #15
    c576:	d810      	bhi.n	c59a <EIC_Handler+0x46>
		return NULL;
    c578:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    c57a:	2b1f      	cmp	r3, #31
    c57c:	d9f4      	bls.n	c568 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    c57e:	0028      	movs	r0, r5
    c580:	4018      	ands	r0, r3
    c582:	2201      	movs	r2, #1
    c584:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    c586:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    c588:	4210      	tst	r0, r2
    c58a:	d0ef      	beq.n	c56c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    c58c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    c58e:	009b      	lsls	r3, r3, #2
    c590:	599b      	ldr	r3, [r3, r6]
    c592:	2b00      	cmp	r3, #0
    c594:	d0ea      	beq.n	c56c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    c596:	4798      	blx	r3
    c598:	e7e8      	b.n	c56c <EIC_Handler+0x18>
			}
		}
	}
}
    c59a:	bd70      	pop	{r4, r5, r6, pc}
    c59c:	20005b84 	.word	0x20005b84
    c5a0:	40001800 	.word	0x40001800
    c5a4:	20005b88 	.word	0x20005b88

0000c5a8 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    c5a8:	4a04      	ldr	r2, [pc, #16]	; (c5bc <_extint_enable+0x14>)
    c5aa:	7813      	ldrb	r3, [r2, #0]
    c5ac:	2102      	movs	r1, #2
    c5ae:	430b      	orrs	r3, r1
    c5b0:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    c5b2:	7853      	ldrb	r3, [r2, #1]
    c5b4:	b25b      	sxtb	r3, r3
    c5b6:	2b00      	cmp	r3, #0
    c5b8:	dbfb      	blt.n	c5b2 <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    c5ba:	4770      	bx	lr
    c5bc:	40001800 	.word	0x40001800

0000c5c0 <_system_extint_init>:
{
    c5c0:	b500      	push	{lr}
    c5c2:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
    c5c4:	4a12      	ldr	r2, [pc, #72]	; (c610 <_system_extint_init+0x50>)
    c5c6:	6993      	ldr	r3, [r2, #24]
    c5c8:	2140      	movs	r1, #64	; 0x40
    c5ca:	430b      	orrs	r3, r1
    c5cc:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    c5ce:	a901      	add	r1, sp, #4
    c5d0:	2300      	movs	r3, #0
    c5d2:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    c5d4:	2005      	movs	r0, #5
    c5d6:	4b0f      	ldr	r3, [pc, #60]	; (c614 <_system_extint_init+0x54>)
    c5d8:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    c5da:	2005      	movs	r0, #5
    c5dc:	4b0e      	ldr	r3, [pc, #56]	; (c618 <_system_extint_init+0x58>)
    c5de:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    c5e0:	4a0e      	ldr	r2, [pc, #56]	; (c61c <_system_extint_init+0x5c>)
    c5e2:	7813      	ldrb	r3, [r2, #0]
    c5e4:	2101      	movs	r1, #1
    c5e6:	430b      	orrs	r3, r1
    c5e8:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    c5ea:	7853      	ldrb	r3, [r2, #1]
    c5ec:	b25b      	sxtb	r3, r3
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	dbfb      	blt.n	c5ea <_system_extint_init+0x2a>
    c5f2:	4b0b      	ldr	r3, [pc, #44]	; (c620 <_system_extint_init+0x60>)
    c5f4:	0019      	movs	r1, r3
    c5f6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    c5f8:	2200      	movs	r2, #0
    c5fa:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    c5fc:	4299      	cmp	r1, r3
    c5fe:	d1fc      	bne.n	c5fa <_system_extint_init+0x3a>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c600:	2210      	movs	r2, #16
    c602:	4b08      	ldr	r3, [pc, #32]	; (c624 <_system_extint_init+0x64>)
    c604:	601a      	str	r2, [r3, #0]
	_extint_enable();
    c606:	4b08      	ldr	r3, [pc, #32]	; (c628 <_system_extint_init+0x68>)
    c608:	4798      	blx	r3
}
    c60a:	b003      	add	sp, #12
    c60c:	bd00      	pop	{pc}
    c60e:	46c0      	nop			; (mov r8, r8)
    c610:	40000400 	.word	0x40000400
    c614:	0000dff5 	.word	0x0000dff5
    c618:	0000df69 	.word	0x0000df69
    c61c:	40001800 	.word	0x40001800
    c620:	20005b88 	.word	0x20005b88
    c624:	e000e100 	.word	0xe000e100
    c628:	0000c5a9 	.word	0x0000c5a9

0000c62c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    c62c:	2300      	movs	r3, #0
    c62e:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    c630:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    c632:	2201      	movs	r2, #1
    c634:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    c636:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    c638:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    c63a:	3302      	adds	r3, #2
    c63c:	72c3      	strb	r3, [r0, #11]
}
    c63e:	4770      	bx	lr

0000c640 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    c640:	b5f0      	push	{r4, r5, r6, r7, lr}
    c642:	b083      	sub	sp, #12
    c644:	0005      	movs	r5, r0
    c646:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    c648:	a901      	add	r1, sp, #4
    c64a:	2300      	movs	r3, #0
    c64c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    c64e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    c650:	7923      	ldrb	r3, [r4, #4]
    c652:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    c654:	7a23      	ldrb	r3, [r4, #8]
    c656:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    c658:	7820      	ldrb	r0, [r4, #0]
    c65a:	4b15      	ldr	r3, [pc, #84]	; (c6b0 <extint_chan_set_config+0x70>)
    c65c:	4798      	blx	r3
		return NULL;
    c65e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
    c660:	2d1f      	cmp	r5, #31
    c662:	d800      	bhi.n	c666 <extint_chan_set_config+0x26>
		return eics[eic_index];
    c664:	4813      	ldr	r0, [pc, #76]	; (c6b4 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    c666:	2207      	movs	r2, #7
    c668:	402a      	ands	r2, r5
    c66a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    c66c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    c66e:	7aa3      	ldrb	r3, [r4, #10]
    c670:	2b00      	cmp	r3, #0
    c672:	d001      	beq.n	c678 <extint_chan_set_config+0x38>
    c674:	2308      	movs	r3, #8
    c676:	431f      	orrs	r7, r3
    c678:	08eb      	lsrs	r3, r5, #3
    c67a:	009b      	lsls	r3, r3, #2
    c67c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    c67e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    c680:	260f      	movs	r6, #15
    c682:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    c684:	43b1      	bics	r1, r6
			(new_config << config_pos);
    c686:	4097      	lsls	r7, r2
    c688:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    c68a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
    c68c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    c68e:	7a63      	ldrb	r3, [r4, #9]
    c690:	2b00      	cmp	r3, #0
    c692:	d106      	bne.n	c6a2 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    c694:	6943      	ldr	r3, [r0, #20]
    c696:	2201      	movs	r2, #1
    c698:	40aa      	lsls	r2, r5
    c69a:	4393      	bics	r3, r2
    c69c:	6143      	str	r3, [r0, #20]
	}
}
    c69e:	b003      	add	sp, #12
    c6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    c6a2:	6942      	ldr	r2, [r0, #20]
    c6a4:	2301      	movs	r3, #1
    c6a6:	40ab      	lsls	r3, r5
    c6a8:	4313      	orrs	r3, r2
    c6aa:	6143      	str	r3, [r0, #20]
    c6ac:	e7f7      	b.n	c69e <extint_chan_set_config+0x5e>
    c6ae:	46c0      	nop			; (mov r8, r8)
    c6b0:	0000e11d 	.word	0x0000e11d
    c6b4:	40001800 	.word	0x40001800

0000c6b8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    c6b8:	b500      	push	{lr}
    c6ba:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    c6bc:	ab01      	add	r3, sp, #4
    c6be:	2280      	movs	r2, #128	; 0x80
    c6c0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    c6c2:	780a      	ldrb	r2, [r1, #0]
    c6c4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    c6c6:	784a      	ldrb	r2, [r1, #1]
    c6c8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    c6ca:	788a      	ldrb	r2, [r1, #2]
    c6cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    c6ce:	0019      	movs	r1, r3
    c6d0:	4b01      	ldr	r3, [pc, #4]	; (c6d8 <port_pin_set_config+0x20>)
    c6d2:	4798      	blx	r3
}
    c6d4:	b003      	add	sp, #12
    c6d6:	bd00      	pop	{pc}
    c6d8:	0000e11d 	.word	0x0000e11d

0000c6dc <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    c6dc:	6801      	ldr	r1, [r0, #0]
    c6de:	2208      	movs	r2, #8
    c6e0:	4b05      	ldr	r3, [pc, #20]	; (c6f8 <rtc_calendar_enable+0x1c>)
    c6e2:	601a      	str	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    c6e4:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    c6e6:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    c6e8:	b25b      	sxtb	r3, r3
    c6ea:	2b00      	cmp	r3, #0
    c6ec:	dbfb      	blt.n	c6e6 <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    c6ee:	880b      	ldrh	r3, [r1, #0]
    c6f0:	2202      	movs	r2, #2
    c6f2:	4313      	orrs	r3, r2
    c6f4:	800b      	strh	r3, [r1, #0]
}
    c6f6:	4770      	bx	lr
    c6f8:	e000e100 	.word	0xe000e100

0000c6fc <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    c6fc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    c6fe:	6802      	ldr	r2, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    c700:	2408      	movs	r4, #8
    c702:	2380      	movs	r3, #128	; 0x80
    c704:	4907      	ldr	r1, [pc, #28]	; (c724 <rtc_calendar_disable+0x28>)
    c706:	50cc      	str	r4, [r1, r3]
	Rtc *const rtc_module = module->hw;
    c708:	6801      	ldr	r1, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    c70a:	7a8b      	ldrb	r3, [r1, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    c70c:	b25b      	sxtb	r3, r3
    c70e:	2b00      	cmp	r3, #0
    c710:	dbfb      	blt.n	c70a <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    c712:	23c1      	movs	r3, #193	; 0xc1
    c714:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    c716:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    c718:	8813      	ldrh	r3, [r2, #0]
    c71a:	2102      	movs	r1, #2
    c71c:	438b      	bics	r3, r1
    c71e:	8013      	strh	r3, [r2, #0]
}
    c720:	bd10      	pop	{r4, pc}
    c722:	46c0      	nop			; (mov r8, r8)
    c724:	e000e100 	.word	0xe000e100

0000c728 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    c728:	b570      	push	{r4, r5, r6, lr}
    c72a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    c72c:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    c72e:	4b07      	ldr	r3, [pc, #28]	; (c74c <rtc_calendar_reset+0x24>)
    c730:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    c732:	2300      	movs	r3, #0
    c734:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
    c736:	8263      	strh	r3, [r4, #18]
	Rtc *const rtc_module = module->hw;
    c738:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    c73a:	7a93      	ldrb	r3, [r2, #10]
#endif

	while (rtc_calendar_is_syncing(module)) {
    c73c:	b25b      	sxtb	r3, r3
    c73e:	2b00      	cmp	r3, #0
    c740:	dbfb      	blt.n	c73a <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    c742:	882b      	ldrh	r3, [r5, #0]
    c744:	2201      	movs	r2, #1
    c746:	4313      	orrs	r3, r2
    c748:	802b      	strh	r3, [r5, #0]
}
    c74a:	bd70      	pop	{r4, r5, r6, pc}
    c74c:	0000c6fd 	.word	0x0000c6fd

0000c750 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    c750:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    c752:	88cb      	ldrh	r3, [r1, #6]
    c754:	88c2      	ldrh	r2, [r0, #6]
    c756:	1a9a      	subs	r2, r3, r2
    c758:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    c75a:	794b      	ldrb	r3, [r1, #5]
    c75c:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    c75e:	790c      	ldrb	r4, [r1, #4]
    c760:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    c762:	4323      	orrs	r3, r4
    c764:	788c      	ldrb	r4, [r1, #2]
    c766:	0324      	lsls	r4, r4, #12
    c768:	4323      	orrs	r3, r4
    c76a:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    c76c:	7902      	ldrb	r2, [r0, #4]
    c76e:	2a00      	cmp	r2, #0
    c770:	d105      	bne.n	c77e <rtc_calendar_time_to_register_value+0x2e>
    c772:	78ca      	ldrb	r2, [r1, #3]
    c774:	2a00      	cmp	r2, #0
    c776:	d002      	beq.n	c77e <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    c778:	2280      	movs	r2, #128	; 0x80
    c77a:	0252      	lsls	r2, r2, #9
    c77c:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    c77e:	7848      	ldrb	r0, [r1, #1]
    c780:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    c782:	780a      	ldrb	r2, [r1, #0]
    c784:	4310      	orrs	r0, r2
    c786:	4318      	orrs	r0, r3

	return register_value;
}
    c788:	bd10      	pop	{r4, pc}

0000c78a <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    c78a:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    c78c:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    c78e:	88c4      	ldrh	r4, [r0, #6]
    c790:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    c792:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    c794:	018b      	lsls	r3, r1, #6
    c796:	0f1b      	lsrs	r3, r3, #28
    c798:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    c79a:	028b      	lsls	r3, r1, #10
    c79c:	0edb      	lsrs	r3, r3, #27
    c79e:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    c7a0:	7903      	ldrb	r3, [r0, #4]
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	d10c      	bne.n	c7c0 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    c7a6:	040b      	lsls	r3, r1, #16
    c7a8:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    c7aa:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    c7ac:	03cb      	lsls	r3, r1, #15
    c7ae:	0fdb      	lsrs	r3, r3, #31
    c7b0:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    c7b2:	0988      	lsrs	r0, r1, #6
    c7b4:	233f      	movs	r3, #63	; 0x3f
    c7b6:	4018      	ands	r0, r3
    c7b8:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    c7ba:	4019      	ands	r1, r3
    c7bc:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    c7be:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    c7c0:	03cb      	lsls	r3, r1, #15
    c7c2:	0edb      	lsrs	r3, r3, #27
    c7c4:	7093      	strb	r3, [r2, #2]
    c7c6:	e7f4      	b.n	c7b2 <rtc_calendar_register_value_to_time+0x28>

0000c7c8 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    c7c8:	b510      	push	{r4, lr}
    c7ca:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    c7cc:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    c7ce:	7941      	ldrb	r1, [r0, #5]
    c7d0:	2900      	cmp	r1, #0
    c7d2:	d006      	beq.n	c7e2 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    c7d4:	8859      	ldrh	r1, [r3, #2]
    c7d6:	0449      	lsls	r1, r1, #17
    c7d8:	d50b      	bpl.n	c7f2 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    c7da:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    c7dc:	4b0a      	ldr	r3, [pc, #40]	; (c808 <rtc_calendar_get_time+0x40>)
    c7de:	4798      	blx	r3
}
    c7e0:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    c7e2:	490a      	ldr	r1, [pc, #40]	; (c80c <rtc_calendar_get_time+0x44>)
    c7e4:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    c7e6:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    c7e8:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    c7ea:	b249      	sxtb	r1, r1
    c7ec:	2900      	cmp	r1, #0
    c7ee:	dbfb      	blt.n	c7e8 <rtc_calendar_get_time+0x20>
    c7f0:	e7f3      	b.n	c7da <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    c7f2:	8859      	ldrh	r1, [r3, #2]
    c7f4:	24c0      	movs	r4, #192	; 0xc0
    c7f6:	0224      	lsls	r4, r4, #8
    c7f8:	4321      	orrs	r1, r4
    c7fa:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    c7fc:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    c7fe:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    c800:	b249      	sxtb	r1, r1
    c802:	2900      	cmp	r1, #0
    c804:	dbfb      	blt.n	c7fe <rtc_calendar_get_time+0x36>
    c806:	e7e8      	b.n	c7da <rtc_calendar_get_time+0x12>
    c808:	0000c78b 	.word	0x0000c78b
    c80c:	ffff8000 	.word	0xffff8000

0000c810 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    c810:	b570      	push	{r4, r5, r6, lr}
    c812:	000d      	movs	r5, r1
    c814:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    c816:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    c818:	2a01      	cmp	r2, #1
    c81a:	d901      	bls.n	c820 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    c81c:	0018      	movs	r0, r3
    c81e:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    c820:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    c822:	4b06      	ldr	r3, [pc, #24]	; (c83c <rtc_calendar_set_alarm+0x2c>)
    c824:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    c826:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    c828:	b25b      	sxtb	r3, r3
    c82a:	2b00      	cmp	r3, #0
    c82c:	dbfb      	blt.n	c826 <rtc_calendar_set_alarm+0x16>
    c82e:	00e4      	lsls	r4, r4, #3
    c830:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    c832:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    c834:	7a2b      	ldrb	r3, [r5, #8]
    c836:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    c838:	2300      	movs	r3, #0
    c83a:	e7ef      	b.n	c81c <rtc_calendar_set_alarm+0xc>
    c83c:	0000c751 	.word	0x0000c751

0000c840 <rtc_calendar_init>:
{
    c840:	b530      	push	{r4, r5, lr}
    c842:	b083      	sub	sp, #12
    c844:	0005      	movs	r5, r0
    c846:	0014      	movs	r4, r2
	module->hw = hw;
    c848:	6001      	str	r1, [r0, #0]
    c84a:	4a1c      	ldr	r2, [pc, #112]	; (c8bc <rtc_calendar_init+0x7c>)
    c84c:	6993      	ldr	r3, [r2, #24]
    c84e:	2120      	movs	r1, #32
    c850:	430b      	orrs	r3, r1
    c852:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    c854:	a901      	add	r1, sp, #4
    c856:	2302      	movs	r3, #2
    c858:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    c85a:	2004      	movs	r0, #4
    c85c:	4b18      	ldr	r3, [pc, #96]	; (c8c0 <rtc_calendar_init+0x80>)
    c85e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    c860:	2004      	movs	r0, #4
    c862:	4b18      	ldr	r3, [pc, #96]	; (c8c4 <rtc_calendar_init+0x84>)
    c864:	4798      	blx	r3
	rtc_calendar_reset(module);
    c866:	0028      	movs	r0, r5
    c868:	4b17      	ldr	r3, [pc, #92]	; (c8c8 <rtc_calendar_init+0x88>)
    c86a:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    c86c:	7923      	ldrb	r3, [r4, #4]
    c86e:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    c870:	78e3      	ldrb	r3, [r4, #3]
    c872:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    c874:	88e3      	ldrh	r3, [r4, #6]
    c876:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    c878:	4b14      	ldr	r3, [pc, #80]	; (c8cc <rtc_calendar_init+0x8c>)
    c87a:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    c87c:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    c87e:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    c880:	7921      	ldrb	r1, [r4, #4]
    c882:	2900      	cmp	r1, #0
    c884:	d017      	beq.n	c8b6 <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    c886:	2108      	movs	r1, #8
    c888:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    c88a:	78a1      	ldrb	r1, [r4, #2]
    c88c:	2900      	cmp	r1, #0
    c88e:	d001      	beq.n	c894 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    c890:	2180      	movs	r1, #128	; 0x80
    c892:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    c894:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    c896:	78e3      	ldrb	r3, [r4, #3]
    c898:	2b00      	cmp	r3, #0
    c89a:	d004      	beq.n	c8a6 <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    c89c:	8853      	ldrh	r3, [r2, #2]
    c89e:	2180      	movs	r1, #128	; 0x80
    c8a0:	01c9      	lsls	r1, r1, #7
    c8a2:	430b      	orrs	r3, r1
    c8a4:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    c8a6:	0021      	movs	r1, r4
    c8a8:	3108      	adds	r1, #8
    c8aa:	2200      	movs	r2, #0
    c8ac:	0028      	movs	r0, r5
    c8ae:	4b08      	ldr	r3, [pc, #32]	; (c8d0 <rtc_calendar_init+0x90>)
    c8b0:	4798      	blx	r3
}
    c8b2:	b003      	add	sp, #12
    c8b4:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    c8b6:	2148      	movs	r1, #72	; 0x48
    c8b8:	430b      	orrs	r3, r1
    c8ba:	e7e6      	b.n	c88a <rtc_calendar_init+0x4a>
    c8bc:	40000400 	.word	0x40000400
    c8c0:	0000dff5 	.word	0x0000dff5
    c8c4:	0000df69 	.word	0x0000df69
    c8c8:	0000c729 	.word	0x0000c729
    c8cc:	20005bc8 	.word	0x20005bc8
    c8d0:	0000c811 	.word	0x0000c811

0000c8d4 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    c8d4:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    c8d6:	4b0f      	ldr	r3, [pc, #60]	; (c914 <RTC_Handler+0x40>)
    c8d8:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
    c8da:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
    c8dc:	8a51      	ldrh	r1, [r2, #18]
	callback_mask &= module->registered_callback;
    c8de:	8a13      	ldrh	r3, [r2, #16]
    c8e0:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    c8e2:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    c8e4:	79e3      	ldrb	r3, [r4, #7]
    c8e6:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    c8e8:	b258      	sxtb	r0, r3
    c8ea:	2800      	cmp	r0, #0
    c8ec:	db06      	blt.n	c8fc <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    c8ee:	07db      	lsls	r3, r3, #31
    c8f0:	d503      	bpl.n	c8fa <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    c8f2:	07cb      	lsls	r3, r1, #31
    c8f4:	d40a      	bmi.n	c90c <RTC_Handler+0x38>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    c8f6:	2301      	movs	r3, #1
    c8f8:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    c8fa:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    c8fc:	078b      	lsls	r3, r1, #30
    c8fe:	d402      	bmi.n	c906 <RTC_Handler+0x32>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    c900:	2380      	movs	r3, #128	; 0x80
    c902:	7223      	strb	r3, [r4, #8]
    c904:	e7f9      	b.n	c8fa <RTC_Handler+0x26>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    c906:	68d3      	ldr	r3, [r2, #12]
    c908:	4798      	blx	r3
    c90a:	e7f9      	b.n	c900 <RTC_Handler+0x2c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    c90c:	6893      	ldr	r3, [r2, #8]
    c90e:	4798      	blx	r3
    c910:	e7f1      	b.n	c8f6 <RTC_Handler+0x22>
    c912:	46c0      	nop			; (mov r8, r8)
    c914:	20005bc8 	.word	0x20005bc8

0000c918 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    c918:	b5f0      	push	{r4, r5, r6, r7, lr}
    c91a:	46de      	mov	lr, fp
    c91c:	4657      	mov	r7, sl
    c91e:	464e      	mov	r6, r9
    c920:	4645      	mov	r5, r8
    c922:	b5e0      	push	{r5, r6, r7, lr}
    c924:	b087      	sub	sp, #28
    c926:	4680      	mov	r8, r0
    c928:	9104      	str	r1, [sp, #16]
    c92a:	0016      	movs	r6, r2
    c92c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    c92e:	2200      	movs	r2, #0
    c930:	2300      	movs	r3, #0
    c932:	2100      	movs	r1, #0
    c934:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    c936:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    c938:	2001      	movs	r0, #1
    c93a:	0021      	movs	r1, r4
    c93c:	9600      	str	r6, [sp, #0]
    c93e:	9701      	str	r7, [sp, #4]
    c940:	465c      	mov	r4, fp
    c942:	9403      	str	r4, [sp, #12]
    c944:	4644      	mov	r4, r8
    c946:	9405      	str	r4, [sp, #20]
    c948:	e013      	b.n	c972 <long_division+0x5a>
    c94a:	2420      	movs	r4, #32
    c94c:	1a64      	subs	r4, r4, r1
    c94e:	0005      	movs	r5, r0
    c950:	40e5      	lsrs	r5, r4
    c952:	46a8      	mov	r8, r5
    c954:	e014      	b.n	c980 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    c956:	9c00      	ldr	r4, [sp, #0]
    c958:	9d01      	ldr	r5, [sp, #4]
    c95a:	1b12      	subs	r2, r2, r4
    c95c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    c95e:	465c      	mov	r4, fp
    c960:	464d      	mov	r5, r9
    c962:	432c      	orrs	r4, r5
    c964:	46a3      	mov	fp, r4
    c966:	9c03      	ldr	r4, [sp, #12]
    c968:	4645      	mov	r5, r8
    c96a:	432c      	orrs	r4, r5
    c96c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    c96e:	3901      	subs	r1, #1
    c970:	d325      	bcc.n	c9be <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    c972:	2420      	movs	r4, #32
    c974:	4264      	negs	r4, r4
    c976:	190c      	adds	r4, r1, r4
    c978:	d4e7      	bmi.n	c94a <long_division+0x32>
    c97a:	0005      	movs	r5, r0
    c97c:	40a5      	lsls	r5, r4
    c97e:	46a8      	mov	r8, r5
    c980:	0004      	movs	r4, r0
    c982:	408c      	lsls	r4, r1
    c984:	46a1      	mov	r9, r4
		r = r << 1;
    c986:	1892      	adds	r2, r2, r2
    c988:	415b      	adcs	r3, r3
    c98a:	0014      	movs	r4, r2
    c98c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    c98e:	9e05      	ldr	r6, [sp, #20]
    c990:	464f      	mov	r7, r9
    c992:	403e      	ands	r6, r7
    c994:	46b4      	mov	ip, r6
    c996:	9e04      	ldr	r6, [sp, #16]
    c998:	4647      	mov	r7, r8
    c99a:	403e      	ands	r6, r7
    c99c:	46b2      	mov	sl, r6
    c99e:	4666      	mov	r6, ip
    c9a0:	4657      	mov	r7, sl
    c9a2:	433e      	orrs	r6, r7
    c9a4:	d003      	beq.n	c9ae <long_division+0x96>
			r |= 0x01;
    c9a6:	0006      	movs	r6, r0
    c9a8:	4326      	orrs	r6, r4
    c9aa:	0032      	movs	r2, r6
    c9ac:	002b      	movs	r3, r5
		if (r >= d) {
    c9ae:	9c00      	ldr	r4, [sp, #0]
    c9b0:	9d01      	ldr	r5, [sp, #4]
    c9b2:	429d      	cmp	r5, r3
    c9b4:	d8db      	bhi.n	c96e <long_division+0x56>
    c9b6:	d1ce      	bne.n	c956 <long_division+0x3e>
    c9b8:	4294      	cmp	r4, r2
    c9ba:	d8d8      	bhi.n	c96e <long_division+0x56>
    c9bc:	e7cb      	b.n	c956 <long_division+0x3e>
    c9be:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    c9c0:	4658      	mov	r0, fp
    c9c2:	0019      	movs	r1, r3
    c9c4:	b007      	add	sp, #28
    c9c6:	bc3c      	pop	{r2, r3, r4, r5}
    c9c8:	4690      	mov	r8, r2
    c9ca:	4699      	mov	r9, r3
    c9cc:	46a2      	mov	sl, r4
    c9ce:	46ab      	mov	fp, r5
    c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c9d2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    c9d2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    c9d4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c9d6:	2340      	movs	r3, #64	; 0x40
    c9d8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    c9da:	4281      	cmp	r1, r0
    c9dc:	d202      	bcs.n	c9e4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    c9de:	0018      	movs	r0, r3
    c9e0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    c9e2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    c9e4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    c9e6:	1c63      	adds	r3, r4, #1
    c9e8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    c9ea:	4288      	cmp	r0, r1
    c9ec:	d9f9      	bls.n	c9e2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    c9ee:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    c9f0:	2cff      	cmp	r4, #255	; 0xff
    c9f2:	d8f4      	bhi.n	c9de <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    c9f4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    c9f6:	2300      	movs	r3, #0
    c9f8:	e7f1      	b.n	c9de <_sercom_get_sync_baud_val+0xc>
	...

0000c9fc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    c9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9fe:	b083      	sub	sp, #12
    ca00:	000f      	movs	r7, r1
    ca02:	0016      	movs	r6, r2
    ca04:	aa08      	add	r2, sp, #32
    ca06:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    ca08:	0004      	movs	r4, r0
    ca0a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ca0c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    ca0e:	42bc      	cmp	r4, r7
    ca10:	d902      	bls.n	ca18 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    ca12:	0010      	movs	r0, r2
    ca14:	b003      	add	sp, #12
    ca16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    ca18:	2b00      	cmp	r3, #0
    ca1a:	d114      	bne.n	ca46 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    ca1c:	0002      	movs	r2, r0
    ca1e:	0008      	movs	r0, r1
    ca20:	2100      	movs	r1, #0
    ca22:	4c19      	ldr	r4, [pc, #100]	; (ca88 <_sercom_get_async_baud_val+0x8c>)
    ca24:	47a0      	blx	r4
    ca26:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    ca28:	003a      	movs	r2, r7
    ca2a:	2300      	movs	r3, #0
    ca2c:	2000      	movs	r0, #0
    ca2e:	4c17      	ldr	r4, [pc, #92]	; (ca8c <_sercom_get_async_baud_val+0x90>)
    ca30:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    ca32:	2200      	movs	r2, #0
    ca34:	2301      	movs	r3, #1
    ca36:	1a12      	subs	r2, r2, r0
    ca38:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    ca3a:	0c12      	lsrs	r2, r2, #16
    ca3c:	041b      	lsls	r3, r3, #16
    ca3e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    ca40:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    ca42:	2200      	movs	r2, #0
    ca44:	e7e5      	b.n	ca12 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    ca46:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    ca48:	2b01      	cmp	r3, #1
    ca4a:	d1f9      	bne.n	ca40 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    ca4c:	000a      	movs	r2, r1
    ca4e:	2300      	movs	r3, #0
    ca50:	2100      	movs	r1, #0
    ca52:	4c0d      	ldr	r4, [pc, #52]	; (ca88 <_sercom_get_async_baud_val+0x8c>)
    ca54:	47a0      	blx	r4
    ca56:	0002      	movs	r2, r0
    ca58:	000b      	movs	r3, r1
    ca5a:	9200      	str	r2, [sp, #0]
    ca5c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    ca5e:	0038      	movs	r0, r7
    ca60:	2100      	movs	r1, #0
    ca62:	4c0a      	ldr	r4, [pc, #40]	; (ca8c <_sercom_get_async_baud_val+0x90>)
    ca64:	47a0      	blx	r4
    ca66:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    ca68:	2380      	movs	r3, #128	; 0x80
    ca6a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    ca6c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    ca6e:	4298      	cmp	r0, r3
    ca70:	d8cf      	bhi.n	ca12 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    ca72:	0f79      	lsrs	r1, r7, #29
    ca74:	00f8      	lsls	r0, r7, #3
    ca76:	9a00      	ldr	r2, [sp, #0]
    ca78:	9b01      	ldr	r3, [sp, #4]
    ca7a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    ca7c:	00ea      	lsls	r2, r5, #3
    ca7e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    ca80:	b2d2      	uxtb	r2, r2
    ca82:	0352      	lsls	r2, r2, #13
    ca84:	432a      	orrs	r2, r5
    ca86:	e7db      	b.n	ca40 <_sercom_get_async_baud_val+0x44>
    ca88:	00012061 	.word	0x00012061
    ca8c:	0000c919 	.word	0x0000c919

0000ca90 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    ca90:	b510      	push	{r4, lr}
    ca92:	b082      	sub	sp, #8
    ca94:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    ca96:	4b0e      	ldr	r3, [pc, #56]	; (cad0 <sercom_set_gclk_generator+0x40>)
    ca98:	781b      	ldrb	r3, [r3, #0]
    ca9a:	2b00      	cmp	r3, #0
    ca9c:	d007      	beq.n	caae <sercom_set_gclk_generator+0x1e>
    ca9e:	2900      	cmp	r1, #0
    caa0:	d105      	bne.n	caae <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    caa2:	4b0b      	ldr	r3, [pc, #44]	; (cad0 <sercom_set_gclk_generator+0x40>)
    caa4:	785b      	ldrb	r3, [r3, #1]
    caa6:	4283      	cmp	r3, r0
    caa8:	d010      	beq.n	cacc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    caaa:	201d      	movs	r0, #29
    caac:	e00c      	b.n	cac8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    caae:	a901      	add	r1, sp, #4
    cab0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    cab2:	2013      	movs	r0, #19
    cab4:	4b07      	ldr	r3, [pc, #28]	; (cad4 <sercom_set_gclk_generator+0x44>)
    cab6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    cab8:	2013      	movs	r0, #19
    caba:	4b07      	ldr	r3, [pc, #28]	; (cad8 <sercom_set_gclk_generator+0x48>)
    cabc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    cabe:	4b04      	ldr	r3, [pc, #16]	; (cad0 <sercom_set_gclk_generator+0x40>)
    cac0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    cac2:	2201      	movs	r2, #1
    cac4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    cac6:	2000      	movs	r0, #0
}
    cac8:	b002      	add	sp, #8
    caca:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    cacc:	2000      	movs	r0, #0
    cace:	e7fb      	b.n	cac8 <sercom_set_gclk_generator+0x38>
    cad0:	20003ee0 	.word	0x20003ee0
    cad4:	0000dff5 	.word	0x0000dff5
    cad8:	0000df69 	.word	0x0000df69

0000cadc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    cadc:	4b40      	ldr	r3, [pc, #256]	; (cbe0 <_sercom_get_default_pad+0x104>)
    cade:	4298      	cmp	r0, r3
    cae0:	d031      	beq.n	cb46 <_sercom_get_default_pad+0x6a>
    cae2:	d90a      	bls.n	cafa <_sercom_get_default_pad+0x1e>
    cae4:	4b3f      	ldr	r3, [pc, #252]	; (cbe4 <_sercom_get_default_pad+0x108>)
    cae6:	4298      	cmp	r0, r3
    cae8:	d04d      	beq.n	cb86 <_sercom_get_default_pad+0xaa>
    caea:	4b3f      	ldr	r3, [pc, #252]	; (cbe8 <_sercom_get_default_pad+0x10c>)
    caec:	4298      	cmp	r0, r3
    caee:	d05a      	beq.n	cba6 <_sercom_get_default_pad+0xca>
    caf0:	4b3e      	ldr	r3, [pc, #248]	; (cbec <_sercom_get_default_pad+0x110>)
    caf2:	4298      	cmp	r0, r3
    caf4:	d037      	beq.n	cb66 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    caf6:	2000      	movs	r0, #0
}
    caf8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    cafa:	4b3d      	ldr	r3, [pc, #244]	; (cbf0 <_sercom_get_default_pad+0x114>)
    cafc:	4298      	cmp	r0, r3
    cafe:	d00c      	beq.n	cb1a <_sercom_get_default_pad+0x3e>
    cb00:	4b3c      	ldr	r3, [pc, #240]	; (cbf4 <_sercom_get_default_pad+0x118>)
    cb02:	4298      	cmp	r0, r3
    cb04:	d1f7      	bne.n	caf6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cb06:	2901      	cmp	r1, #1
    cb08:	d017      	beq.n	cb3a <_sercom_get_default_pad+0x5e>
    cb0a:	2900      	cmp	r1, #0
    cb0c:	d05d      	beq.n	cbca <_sercom_get_default_pad+0xee>
    cb0e:	2902      	cmp	r1, #2
    cb10:	d015      	beq.n	cb3e <_sercom_get_default_pad+0x62>
    cb12:	2903      	cmp	r1, #3
    cb14:	d015      	beq.n	cb42 <_sercom_get_default_pad+0x66>
	return 0;
    cb16:	2000      	movs	r0, #0
    cb18:	e7ee      	b.n	caf8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cb1a:	2901      	cmp	r1, #1
    cb1c:	d007      	beq.n	cb2e <_sercom_get_default_pad+0x52>
    cb1e:	2900      	cmp	r1, #0
    cb20:	d051      	beq.n	cbc6 <_sercom_get_default_pad+0xea>
    cb22:	2902      	cmp	r1, #2
    cb24:	d005      	beq.n	cb32 <_sercom_get_default_pad+0x56>
    cb26:	2903      	cmp	r1, #3
    cb28:	d005      	beq.n	cb36 <_sercom_get_default_pad+0x5a>
	return 0;
    cb2a:	2000      	movs	r0, #0
    cb2c:	e7e4      	b.n	caf8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cb2e:	4832      	ldr	r0, [pc, #200]	; (cbf8 <_sercom_get_default_pad+0x11c>)
    cb30:	e7e2      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb32:	4832      	ldr	r0, [pc, #200]	; (cbfc <_sercom_get_default_pad+0x120>)
    cb34:	e7e0      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb36:	4832      	ldr	r0, [pc, #200]	; (cc00 <_sercom_get_default_pad+0x124>)
    cb38:	e7de      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb3a:	4832      	ldr	r0, [pc, #200]	; (cc04 <_sercom_get_default_pad+0x128>)
    cb3c:	e7dc      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb3e:	4832      	ldr	r0, [pc, #200]	; (cc08 <_sercom_get_default_pad+0x12c>)
    cb40:	e7da      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb42:	4832      	ldr	r0, [pc, #200]	; (cc0c <_sercom_get_default_pad+0x130>)
    cb44:	e7d8      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb46:	2901      	cmp	r1, #1
    cb48:	d007      	beq.n	cb5a <_sercom_get_default_pad+0x7e>
    cb4a:	2900      	cmp	r1, #0
    cb4c:	d03f      	beq.n	cbce <_sercom_get_default_pad+0xf2>
    cb4e:	2902      	cmp	r1, #2
    cb50:	d005      	beq.n	cb5e <_sercom_get_default_pad+0x82>
    cb52:	2903      	cmp	r1, #3
    cb54:	d005      	beq.n	cb62 <_sercom_get_default_pad+0x86>
	return 0;
    cb56:	2000      	movs	r0, #0
    cb58:	e7ce      	b.n	caf8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cb5a:	482d      	ldr	r0, [pc, #180]	; (cc10 <_sercom_get_default_pad+0x134>)
    cb5c:	e7cc      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb5e:	482d      	ldr	r0, [pc, #180]	; (cc14 <_sercom_get_default_pad+0x138>)
    cb60:	e7ca      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb62:	482d      	ldr	r0, [pc, #180]	; (cc18 <_sercom_get_default_pad+0x13c>)
    cb64:	e7c8      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb66:	2901      	cmp	r1, #1
    cb68:	d007      	beq.n	cb7a <_sercom_get_default_pad+0x9e>
    cb6a:	2900      	cmp	r1, #0
    cb6c:	d031      	beq.n	cbd2 <_sercom_get_default_pad+0xf6>
    cb6e:	2902      	cmp	r1, #2
    cb70:	d005      	beq.n	cb7e <_sercom_get_default_pad+0xa2>
    cb72:	2903      	cmp	r1, #3
    cb74:	d005      	beq.n	cb82 <_sercom_get_default_pad+0xa6>
	return 0;
    cb76:	2000      	movs	r0, #0
    cb78:	e7be      	b.n	caf8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cb7a:	4828      	ldr	r0, [pc, #160]	; (cc1c <_sercom_get_default_pad+0x140>)
    cb7c:	e7bc      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb7e:	4828      	ldr	r0, [pc, #160]	; (cc20 <_sercom_get_default_pad+0x144>)
    cb80:	e7ba      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb82:	4828      	ldr	r0, [pc, #160]	; (cc24 <_sercom_get_default_pad+0x148>)
    cb84:	e7b8      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb86:	2901      	cmp	r1, #1
    cb88:	d007      	beq.n	cb9a <_sercom_get_default_pad+0xbe>
    cb8a:	2900      	cmp	r1, #0
    cb8c:	d023      	beq.n	cbd6 <_sercom_get_default_pad+0xfa>
    cb8e:	2902      	cmp	r1, #2
    cb90:	d005      	beq.n	cb9e <_sercom_get_default_pad+0xc2>
    cb92:	2903      	cmp	r1, #3
    cb94:	d005      	beq.n	cba2 <_sercom_get_default_pad+0xc6>
	return 0;
    cb96:	2000      	movs	r0, #0
    cb98:	e7ae      	b.n	caf8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cb9a:	4823      	ldr	r0, [pc, #140]	; (cc28 <_sercom_get_default_pad+0x14c>)
    cb9c:	e7ac      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cb9e:	4823      	ldr	r0, [pc, #140]	; (cc2c <_sercom_get_default_pad+0x150>)
    cba0:	e7aa      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cba2:	4823      	ldr	r0, [pc, #140]	; (cc30 <_sercom_get_default_pad+0x154>)
    cba4:	e7a8      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cba6:	2901      	cmp	r1, #1
    cba8:	d007      	beq.n	cbba <_sercom_get_default_pad+0xde>
    cbaa:	2900      	cmp	r1, #0
    cbac:	d015      	beq.n	cbda <_sercom_get_default_pad+0xfe>
    cbae:	2902      	cmp	r1, #2
    cbb0:	d005      	beq.n	cbbe <_sercom_get_default_pad+0xe2>
    cbb2:	2903      	cmp	r1, #3
    cbb4:	d005      	beq.n	cbc2 <_sercom_get_default_pad+0xe6>
	return 0;
    cbb6:	2000      	movs	r0, #0
    cbb8:	e79e      	b.n	caf8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    cbba:	481e      	ldr	r0, [pc, #120]	; (cc34 <_sercom_get_default_pad+0x158>)
    cbbc:	e79c      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbbe:	481e      	ldr	r0, [pc, #120]	; (cc38 <_sercom_get_default_pad+0x15c>)
    cbc0:	e79a      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbc2:	481e      	ldr	r0, [pc, #120]	; (cc3c <_sercom_get_default_pad+0x160>)
    cbc4:	e798      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbc6:	481e      	ldr	r0, [pc, #120]	; (cc40 <_sercom_get_default_pad+0x164>)
    cbc8:	e796      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbca:	2003      	movs	r0, #3
    cbcc:	e794      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbce:	481d      	ldr	r0, [pc, #116]	; (cc44 <_sercom_get_default_pad+0x168>)
    cbd0:	e792      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbd2:	481d      	ldr	r0, [pc, #116]	; (cc48 <_sercom_get_default_pad+0x16c>)
    cbd4:	e790      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbd6:	481d      	ldr	r0, [pc, #116]	; (cc4c <_sercom_get_default_pad+0x170>)
    cbd8:	e78e      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbda:	481d      	ldr	r0, [pc, #116]	; (cc50 <_sercom_get_default_pad+0x174>)
    cbdc:	e78c      	b.n	caf8 <_sercom_get_default_pad+0x1c>
    cbde:	46c0      	nop			; (mov r8, r8)
    cbe0:	42001000 	.word	0x42001000
    cbe4:	42001800 	.word	0x42001800
    cbe8:	42001c00 	.word	0x42001c00
    cbec:	42001400 	.word	0x42001400
    cbf0:	42000800 	.word	0x42000800
    cbf4:	42000c00 	.word	0x42000c00
    cbf8:	00050003 	.word	0x00050003
    cbfc:	00060003 	.word	0x00060003
    cc00:	00070003 	.word	0x00070003
    cc04:	00010003 	.word	0x00010003
    cc08:	001e0003 	.word	0x001e0003
    cc0c:	001f0003 	.word	0x001f0003
    cc10:	00090003 	.word	0x00090003
    cc14:	000a0003 	.word	0x000a0003
    cc18:	000b0003 	.word	0x000b0003
    cc1c:	00110003 	.word	0x00110003
    cc20:	00120003 	.word	0x00120003
    cc24:	00130003 	.word	0x00130003
    cc28:	000d0003 	.word	0x000d0003
    cc2c:	000e0003 	.word	0x000e0003
    cc30:	000f0003 	.word	0x000f0003
    cc34:	00170003 	.word	0x00170003
    cc38:	00180003 	.word	0x00180003
    cc3c:	00190003 	.word	0x00190003
    cc40:	00040003 	.word	0x00040003
    cc44:	00080003 	.word	0x00080003
    cc48:	00100003 	.word	0x00100003
    cc4c:	000c0003 	.word	0x000c0003
    cc50:	00160003 	.word	0x00160003

0000cc54 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    cc54:	b530      	push	{r4, r5, lr}
    cc56:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    cc58:	4b0b      	ldr	r3, [pc, #44]	; (cc88 <_sercom_get_sercom_inst_index+0x34>)
    cc5a:	466a      	mov	r2, sp
    cc5c:	cb32      	ldmia	r3!, {r1, r4, r5}
    cc5e:	c232      	stmia	r2!, {r1, r4, r5}
    cc60:	cb32      	ldmia	r3!, {r1, r4, r5}
    cc62:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    cc64:	9b00      	ldr	r3, [sp, #0]
    cc66:	4283      	cmp	r3, r0
    cc68:	d00b      	beq.n	cc82 <_sercom_get_sercom_inst_index+0x2e>
    cc6a:	2301      	movs	r3, #1
    cc6c:	009a      	lsls	r2, r3, #2
    cc6e:	4669      	mov	r1, sp
    cc70:	5852      	ldr	r2, [r2, r1]
    cc72:	4282      	cmp	r2, r0
    cc74:	d006      	beq.n	cc84 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    cc76:	3301      	adds	r3, #1
    cc78:	2b06      	cmp	r3, #6
    cc7a:	d1f7      	bne.n	cc6c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    cc7c:	2000      	movs	r0, #0
}
    cc7e:	b007      	add	sp, #28
    cc80:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    cc82:	2300      	movs	r3, #0
			return i;
    cc84:	b2d8      	uxtb	r0, r3
    cc86:	e7fa      	b.n	cc7e <_sercom_get_sercom_inst_index+0x2a>
    cc88:	00018a58 	.word	0x00018a58

0000cc8c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    cc8c:	4770      	bx	lr
	...

0000cc90 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    cc90:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    cc92:	4b0a      	ldr	r3, [pc, #40]	; (ccbc <_sercom_set_handler+0x2c>)
    cc94:	781b      	ldrb	r3, [r3, #0]
    cc96:	2b00      	cmp	r3, #0
    cc98:	d10c      	bne.n	ccb4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    cc9a:	4f09      	ldr	r7, [pc, #36]	; (ccc0 <_sercom_set_handler+0x30>)
    cc9c:	4e09      	ldr	r6, [pc, #36]	; (ccc4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    cc9e:	4d0a      	ldr	r5, [pc, #40]	; (ccc8 <_sercom_set_handler+0x38>)
    cca0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    cca2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    cca4:	195a      	adds	r2, r3, r5
    cca6:	6014      	str	r4, [r2, #0]
    cca8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    ccaa:	2b18      	cmp	r3, #24
    ccac:	d1f9      	bne.n	cca2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    ccae:	2201      	movs	r2, #1
    ccb0:	4b02      	ldr	r3, [pc, #8]	; (ccbc <_sercom_set_handler+0x2c>)
    ccb2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    ccb4:	0080      	lsls	r0, r0, #2
    ccb6:	4b02      	ldr	r3, [pc, #8]	; (ccc0 <_sercom_set_handler+0x30>)
    ccb8:	50c1      	str	r1, [r0, r3]
}
    ccba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccbc:	20003ee2 	.word	0x20003ee2
    ccc0:	20003ee4 	.word	0x20003ee4
    ccc4:	0000cc8d 	.word	0x0000cc8d
    ccc8:	20005bcc 	.word	0x20005bcc

0000cccc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    cccc:	b500      	push	{lr}
    ccce:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    ccd0:	2309      	movs	r3, #9
    ccd2:	466a      	mov	r2, sp
    ccd4:	7013      	strb	r3, [r2, #0]
    ccd6:	3301      	adds	r3, #1
    ccd8:	7053      	strb	r3, [r2, #1]
    ccda:	3301      	adds	r3, #1
    ccdc:	7093      	strb	r3, [r2, #2]
    ccde:	3301      	adds	r3, #1
    cce0:	70d3      	strb	r3, [r2, #3]
    cce2:	3301      	adds	r3, #1
    cce4:	7113      	strb	r3, [r2, #4]
    cce6:	3301      	adds	r3, #1
    cce8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    ccea:	4b03      	ldr	r3, [pc, #12]	; (ccf8 <_sercom_get_interrupt_vector+0x2c>)
    ccec:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    ccee:	466b      	mov	r3, sp
    ccf0:	5618      	ldrsb	r0, [r3, r0]
}
    ccf2:	b003      	add	sp, #12
    ccf4:	bd00      	pop	{pc}
    ccf6:	46c0      	nop			; (mov r8, r8)
    ccf8:	0000cc55 	.word	0x0000cc55

0000ccfc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    ccfc:	b510      	push	{r4, lr}
    ccfe:	4b02      	ldr	r3, [pc, #8]	; (cd08 <SERCOM0_Handler+0xc>)
    cd00:	681b      	ldr	r3, [r3, #0]
    cd02:	2000      	movs	r0, #0
    cd04:	4798      	blx	r3
    cd06:	bd10      	pop	{r4, pc}
    cd08:	20003ee4 	.word	0x20003ee4

0000cd0c <SERCOM1_Handler>:
    cd0c:	b510      	push	{r4, lr}
    cd0e:	4b02      	ldr	r3, [pc, #8]	; (cd18 <SERCOM1_Handler+0xc>)
    cd10:	685b      	ldr	r3, [r3, #4]
    cd12:	2001      	movs	r0, #1
    cd14:	4798      	blx	r3
    cd16:	bd10      	pop	{r4, pc}
    cd18:	20003ee4 	.word	0x20003ee4

0000cd1c <SERCOM2_Handler>:
    cd1c:	b510      	push	{r4, lr}
    cd1e:	4b02      	ldr	r3, [pc, #8]	; (cd28 <SERCOM2_Handler+0xc>)
    cd20:	689b      	ldr	r3, [r3, #8]
    cd22:	2002      	movs	r0, #2
    cd24:	4798      	blx	r3
    cd26:	bd10      	pop	{r4, pc}
    cd28:	20003ee4 	.word	0x20003ee4

0000cd2c <SERCOM3_Handler>:
    cd2c:	b510      	push	{r4, lr}
    cd2e:	4b02      	ldr	r3, [pc, #8]	; (cd38 <SERCOM3_Handler+0xc>)
    cd30:	68db      	ldr	r3, [r3, #12]
    cd32:	2003      	movs	r0, #3
    cd34:	4798      	blx	r3
    cd36:	bd10      	pop	{r4, pc}
    cd38:	20003ee4 	.word	0x20003ee4

0000cd3c <SERCOM4_Handler>:
    cd3c:	b510      	push	{r4, lr}
    cd3e:	4b02      	ldr	r3, [pc, #8]	; (cd48 <SERCOM4_Handler+0xc>)
    cd40:	691b      	ldr	r3, [r3, #16]
    cd42:	2004      	movs	r0, #4
    cd44:	4798      	blx	r3
    cd46:	bd10      	pop	{r4, pc}
    cd48:	20003ee4 	.word	0x20003ee4

0000cd4c <SERCOM5_Handler>:
    cd4c:	b510      	push	{r4, lr}
    cd4e:	4b02      	ldr	r3, [pc, #8]	; (cd58 <SERCOM5_Handler+0xc>)
    cd50:	695b      	ldr	r3, [r3, #20]
    cd52:	2005      	movs	r0, #5
    cd54:	4798      	blx	r3
    cd56:	bd10      	pop	{r4, pc}
    cd58:	20003ee4 	.word	0x20003ee4

0000cd5c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    cd5c:	b570      	push	{r4, r5, r6, lr}
    cd5e:	b082      	sub	sp, #8
    cd60:	0005      	movs	r5, r0
    cd62:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    cd64:	2200      	movs	r2, #0
    cd66:	466b      	mov	r3, sp
    cd68:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    cd6a:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    cd6c:	0030      	movs	r0, r6
    cd6e:	4b24      	ldr	r3, [pc, #144]	; (ce00 <spi_set_baudrate+0xa4>)
    cd70:	4798      	blx	r3
    cd72:	231f      	movs	r3, #31
    cd74:	4018      	ands	r0, r3
    cd76:	3b1e      	subs	r3, #30
    cd78:	4083      	lsls	r3, r0
    cd7a:	2280      	movs	r2, #128	; 0x80
    cd7c:	4921      	ldr	r1, [pc, #132]	; (ce04 <spi_set_baudrate+0xa8>)
    cd7e:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cd80:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cd82:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    cd84:	2b00      	cmp	r3, #0
    cd86:	d1fc      	bne.n	cd82 <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    cd88:	338f      	adds	r3, #143	; 0x8f
    cd8a:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    cd8c:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    cd8e:	6833      	ldr	r3, [r6, #0]
    cd90:	2202      	movs	r2, #2
    cd92:	4393      	bics	r3, r2
    cd94:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cd96:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cd98:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    cd9a:	2b00      	cmp	r3, #0
    cd9c:	d1fc      	bne.n	cd98 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    cd9e:	4b1a      	ldr	r3, [pc, #104]	; (ce08 <spi_set_baudrate+0xac>)
    cda0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    cda2:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    cda4:	b2c0      	uxtb	r0, r0
    cda6:	4b19      	ldr	r3, [pc, #100]	; (ce0c <spi_set_baudrate+0xb0>)
    cda8:	4798      	blx	r3
    cdaa:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    cdac:	466b      	mov	r3, sp
    cdae:	1d9a      	adds	r2, r3, #6
    cdb0:	0020      	movs	r0, r4
    cdb2:	4b17      	ldr	r3, [pc, #92]	; (ce10 <spi_set_baudrate+0xb4>)
    cdb4:	4798      	blx	r3
    cdb6:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    cdb8:	d003      	beq.n	cdc2 <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    cdba:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    cdbc:	0020      	movs	r0, r4
    cdbe:	b002      	add	sp, #8
    cdc0:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    cdc2:	466b      	mov	r3, sp
    cdc4:	3306      	adds	r3, #6
    cdc6:	781b      	ldrb	r3, [r3, #0]
    cdc8:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cdca:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cdcc:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    cdce:	2b00      	cmp	r3, #0
    cdd0:	d1fc      	bne.n	cdcc <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    cdd2:	0030      	movs	r0, r6
    cdd4:	4b0a      	ldr	r3, [pc, #40]	; (ce00 <spi_set_baudrate+0xa4>)
    cdd6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    cdd8:	231f      	movs	r3, #31
    cdda:	4018      	ands	r0, r3
    cddc:	3b1e      	subs	r3, #30
    cdde:	4083      	lsls	r3, r0
    cde0:	4a08      	ldr	r2, [pc, #32]	; (ce04 <spi_set_baudrate+0xa8>)
    cde2:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cde4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cde6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    cde8:	2b00      	cmp	r3, #0
    cdea:	d1fc      	bne.n	cde6 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    cdec:	6833      	ldr	r3, [r6, #0]
    cdee:	2202      	movs	r2, #2
    cdf0:	4313      	orrs	r3, r2
    cdf2:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    cdf4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    cdf6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    cdf8:	2b00      	cmp	r3, #0
    cdfa:	d1fc      	bne.n	cdf6 <spi_set_baudrate+0x9a>
    cdfc:	e7de      	b.n	cdbc <spi_set_baudrate+0x60>
    cdfe:	46c0      	nop			; (mov r8, r8)
    ce00:	0000cccd 	.word	0x0000cccd
    ce04:	e000e100 	.word	0xe000e100
    ce08:	0000cc55 	.word	0x0000cc55
    ce0c:	0000e011 	.word	0x0000e011
    ce10:	0000c9d3 	.word	0x0000c9d3

0000ce14 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    ce14:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce16:	b08b      	sub	sp, #44	; 0x2c
    ce18:	0005      	movs	r5, r0
    ce1a:	000c      	movs	r4, r1
    ce1c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    ce1e:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    ce20:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    ce22:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    ce24:	079b      	lsls	r3, r3, #30
    ce26:	d501      	bpl.n	ce2c <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    ce28:	b00b      	add	sp, #44	; 0x2c
    ce2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    ce2c:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    ce2e:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    ce30:	07db      	lsls	r3, r3, #31
    ce32:	d4f9      	bmi.n	ce28 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    ce34:	0008      	movs	r0, r1
    ce36:	4b60      	ldr	r3, [pc, #384]	; (cfb8 <spi_init+0x1a4>)
    ce38:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    ce3a:	4a60      	ldr	r2, [pc, #384]	; (cfbc <spi_init+0x1a8>)
    ce3c:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    ce3e:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    ce40:	2301      	movs	r3, #1
    ce42:	40bb      	lsls	r3, r7
    ce44:	430b      	orrs	r3, r1
    ce46:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    ce48:	a909      	add	r1, sp, #36	; 0x24
    ce4a:	2724      	movs	r7, #36	; 0x24
    ce4c:	5df3      	ldrb	r3, [r6, r7]
    ce4e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    ce50:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    ce52:	b2c3      	uxtb	r3, r0
    ce54:	9301      	str	r3, [sp, #4]
    ce56:	0018      	movs	r0, r3
    ce58:	4b59      	ldr	r3, [pc, #356]	; (cfc0 <spi_init+0x1ac>)
    ce5a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    ce5c:	9801      	ldr	r0, [sp, #4]
    ce5e:	4b59      	ldr	r3, [pc, #356]	; (cfc4 <spi_init+0x1b0>)
    ce60:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    ce62:	5df0      	ldrb	r0, [r6, r7]
    ce64:	2100      	movs	r1, #0
    ce66:	4b58      	ldr	r3, [pc, #352]	; (cfc8 <spi_init+0x1b4>)
    ce68:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    ce6a:	7833      	ldrb	r3, [r6, #0]
    ce6c:	2b01      	cmp	r3, #1
    ce6e:	d038      	beq.n	cee2 <spi_init+0xce>
    ce70:	002b      	movs	r3, r5
    ce72:	330c      	adds	r3, #12
    ce74:	0029      	movs	r1, r5
    ce76:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    ce78:	2200      	movs	r2, #0
    ce7a:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    ce7c:	428b      	cmp	r3, r1
    ce7e:	d1fc      	bne.n	ce7a <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    ce80:	2300      	movs	r3, #0
    ce82:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    ce84:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    ce86:	2400      	movs	r4, #0
    ce88:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    ce8a:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    ce8c:	3336      	adds	r3, #54	; 0x36
    ce8e:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    ce90:	3301      	adds	r3, #1
    ce92:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    ce94:	3301      	adds	r3, #1
    ce96:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    ce98:	3b35      	subs	r3, #53	; 0x35
    ce9a:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    ce9c:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    ce9e:	6828      	ldr	r0, [r5, #0]
    cea0:	4b45      	ldr	r3, [pc, #276]	; (cfb8 <spi_init+0x1a4>)
    cea2:	4798      	blx	r3
    cea4:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    cea6:	4949      	ldr	r1, [pc, #292]	; (cfcc <spi_init+0x1b8>)
    cea8:	4b49      	ldr	r3, [pc, #292]	; (cfd0 <spi_init+0x1bc>)
    ceaa:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    ceac:	00bf      	lsls	r7, r7, #2
    ceae:	4b49      	ldr	r3, [pc, #292]	; (cfd4 <spi_init+0x1c0>)
    ceb0:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    ceb2:	682f      	ldr	r7, [r5, #0]
    ceb4:	ab04      	add	r3, sp, #16
    ceb6:	2280      	movs	r2, #128	; 0x80
    ceb8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    ceba:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    cebc:	3a7f      	subs	r2, #127	; 0x7f
    cebe:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    cec0:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    cec2:	7833      	ldrb	r3, [r6, #0]
    cec4:	2b00      	cmp	r3, #0
    cec6:	d102      	bne.n	cece <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    cec8:	2200      	movs	r2, #0
    ceca:	ab04      	add	r3, sp, #16
    cecc:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    cece:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    ced0:	9305      	str	r3, [sp, #20]
    ced2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    ced4:	9306      	str	r3, [sp, #24]
    ced6:	6b33      	ldr	r3, [r6, #48]	; 0x30
    ced8:	9307      	str	r3, [sp, #28]
    ceda:	6b73      	ldr	r3, [r6, #52]	; 0x34
    cedc:	9308      	str	r3, [sp, #32]
    cede:	2400      	movs	r4, #0
    cee0:	e00b      	b.n	cefa <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    cee2:	6823      	ldr	r3, [r4, #0]
    cee4:	220c      	movs	r2, #12
    cee6:	4313      	orrs	r3, r2
    cee8:	6023      	str	r3, [r4, #0]
    ceea:	e7c1      	b.n	ce70 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    ceec:	0038      	movs	r0, r7
    ceee:	4b3a      	ldr	r3, [pc, #232]	; (cfd8 <spi_init+0x1c4>)
    cef0:	4798      	blx	r3
    cef2:	e00a      	b.n	cf0a <spi_init+0xf6>
    cef4:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    cef6:	2c04      	cmp	r4, #4
    cef8:	d010      	beq.n	cf1c <spi_init+0x108>
    cefa:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    cefc:	00a3      	lsls	r3, r4, #2
    cefe:	aa02      	add	r2, sp, #8
    cf00:	200c      	movs	r0, #12
    cf02:	1812      	adds	r2, r2, r0
    cf04:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    cf06:	2800      	cmp	r0, #0
    cf08:	d0f0      	beq.n	ceec <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    cf0a:	1c43      	adds	r3, r0, #1
    cf0c:	d0f2      	beq.n	cef4 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    cf0e:	a904      	add	r1, sp, #16
    cf10:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    cf12:	0c00      	lsrs	r0, r0, #16
    cf14:	b2c0      	uxtb	r0, r0
    cf16:	4b31      	ldr	r3, [pc, #196]	; (cfdc <spi_init+0x1c8>)
    cf18:	4798      	blx	r3
    cf1a:	e7eb      	b.n	cef4 <spi_init+0xe0>
	module->mode             = config->mode;
    cf1c:	7833      	ldrb	r3, [r6, #0]
    cf1e:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    cf20:	7c33      	ldrb	r3, [r6, #16]
    cf22:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    cf24:	7cb3      	ldrb	r3, [r6, #18]
    cf26:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    cf28:	7d33      	ldrb	r3, [r6, #20]
    cf2a:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    cf2c:	2200      	movs	r2, #0
    cf2e:	ab02      	add	r3, sp, #8
    cf30:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    cf32:	7833      	ldrb	r3, [r6, #0]
    cf34:	2b01      	cmp	r3, #1
    cf36:	d028      	beq.n	cf8a <spi_init+0x176>
	ctrla |= config->transfer_mode;
    cf38:	6873      	ldr	r3, [r6, #4]
    cf3a:	68b2      	ldr	r2, [r6, #8]
    cf3c:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    cf3e:	68f2      	ldr	r2, [r6, #12]
    cf40:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    cf42:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    cf44:	7c72      	ldrb	r2, [r6, #17]
    cf46:	2a00      	cmp	r2, #0
    cf48:	d103      	bne.n	cf52 <spi_init+0x13e>
    cf4a:	4a25      	ldr	r2, [pc, #148]	; (cfe0 <spi_init+0x1cc>)
    cf4c:	7892      	ldrb	r2, [r2, #2]
    cf4e:	0792      	lsls	r2, r2, #30
    cf50:	d501      	bpl.n	cf56 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    cf52:	2280      	movs	r2, #128	; 0x80
    cf54:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    cf56:	7cb2      	ldrb	r2, [r6, #18]
    cf58:	2a00      	cmp	r2, #0
    cf5a:	d002      	beq.n	cf62 <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    cf5c:	2280      	movs	r2, #128	; 0x80
    cf5e:	0292      	lsls	r2, r2, #10
    cf60:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    cf62:	7cf2      	ldrb	r2, [r6, #19]
    cf64:	2a00      	cmp	r2, #0
    cf66:	d002      	beq.n	cf6e <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    cf68:	2280      	movs	r2, #128	; 0x80
    cf6a:	0092      	lsls	r2, r2, #2
    cf6c:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    cf6e:	7d32      	ldrb	r2, [r6, #20]
    cf70:	2a00      	cmp	r2, #0
    cf72:	d002      	beq.n	cf7a <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    cf74:	2280      	movs	r2, #128	; 0x80
    cf76:	0192      	lsls	r2, r2, #6
    cf78:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    cf7a:	683a      	ldr	r2, [r7, #0]
    cf7c:	4313      	orrs	r3, r2
    cf7e:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    cf80:	687b      	ldr	r3, [r7, #4]
    cf82:	430b      	orrs	r3, r1
    cf84:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    cf86:	2000      	movs	r0, #0
    cf88:	e74e      	b.n	ce28 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    cf8a:	6828      	ldr	r0, [r5, #0]
    cf8c:	4b0a      	ldr	r3, [pc, #40]	; (cfb8 <spi_init+0x1a4>)
    cf8e:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    cf90:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    cf92:	b2c0      	uxtb	r0, r0
    cf94:	4b13      	ldr	r3, [pc, #76]	; (cfe4 <spi_init+0x1d0>)
    cf96:	4798      	blx	r3
    cf98:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    cf9a:	ab02      	add	r3, sp, #8
    cf9c:	1d9a      	adds	r2, r3, #6
    cf9e:	69b0      	ldr	r0, [r6, #24]
    cfa0:	4b11      	ldr	r3, [pc, #68]	; (cfe8 <spi_init+0x1d4>)
    cfa2:	4798      	blx	r3
    cfa4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    cfa6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    cfa8:	2b00      	cmp	r3, #0
    cfaa:	d000      	beq.n	cfae <spi_init+0x19a>
    cfac:	e73c      	b.n	ce28 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    cfae:	ab02      	add	r3, sp, #8
    cfb0:	3306      	adds	r3, #6
    cfb2:	781b      	ldrb	r3, [r3, #0]
    cfb4:	733b      	strb	r3, [r7, #12]
    cfb6:	e7bf      	b.n	cf38 <spi_init+0x124>
    cfb8:	0000cc55 	.word	0x0000cc55
    cfbc:	40000400 	.word	0x40000400
    cfc0:	0000dff5 	.word	0x0000dff5
    cfc4:	0000df69 	.word	0x0000df69
    cfc8:	0000ca91 	.word	0x0000ca91
    cfcc:	0000d281 	.word	0x0000d281
    cfd0:	0000cc91 	.word	0x0000cc91
    cfd4:	20005bcc 	.word	0x20005bcc
    cfd8:	0000cadd 	.word	0x0000cadd
    cfdc:	0000e11d 	.word	0x0000e11d
    cfe0:	41002000 	.word	0x41002000
    cfe4:	0000e011 	.word	0x0000e011
    cfe8:	0000c9d3 	.word	0x0000c9d3

0000cfec <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    cfec:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfee:	46d6      	mov	lr, sl
    cff0:	4647      	mov	r7, r8
    cff2:	b580      	push	{r7, lr}
    cff4:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    cff6:	2438      	movs	r4, #56	; 0x38
    cff8:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    cffa:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    cffc:	2d05      	cmp	r5, #5
    cffe:	d002      	beq.n	d006 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    d000:	3412      	adds	r4, #18
	if (length == 0) {
    d002:	2a00      	cmp	r2, #0
    d004:	d105      	bne.n	d012 <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    d006:	0020      	movs	r0, r4
    d008:	b003      	add	sp, #12
    d00a:	bc0c      	pop	{r2, r3}
    d00c:	4690      	mov	r8, r2
    d00e:	469a      	mov	sl, r3
    d010:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    d012:	79c4      	ldrb	r4, [r0, #7]
    d014:	2c00      	cmp	r4, #0
    d016:	d144      	bne.n	d0a2 <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    d018:	341c      	adds	r4, #28
    d01a:	e7f4      	b.n	d006 <spi_read_buffer_wait+0x1a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d01c:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d01e:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    d020:	423c      	tst	r4, r7
    d022:	d0fc      	beq.n	d01e <spi_read_buffer_wait+0x32>
    d024:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_write(module)) {
    d026:	423c      	tst	r4, r7
    d028:	d01a      	beq.n	d060 <spi_read_buffer_wait+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d02a:	4644      	mov	r4, r8
    d02c:	62ac      	str	r4, [r5, #40]	; 0x28
    d02e:	e017      	b.n	d060 <spi_read_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d030:	7984      	ldrb	r4, [r0, #6]
    d032:	2c01      	cmp	r4, #1
    d034:	d026      	beq.n	d084 <spi_read_buffer_wait+0x98>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d036:	6aad      	ldr	r5, [r5, #40]	; 0x28
    d038:	b2ec      	uxtb	r4, r5
    d03a:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    d03c:	9c01      	ldr	r4, [sp, #4]
    d03e:	2c00      	cmp	r4, #0
    d040:	d13a      	bne.n	d0b8 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    d042:	1c75      	adds	r5, r6, #1
    d044:	b2ad      	uxth	r5, r5
    d046:	4664      	mov	r4, ip
    d048:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d04a:	7984      	ldrb	r4, [r0, #6]
    d04c:	2c01      	cmp	r4, #1
    d04e:	d01e      	beq.n	d08e <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    d050:	002e      	movs	r6, r5
	while (length--) {
    d052:	3a01      	subs	r2, #1
    d054:	b292      	uxth	r2, r2
    d056:	4552      	cmp	r2, sl
    d058:	d01f      	beq.n	d09a <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    d05a:	7944      	ldrb	r4, [r0, #5]
    d05c:	2c01      	cmp	r4, #1
    d05e:	d0dd      	beq.n	d01c <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d060:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d062:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    d064:	421c      	tst	r4, r3
    d066:	d0fc      	beq.n	d062 <spi_read_buffer_wait+0x76>
    d068:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    d06a:	421c      	tst	r4, r3
    d06c:	d017      	beq.n	d09e <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d06e:	8b6c      	ldrh	r4, [r5, #26]
    d070:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    d072:	2400      	movs	r4, #0
    d074:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d076:	4664      	mov	r4, ip
    d078:	421c      	tst	r4, r3
    d07a:	d0d9      	beq.n	d030 <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d07c:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    d07e:	241e      	movs	r4, #30
    d080:	9401      	str	r4, [sp, #4]
    d082:	e7d5      	b.n	d030 <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d084:	6aac      	ldr	r4, [r5, #40]	; 0x28
    d086:	05e4      	lsls	r4, r4, #23
    d088:	0de4      	lsrs	r4, r4, #23
    d08a:	46a4      	mov	ip, r4
    d08c:	e7d6      	b.n	d03c <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    d08e:	3602      	adds	r6, #2
    d090:	b2b6      	uxth	r6, r6
    d092:	4664      	mov	r4, ip
    d094:	0a24      	lsrs	r4, r4, #8
    d096:	554c      	strb	r4, [r1, r5]
    d098:	e7db      	b.n	d052 <spi_read_buffer_wait+0x66>
    d09a:	9c01      	ldr	r4, [sp, #4]
    d09c:	e7b3      	b.n	d006 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    d09e:	2410      	movs	r4, #16
    d0a0:	e7b1      	b.n	d006 <spi_read_buffer_wait+0x1a>
	while (length--) {
    d0a2:	3a01      	subs	r2, #1
    d0a4:	b292      	uxth	r2, r2
    d0a6:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    d0a8:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d0aa:	05db      	lsls	r3, r3, #23
    d0ac:	0ddb      	lsrs	r3, r3, #23
    d0ae:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    d0b0:	2304      	movs	r3, #4
	while (length--) {
    d0b2:	4c02      	ldr	r4, [pc, #8]	; (d0bc <spi_read_buffer_wait+0xd0>)
    d0b4:	46a2      	mov	sl, r4
    d0b6:	e7d0      	b.n	d05a <spi_read_buffer_wait+0x6e>
    d0b8:	9c01      	ldr	r4, [sp, #4]
    d0ba:	e7a4      	b.n	d006 <spi_read_buffer_wait+0x1a>
    d0bc:	0000ffff 	.word	0x0000ffff

0000d0c0 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    d0c0:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    d0c2:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    d0c4:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    d0c6:	2c01      	cmp	r4, #1
    d0c8:	d001      	beq.n	d0ce <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    d0ca:	0018      	movs	r0, r3
    d0cc:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    d0ce:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    d0d0:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    d0d2:	2c00      	cmp	r4, #0
    d0d4:	d1f9      	bne.n	d0ca <spi_select_slave+0xa>
		if (select) {
    d0d6:	2a00      	cmp	r2, #0
    d0d8:	d058      	beq.n	d18c <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    d0da:	784b      	ldrb	r3, [r1, #1]
    d0dc:	2b00      	cmp	r3, #0
    d0de:	d044      	beq.n	d16a <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d0e0:	6803      	ldr	r3, [r0, #0]
    d0e2:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    d0e4:	07db      	lsls	r3, r3, #31
    d0e6:	d410      	bmi.n	d10a <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    d0e8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    d0ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d0ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d0ee:	2900      	cmp	r1, #0
    d0f0:	d104      	bne.n	d0fc <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    d0f2:	0953      	lsrs	r3, r2, #5
    d0f4:	01db      	lsls	r3, r3, #7
    d0f6:	492e      	ldr	r1, [pc, #184]	; (d1b0 <spi_select_slave+0xf0>)
    d0f8:	468c      	mov	ip, r1
    d0fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d0fc:	211f      	movs	r1, #31
    d0fe:	4011      	ands	r1, r2
    d100:	2201      	movs	r2, #1
    d102:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d104:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    d106:	2305      	movs	r3, #5
    d108:	e7df      	b.n	d0ca <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    d10a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    d10c:	09d4      	lsrs	r4, r2, #7
		return NULL;
    d10e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d110:	2c00      	cmp	r4, #0
    d112:	d104      	bne.n	d11e <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    d114:	0953      	lsrs	r3, r2, #5
    d116:	01db      	lsls	r3, r3, #7
    d118:	4c25      	ldr	r4, [pc, #148]	; (d1b0 <spi_select_slave+0xf0>)
    d11a:	46a4      	mov	ip, r4
    d11c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d11e:	241f      	movs	r4, #31
    d120:	4014      	ands	r4, r2
    d122:	2201      	movs	r2, #1
    d124:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    d126:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    d128:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d12a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d12c:	07d2      	lsls	r2, r2, #31
    d12e:	d501      	bpl.n	d134 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d130:	788a      	ldrb	r2, [r1, #2]
    d132:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    d134:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    d136:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    d138:	2a00      	cmp	r2, #0
    d13a:	d1c6      	bne.n	d0ca <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d13c:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    d13e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d140:	7e13      	ldrb	r3, [r2, #24]
    d142:	420b      	tst	r3, r1
    d144:	d0fc      	beq.n	d140 <spi_select_slave+0x80>
    d146:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    d148:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    d14a:	0749      	lsls	r1, r1, #29
    d14c:	d5bd      	bpl.n	d0ca <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d14e:	8b53      	ldrh	r3, [r2, #26]
    d150:	075b      	lsls	r3, r3, #29
    d152:	d501      	bpl.n	d158 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d154:	2304      	movs	r3, #4
    d156:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d158:	7983      	ldrb	r3, [r0, #6]
    d15a:	2b01      	cmp	r3, #1
    d15c:	d002      	beq.n	d164 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d15e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d160:	2300      	movs	r3, #0
    d162:	e7b2      	b.n	d0ca <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d164:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d166:	2300      	movs	r3, #0
    d168:	e7af      	b.n	d0ca <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    d16a:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    d16c:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d16e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d170:	2900      	cmp	r1, #0
    d172:	d104      	bne.n	d17e <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    d174:	0953      	lsrs	r3, r2, #5
    d176:	01db      	lsls	r3, r3, #7
    d178:	490d      	ldr	r1, [pc, #52]	; (d1b0 <spi_select_slave+0xf0>)
    d17a:	468c      	mov	ip, r1
    d17c:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d17e:	211f      	movs	r1, #31
    d180:	4011      	ands	r1, r2
    d182:	2201      	movs	r2, #1
    d184:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    d186:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    d188:	2300      	movs	r3, #0
    d18a:	e79e      	b.n	d0ca <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    d18c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    d18e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d190:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d192:	2900      	cmp	r1, #0
    d194:	d104      	bne.n	d1a0 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    d196:	0953      	lsrs	r3, r2, #5
    d198:	01db      	lsls	r3, r3, #7
    d19a:	4905      	ldr	r1, [pc, #20]	; (d1b0 <spi_select_slave+0xf0>)
    d19c:	468c      	mov	ip, r1
    d19e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d1a0:	211f      	movs	r1, #31
    d1a2:	4011      	ands	r1, r2
    d1a4:	2201      	movs	r2, #1
    d1a6:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    d1a8:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    d1aa:	2300      	movs	r3, #0
    d1ac:	e78d      	b.n	d0ca <spi_select_slave+0xa>
    d1ae:	46c0      	nop			; (mov r8, r8)
    d1b0:	41004400 	.word	0x41004400

0000d1b4 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    d1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1b6:	46de      	mov	lr, fp
    d1b8:	4657      	mov	r7, sl
    d1ba:	464e      	mov	r6, r9
    d1bc:	4645      	mov	r5, r8
    d1be:	b5e0      	push	{r5, r6, r7, lr}
    d1c0:	b083      	sub	sp, #12
    d1c2:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    d1c4:	2338      	movs	r3, #56	; 0x38
    d1c6:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    d1c8:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    d1ca:	2c05      	cmp	r4, #5
    d1cc:	d002      	beq.n	d1d4 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    d1ce:	3312      	adds	r3, #18
	if (length == 0) {
    d1d0:	2a00      	cmp	r2, #0
    d1d2:	d14b      	bne.n	d26c <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    d1d4:	0018      	movs	r0, r3
    d1d6:	b003      	add	sp, #12
    d1d8:	bc3c      	pop	{r2, r3, r4, r5}
    d1da:	4690      	mov	r8, r2
    d1dc:	4699      	mov	r9, r3
    d1de:	46a2      	mov	sl, r4
    d1e0:	46ab      	mov	fp, r5
    d1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    d1e4:	3702      	adds	r7, #2
    d1e6:	b2bf      	uxth	r7, r7
    d1e8:	4641      	mov	r1, r8
    d1ea:	4653      	mov	r3, sl
    d1ec:	5c59      	ldrb	r1, [r3, r1]
    d1ee:	0209      	lsls	r1, r1, #8
    d1f0:	465b      	mov	r3, fp
    d1f2:	430b      	orrs	r3, r1
    d1f4:	e018      	b.n	d228 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d1f6:	7983      	ldrb	r3, [r0, #6]
    d1f8:	2b01      	cmp	r3, #1
    d1fa:	d02a      	beq.n	d252 <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d1fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    d1fe:	3e01      	subs	r6, #1
    d200:	b2b6      	uxth	r6, r6
    d202:	4566      	cmp	r6, ip
    d204:	d027      	beq.n	d256 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d206:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d208:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    d20a:	4223      	tst	r3, r4
    d20c:	d0fc      	beq.n	d208 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    d20e:	1c7b      	adds	r3, r7, #1
    d210:	b29b      	uxth	r3, r3
    d212:	4698      	mov	r8, r3
    d214:	4653      	mov	r3, sl
    d216:	5ddb      	ldrb	r3, [r3, r7]
    d218:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d21a:	7981      	ldrb	r1, [r0, #6]
    d21c:	2901      	cmp	r1, #1
    d21e:	d0e1      	beq.n	d1e4 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    d220:	4669      	mov	r1, sp
    d222:	80cb      	strh	r3, [r1, #6]
    d224:	88cb      	ldrh	r3, [r1, #6]
    d226:	4647      	mov	r7, r8
    d228:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    d22a:	4221      	tst	r1, r4
    d22c:	d002      	beq.n	d234 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d22e:	05db      	lsls	r3, r3, #23
    d230:	0ddb      	lsrs	r3, r3, #23
    d232:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    d234:	79c3      	ldrb	r3, [r0, #7]
    d236:	2b00      	cmp	r3, #0
    d238:	d0e1      	beq.n	d1fe <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d23a:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d23c:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    d23e:	422b      	tst	r3, r5
    d240:	d0fc      	beq.n	d23c <spi_write_buffer_wait+0x88>
    d242:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    d244:	422b      	tst	r3, r5
    d246:	d0da      	beq.n	d1fe <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d248:	8b53      	ldrh	r3, [r2, #26]
    d24a:	422b      	tst	r3, r5
    d24c:	d0d3      	beq.n	d1f6 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d24e:	8355      	strh	r5, [r2, #26]
    d250:	e7d1      	b.n	d1f6 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d252:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d254:	e7d3      	b.n	d1fe <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    d256:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    d258:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    d25a:	2a01      	cmp	r2, #1
    d25c:	d1ba      	bne.n	d1d4 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    d25e:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    d260:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d262:	7e0b      	ldrb	r3, [r1, #24]
    d264:	4213      	tst	r3, r2
    d266:	d0fc      	beq.n	d262 <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    d268:	2300      	movs	r3, #0
    d26a:	e7b3      	b.n	d1d4 <spi_write_buffer_wait+0x20>
	while (length--) {
    d26c:	3a01      	subs	r2, #1
    d26e:	b296      	uxth	r6, r2
    d270:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    d272:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    d274:	2504      	movs	r5, #4
	while (length--) {
    d276:	4b01      	ldr	r3, [pc, #4]	; (d27c <spi_write_buffer_wait+0xc8>)
    d278:	469c      	mov	ip, r3
    d27a:	e7c4      	b.n	d206 <spi_write_buffer_wait+0x52>
    d27c:	0000ffff 	.word	0x0000ffff

0000d280 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    d282:	0080      	lsls	r0, r0, #2
    d284:	4b70      	ldr	r3, [pc, #448]	; (d448 <_spi_interrupt_handler+0x1c8>)
    d286:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d288:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    d28a:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    d28c:	5ce7      	ldrb	r7, [r4, r3]
    d28e:	2236      	movs	r2, #54	; 0x36
    d290:	5ca2      	ldrb	r2, [r4, r2]
    d292:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    d294:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    d296:	7db5      	ldrb	r5, [r6, #22]
    d298:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    d29a:	07eb      	lsls	r3, r5, #31
    d29c:	d502      	bpl.n	d2a4 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    d29e:	7963      	ldrb	r3, [r4, #5]
    d2a0:	2b01      	cmp	r3, #1
    d2a2:	d01e      	beq.n	d2e2 <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    d2a4:	076b      	lsls	r3, r5, #29
    d2a6:	d511      	bpl.n	d2cc <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d2a8:	8b73      	ldrh	r3, [r6, #26]
    d2aa:	075b      	lsls	r3, r3, #29
    d2ac:	d55a      	bpl.n	d364 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    d2ae:	7a63      	ldrb	r3, [r4, #9]
    d2b0:	2b01      	cmp	r3, #1
    d2b2:	d008      	beq.n	d2c6 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    d2b4:	221e      	movs	r2, #30
    d2b6:	2338      	movs	r3, #56	; 0x38
    d2b8:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    d2ba:	3b35      	subs	r3, #53	; 0x35
    d2bc:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    d2be:	3302      	adds	r3, #2
    d2c0:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    d2c2:	073b      	lsls	r3, r7, #28
    d2c4:	d44a      	bmi.n	d35c <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    d2c6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d2c8:	2304      	movs	r3, #4
    d2ca:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    d2cc:	07ab      	lsls	r3, r5, #30
    d2ce:	d503      	bpl.n	d2d8 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    d2d0:	7963      	ldrb	r3, [r4, #5]
    d2d2:	2b01      	cmp	r3, #1
    d2d4:	d100      	bne.n	d2d8 <_spi_interrupt_handler+0x58>
    d2d6:	e097      	b.n	d408 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    d2d8:	b26d      	sxtb	r5, r5
    d2da:	2d00      	cmp	r5, #0
    d2dc:	da00      	bge.n	d2e0 <_spi_interrupt_handler+0x60>
    d2de:	e0a9      	b.n	d434 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    d2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    d2e2:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d022      	beq.n	d32e <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    d2e8:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    d2ea:	2b00      	cmp	r3, #0
    d2ec:	d0da      	beq.n	d2a4 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d2ee:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    d2f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d2f2:	7813      	ldrb	r3, [r2, #0]
    d2f4:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    d2f6:	1c50      	adds	r0, r2, #1
    d2f8:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d2fa:	79a0      	ldrb	r0, [r4, #6]
    d2fc:	2801      	cmp	r0, #1
    d2fe:	d027      	beq.n	d350 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    d300:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    d302:	05db      	lsls	r3, r3, #23
    d304:	0ddb      	lsrs	r3, r3, #23
    d306:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    d308:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d30a:	3b01      	subs	r3, #1
    d30c:	b29b      	uxth	r3, r3
    d30e:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    d310:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    d312:	b29b      	uxth	r3, r3
    d314:	2b00      	cmp	r3, #0
    d316:	d1c5      	bne.n	d2a4 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    d318:	3301      	adds	r3, #1
    d31a:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    d31c:	7a63      	ldrb	r3, [r4, #9]
    d31e:	2b01      	cmp	r3, #1
    d320:	d1c0      	bne.n	d2a4 <_spi_interrupt_handler+0x24>
    d322:	79e3      	ldrb	r3, [r4, #7]
    d324:	2b00      	cmp	r3, #0
    d326:	d1bd      	bne.n	d2a4 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d328:	3302      	adds	r3, #2
    d32a:	75b3      	strb	r3, [r6, #22]
    d32c:	e7ba      	b.n	d2a4 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    d32e:	4b47      	ldr	r3, [pc, #284]	; (d44c <_spi_interrupt_handler+0x1cc>)
    d330:	881b      	ldrh	r3, [r3, #0]
    d332:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    d334:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d336:	3b01      	subs	r3, #1
    d338:	b29b      	uxth	r3, r3
    d33a:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    d33c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d33e:	b29b      	uxth	r3, r3
    d340:	2b00      	cmp	r3, #0
    d342:	d101      	bne.n	d348 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    d344:	3301      	adds	r3, #1
    d346:	7533      	strb	r3, [r6, #20]
		if (0
    d348:	7963      	ldrb	r3, [r4, #5]
    d34a:	2b01      	cmp	r3, #1
    d34c:	d0cc      	beq.n	d2e8 <_spi_interrupt_handler+0x68>
    d34e:	e7a9      	b.n	d2a4 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    d350:	7850      	ldrb	r0, [r2, #1]
    d352:	0200      	lsls	r0, r0, #8
    d354:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    d356:	3202      	adds	r2, #2
    d358:	62e2      	str	r2, [r4, #44]	; 0x2c
    d35a:	e7d2      	b.n	d302 <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    d35c:	0020      	movs	r0, r4
    d35e:	69a3      	ldr	r3, [r4, #24]
    d360:	4798      	blx	r3
    d362:	e7b0      	b.n	d2c6 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    d364:	7a63      	ldrb	r3, [r4, #9]
    d366:	2b01      	cmp	r3, #1
    d368:	d028      	beq.n	d3bc <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d36a:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    d36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d36e:	05db      	lsls	r3, r3, #23
    d370:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    d372:	b2da      	uxtb	r2, r3
    d374:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    d376:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    d378:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d37a:	1c51      	adds	r1, r2, #1
    d37c:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d37e:	79a1      	ldrb	r1, [r4, #6]
    d380:	2901      	cmp	r1, #1
    d382:	d034      	beq.n	d3ee <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    d384:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    d386:	3b01      	subs	r3, #1
    d388:	b29b      	uxth	r3, r3
    d38a:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    d38c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    d38e:	b29b      	uxth	r3, r3
    d390:	2b00      	cmp	r3, #0
    d392:	d000      	beq.n	d396 <_spi_interrupt_handler+0x116>
    d394:	e79a      	b.n	d2cc <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    d396:	2200      	movs	r2, #0
    d398:	3338      	adds	r3, #56	; 0x38
    d39a:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    d39c:	3b34      	subs	r3, #52	; 0x34
    d39e:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    d3a0:	7a63      	ldrb	r3, [r4, #9]
    d3a2:	2b02      	cmp	r3, #2
    d3a4:	d029      	beq.n	d3fa <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    d3a6:	7a63      	ldrb	r3, [r4, #9]
    d3a8:	2b00      	cmp	r3, #0
    d3aa:	d000      	beq.n	d3ae <_spi_interrupt_handler+0x12e>
    d3ac:	e78e      	b.n	d2cc <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    d3ae:	07bb      	lsls	r3, r7, #30
    d3b0:	d400      	bmi.n	d3b4 <_spi_interrupt_handler+0x134>
    d3b2:	e78b      	b.n	d2cc <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    d3b4:	0020      	movs	r0, r4
    d3b6:	6923      	ldr	r3, [r4, #16]
    d3b8:	4798      	blx	r3
    d3ba:	e787      	b.n	d2cc <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    d3bc:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    d3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    d3c0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d3c2:	3b01      	subs	r3, #1
    d3c4:	b29b      	uxth	r3, r3
    d3c6:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    d3c8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    d3ca:	b29b      	uxth	r3, r3
    d3cc:	2b00      	cmp	r3, #0
    d3ce:	d000      	beq.n	d3d2 <_spi_interrupt_handler+0x152>
    d3d0:	e77c      	b.n	d2cc <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    d3d2:	3304      	adds	r3, #4
    d3d4:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    d3d6:	2200      	movs	r2, #0
    d3d8:	3334      	adds	r3, #52	; 0x34
    d3da:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    d3dc:	3b35      	subs	r3, #53	; 0x35
    d3de:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    d3e0:	07fb      	lsls	r3, r7, #31
    d3e2:	d400      	bmi.n	d3e6 <_spi_interrupt_handler+0x166>
    d3e4:	e772      	b.n	d2cc <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    d3e6:	0020      	movs	r0, r4
    d3e8:	68e3      	ldr	r3, [r4, #12]
    d3ea:	4798      	blx	r3
    d3ec:	e76e      	b.n	d2cc <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    d3ee:	0a1b      	lsrs	r3, r3, #8
    d3f0:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    d3f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d3f4:	3301      	adds	r3, #1
    d3f6:	62a3      	str	r3, [r4, #40]	; 0x28
    d3f8:	e7c4      	b.n	d384 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    d3fa:	077b      	lsls	r3, r7, #29
    d3fc:	d400      	bmi.n	d400 <_spi_interrupt_handler+0x180>
    d3fe:	e765      	b.n	d2cc <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    d400:	0020      	movs	r0, r4
    d402:	6963      	ldr	r3, [r4, #20]
    d404:	4798      	blx	r3
    d406:	e761      	b.n	d2cc <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    d408:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    d40a:	2b01      	cmp	r3, #1
    d40c:	d000      	beq.n	d410 <_spi_interrupt_handler+0x190>
    d40e:	e763      	b.n	d2d8 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    d410:	79e3      	ldrb	r3, [r4, #7]
    d412:	2b00      	cmp	r3, #0
    d414:	d000      	beq.n	d418 <_spi_interrupt_handler+0x198>
    d416:	e75f      	b.n	d2d8 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    d418:	3302      	adds	r3, #2
    d41a:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    d41c:	3301      	adds	r3, #1
    d41e:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    d420:	2200      	movs	r2, #0
    d422:	3335      	adds	r3, #53	; 0x35
    d424:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    d426:	07fb      	lsls	r3, r7, #31
    d428:	d400      	bmi.n	d42c <_spi_interrupt_handler+0x1ac>
    d42a:	e755      	b.n	d2d8 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    d42c:	0020      	movs	r0, r4
    d42e:	68e3      	ldr	r3, [r4, #12]
    d430:	4798      	blx	r3
    d432:	e751      	b.n	d2d8 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    d434:	2380      	movs	r3, #128	; 0x80
    d436:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    d438:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    d43a:	067b      	lsls	r3, r7, #25
    d43c:	d400      	bmi.n	d440 <_spi_interrupt_handler+0x1c0>
    d43e:	e74f      	b.n	d2e0 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    d440:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d442:	0020      	movs	r0, r4
    d444:	4798      	blx	r3
}
    d446:	e74b      	b.n	d2e0 <_spi_interrupt_handler+0x60>
    d448:	20005bcc 	.word	0x20005bcc
    d44c:	20005be4 	.word	0x20005be4

0000d450 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    d450:	b5f0      	push	{r4, r5, r6, r7, lr}
    d452:	46de      	mov	lr, fp
    d454:	4657      	mov	r7, sl
    d456:	464e      	mov	r6, r9
    d458:	4645      	mov	r5, r8
    d45a:	b5e0      	push	{r5, r6, r7, lr}
    d45c:	b091      	sub	sp, #68	; 0x44
    d45e:	0005      	movs	r5, r0
    d460:	000c      	movs	r4, r1
    d462:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    d464:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d466:	0008      	movs	r0, r1
    d468:	4bbc      	ldr	r3, [pc, #752]	; (d75c <usart_init+0x30c>)
    d46a:	4798      	blx	r3
    d46c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    d46e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    d470:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    d472:	07db      	lsls	r3, r3, #31
    d474:	d506      	bpl.n	d484 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    d476:	b011      	add	sp, #68	; 0x44
    d478:	bc3c      	pop	{r2, r3, r4, r5}
    d47a:	4690      	mov	r8, r2
    d47c:	4699      	mov	r9, r3
    d47e:	46a2      	mov	sl, r4
    d480:	46ab      	mov	fp, r5
    d482:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    d484:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    d486:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    d488:	079b      	lsls	r3, r3, #30
    d48a:	d4f4      	bmi.n	d476 <usart_init+0x26>
    d48c:	49b4      	ldr	r1, [pc, #720]	; (d760 <usart_init+0x310>)
    d48e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    d490:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    d492:	2301      	movs	r3, #1
    d494:	40bb      	lsls	r3, r7
    d496:	4303      	orrs	r3, r0
    d498:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    d49a:	a90f      	add	r1, sp, #60	; 0x3c
    d49c:	272d      	movs	r7, #45	; 0x2d
    d49e:	5df3      	ldrb	r3, [r6, r7]
    d4a0:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d4a2:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    d4a4:	b2d3      	uxtb	r3, r2
    d4a6:	9302      	str	r3, [sp, #8]
    d4a8:	0018      	movs	r0, r3
    d4aa:	4bae      	ldr	r3, [pc, #696]	; (d764 <usart_init+0x314>)
    d4ac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    d4ae:	9802      	ldr	r0, [sp, #8]
    d4b0:	4bad      	ldr	r3, [pc, #692]	; (d768 <usart_init+0x318>)
    d4b2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    d4b4:	5df0      	ldrb	r0, [r6, r7]
    d4b6:	2100      	movs	r1, #0
    d4b8:	4bac      	ldr	r3, [pc, #688]	; (d76c <usart_init+0x31c>)
    d4ba:	4798      	blx	r3
	module->character_size = config->character_size;
    d4bc:	7af3      	ldrb	r3, [r6, #11]
    d4be:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    d4c0:	2324      	movs	r3, #36	; 0x24
    d4c2:	5cf3      	ldrb	r3, [r6, r3]
    d4c4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    d4c6:	2325      	movs	r3, #37	; 0x25
    d4c8:	5cf3      	ldrb	r3, [r6, r3]
    d4ca:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    d4cc:	7ef3      	ldrb	r3, [r6, #27]
    d4ce:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    d4d0:	7f33      	ldrb	r3, [r6, #28]
    d4d2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    d4d4:	682b      	ldr	r3, [r5, #0]
    d4d6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    d4d8:	0018      	movs	r0, r3
    d4da:	4ba0      	ldr	r3, [pc, #640]	; (d75c <usart_init+0x30c>)
    d4dc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    d4de:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    d4e0:	2200      	movs	r2, #0
    d4e2:	230e      	movs	r3, #14
    d4e4:	a906      	add	r1, sp, #24
    d4e6:	468c      	mov	ip, r1
    d4e8:	4463      	add	r3, ip
    d4ea:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    d4ec:	8a32      	ldrh	r2, [r6, #16]
    d4ee:	9202      	str	r2, [sp, #8]
    d4f0:	2380      	movs	r3, #128	; 0x80
    d4f2:	01db      	lsls	r3, r3, #7
    d4f4:	429a      	cmp	r2, r3
    d4f6:	d100      	bne.n	d4fa <usart_init+0xaa>
    d4f8:	e09e      	b.n	d638 <usart_init+0x1e8>
    d4fa:	d90f      	bls.n	d51c <usart_init+0xcc>
    d4fc:	23c0      	movs	r3, #192	; 0xc0
    d4fe:	01db      	lsls	r3, r3, #7
    d500:	9a02      	ldr	r2, [sp, #8]
    d502:	429a      	cmp	r2, r3
    d504:	d100      	bne.n	d508 <usart_init+0xb8>
    d506:	e092      	b.n	d62e <usart_init+0x1de>
    d508:	2380      	movs	r3, #128	; 0x80
    d50a:	021b      	lsls	r3, r3, #8
    d50c:	429a      	cmp	r2, r3
    d50e:	d000      	beq.n	d512 <usart_init+0xc2>
    d510:	e11f      	b.n	d752 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    d512:	2303      	movs	r3, #3
    d514:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    d516:	2300      	movs	r3, #0
    d518:	9307      	str	r3, [sp, #28]
    d51a:	e008      	b.n	d52e <usart_init+0xde>
	switch (config->sample_rate) {
    d51c:	2380      	movs	r3, #128	; 0x80
    d51e:	019b      	lsls	r3, r3, #6
    d520:	429a      	cmp	r2, r3
    d522:	d000      	beq.n	d526 <usart_init+0xd6>
    d524:	e115      	b.n	d752 <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    d526:	2310      	movs	r3, #16
    d528:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    d52a:	3b0f      	subs	r3, #15
    d52c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    d52e:	6833      	ldr	r3, [r6, #0]
    d530:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    d532:	68f3      	ldr	r3, [r6, #12]
    d534:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    d536:	6973      	ldr	r3, [r6, #20]
    d538:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    d53a:	7e33      	ldrb	r3, [r6, #24]
    d53c:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    d53e:	2326      	movs	r3, #38	; 0x26
    d540:	5cf3      	ldrb	r3, [r6, r3]
    d542:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    d544:	6873      	ldr	r3, [r6, #4]
    d546:	4699      	mov	r9, r3
	switch (transfer_mode)
    d548:	2b00      	cmp	r3, #0
    d54a:	d100      	bne.n	d54e <usart_init+0xfe>
    d54c:	e0a0      	b.n	d690 <usart_init+0x240>
    d54e:	2380      	movs	r3, #128	; 0x80
    d550:	055b      	lsls	r3, r3, #21
    d552:	4599      	cmp	r9, r3
    d554:	d100      	bne.n	d558 <usart_init+0x108>
    d556:	e084      	b.n	d662 <usart_init+0x212>
	if(config->encoding_format_enable) {
    d558:	7e73      	ldrb	r3, [r6, #25]
    d55a:	2b00      	cmp	r3, #0
    d55c:	d002      	beq.n	d564 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    d55e:	7eb3      	ldrb	r3, [r6, #26]
    d560:	4642      	mov	r2, r8
    d562:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    d564:	682a      	ldr	r2, [r5, #0]
    d566:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    d568:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    d56a:	2b00      	cmp	r3, #0
    d56c:	d1fc      	bne.n	d568 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    d56e:	330e      	adds	r3, #14
    d570:	aa06      	add	r2, sp, #24
    d572:	4694      	mov	ip, r2
    d574:	4463      	add	r3, ip
    d576:	881b      	ldrh	r3, [r3, #0]
    d578:	4642      	mov	r2, r8
    d57a:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    d57c:	9b05      	ldr	r3, [sp, #20]
    d57e:	9a03      	ldr	r2, [sp, #12]
    d580:	4313      	orrs	r3, r2
    d582:	9a04      	ldr	r2, [sp, #16]
    d584:	4313      	orrs	r3, r2
    d586:	464a      	mov	r2, r9
    d588:	4313      	orrs	r3, r2
    d58a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    d58c:	465b      	mov	r3, fp
    d58e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    d590:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    d592:	4653      	mov	r3, sl
    d594:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    d596:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    d598:	2327      	movs	r3, #39	; 0x27
    d59a:	5cf3      	ldrb	r3, [r6, r3]
    d59c:	2b00      	cmp	r3, #0
    d59e:	d101      	bne.n	d5a4 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    d5a0:	3304      	adds	r3, #4
    d5a2:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    d5a4:	7e73      	ldrb	r3, [r6, #25]
    d5a6:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    d5a8:	7f32      	ldrb	r2, [r6, #28]
    d5aa:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    d5ac:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    d5ae:	7f72      	ldrb	r2, [r6, #29]
    d5b0:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    d5b2:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    d5b4:	2224      	movs	r2, #36	; 0x24
    d5b6:	5cb2      	ldrb	r2, [r6, r2]
    d5b8:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    d5ba:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    d5bc:	2225      	movs	r2, #37	; 0x25
    d5be:	5cb2      	ldrb	r2, [r6, r2]
    d5c0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    d5c2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    d5c4:	7ab1      	ldrb	r1, [r6, #10]
    d5c6:	7af2      	ldrb	r2, [r6, #11]
    d5c8:	4311      	orrs	r1, r2
    d5ca:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    d5cc:	8933      	ldrh	r3, [r6, #8]
    d5ce:	2bff      	cmp	r3, #255	; 0xff
    d5d0:	d100      	bne.n	d5d4 <usart_init+0x184>
    d5d2:	e081      	b.n	d6d8 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    d5d4:	2280      	movs	r2, #128	; 0x80
    d5d6:	0452      	lsls	r2, r2, #17
    d5d8:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    d5da:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    d5dc:	232c      	movs	r3, #44	; 0x2c
    d5de:	5cf3      	ldrb	r3, [r6, r3]
    d5e0:	2b00      	cmp	r3, #0
    d5e2:	d103      	bne.n	d5ec <usart_init+0x19c>
    d5e4:	4b62      	ldr	r3, [pc, #392]	; (d770 <usart_init+0x320>)
    d5e6:	789b      	ldrb	r3, [r3, #2]
    d5e8:	079b      	lsls	r3, r3, #30
    d5ea:	d501      	bpl.n	d5f0 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    d5ec:	2380      	movs	r3, #128	; 0x80
    d5ee:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    d5f0:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    d5f2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    d5f4:	2b00      	cmp	r3, #0
    d5f6:	d1fc      	bne.n	d5f2 <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    d5f8:	4643      	mov	r3, r8
    d5fa:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    d5fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    d5fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    d600:	2b00      	cmp	r3, #0
    d602:	d1fc      	bne.n	d5fe <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    d604:	4643      	mov	r3, r8
    d606:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    d608:	ab0e      	add	r3, sp, #56	; 0x38
    d60a:	2280      	movs	r2, #128	; 0x80
    d60c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    d60e:	2200      	movs	r2, #0
    d610:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    d612:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    d614:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    d616:	6b33      	ldr	r3, [r6, #48]	; 0x30
    d618:	930a      	str	r3, [sp, #40]	; 0x28
    d61a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    d61c:	930b      	str	r3, [sp, #44]	; 0x2c
    d61e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    d620:	930c      	str	r3, [sp, #48]	; 0x30
    d622:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    d624:	9302      	str	r3, [sp, #8]
    d626:	930d      	str	r3, [sp, #52]	; 0x34
    d628:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    d62a:	ae0a      	add	r6, sp, #40	; 0x28
    d62c:	e063      	b.n	d6f6 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    d62e:	2308      	movs	r3, #8
    d630:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    d632:	3b07      	subs	r3, #7
    d634:	9307      	str	r3, [sp, #28]
    d636:	e77a      	b.n	d52e <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    d638:	6833      	ldr	r3, [r6, #0]
    d63a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    d63c:	68f3      	ldr	r3, [r6, #12]
    d63e:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    d640:	6973      	ldr	r3, [r6, #20]
    d642:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    d644:	7e33      	ldrb	r3, [r6, #24]
    d646:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    d648:	2326      	movs	r3, #38	; 0x26
    d64a:	5cf3      	ldrb	r3, [r6, r3]
    d64c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    d64e:	6873      	ldr	r3, [r6, #4]
    d650:	4699      	mov	r9, r3
	switch (transfer_mode)
    d652:	2b00      	cmp	r3, #0
    d654:	d018      	beq.n	d688 <usart_init+0x238>
    d656:	2380      	movs	r3, #128	; 0x80
    d658:	055b      	lsls	r3, r3, #21
    d65a:	4599      	cmp	r9, r3
    d65c:	d001      	beq.n	d662 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    d65e:	2000      	movs	r0, #0
    d660:	e025      	b.n	d6ae <usart_init+0x25e>
			if (!config->use_external_clock) {
    d662:	2327      	movs	r3, #39	; 0x27
    d664:	5cf3      	ldrb	r3, [r6, r3]
    d666:	2b00      	cmp	r3, #0
    d668:	d000      	beq.n	d66c <usart_init+0x21c>
    d66a:	e775      	b.n	d558 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    d66c:	6a33      	ldr	r3, [r6, #32]
    d66e:	001f      	movs	r7, r3
    d670:	b2c0      	uxtb	r0, r0
    d672:	4b40      	ldr	r3, [pc, #256]	; (d774 <usart_init+0x324>)
    d674:	4798      	blx	r3
    d676:	0001      	movs	r1, r0
    d678:	220e      	movs	r2, #14
    d67a:	ab06      	add	r3, sp, #24
    d67c:	469c      	mov	ip, r3
    d67e:	4462      	add	r2, ip
    d680:	0038      	movs	r0, r7
    d682:	4b3d      	ldr	r3, [pc, #244]	; (d778 <usart_init+0x328>)
    d684:	4798      	blx	r3
    d686:	e012      	b.n	d6ae <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    d688:	2308      	movs	r3, #8
    d68a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    d68c:	2300      	movs	r3, #0
    d68e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    d690:	2327      	movs	r3, #39	; 0x27
    d692:	5cf3      	ldrb	r3, [r6, r3]
    d694:	2b00      	cmp	r3, #0
    d696:	d00e      	beq.n	d6b6 <usart_init+0x266>
				status_code =
    d698:	9b06      	ldr	r3, [sp, #24]
    d69a:	9300      	str	r3, [sp, #0]
    d69c:	9b07      	ldr	r3, [sp, #28]
    d69e:	220e      	movs	r2, #14
    d6a0:	a906      	add	r1, sp, #24
    d6a2:	468c      	mov	ip, r1
    d6a4:	4462      	add	r2, ip
    d6a6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    d6a8:	6a30      	ldr	r0, [r6, #32]
    d6aa:	4f34      	ldr	r7, [pc, #208]	; (d77c <usart_init+0x32c>)
    d6ac:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    d6ae:	2800      	cmp	r0, #0
    d6b0:	d000      	beq.n	d6b4 <usart_init+0x264>
    d6b2:	e6e0      	b.n	d476 <usart_init+0x26>
    d6b4:	e750      	b.n	d558 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    d6b6:	6a33      	ldr	r3, [r6, #32]
    d6b8:	001f      	movs	r7, r3
    d6ba:	b2c0      	uxtb	r0, r0
    d6bc:	4b2d      	ldr	r3, [pc, #180]	; (d774 <usart_init+0x324>)
    d6be:	4798      	blx	r3
    d6c0:	0001      	movs	r1, r0
				status_code =
    d6c2:	9b06      	ldr	r3, [sp, #24]
    d6c4:	9300      	str	r3, [sp, #0]
    d6c6:	9b07      	ldr	r3, [sp, #28]
    d6c8:	220e      	movs	r2, #14
    d6ca:	a806      	add	r0, sp, #24
    d6cc:	4684      	mov	ip, r0
    d6ce:	4462      	add	r2, ip
    d6d0:	0038      	movs	r0, r7
    d6d2:	4f2a      	ldr	r7, [pc, #168]	; (d77c <usart_init+0x32c>)
    d6d4:	47b8      	blx	r7
    d6d6:	e7ea      	b.n	d6ae <usart_init+0x25e>
		if(config->lin_slave_enable) {
    d6d8:	7ef3      	ldrb	r3, [r6, #27]
    d6da:	2b00      	cmp	r3, #0
    d6dc:	d100      	bne.n	d6e0 <usart_init+0x290>
    d6de:	e77d      	b.n	d5dc <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    d6e0:	2380      	movs	r3, #128	; 0x80
    d6e2:	04db      	lsls	r3, r3, #19
    d6e4:	431f      	orrs	r7, r3
    d6e6:	e779      	b.n	d5dc <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    d6e8:	0020      	movs	r0, r4
    d6ea:	4b25      	ldr	r3, [pc, #148]	; (d780 <usart_init+0x330>)
    d6ec:	4798      	blx	r3
    d6ee:	e007      	b.n	d700 <usart_init+0x2b0>
    d6f0:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    d6f2:	2f04      	cmp	r7, #4
    d6f4:	d00d      	beq.n	d712 <usart_init+0x2c2>
    d6f6:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    d6f8:	00bb      	lsls	r3, r7, #2
    d6fa:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    d6fc:	2800      	cmp	r0, #0
    d6fe:	d0f3      	beq.n	d6e8 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    d700:	1c43      	adds	r3, r0, #1
    d702:	d0f5      	beq.n	d6f0 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    d704:	a90e      	add	r1, sp, #56	; 0x38
    d706:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    d708:	0c00      	lsrs	r0, r0, #16
    d70a:	b2c0      	uxtb	r0, r0
    d70c:	4b1d      	ldr	r3, [pc, #116]	; (d784 <usart_init+0x334>)
    d70e:	4798      	blx	r3
    d710:	e7ee      	b.n	d6f0 <usart_init+0x2a0>
		module->callback[i]            = NULL;
    d712:	2300      	movs	r3, #0
    d714:	60eb      	str	r3, [r5, #12]
    d716:	612b      	str	r3, [r5, #16]
    d718:	616b      	str	r3, [r5, #20]
    d71a:	61ab      	str	r3, [r5, #24]
    d71c:	61eb      	str	r3, [r5, #28]
    d71e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    d720:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    d722:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    d724:	2200      	movs	r2, #0
    d726:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    d728:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    d72a:	3330      	adds	r3, #48	; 0x30
    d72c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    d72e:	3301      	adds	r3, #1
    d730:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    d732:	3301      	adds	r3, #1
    d734:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    d736:	3301      	adds	r3, #1
    d738:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    d73a:	6828      	ldr	r0, [r5, #0]
    d73c:	4b07      	ldr	r3, [pc, #28]	; (d75c <usart_init+0x30c>)
    d73e:	4798      	blx	r3
    d740:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    d742:	4911      	ldr	r1, [pc, #68]	; (d788 <usart_init+0x338>)
    d744:	4b11      	ldr	r3, [pc, #68]	; (d78c <usart_init+0x33c>)
    d746:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    d748:	00a4      	lsls	r4, r4, #2
    d74a:	4b11      	ldr	r3, [pc, #68]	; (d790 <usart_init+0x340>)
    d74c:	50e5      	str	r5, [r4, r3]
	return status_code;
    d74e:	2000      	movs	r0, #0
    d750:	e691      	b.n	d476 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    d752:	2310      	movs	r3, #16
    d754:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    d756:	2300      	movs	r3, #0
    d758:	9307      	str	r3, [sp, #28]
    d75a:	e6e8      	b.n	d52e <usart_init+0xde>
    d75c:	0000cc55 	.word	0x0000cc55
    d760:	40000400 	.word	0x40000400
    d764:	0000dff5 	.word	0x0000dff5
    d768:	0000df69 	.word	0x0000df69
    d76c:	0000ca91 	.word	0x0000ca91
    d770:	41002000 	.word	0x41002000
    d774:	0000e011 	.word	0x0000e011
    d778:	0000c9d3 	.word	0x0000c9d3
    d77c:	0000c9fd 	.word	0x0000c9fd
    d780:	0000cadd 	.word	0x0000cadd
    d784:	0000e11d 	.word	0x0000e11d
    d788:	0000d895 	.word	0x0000d895
    d78c:	0000cc91 	.word	0x0000cc91
    d790:	20005bcc 	.word	0x20005bcc

0000d794 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d796:	0006      	movs	r6, r0
    d798:	000c      	movs	r4, r1
    d79a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d79c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    d79e:	4b0a      	ldr	r3, [pc, #40]	; (d7c8 <_usart_write_buffer+0x34>)
    d7a0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    d7a2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    d7a4:	b29b      	uxth	r3, r3
    d7a6:	2b00      	cmp	r3, #0
    d7a8:	d003      	beq.n	d7b2 <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    d7aa:	4b08      	ldr	r3, [pc, #32]	; (d7cc <_usart_write_buffer+0x38>)
    d7ac:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    d7ae:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    d7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    d7b2:	85f5      	strh	r5, [r6, #46]	; 0x2e
    d7b4:	4b05      	ldr	r3, [pc, #20]	; (d7cc <_usart_write_buffer+0x38>)
    d7b6:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    d7b8:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    d7ba:	2205      	movs	r2, #5
    d7bc:	2333      	movs	r3, #51	; 0x33
    d7be:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    d7c0:	3b32      	subs	r3, #50	; 0x32
    d7c2:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    d7c4:	2000      	movs	r0, #0
    d7c6:	e7f3      	b.n	d7b0 <_usart_write_buffer+0x1c>
    d7c8:	0000c441 	.word	0x0000c441
    d7cc:	0000c481 	.word	0x0000c481

0000d7d0 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d7d2:	0004      	movs	r4, r0
    d7d4:	000d      	movs	r5, r1
    d7d6:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d7d8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    d7da:	4b0f      	ldr	r3, [pc, #60]	; (d818 <_usart_read_buffer+0x48>)
    d7dc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    d7de:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    d7e0:	b29b      	uxth	r3, r3
    d7e2:	2b00      	cmp	r3, #0
    d7e4:	d003      	beq.n	d7ee <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    d7e6:	4b0d      	ldr	r3, [pc, #52]	; (d81c <_usart_read_buffer+0x4c>)
    d7e8:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    d7ea:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    d7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    d7ee:	85a6      	strh	r6, [r4, #44]	; 0x2c
    d7f0:	4b0a      	ldr	r3, [pc, #40]	; (d81c <_usart_read_buffer+0x4c>)
    d7f2:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    d7f4:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    d7f6:	2205      	movs	r2, #5
    d7f8:	2332      	movs	r3, #50	; 0x32
    d7fa:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    d7fc:	3b2e      	subs	r3, #46	; 0x2e
    d7fe:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    d800:	7a23      	ldrb	r3, [r4, #8]
    d802:	2b00      	cmp	r3, #0
    d804:	d001      	beq.n	d80a <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    d806:	2320      	movs	r3, #32
    d808:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    d80a:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    d80c:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    d80e:	2b00      	cmp	r3, #0
    d810:	d0ec      	beq.n	d7ec <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    d812:	2308      	movs	r3, #8
    d814:	75bb      	strb	r3, [r7, #22]
    d816:	e7e9      	b.n	d7ec <_usart_read_buffer+0x1c>
    d818:	0000c441 	.word	0x0000c441
    d81c:	0000c481 	.word	0x0000c481

0000d820 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    d820:	1c93      	adds	r3, r2, #2
    d822:	009b      	lsls	r3, r3, #2
    d824:	18c3      	adds	r3, r0, r3
    d826:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    d828:	2130      	movs	r1, #48	; 0x30
    d82a:	2301      	movs	r3, #1
    d82c:	4093      	lsls	r3, r2
    d82e:	001a      	movs	r2, r3
    d830:	5c43      	ldrb	r3, [r0, r1]
    d832:	4313      	orrs	r3, r2
    d834:	5443      	strb	r3, [r0, r1]
}
    d836:	4770      	bx	lr

0000d838 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    d838:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    d83a:	2317      	movs	r3, #23
	if (length == 0) {
    d83c:	2a00      	cmp	r2, #0
    d83e:	d101      	bne.n	d844 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    d840:	0018      	movs	r0, r3
    d842:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    d844:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    d846:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    d848:	2c00      	cmp	r4, #0
    d84a:	d0f9      	beq.n	d840 <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    d84c:	4b01      	ldr	r3, [pc, #4]	; (d854 <usart_write_buffer_job+0x1c>)
    d84e:	4798      	blx	r3
    d850:	0003      	movs	r3, r0
    d852:	e7f5      	b.n	d840 <usart_write_buffer_job+0x8>
    d854:	0000d795 	.word	0x0000d795

0000d858 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    d858:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    d85a:	2317      	movs	r3, #23
	if (length == 0) {
    d85c:	2a00      	cmp	r2, #0
    d85e:	d101      	bne.n	d864 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    d860:	0018      	movs	r0, r3
    d862:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    d864:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    d866:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    d868:	2c00      	cmp	r4, #0
    d86a:	d0f9      	beq.n	d860 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    d86c:	4b01      	ldr	r3, [pc, #4]	; (d874 <usart_read_buffer_job+0x1c>)
    d86e:	4798      	blx	r3
    d870:	0003      	movs	r3, r0
    d872:	e7f5      	b.n	d860 <usart_read_buffer_job+0x8>
    d874:	0000d7d1 	.word	0x0000d7d1

0000d878 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    d878:	2900      	cmp	r1, #0
    d87a:	d003      	beq.n	d884 <usart_get_job_status+0xc>
    d87c:	2901      	cmp	r1, #1
    d87e:	d005      	beq.n	d88c <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    d880:	2017      	movs	r0, #23
    d882:	e002      	b.n	d88a <usart_get_job_status+0x12>
			status_code = module->rx_status;
    d884:	2332      	movs	r3, #50	; 0x32
    d886:	5cc0      	ldrb	r0, [r0, r3]
    d888:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    d88a:	4770      	bx	lr
			status_code = module->tx_status;
    d88c:	2333      	movs	r3, #51	; 0x33
    d88e:	5cc0      	ldrb	r0, [r0, r3]
    d890:	b2c0      	uxtb	r0, r0
			break;
    d892:	e7fa      	b.n	d88a <usart_get_job_status+0x12>

0000d894 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    d896:	0080      	lsls	r0, r0, #2
    d898:	4b62      	ldr	r3, [pc, #392]	; (da24 <_usart_interrupt_handler+0x190>)
    d89a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    d89c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    d89e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	d1fc      	bne.n	d89e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    d8a4:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    d8a6:	7da6      	ldrb	r6, [r4, #22]
    d8a8:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    d8aa:	2330      	movs	r3, #48	; 0x30
    d8ac:	5ceb      	ldrb	r3, [r5, r3]
    d8ae:	2231      	movs	r2, #49	; 0x31
    d8b0:	5caf      	ldrb	r7, [r5, r2]
    d8b2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    d8b4:	07f3      	lsls	r3, r6, #31
    d8b6:	d522      	bpl.n	d8fe <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    d8b8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    d8ba:	b29b      	uxth	r3, r3
    d8bc:	2b00      	cmp	r3, #0
    d8be:	d01c      	beq.n	d8fa <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    d8c0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    d8c2:	7813      	ldrb	r3, [r2, #0]
    d8c4:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    d8c6:	1c51      	adds	r1, r2, #1
    d8c8:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    d8ca:	7969      	ldrb	r1, [r5, #5]
    d8cc:	2901      	cmp	r1, #1
    d8ce:	d00e      	beq.n	d8ee <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    d8d0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    d8d2:	05db      	lsls	r3, r3, #23
    d8d4:	0ddb      	lsrs	r3, r3, #23
    d8d6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    d8d8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    d8da:	3b01      	subs	r3, #1
    d8dc:	b29b      	uxth	r3, r3
    d8de:	85eb      	strh	r3, [r5, #46]	; 0x2e
    d8e0:	2b00      	cmp	r3, #0
    d8e2:	d10c      	bne.n	d8fe <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    d8e4:	3301      	adds	r3, #1
    d8e6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    d8e8:	3301      	adds	r3, #1
    d8ea:	75a3      	strb	r3, [r4, #22]
    d8ec:	e007      	b.n	d8fe <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    d8ee:	7851      	ldrb	r1, [r2, #1]
    d8f0:	0209      	lsls	r1, r1, #8
    d8f2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    d8f4:	3202      	adds	r2, #2
    d8f6:	62aa      	str	r2, [r5, #40]	; 0x28
    d8f8:	e7eb      	b.n	d8d2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    d8fa:	2301      	movs	r3, #1
    d8fc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    d8fe:	07b3      	lsls	r3, r6, #30
    d900:	d506      	bpl.n	d910 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    d902:	2302      	movs	r3, #2
    d904:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    d906:	2200      	movs	r2, #0
    d908:	3331      	adds	r3, #49	; 0x31
    d90a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    d90c:	07fb      	lsls	r3, r7, #31
    d90e:	d41a      	bmi.n	d946 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    d910:	0773      	lsls	r3, r6, #29
    d912:	d565      	bpl.n	d9e0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    d914:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    d916:	b29b      	uxth	r3, r3
    d918:	2b00      	cmp	r3, #0
    d91a:	d05f      	beq.n	d9dc <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    d91c:	8b63      	ldrh	r3, [r4, #26]
    d91e:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    d920:	071a      	lsls	r2, r3, #28
    d922:	d414      	bmi.n	d94e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    d924:	223f      	movs	r2, #63	; 0x3f
    d926:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    d928:	2b00      	cmp	r3, #0
    d92a:	d034      	beq.n	d996 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    d92c:	079a      	lsls	r2, r3, #30
    d92e:	d511      	bpl.n	d954 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    d930:	221a      	movs	r2, #26
    d932:	2332      	movs	r3, #50	; 0x32
    d934:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    d936:	3b30      	subs	r3, #48	; 0x30
    d938:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    d93a:	077b      	lsls	r3, r7, #29
    d93c:	d550      	bpl.n	d9e0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    d93e:	0028      	movs	r0, r5
    d940:	696b      	ldr	r3, [r5, #20]
    d942:	4798      	blx	r3
    d944:	e04c      	b.n	d9e0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    d946:	0028      	movs	r0, r5
    d948:	68eb      	ldr	r3, [r5, #12]
    d94a:	4798      	blx	r3
    d94c:	e7e0      	b.n	d910 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    d94e:	2237      	movs	r2, #55	; 0x37
    d950:	4013      	ands	r3, r2
    d952:	e7e9      	b.n	d928 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    d954:	075a      	lsls	r2, r3, #29
    d956:	d505      	bpl.n	d964 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    d958:	221e      	movs	r2, #30
    d95a:	2332      	movs	r3, #50	; 0x32
    d95c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    d95e:	3b2e      	subs	r3, #46	; 0x2e
    d960:	8363      	strh	r3, [r4, #26]
    d962:	e7ea      	b.n	d93a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    d964:	07da      	lsls	r2, r3, #31
    d966:	d505      	bpl.n	d974 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    d968:	2213      	movs	r2, #19
    d96a:	2332      	movs	r3, #50	; 0x32
    d96c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    d96e:	3b31      	subs	r3, #49	; 0x31
    d970:	8363      	strh	r3, [r4, #26]
    d972:	e7e2      	b.n	d93a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    d974:	06da      	lsls	r2, r3, #27
    d976:	d505      	bpl.n	d984 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    d978:	2242      	movs	r2, #66	; 0x42
    d97a:	2332      	movs	r3, #50	; 0x32
    d97c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    d97e:	3b22      	subs	r3, #34	; 0x22
    d980:	8363      	strh	r3, [r4, #26]
    d982:	e7da      	b.n	d93a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    d984:	2220      	movs	r2, #32
    d986:	421a      	tst	r2, r3
    d988:	d0d7      	beq.n	d93a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    d98a:	3221      	adds	r2, #33	; 0x21
    d98c:	2332      	movs	r3, #50	; 0x32
    d98e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    d990:	3b12      	subs	r3, #18
    d992:	8363      	strh	r3, [r4, #26]
    d994:	e7d1      	b.n	d93a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    d996:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    d998:	05db      	lsls	r3, r3, #23
    d99a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    d99c:	b2da      	uxtb	r2, r3
    d99e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    d9a0:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    d9a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    d9a4:	1c51      	adds	r1, r2, #1
    d9a6:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    d9a8:	7969      	ldrb	r1, [r5, #5]
    d9aa:	2901      	cmp	r1, #1
    d9ac:	d010      	beq.n	d9d0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    d9ae:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    d9b0:	3b01      	subs	r3, #1
    d9b2:	b29b      	uxth	r3, r3
    d9b4:	85ab      	strh	r3, [r5, #44]	; 0x2c
    d9b6:	2b00      	cmp	r3, #0
    d9b8:	d112      	bne.n	d9e0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    d9ba:	3304      	adds	r3, #4
    d9bc:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    d9be:	2200      	movs	r2, #0
    d9c0:	332e      	adds	r3, #46	; 0x2e
    d9c2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    d9c4:	07bb      	lsls	r3, r7, #30
    d9c6:	d50b      	bpl.n	d9e0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    d9c8:	0028      	movs	r0, r5
    d9ca:	692b      	ldr	r3, [r5, #16]
    d9cc:	4798      	blx	r3
    d9ce:	e007      	b.n	d9e0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    d9d0:	0a1b      	lsrs	r3, r3, #8
    d9d2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    d9d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d9d6:	3301      	adds	r3, #1
    d9d8:	626b      	str	r3, [r5, #36]	; 0x24
    d9da:	e7e8      	b.n	d9ae <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    d9dc:	2304      	movs	r3, #4
    d9de:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    d9e0:	06f3      	lsls	r3, r6, #27
    d9e2:	d504      	bpl.n	d9ee <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    d9e4:	2310      	movs	r3, #16
    d9e6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    d9e8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    d9ea:	06fb      	lsls	r3, r7, #27
    d9ec:	d40e      	bmi.n	da0c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    d9ee:	06b3      	lsls	r3, r6, #26
    d9f0:	d504      	bpl.n	d9fc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    d9f2:	2320      	movs	r3, #32
    d9f4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    d9f6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    d9f8:	073b      	lsls	r3, r7, #28
    d9fa:	d40b      	bmi.n	da14 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    d9fc:	0733      	lsls	r3, r6, #28
    d9fe:	d504      	bpl.n	da0a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    da00:	2308      	movs	r3, #8
    da02:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    da04:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    da06:	06bb      	lsls	r3, r7, #26
    da08:	d408      	bmi.n	da1c <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    da0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    da0c:	0028      	movs	r0, r5
    da0e:	69eb      	ldr	r3, [r5, #28]
    da10:	4798      	blx	r3
    da12:	e7ec      	b.n	d9ee <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    da14:	0028      	movs	r0, r5
    da16:	69ab      	ldr	r3, [r5, #24]
    da18:	4798      	blx	r3
    da1a:	e7ef      	b.n	d9fc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    da1c:	6a2b      	ldr	r3, [r5, #32]
    da1e:	0028      	movs	r0, r5
    da20:	4798      	blx	r3
}
    da22:	e7f2      	b.n	da0a <_usart_interrupt_handler+0x176>
    da24:	20005bcc 	.word	0x20005bcc

0000da28 <system_clock_source_get_hz>:
    da28:	b510      	push	{r4, lr}
    da2a:	2808      	cmp	r0, #8
    da2c:	d803      	bhi.n	da36 <system_clock_source_get_hz+0xe>
    da2e:	0080      	lsls	r0, r0, #2
    da30:	4b1c      	ldr	r3, [pc, #112]	; (daa4 <system_clock_source_get_hz+0x7c>)
    da32:	581b      	ldr	r3, [r3, r0]
    da34:	469f      	mov	pc, r3
    da36:	2000      	movs	r0, #0
    da38:	e032      	b.n	daa0 <system_clock_source_get_hz+0x78>
    da3a:	4b1b      	ldr	r3, [pc, #108]	; (daa8 <system_clock_source_get_hz+0x80>)
    da3c:	6918      	ldr	r0, [r3, #16]
    da3e:	e02f      	b.n	daa0 <system_clock_source_get_hz+0x78>
    da40:	4b1a      	ldr	r3, [pc, #104]	; (daac <system_clock_source_get_hz+0x84>)
    da42:	6a1b      	ldr	r3, [r3, #32]
    da44:	059b      	lsls	r3, r3, #22
    da46:	0f9b      	lsrs	r3, r3, #30
    da48:	4819      	ldr	r0, [pc, #100]	; (dab0 <system_clock_source_get_hz+0x88>)
    da4a:	40d8      	lsrs	r0, r3
    da4c:	e028      	b.n	daa0 <system_clock_source_get_hz+0x78>
    da4e:	4b16      	ldr	r3, [pc, #88]	; (daa8 <system_clock_source_get_hz+0x80>)
    da50:	6958      	ldr	r0, [r3, #20]
    da52:	e025      	b.n	daa0 <system_clock_source_get_hz+0x78>
    da54:	4b14      	ldr	r3, [pc, #80]	; (daa8 <system_clock_source_get_hz+0x80>)
    da56:	681b      	ldr	r3, [r3, #0]
    da58:	2000      	movs	r0, #0
    da5a:	079b      	lsls	r3, r3, #30
    da5c:	d520      	bpl.n	daa0 <system_clock_source_get_hz+0x78>
    da5e:	4913      	ldr	r1, [pc, #76]	; (daac <system_clock_source_get_hz+0x84>)
    da60:	2210      	movs	r2, #16
    da62:	68cb      	ldr	r3, [r1, #12]
    da64:	421a      	tst	r2, r3
    da66:	d0fc      	beq.n	da62 <system_clock_source_get_hz+0x3a>
    da68:	4b0f      	ldr	r3, [pc, #60]	; (daa8 <system_clock_source_get_hz+0x80>)
    da6a:	681a      	ldr	r2, [r3, #0]
    da6c:	2324      	movs	r3, #36	; 0x24
    da6e:	4013      	ands	r3, r2
    da70:	2b04      	cmp	r3, #4
    da72:	d001      	beq.n	da78 <system_clock_source_get_hz+0x50>
    da74:	480f      	ldr	r0, [pc, #60]	; (dab4 <system_clock_source_get_hz+0x8c>)
    da76:	e013      	b.n	daa0 <system_clock_source_get_hz+0x78>
    da78:	2000      	movs	r0, #0
    da7a:	4b0f      	ldr	r3, [pc, #60]	; (dab8 <system_clock_source_get_hz+0x90>)
    da7c:	4798      	blx	r3
    da7e:	4b0a      	ldr	r3, [pc, #40]	; (daa8 <system_clock_source_get_hz+0x80>)
    da80:	689b      	ldr	r3, [r3, #8]
    da82:	041b      	lsls	r3, r3, #16
    da84:	0c1b      	lsrs	r3, r3, #16
    da86:	4358      	muls	r0, r3
    da88:	e00a      	b.n	daa0 <system_clock_source_get_hz+0x78>
    da8a:	2350      	movs	r3, #80	; 0x50
    da8c:	4a07      	ldr	r2, [pc, #28]	; (daac <system_clock_source_get_hz+0x84>)
    da8e:	5cd3      	ldrb	r3, [r2, r3]
    da90:	2000      	movs	r0, #0
    da92:	075b      	lsls	r3, r3, #29
    da94:	d504      	bpl.n	daa0 <system_clock_source_get_hz+0x78>
    da96:	4b04      	ldr	r3, [pc, #16]	; (daa8 <system_clock_source_get_hz+0x80>)
    da98:	68d8      	ldr	r0, [r3, #12]
    da9a:	e001      	b.n	daa0 <system_clock_source_get_hz+0x78>
    da9c:	2080      	movs	r0, #128	; 0x80
    da9e:	0200      	lsls	r0, r0, #8
    daa0:	bd10      	pop	{r4, pc}
    daa2:	46c0      	nop			; (mov r8, r8)
    daa4:	00018a70 	.word	0x00018a70
    daa8:	20003efc 	.word	0x20003efc
    daac:	40000800 	.word	0x40000800
    dab0:	007a1200 	.word	0x007a1200
    dab4:	02dc6c00 	.word	0x02dc6c00
    dab8:	0000e011 	.word	0x0000e011

0000dabc <system_clock_source_osc8m_set_config>:
    dabc:	b570      	push	{r4, r5, r6, lr}
    dabe:	490c      	ldr	r1, [pc, #48]	; (daf0 <system_clock_source_osc8m_set_config+0x34>)
    dac0:	6a0b      	ldr	r3, [r1, #32]
    dac2:	7804      	ldrb	r4, [r0, #0]
    dac4:	7885      	ldrb	r5, [r0, #2]
    dac6:	7840      	ldrb	r0, [r0, #1]
    dac8:	2201      	movs	r2, #1
    daca:	4010      	ands	r0, r2
    dacc:	0180      	lsls	r0, r0, #6
    dace:	2640      	movs	r6, #64	; 0x40
    dad0:	43b3      	bics	r3, r6
    dad2:	4303      	orrs	r3, r0
    dad4:	402a      	ands	r2, r5
    dad6:	01d2      	lsls	r2, r2, #7
    dad8:	2080      	movs	r0, #128	; 0x80
    dada:	4383      	bics	r3, r0
    dadc:	4313      	orrs	r3, r2
    dade:	2203      	movs	r2, #3
    dae0:	4022      	ands	r2, r4
    dae2:	0212      	lsls	r2, r2, #8
    dae4:	4803      	ldr	r0, [pc, #12]	; (daf4 <system_clock_source_osc8m_set_config+0x38>)
    dae6:	4003      	ands	r3, r0
    dae8:	4313      	orrs	r3, r2
    daea:	620b      	str	r3, [r1, #32]
    daec:	bd70      	pop	{r4, r5, r6, pc}
    daee:	46c0      	nop			; (mov r8, r8)
    daf0:	40000800 	.word	0x40000800
    daf4:	fffffcff 	.word	0xfffffcff

0000daf8 <system_clock_source_dpll_set_config>:
    daf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dafa:	0005      	movs	r5, r0
    dafc:	68c4      	ldr	r4, [r0, #12]
    dafe:	7d03      	ldrb	r3, [r0, #20]
    db00:	2b01      	cmp	r3, #1
    db02:	d03b      	beq.n	db7c <system_clock_source_dpll_set_config+0x84>
    db04:	68ab      	ldr	r3, [r5, #8]
    db06:	0118      	lsls	r0, r3, #4
    db08:	0021      	movs	r1, r4
    db0a:	4b20      	ldr	r3, [pc, #128]	; (db8c <system_clock_source_dpll_set_config+0x94>)
    db0c:	4798      	blx	r3
    db0e:	220f      	movs	r2, #15
    db10:	4002      	ands	r2, r0
    db12:	0903      	lsrs	r3, r0, #4
    db14:	782e      	ldrb	r6, [r5, #0]
    db16:	01f6      	lsls	r6, r6, #7
    db18:	7869      	ldrb	r1, [r5, #1]
    db1a:	0189      	lsls	r1, r1, #6
    db1c:	430e      	orrs	r6, r1
    db1e:	b2f6      	uxtb	r6, r6
    db20:	491b      	ldr	r1, [pc, #108]	; (db90 <system_clock_source_dpll_set_config+0x98>)
    db22:	2744      	movs	r7, #68	; 0x44
    db24:	55ce      	strb	r6, [r1, r7]
    db26:	0416      	lsls	r6, r2, #16
    db28:	3b01      	subs	r3, #1
    db2a:	051b      	lsls	r3, r3, #20
    db2c:	0d1b      	lsrs	r3, r3, #20
    db2e:	4333      	orrs	r3, r6
    db30:	648b      	str	r3, [r1, #72]	; 0x48
    db32:	78ab      	ldrb	r3, [r5, #2]
    db34:	031b      	lsls	r3, r3, #12
    db36:	78ee      	ldrb	r6, [r5, #3]
    db38:	00f6      	lsls	r6, r6, #3
    db3a:	4333      	orrs	r3, r6
    db3c:	792e      	ldrb	r6, [r5, #4]
    db3e:	00b6      	lsls	r6, r6, #2
    db40:	4333      	orrs	r3, r6
    db42:	7caf      	ldrb	r7, [r5, #18]
    db44:	2603      	movs	r6, #3
    db46:	403e      	ands	r6, r7
    db48:	4333      	orrs	r3, r6
    db4a:	8a2e      	ldrh	r6, [r5, #16]
    db4c:	0436      	lsls	r6, r6, #16
    db4e:	4f11      	ldr	r7, [pc, #68]	; (db94 <system_clock_source_dpll_set_config+0x9c>)
    db50:	403e      	ands	r6, r7
    db52:	4333      	orrs	r3, r6
    db54:	7cee      	ldrb	r6, [r5, #19]
    db56:	0236      	lsls	r6, r6, #8
    db58:	27e0      	movs	r7, #224	; 0xe0
    db5a:	00ff      	lsls	r7, r7, #3
    db5c:	403e      	ands	r6, r7
    db5e:	4333      	orrs	r3, r6
    db60:	7d2e      	ldrb	r6, [r5, #20]
    db62:	0136      	lsls	r6, r6, #4
    db64:	2530      	movs	r5, #48	; 0x30
    db66:	4035      	ands	r5, r6
    db68:	432b      	orrs	r3, r5
    db6a:	64cb      	str	r3, [r1, #76]	; 0x4c
    db6c:	230f      	movs	r3, #15
    db6e:	4398      	bics	r0, r3
    db70:	1880      	adds	r0, r0, r2
    db72:	4344      	muls	r4, r0
    db74:	0924      	lsrs	r4, r4, #4
    db76:	4b08      	ldr	r3, [pc, #32]	; (db98 <system_clock_source_dpll_set_config+0xa0>)
    db78:	60dc      	str	r4, [r3, #12]
    db7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    db7c:	8a01      	ldrh	r1, [r0, #16]
    db7e:	3101      	adds	r1, #1
    db80:	0049      	lsls	r1, r1, #1
    db82:	0020      	movs	r0, r4
    db84:	4b01      	ldr	r3, [pc, #4]	; (db8c <system_clock_source_dpll_set_config+0x94>)
    db86:	4798      	blx	r3
    db88:	0004      	movs	r4, r0
    db8a:	e7bb      	b.n	db04 <system_clock_source_dpll_set_config+0xc>
    db8c:	00011d75 	.word	0x00011d75
    db90:	40000800 	.word	0x40000800
    db94:	07ff0000 	.word	0x07ff0000
    db98:	20003efc 	.word	0x20003efc

0000db9c <system_clock_source_enable>:
    db9c:	2808      	cmp	r0, #8
    db9e:	d803      	bhi.n	dba8 <system_clock_source_enable+0xc>
    dba0:	0080      	lsls	r0, r0, #2
    dba2:	4b25      	ldr	r3, [pc, #148]	; (dc38 <system_clock_source_enable+0x9c>)
    dba4:	581b      	ldr	r3, [r3, r0]
    dba6:	469f      	mov	pc, r3
    dba8:	2017      	movs	r0, #23
    dbaa:	e044      	b.n	dc36 <system_clock_source_enable+0x9a>
    dbac:	4a23      	ldr	r2, [pc, #140]	; (dc3c <system_clock_source_enable+0xa0>)
    dbae:	6a13      	ldr	r3, [r2, #32]
    dbb0:	2102      	movs	r1, #2
    dbb2:	430b      	orrs	r3, r1
    dbb4:	6213      	str	r3, [r2, #32]
    dbb6:	2000      	movs	r0, #0
    dbb8:	e03d      	b.n	dc36 <system_clock_source_enable+0x9a>
    dbba:	4a20      	ldr	r2, [pc, #128]	; (dc3c <system_clock_source_enable+0xa0>)
    dbbc:	6993      	ldr	r3, [r2, #24]
    dbbe:	2102      	movs	r1, #2
    dbc0:	430b      	orrs	r3, r1
    dbc2:	6193      	str	r3, [r2, #24]
    dbc4:	2000      	movs	r0, #0
    dbc6:	e036      	b.n	dc36 <system_clock_source_enable+0x9a>
    dbc8:	4a1c      	ldr	r2, [pc, #112]	; (dc3c <system_clock_source_enable+0xa0>)
    dbca:	8a13      	ldrh	r3, [r2, #16]
    dbcc:	2102      	movs	r1, #2
    dbce:	430b      	orrs	r3, r1
    dbd0:	8213      	strh	r3, [r2, #16]
    dbd2:	2000      	movs	r0, #0
    dbd4:	e02f      	b.n	dc36 <system_clock_source_enable+0x9a>
    dbd6:	4a19      	ldr	r2, [pc, #100]	; (dc3c <system_clock_source_enable+0xa0>)
    dbd8:	8a93      	ldrh	r3, [r2, #20]
    dbda:	2102      	movs	r1, #2
    dbdc:	430b      	orrs	r3, r1
    dbde:	8293      	strh	r3, [r2, #20]
    dbe0:	2000      	movs	r0, #0
    dbe2:	e028      	b.n	dc36 <system_clock_source_enable+0x9a>
    dbe4:	4916      	ldr	r1, [pc, #88]	; (dc40 <system_clock_source_enable+0xa4>)
    dbe6:	680b      	ldr	r3, [r1, #0]
    dbe8:	2202      	movs	r2, #2
    dbea:	4313      	orrs	r3, r2
    dbec:	600b      	str	r3, [r1, #0]
    dbee:	4b13      	ldr	r3, [pc, #76]	; (dc3c <system_clock_source_enable+0xa0>)
    dbf0:	849a      	strh	r2, [r3, #36]	; 0x24
    dbf2:	0019      	movs	r1, r3
    dbf4:	320e      	adds	r2, #14
    dbf6:	68cb      	ldr	r3, [r1, #12]
    dbf8:	421a      	tst	r2, r3
    dbfa:	d0fc      	beq.n	dbf6 <system_clock_source_enable+0x5a>
    dbfc:	4a10      	ldr	r2, [pc, #64]	; (dc40 <system_clock_source_enable+0xa4>)
    dbfe:	6891      	ldr	r1, [r2, #8]
    dc00:	4b0e      	ldr	r3, [pc, #56]	; (dc3c <system_clock_source_enable+0xa0>)
    dc02:	62d9      	str	r1, [r3, #44]	; 0x2c
    dc04:	6852      	ldr	r2, [r2, #4]
    dc06:	629a      	str	r2, [r3, #40]	; 0x28
    dc08:	2200      	movs	r2, #0
    dc0a:	849a      	strh	r2, [r3, #36]	; 0x24
    dc0c:	0019      	movs	r1, r3
    dc0e:	3210      	adds	r2, #16
    dc10:	68cb      	ldr	r3, [r1, #12]
    dc12:	421a      	tst	r2, r3
    dc14:	d0fc      	beq.n	dc10 <system_clock_source_enable+0x74>
    dc16:	4b0a      	ldr	r3, [pc, #40]	; (dc40 <system_clock_source_enable+0xa4>)
    dc18:	681b      	ldr	r3, [r3, #0]
    dc1a:	b29b      	uxth	r3, r3
    dc1c:	4a07      	ldr	r2, [pc, #28]	; (dc3c <system_clock_source_enable+0xa0>)
    dc1e:	8493      	strh	r3, [r2, #36]	; 0x24
    dc20:	2000      	movs	r0, #0
    dc22:	e008      	b.n	dc36 <system_clock_source_enable+0x9a>
    dc24:	4905      	ldr	r1, [pc, #20]	; (dc3c <system_clock_source_enable+0xa0>)
    dc26:	2244      	movs	r2, #68	; 0x44
    dc28:	5c8b      	ldrb	r3, [r1, r2]
    dc2a:	2002      	movs	r0, #2
    dc2c:	4303      	orrs	r3, r0
    dc2e:	548b      	strb	r3, [r1, r2]
    dc30:	2000      	movs	r0, #0
    dc32:	e000      	b.n	dc36 <system_clock_source_enable+0x9a>
    dc34:	2000      	movs	r0, #0
    dc36:	4770      	bx	lr
    dc38:	00018a94 	.word	0x00018a94
    dc3c:	40000800 	.word	0x40000800
    dc40:	20003efc 	.word	0x20003efc

0000dc44 <system_clock_init>:
    dc44:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc46:	46de      	mov	lr, fp
    dc48:	4657      	mov	r7, sl
    dc4a:	464e      	mov	r6, r9
    dc4c:	4645      	mov	r5, r8
    dc4e:	b5e0      	push	{r5, r6, r7, lr}
    dc50:	b08d      	sub	sp, #52	; 0x34
    dc52:	22c2      	movs	r2, #194	; 0xc2
    dc54:	00d2      	lsls	r2, r2, #3
    dc56:	4b4c      	ldr	r3, [pc, #304]	; (dd88 <system_clock_init+0x144>)
    dc58:	609a      	str	r2, [r3, #8]
    dc5a:	4a4c      	ldr	r2, [pc, #304]	; (dd8c <system_clock_init+0x148>)
    dc5c:	6853      	ldr	r3, [r2, #4]
    dc5e:	211e      	movs	r1, #30
    dc60:	438b      	bics	r3, r1
    dc62:	3918      	subs	r1, #24
    dc64:	430b      	orrs	r3, r1
    dc66:	6053      	str	r3, [r2, #4]
    dc68:	2203      	movs	r2, #3
    dc6a:	ab01      	add	r3, sp, #4
    dc6c:	701a      	strb	r2, [r3, #0]
    dc6e:	2400      	movs	r4, #0
    dc70:	4d47      	ldr	r5, [pc, #284]	; (dd90 <system_clock_init+0x14c>)
    dc72:	b2e0      	uxtb	r0, r4
    dc74:	a901      	add	r1, sp, #4
    dc76:	47a8      	blx	r5
    dc78:	3401      	adds	r4, #1
    dc7a:	2c25      	cmp	r4, #37	; 0x25
    dc7c:	d1f9      	bne.n	dc72 <system_clock_init+0x2e>
    dc7e:	a80b      	add	r0, sp, #44	; 0x2c
    dc80:	2500      	movs	r5, #0
    dc82:	7045      	strb	r5, [r0, #1]
    dc84:	2601      	movs	r6, #1
    dc86:	7086      	strb	r6, [r0, #2]
    dc88:	7005      	strb	r5, [r0, #0]
    dc8a:	4b42      	ldr	r3, [pc, #264]	; (dd94 <system_clock_init+0x150>)
    dc8c:	4798      	blx	r3
    dc8e:	2006      	movs	r0, #6
    dc90:	4b41      	ldr	r3, [pc, #260]	; (dd98 <system_clock_init+0x154>)
    dc92:	4699      	mov	r9, r3
    dc94:	4798      	blx	r3
    dc96:	4b41      	ldr	r3, [pc, #260]	; (dd9c <system_clock_init+0x158>)
    dc98:	4798      	blx	r3
    dc9a:	ac01      	add	r4, sp, #4
    dc9c:	7065      	strb	r5, [r4, #1]
    dc9e:	2306      	movs	r3, #6
    dca0:	469a      	mov	sl, r3
    dca2:	7023      	strb	r3, [r4, #0]
    dca4:	7225      	strb	r5, [r4, #8]
    dca6:	7265      	strb	r5, [r4, #9]
    dca8:	2308      	movs	r3, #8
    dcaa:	6063      	str	r3, [r4, #4]
    dcac:	0021      	movs	r1, r4
    dcae:	2001      	movs	r0, #1
    dcb0:	4b3b      	ldr	r3, [pc, #236]	; (dda0 <system_clock_init+0x15c>)
    dcb2:	4698      	mov	r8, r3
    dcb4:	4798      	blx	r3
    dcb6:	2001      	movs	r0, #1
    dcb8:	4f3a      	ldr	r7, [pc, #232]	; (dda4 <system_clock_init+0x160>)
    dcba:	47b8      	blx	r7
    dcbc:	6066      	str	r6, [r4, #4]
    dcbe:	7065      	strb	r5, [r4, #1]
    dcc0:	7265      	strb	r5, [r4, #9]
    dcc2:	2303      	movs	r3, #3
    dcc4:	469b      	mov	fp, r3
    dcc6:	7023      	strb	r3, [r4, #0]
    dcc8:	7226      	strb	r6, [r4, #8]
    dcca:	0021      	movs	r1, r4
    dccc:	2002      	movs	r0, #2
    dcce:	47c0      	blx	r8
    dcd0:	2002      	movs	r0, #2
    dcd2:	47b8      	blx	r7
    dcd4:	7065      	strb	r5, [r4, #1]
    dcd6:	7225      	strb	r5, [r4, #8]
    dcd8:	7265      	strb	r5, [r4, #9]
    dcda:	465b      	mov	r3, fp
    dcdc:	7023      	strb	r3, [r4, #0]
    dcde:	2320      	movs	r3, #32
    dce0:	6063      	str	r3, [r4, #4]
    dce2:	0021      	movs	r1, r4
    dce4:	2004      	movs	r0, #4
    dce6:	47c0      	blx	r8
    dce8:	2004      	movs	r0, #4
    dcea:	47b8      	blx	r7
    dcec:	6066      	str	r6, [r4, #4]
    dcee:	7065      	strb	r5, [r4, #1]
    dcf0:	4653      	mov	r3, sl
    dcf2:	7023      	strb	r3, [r4, #0]
    dcf4:	7225      	strb	r5, [r4, #8]
    dcf6:	7265      	strb	r5, [r4, #9]
    dcf8:	0021      	movs	r1, r4
    dcfa:	2005      	movs	r0, #5
    dcfc:	47c0      	blx	r8
    dcfe:	2005      	movs	r0, #5
    dd00:	47b8      	blx	r7
    dd02:	a90a      	add	r1, sp, #40	; 0x28
    dd04:	700e      	strb	r6, [r1, #0]
    dd06:	2001      	movs	r0, #1
    dd08:	4b21      	ldr	r3, [pc, #132]	; (dd90 <system_clock_init+0x14c>)
    dd0a:	4798      	blx	r3
    dd0c:	2001      	movs	r0, #1
    dd0e:	4b26      	ldr	r3, [pc, #152]	; (dda8 <system_clock_init+0x164>)
    dd10:	4798      	blx	r3
    dd12:	a804      	add	r0, sp, #16
    dd14:	7045      	strb	r5, [r0, #1]
    dd16:	7085      	strb	r5, [r0, #2]
    dd18:	70c5      	strb	r5, [r0, #3]
    dd1a:	7105      	strb	r5, [r0, #4]
    dd1c:	4b23      	ldr	r3, [pc, #140]	; (ddac <system_clock_init+0x168>)
    dd1e:	6083      	str	r3, [r0, #8]
    dd20:	8206      	strh	r6, [r0, #16]
    dd22:	74c5      	strb	r5, [r0, #19]
    dd24:	7485      	strb	r5, [r0, #18]
    dd26:	7005      	strb	r5, [r0, #0]
    dd28:	2302      	movs	r3, #2
    dd2a:	7503      	strb	r3, [r0, #20]
    dd2c:	4b20      	ldr	r3, [pc, #128]	; (ddb0 <system_clock_init+0x16c>)
    dd2e:	60c3      	str	r3, [r0, #12]
    dd30:	4b20      	ldr	r3, [pc, #128]	; (ddb4 <system_clock_init+0x170>)
    dd32:	4798      	blx	r3
    dd34:	2008      	movs	r0, #8
    dd36:	47c8      	blx	r9
    dd38:	4813      	ldr	r0, [pc, #76]	; (dd88 <system_clock_init+0x144>)
    dd3a:	2150      	movs	r1, #80	; 0x50
    dd3c:	2203      	movs	r2, #3
    dd3e:	5c43      	ldrb	r3, [r0, r1]
    dd40:	4013      	ands	r3, r2
    dd42:	2b03      	cmp	r3, #3
    dd44:	d1fb      	bne.n	dd3e <system_clock_init+0xfa>
    dd46:	4910      	ldr	r1, [pc, #64]	; (dd88 <system_clock_init+0x144>)
    dd48:	2244      	movs	r2, #68	; 0x44
    dd4a:	5c88      	ldrb	r0, [r1, r2]
    dd4c:	3b83      	subs	r3, #131	; 0x83
    dd4e:	4303      	orrs	r3, r0
    dd50:	548b      	strb	r3, [r1, r2]
    dd52:	4a19      	ldr	r2, [pc, #100]	; (ddb8 <system_clock_init+0x174>)
    dd54:	2300      	movs	r3, #0
    dd56:	7213      	strb	r3, [r2, #8]
    dd58:	7253      	strb	r3, [r2, #9]
    dd5a:	7293      	strb	r3, [r2, #10]
    dd5c:	72d3      	strb	r3, [r2, #11]
    dd5e:	a901      	add	r1, sp, #4
    dd60:	2201      	movs	r2, #1
    dd62:	604a      	str	r2, [r1, #4]
    dd64:	704b      	strb	r3, [r1, #1]
    dd66:	720b      	strb	r3, [r1, #8]
    dd68:	3308      	adds	r3, #8
    dd6a:	700b      	strb	r3, [r1, #0]
    dd6c:	724a      	strb	r2, [r1, #9]
    dd6e:	2000      	movs	r0, #0
    dd70:	4b0b      	ldr	r3, [pc, #44]	; (dda0 <system_clock_init+0x15c>)
    dd72:	4798      	blx	r3
    dd74:	2000      	movs	r0, #0
    dd76:	4b0b      	ldr	r3, [pc, #44]	; (dda4 <system_clock_init+0x160>)
    dd78:	4798      	blx	r3
    dd7a:	b00d      	add	sp, #52	; 0x34
    dd7c:	bc3c      	pop	{r2, r3, r4, r5}
    dd7e:	4690      	mov	r8, r2
    dd80:	4699      	mov	r9, r3
    dd82:	46a2      	mov	sl, r4
    dd84:	46ab      	mov	fp, r5
    dd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd88:	40000800 	.word	0x40000800
    dd8c:	41004000 	.word	0x41004000
    dd90:	0000dff5 	.word	0x0000dff5
    dd94:	0000dabd 	.word	0x0000dabd
    dd98:	0000db9d 	.word	0x0000db9d
    dd9c:	0000ddbd 	.word	0x0000ddbd
    dda0:	0000dde1 	.word	0x0000dde1
    dda4:	0000de99 	.word	0x0000de99
    dda8:	0000df69 	.word	0x0000df69
    ddac:	02dc6c00 	.word	0x02dc6c00
    ddb0:	000f4240 	.word	0x000f4240
    ddb4:	0000daf9 	.word	0x0000daf9
    ddb8:	40000400 	.word	0x40000400

0000ddbc <system_gclk_init>:
    ddbc:	4a06      	ldr	r2, [pc, #24]	; (ddd8 <system_gclk_init+0x1c>)
    ddbe:	6993      	ldr	r3, [r2, #24]
    ddc0:	2108      	movs	r1, #8
    ddc2:	430b      	orrs	r3, r1
    ddc4:	6193      	str	r3, [r2, #24]
    ddc6:	2201      	movs	r2, #1
    ddc8:	4b04      	ldr	r3, [pc, #16]	; (dddc <system_gclk_init+0x20>)
    ddca:	701a      	strb	r2, [r3, #0]
    ddcc:	0019      	movs	r1, r3
    ddce:	780b      	ldrb	r3, [r1, #0]
    ddd0:	4213      	tst	r3, r2
    ddd2:	d1fc      	bne.n	ddce <system_gclk_init+0x12>
    ddd4:	4770      	bx	lr
    ddd6:	46c0      	nop			; (mov r8, r8)
    ddd8:	40000400 	.word	0x40000400
    dddc:	40000c00 	.word	0x40000c00

0000dde0 <system_gclk_gen_set_config>:
    dde0:	b570      	push	{r4, r5, r6, lr}
    dde2:	0006      	movs	r6, r0
    dde4:	0004      	movs	r4, r0
    dde6:	780d      	ldrb	r5, [r1, #0]
    dde8:	022d      	lsls	r5, r5, #8
    ddea:	4305      	orrs	r5, r0
    ddec:	784b      	ldrb	r3, [r1, #1]
    ddee:	2b00      	cmp	r3, #0
    ddf0:	d002      	beq.n	ddf8 <system_gclk_gen_set_config+0x18>
    ddf2:	2380      	movs	r3, #128	; 0x80
    ddf4:	02db      	lsls	r3, r3, #11
    ddf6:	431d      	orrs	r5, r3
    ddf8:	7a4b      	ldrb	r3, [r1, #9]
    ddfa:	2b00      	cmp	r3, #0
    ddfc:	d002      	beq.n	de04 <system_gclk_gen_set_config+0x24>
    ddfe:	2380      	movs	r3, #128	; 0x80
    de00:	031b      	lsls	r3, r3, #12
    de02:	431d      	orrs	r5, r3
    de04:	6848      	ldr	r0, [r1, #4]
    de06:	2801      	cmp	r0, #1
    de08:	d910      	bls.n	de2c <system_gclk_gen_set_config+0x4c>
    de0a:	1e43      	subs	r3, r0, #1
    de0c:	4218      	tst	r0, r3
    de0e:	d134      	bne.n	de7a <system_gclk_gen_set_config+0x9a>
    de10:	2802      	cmp	r0, #2
    de12:	d930      	bls.n	de76 <system_gclk_gen_set_config+0x96>
    de14:	2302      	movs	r3, #2
    de16:	2200      	movs	r2, #0
    de18:	3201      	adds	r2, #1
    de1a:	005b      	lsls	r3, r3, #1
    de1c:	4298      	cmp	r0, r3
    de1e:	d8fb      	bhi.n	de18 <system_gclk_gen_set_config+0x38>
    de20:	0212      	lsls	r2, r2, #8
    de22:	4332      	orrs	r2, r6
    de24:	0014      	movs	r4, r2
    de26:	2380      	movs	r3, #128	; 0x80
    de28:	035b      	lsls	r3, r3, #13
    de2a:	431d      	orrs	r5, r3
    de2c:	7a0b      	ldrb	r3, [r1, #8]
    de2e:	2b00      	cmp	r3, #0
    de30:	d002      	beq.n	de38 <system_gclk_gen_set_config+0x58>
    de32:	2380      	movs	r3, #128	; 0x80
    de34:	039b      	lsls	r3, r3, #14
    de36:	431d      	orrs	r5, r3
    de38:	4a13      	ldr	r2, [pc, #76]	; (de88 <system_gclk_gen_set_config+0xa8>)
    de3a:	7853      	ldrb	r3, [r2, #1]
    de3c:	b25b      	sxtb	r3, r3
    de3e:	2b00      	cmp	r3, #0
    de40:	dbfb      	blt.n	de3a <system_gclk_gen_set_config+0x5a>
    de42:	4b12      	ldr	r3, [pc, #72]	; (de8c <system_gclk_gen_set_config+0xac>)
    de44:	4798      	blx	r3
    de46:	4b12      	ldr	r3, [pc, #72]	; (de90 <system_gclk_gen_set_config+0xb0>)
    de48:	701e      	strb	r6, [r3, #0]
    de4a:	4a0f      	ldr	r2, [pc, #60]	; (de88 <system_gclk_gen_set_config+0xa8>)
    de4c:	7853      	ldrb	r3, [r2, #1]
    de4e:	b25b      	sxtb	r3, r3
    de50:	2b00      	cmp	r3, #0
    de52:	dbfb      	blt.n	de4c <system_gclk_gen_set_config+0x6c>
    de54:	4b0c      	ldr	r3, [pc, #48]	; (de88 <system_gclk_gen_set_config+0xa8>)
    de56:	609c      	str	r4, [r3, #8]
    de58:	001a      	movs	r2, r3
    de5a:	7853      	ldrb	r3, [r2, #1]
    de5c:	b25b      	sxtb	r3, r3
    de5e:	2b00      	cmp	r3, #0
    de60:	dbfb      	blt.n	de5a <system_gclk_gen_set_config+0x7a>
    de62:	4a09      	ldr	r2, [pc, #36]	; (de88 <system_gclk_gen_set_config+0xa8>)
    de64:	6853      	ldr	r3, [r2, #4]
    de66:	2180      	movs	r1, #128	; 0x80
    de68:	0249      	lsls	r1, r1, #9
    de6a:	400b      	ands	r3, r1
    de6c:	431d      	orrs	r5, r3
    de6e:	6055      	str	r5, [r2, #4]
    de70:	4b08      	ldr	r3, [pc, #32]	; (de94 <system_gclk_gen_set_config+0xb4>)
    de72:	4798      	blx	r3
    de74:	bd70      	pop	{r4, r5, r6, pc}
    de76:	2200      	movs	r2, #0
    de78:	e7d2      	b.n	de20 <system_gclk_gen_set_config+0x40>
    de7a:	0204      	lsls	r4, r0, #8
    de7c:	4334      	orrs	r4, r6
    de7e:	2380      	movs	r3, #128	; 0x80
    de80:	029b      	lsls	r3, r3, #10
    de82:	431d      	orrs	r5, r3
    de84:	e7d2      	b.n	de2c <system_gclk_gen_set_config+0x4c>
    de86:	46c0      	nop			; (mov r8, r8)
    de88:	40000c00 	.word	0x40000c00
    de8c:	0000c441 	.word	0x0000c441
    de90:	40000c08 	.word	0x40000c08
    de94:	0000c481 	.word	0x0000c481

0000de98 <system_gclk_gen_enable>:
    de98:	b510      	push	{r4, lr}
    de9a:	0004      	movs	r4, r0
    de9c:	4a0b      	ldr	r2, [pc, #44]	; (decc <system_gclk_gen_enable+0x34>)
    de9e:	7853      	ldrb	r3, [r2, #1]
    dea0:	b25b      	sxtb	r3, r3
    dea2:	2b00      	cmp	r3, #0
    dea4:	dbfb      	blt.n	de9e <system_gclk_gen_enable+0x6>
    dea6:	4b0a      	ldr	r3, [pc, #40]	; (ded0 <system_gclk_gen_enable+0x38>)
    dea8:	4798      	blx	r3
    deaa:	4b0a      	ldr	r3, [pc, #40]	; (ded4 <system_gclk_gen_enable+0x3c>)
    deac:	701c      	strb	r4, [r3, #0]
    deae:	4a07      	ldr	r2, [pc, #28]	; (decc <system_gclk_gen_enable+0x34>)
    deb0:	7853      	ldrb	r3, [r2, #1]
    deb2:	b25b      	sxtb	r3, r3
    deb4:	2b00      	cmp	r3, #0
    deb6:	dbfb      	blt.n	deb0 <system_gclk_gen_enable+0x18>
    deb8:	4a04      	ldr	r2, [pc, #16]	; (decc <system_gclk_gen_enable+0x34>)
    deba:	6851      	ldr	r1, [r2, #4]
    debc:	2380      	movs	r3, #128	; 0x80
    debe:	025b      	lsls	r3, r3, #9
    dec0:	430b      	orrs	r3, r1
    dec2:	6053      	str	r3, [r2, #4]
    dec4:	4b04      	ldr	r3, [pc, #16]	; (ded8 <system_gclk_gen_enable+0x40>)
    dec6:	4798      	blx	r3
    dec8:	bd10      	pop	{r4, pc}
    deca:	46c0      	nop			; (mov r8, r8)
    decc:	40000c00 	.word	0x40000c00
    ded0:	0000c441 	.word	0x0000c441
    ded4:	40000c04 	.word	0x40000c04
    ded8:	0000c481 	.word	0x0000c481

0000dedc <system_gclk_gen_get_hz>:
    dedc:	b570      	push	{r4, r5, r6, lr}
    dede:	0004      	movs	r4, r0
    dee0:	4a1a      	ldr	r2, [pc, #104]	; (df4c <system_gclk_gen_get_hz+0x70>)
    dee2:	7853      	ldrb	r3, [r2, #1]
    dee4:	b25b      	sxtb	r3, r3
    dee6:	2b00      	cmp	r3, #0
    dee8:	dbfb      	blt.n	dee2 <system_gclk_gen_get_hz+0x6>
    deea:	4b19      	ldr	r3, [pc, #100]	; (df50 <system_gclk_gen_get_hz+0x74>)
    deec:	4798      	blx	r3
    deee:	4b19      	ldr	r3, [pc, #100]	; (df54 <system_gclk_gen_get_hz+0x78>)
    def0:	701c      	strb	r4, [r3, #0]
    def2:	4a16      	ldr	r2, [pc, #88]	; (df4c <system_gclk_gen_get_hz+0x70>)
    def4:	7853      	ldrb	r3, [r2, #1]
    def6:	b25b      	sxtb	r3, r3
    def8:	2b00      	cmp	r3, #0
    defa:	dbfb      	blt.n	def4 <system_gclk_gen_get_hz+0x18>
    defc:	4e13      	ldr	r6, [pc, #76]	; (df4c <system_gclk_gen_get_hz+0x70>)
    defe:	6870      	ldr	r0, [r6, #4]
    df00:	04c0      	lsls	r0, r0, #19
    df02:	0ec0      	lsrs	r0, r0, #27
    df04:	4b14      	ldr	r3, [pc, #80]	; (df58 <system_gclk_gen_get_hz+0x7c>)
    df06:	4798      	blx	r3
    df08:	0005      	movs	r5, r0
    df0a:	4b12      	ldr	r3, [pc, #72]	; (df54 <system_gclk_gen_get_hz+0x78>)
    df0c:	701c      	strb	r4, [r3, #0]
    df0e:	6876      	ldr	r6, [r6, #4]
    df10:	02f6      	lsls	r6, r6, #11
    df12:	0ff6      	lsrs	r6, r6, #31
    df14:	4b11      	ldr	r3, [pc, #68]	; (df5c <system_gclk_gen_get_hz+0x80>)
    df16:	701c      	strb	r4, [r3, #0]
    df18:	4a0c      	ldr	r2, [pc, #48]	; (df4c <system_gclk_gen_get_hz+0x70>)
    df1a:	7853      	ldrb	r3, [r2, #1]
    df1c:	b25b      	sxtb	r3, r3
    df1e:	2b00      	cmp	r3, #0
    df20:	dbfb      	blt.n	df1a <system_gclk_gen_get_hz+0x3e>
    df22:	4b0a      	ldr	r3, [pc, #40]	; (df4c <system_gclk_gen_get_hz+0x70>)
    df24:	689c      	ldr	r4, [r3, #8]
    df26:	0224      	lsls	r4, r4, #8
    df28:	0c24      	lsrs	r4, r4, #16
    df2a:	4b0d      	ldr	r3, [pc, #52]	; (df60 <system_gclk_gen_get_hz+0x84>)
    df2c:	4798      	blx	r3
    df2e:	2e00      	cmp	r6, #0
    df30:	d107      	bne.n	df42 <system_gclk_gen_get_hz+0x66>
    df32:	2c01      	cmp	r4, #1
    df34:	d907      	bls.n	df46 <system_gclk_gen_get_hz+0x6a>
    df36:	0021      	movs	r1, r4
    df38:	0028      	movs	r0, r5
    df3a:	4b0a      	ldr	r3, [pc, #40]	; (df64 <system_gclk_gen_get_hz+0x88>)
    df3c:	4798      	blx	r3
    df3e:	0005      	movs	r5, r0
    df40:	e001      	b.n	df46 <system_gclk_gen_get_hz+0x6a>
    df42:	3401      	adds	r4, #1
    df44:	40e5      	lsrs	r5, r4
    df46:	0028      	movs	r0, r5
    df48:	bd70      	pop	{r4, r5, r6, pc}
    df4a:	46c0      	nop			; (mov r8, r8)
    df4c:	40000c00 	.word	0x40000c00
    df50:	0000c441 	.word	0x0000c441
    df54:	40000c04 	.word	0x40000c04
    df58:	0000da29 	.word	0x0000da29
    df5c:	40000c08 	.word	0x40000c08
    df60:	0000c481 	.word	0x0000c481
    df64:	00011d75 	.word	0x00011d75

0000df68 <system_gclk_chan_enable>:
    df68:	b510      	push	{r4, lr}
    df6a:	0004      	movs	r4, r0
    df6c:	4b06      	ldr	r3, [pc, #24]	; (df88 <system_gclk_chan_enable+0x20>)
    df6e:	4798      	blx	r3
    df70:	4b06      	ldr	r3, [pc, #24]	; (df8c <system_gclk_chan_enable+0x24>)
    df72:	701c      	strb	r4, [r3, #0]
    df74:	4a06      	ldr	r2, [pc, #24]	; (df90 <system_gclk_chan_enable+0x28>)
    df76:	8853      	ldrh	r3, [r2, #2]
    df78:	2180      	movs	r1, #128	; 0x80
    df7a:	01c9      	lsls	r1, r1, #7
    df7c:	430b      	orrs	r3, r1
    df7e:	8053      	strh	r3, [r2, #2]
    df80:	4b04      	ldr	r3, [pc, #16]	; (df94 <system_gclk_chan_enable+0x2c>)
    df82:	4798      	blx	r3
    df84:	bd10      	pop	{r4, pc}
    df86:	46c0      	nop			; (mov r8, r8)
    df88:	0000c441 	.word	0x0000c441
    df8c:	40000c02 	.word	0x40000c02
    df90:	40000c00 	.word	0x40000c00
    df94:	0000c481 	.word	0x0000c481

0000df98 <system_gclk_chan_disable>:
    df98:	b510      	push	{r4, lr}
    df9a:	0004      	movs	r4, r0
    df9c:	4b0f      	ldr	r3, [pc, #60]	; (dfdc <system_gclk_chan_disable+0x44>)
    df9e:	4798      	blx	r3
    dfa0:	4b0f      	ldr	r3, [pc, #60]	; (dfe0 <system_gclk_chan_disable+0x48>)
    dfa2:	701c      	strb	r4, [r3, #0]
    dfa4:	4a0f      	ldr	r2, [pc, #60]	; (dfe4 <system_gclk_chan_disable+0x4c>)
    dfa6:	8853      	ldrh	r3, [r2, #2]
    dfa8:	051b      	lsls	r3, r3, #20
    dfaa:	0f18      	lsrs	r0, r3, #28
    dfac:	8853      	ldrh	r3, [r2, #2]
    dfae:	490e      	ldr	r1, [pc, #56]	; (dfe8 <system_gclk_chan_disable+0x50>)
    dfb0:	400b      	ands	r3, r1
    dfb2:	8053      	strh	r3, [r2, #2]
    dfb4:	8853      	ldrh	r3, [r2, #2]
    dfb6:	490d      	ldr	r1, [pc, #52]	; (dfec <system_gclk_chan_disable+0x54>)
    dfb8:	400b      	ands	r3, r1
    dfba:	8053      	strh	r3, [r2, #2]
    dfbc:	0011      	movs	r1, r2
    dfbe:	2280      	movs	r2, #128	; 0x80
    dfc0:	01d2      	lsls	r2, r2, #7
    dfc2:	884b      	ldrh	r3, [r1, #2]
    dfc4:	4213      	tst	r3, r2
    dfc6:	d1fc      	bne.n	dfc2 <system_gclk_chan_disable+0x2a>
    dfc8:	4906      	ldr	r1, [pc, #24]	; (dfe4 <system_gclk_chan_disable+0x4c>)
    dfca:	884a      	ldrh	r2, [r1, #2]
    dfcc:	0203      	lsls	r3, r0, #8
    dfce:	4806      	ldr	r0, [pc, #24]	; (dfe8 <system_gclk_chan_disable+0x50>)
    dfd0:	4002      	ands	r2, r0
    dfd2:	4313      	orrs	r3, r2
    dfd4:	804b      	strh	r3, [r1, #2]
    dfd6:	4b06      	ldr	r3, [pc, #24]	; (dff0 <system_gclk_chan_disable+0x58>)
    dfd8:	4798      	blx	r3
    dfda:	bd10      	pop	{r4, pc}
    dfdc:	0000c441 	.word	0x0000c441
    dfe0:	40000c02 	.word	0x40000c02
    dfe4:	40000c00 	.word	0x40000c00
    dfe8:	fffff0ff 	.word	0xfffff0ff
    dfec:	ffffbfff 	.word	0xffffbfff
    dff0:	0000c481 	.word	0x0000c481

0000dff4 <system_gclk_chan_set_config>:
    dff4:	b510      	push	{r4, lr}
    dff6:	780c      	ldrb	r4, [r1, #0]
    dff8:	0224      	lsls	r4, r4, #8
    dffa:	4304      	orrs	r4, r0
    dffc:	4b02      	ldr	r3, [pc, #8]	; (e008 <system_gclk_chan_set_config+0x14>)
    dffe:	4798      	blx	r3
    e000:	b2a4      	uxth	r4, r4
    e002:	4b02      	ldr	r3, [pc, #8]	; (e00c <system_gclk_chan_set_config+0x18>)
    e004:	805c      	strh	r4, [r3, #2]
    e006:	bd10      	pop	{r4, pc}
    e008:	0000df99 	.word	0x0000df99
    e00c:	40000c00 	.word	0x40000c00

0000e010 <system_gclk_chan_get_hz>:
    e010:	b510      	push	{r4, lr}
    e012:	0004      	movs	r4, r0
    e014:	4b06      	ldr	r3, [pc, #24]	; (e030 <system_gclk_chan_get_hz+0x20>)
    e016:	4798      	blx	r3
    e018:	4b06      	ldr	r3, [pc, #24]	; (e034 <system_gclk_chan_get_hz+0x24>)
    e01a:	701c      	strb	r4, [r3, #0]
    e01c:	4b06      	ldr	r3, [pc, #24]	; (e038 <system_gclk_chan_get_hz+0x28>)
    e01e:	885c      	ldrh	r4, [r3, #2]
    e020:	0524      	lsls	r4, r4, #20
    e022:	0f24      	lsrs	r4, r4, #28
    e024:	4b05      	ldr	r3, [pc, #20]	; (e03c <system_gclk_chan_get_hz+0x2c>)
    e026:	4798      	blx	r3
    e028:	0020      	movs	r0, r4
    e02a:	4b05      	ldr	r3, [pc, #20]	; (e040 <system_gclk_chan_get_hz+0x30>)
    e02c:	4798      	blx	r3
    e02e:	bd10      	pop	{r4, pc}
    e030:	0000c441 	.word	0x0000c441
    e034:	40000c02 	.word	0x40000c02
    e038:	40000c00 	.word	0x40000c00
    e03c:	0000c481 	.word	0x0000c481
    e040:	0000dedd 	.word	0x0000dedd

0000e044 <system_interrupt_clear_pending>:
    e044:	2800      	cmp	r0, #0
    e046:	db08      	blt.n	e05a <system_interrupt_clear_pending+0x16>
    e048:	2301      	movs	r3, #1
    e04a:	4083      	lsls	r3, r0
    e04c:	22c0      	movs	r2, #192	; 0xc0
    e04e:	0052      	lsls	r2, r2, #1
    e050:	4906      	ldr	r1, [pc, #24]	; (e06c <system_interrupt_clear_pending+0x28>)
    e052:	508b      	str	r3, [r1, r2]
    e054:	2300      	movs	r3, #0
    e056:	0018      	movs	r0, r3
    e058:	4770      	bx	lr
    e05a:	2317      	movs	r3, #23
    e05c:	1c42      	adds	r2, r0, #1
    e05e:	d1fa      	bne.n	e056 <system_interrupt_clear_pending+0x12>
    e060:	2280      	movs	r2, #128	; 0x80
    e062:	0492      	lsls	r2, r2, #18
    e064:	4b02      	ldr	r3, [pc, #8]	; (e070 <system_interrupt_clear_pending+0x2c>)
    e066:	605a      	str	r2, [r3, #4]
    e068:	2300      	movs	r3, #0
    e06a:	e7f4      	b.n	e056 <system_interrupt_clear_pending+0x12>
    e06c:	e000e100 	.word	0xe000e100
    e070:	e000ed00 	.word	0xe000ed00

0000e074 <_system_pinmux_config>:
    e074:	b530      	push	{r4, r5, lr}
    e076:	78d3      	ldrb	r3, [r2, #3]
    e078:	2b00      	cmp	r3, #0
    e07a:	d135      	bne.n	e0e8 <_system_pinmux_config+0x74>
    e07c:	7813      	ldrb	r3, [r2, #0]
    e07e:	2b80      	cmp	r3, #128	; 0x80
    e080:	d029      	beq.n	e0d6 <_system_pinmux_config+0x62>
    e082:	061b      	lsls	r3, r3, #24
    e084:	2480      	movs	r4, #128	; 0x80
    e086:	0264      	lsls	r4, r4, #9
    e088:	4323      	orrs	r3, r4
    e08a:	7854      	ldrb	r4, [r2, #1]
    e08c:	2502      	movs	r5, #2
    e08e:	43ac      	bics	r4, r5
    e090:	d106      	bne.n	e0a0 <_system_pinmux_config+0x2c>
    e092:	7894      	ldrb	r4, [r2, #2]
    e094:	2c00      	cmp	r4, #0
    e096:	d120      	bne.n	e0da <_system_pinmux_config+0x66>
    e098:	2480      	movs	r4, #128	; 0x80
    e09a:	02a4      	lsls	r4, r4, #10
    e09c:	4323      	orrs	r3, r4
    e09e:	6041      	str	r1, [r0, #4]
    e0a0:	7854      	ldrb	r4, [r2, #1]
    e0a2:	3c01      	subs	r4, #1
    e0a4:	2c01      	cmp	r4, #1
    e0a6:	d91c      	bls.n	e0e2 <_system_pinmux_config+0x6e>
    e0a8:	040d      	lsls	r5, r1, #16
    e0aa:	0c2d      	lsrs	r5, r5, #16
    e0ac:	24a0      	movs	r4, #160	; 0xa0
    e0ae:	05e4      	lsls	r4, r4, #23
    e0b0:	432c      	orrs	r4, r5
    e0b2:	431c      	orrs	r4, r3
    e0b4:	6284      	str	r4, [r0, #40]	; 0x28
    e0b6:	0c0d      	lsrs	r5, r1, #16
    e0b8:	24d0      	movs	r4, #208	; 0xd0
    e0ba:	0624      	lsls	r4, r4, #24
    e0bc:	432c      	orrs	r4, r5
    e0be:	431c      	orrs	r4, r3
    e0c0:	6284      	str	r4, [r0, #40]	; 0x28
    e0c2:	78d4      	ldrb	r4, [r2, #3]
    e0c4:	2c00      	cmp	r4, #0
    e0c6:	d122      	bne.n	e10e <_system_pinmux_config+0x9a>
    e0c8:	035b      	lsls	r3, r3, #13
    e0ca:	d51c      	bpl.n	e106 <_system_pinmux_config+0x92>
    e0cc:	7893      	ldrb	r3, [r2, #2]
    e0ce:	2b01      	cmp	r3, #1
    e0d0:	d01e      	beq.n	e110 <_system_pinmux_config+0x9c>
    e0d2:	6141      	str	r1, [r0, #20]
    e0d4:	e017      	b.n	e106 <_system_pinmux_config+0x92>
    e0d6:	2300      	movs	r3, #0
    e0d8:	e7d7      	b.n	e08a <_system_pinmux_config+0x16>
    e0da:	24c0      	movs	r4, #192	; 0xc0
    e0dc:	02e4      	lsls	r4, r4, #11
    e0de:	4323      	orrs	r3, r4
    e0e0:	e7dd      	b.n	e09e <_system_pinmux_config+0x2a>
    e0e2:	4c0d      	ldr	r4, [pc, #52]	; (e118 <_system_pinmux_config+0xa4>)
    e0e4:	4023      	ands	r3, r4
    e0e6:	e7df      	b.n	e0a8 <_system_pinmux_config+0x34>
    e0e8:	6041      	str	r1, [r0, #4]
    e0ea:	040c      	lsls	r4, r1, #16
    e0ec:	0c24      	lsrs	r4, r4, #16
    e0ee:	23a0      	movs	r3, #160	; 0xa0
    e0f0:	05db      	lsls	r3, r3, #23
    e0f2:	4323      	orrs	r3, r4
    e0f4:	6283      	str	r3, [r0, #40]	; 0x28
    e0f6:	0c0c      	lsrs	r4, r1, #16
    e0f8:	23d0      	movs	r3, #208	; 0xd0
    e0fa:	061b      	lsls	r3, r3, #24
    e0fc:	4323      	orrs	r3, r4
    e0fe:	6283      	str	r3, [r0, #40]	; 0x28
    e100:	78d3      	ldrb	r3, [r2, #3]
    e102:	2b00      	cmp	r3, #0
    e104:	d103      	bne.n	e10e <_system_pinmux_config+0x9a>
    e106:	7853      	ldrb	r3, [r2, #1]
    e108:	3b01      	subs	r3, #1
    e10a:	2b01      	cmp	r3, #1
    e10c:	d902      	bls.n	e114 <_system_pinmux_config+0xa0>
    e10e:	bd30      	pop	{r4, r5, pc}
    e110:	6181      	str	r1, [r0, #24]
    e112:	e7f8      	b.n	e106 <_system_pinmux_config+0x92>
    e114:	6081      	str	r1, [r0, #8]
    e116:	e7fa      	b.n	e10e <_system_pinmux_config+0x9a>
    e118:	fffbffff 	.word	0xfffbffff

0000e11c <system_pinmux_pin_set_config>:
    e11c:	b510      	push	{r4, lr}
    e11e:	000a      	movs	r2, r1
    e120:	09c1      	lsrs	r1, r0, #7
    e122:	2300      	movs	r3, #0
    e124:	2900      	cmp	r1, #0
    e126:	d104      	bne.n	e132 <system_pinmux_pin_set_config+0x16>
    e128:	0943      	lsrs	r3, r0, #5
    e12a:	01db      	lsls	r3, r3, #7
    e12c:	4905      	ldr	r1, [pc, #20]	; (e144 <system_pinmux_pin_set_config+0x28>)
    e12e:	468c      	mov	ip, r1
    e130:	4463      	add	r3, ip
    e132:	241f      	movs	r4, #31
    e134:	4020      	ands	r0, r4
    e136:	2101      	movs	r1, #1
    e138:	4081      	lsls	r1, r0
    e13a:	0018      	movs	r0, r3
    e13c:	4b02      	ldr	r3, [pc, #8]	; (e148 <system_pinmux_pin_set_config+0x2c>)
    e13e:	4798      	blx	r3
    e140:	bd10      	pop	{r4, pc}
    e142:	46c0      	nop			; (mov r8, r8)
    e144:	41004400 	.word	0x41004400
    e148:	0000e075 	.word	0x0000e075

0000e14c <_system_dummy_init>:
    e14c:	4770      	bx	lr
	...

0000e150 <system_init>:
    e150:	b510      	push	{r4, lr}
    e152:	4b05      	ldr	r3, [pc, #20]	; (e168 <system_init+0x18>)
    e154:	4798      	blx	r3
    e156:	4b05      	ldr	r3, [pc, #20]	; (e16c <system_init+0x1c>)
    e158:	4798      	blx	r3
    e15a:	4b05      	ldr	r3, [pc, #20]	; (e170 <system_init+0x20>)
    e15c:	4798      	blx	r3
    e15e:	4b05      	ldr	r3, [pc, #20]	; (e174 <system_init+0x24>)
    e160:	4798      	blx	r3
    e162:	4b05      	ldr	r3, [pc, #20]	; (e178 <system_init+0x28>)
    e164:	4798      	blx	r3
    e166:	bd10      	pop	{r4, pc}
    e168:	0000dc45 	.word	0x0000dc45
    e16c:	0000c4b1 	.word	0x0000c4b1
    e170:	0000e14d 	.word	0x0000e14d
    e174:	0000c5c1 	.word	0x0000c5c1
    e178:	0000e14d 	.word	0x0000e14d

0000e17c <_tcc_get_inst_index>:
    e17c:	4b09      	ldr	r3, [pc, #36]	; (e1a4 <_tcc_get_inst_index+0x28>)
    e17e:	4298      	cmp	r0, r3
    e180:	d00c      	beq.n	e19c <_tcc_get_inst_index+0x20>
    e182:	4b09      	ldr	r3, [pc, #36]	; (e1a8 <_tcc_get_inst_index+0x2c>)
    e184:	4298      	cmp	r0, r3
    e186:	d007      	beq.n	e198 <_tcc_get_inst_index+0x1c>
    e188:	4a08      	ldr	r2, [pc, #32]	; (e1ac <_tcc_get_inst_index+0x30>)
    e18a:	2300      	movs	r3, #0
    e18c:	4290      	cmp	r0, r2
    e18e:	d001      	beq.n	e194 <_tcc_get_inst_index+0x18>
    e190:	0018      	movs	r0, r3
    e192:	4770      	bx	lr
    e194:	3302      	adds	r3, #2
    e196:	e002      	b.n	e19e <_tcc_get_inst_index+0x22>
    e198:	2301      	movs	r3, #1
    e19a:	e000      	b.n	e19e <_tcc_get_inst_index+0x22>
    e19c:	2300      	movs	r3, #0
    e19e:	b2db      	uxtb	r3, r3
    e1a0:	e7f6      	b.n	e190 <_tcc_get_inst_index+0x14>
    e1a2:	46c0      	nop			; (mov r8, r8)
    e1a4:	42002000 	.word	0x42002000
    e1a8:	42002400 	.word	0x42002400
    e1ac:	42002800 	.word	0x42002800

0000e1b0 <_tcc_set_compare_value>:
    e1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e1b2:	000f      	movs	r7, r1
    e1b4:	0015      	movs	r5, r2
    e1b6:	001e      	movs	r6, r3
    e1b8:	6804      	ldr	r4, [r0, #0]
    e1ba:	0020      	movs	r0, r4
    e1bc:	4b16      	ldr	r3, [pc, #88]	; (e218 <_tcc_set_compare_value+0x68>)
    e1be:	4798      	blx	r3
    e1c0:	4b16      	ldr	r3, [pc, #88]	; (e21c <_tcc_set_compare_value+0x6c>)
    e1c2:	5c1a      	ldrb	r2, [r3, r0]
    e1c4:	2317      	movs	r3, #23
    e1c6:	42ba      	cmp	r2, r7
    e1c8:	d801      	bhi.n	e1ce <_tcc_set_compare_value+0x1e>
    e1ca:	0018      	movs	r0, r3
    e1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e1ce:	0080      	lsls	r0, r0, #2
    e1d0:	4b13      	ldr	r3, [pc, #76]	; (e220 <_tcc_set_compare_value+0x70>)
    e1d2:	58c2      	ldr	r2, [r0, r3]
    e1d4:	2317      	movs	r3, #23
    e1d6:	42aa      	cmp	r2, r5
    e1d8:	d3f7      	bcc.n	e1ca <_tcc_set_compare_value+0x1a>
    e1da:	2e00      	cmp	r6, #0
    e1dc:	d010      	beq.n	e200 <_tcc_set_compare_value+0x50>
    e1de:	2280      	movs	r2, #128	; 0x80
    e1e0:	0252      	lsls	r2, r2, #9
    e1e2:	40ba      	lsls	r2, r7
    e1e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e1e6:	421a      	tst	r2, r3
    e1e8:	d1fc      	bne.n	e1e4 <_tcc_set_compare_value+0x34>
    e1ea:	2280      	movs	r2, #128	; 0x80
    e1ec:	0312      	lsls	r2, r2, #12
    e1ee:	40ba      	lsls	r2, r7
    e1f0:	68a3      	ldr	r3, [r4, #8]
    e1f2:	421a      	tst	r2, r3
    e1f4:	d1fc      	bne.n	e1f0 <_tcc_set_compare_value+0x40>
    e1f6:	371c      	adds	r7, #28
    e1f8:	00bf      	lsls	r7, r7, #2
    e1fa:	513d      	str	r5, [r7, r4]
    e1fc:	2300      	movs	r3, #0
    e1fe:	e7e4      	b.n	e1ca <_tcc_set_compare_value+0x1a>
    e200:	2280      	movs	r2, #128	; 0x80
    e202:	0052      	lsls	r2, r2, #1
    e204:	40ba      	lsls	r2, r7
    e206:	68a3      	ldr	r3, [r4, #8]
    e208:	421a      	tst	r2, r3
    e20a:	d1fc      	bne.n	e206 <_tcc_set_compare_value+0x56>
    e20c:	3710      	adds	r7, #16
    e20e:	00bf      	lsls	r7, r7, #2
    e210:	19e4      	adds	r4, r4, r7
    e212:	6065      	str	r5, [r4, #4]
    e214:	2300      	movs	r3, #0
    e216:	e7d8      	b.n	e1ca <_tcc_set_compare_value+0x1a>
    e218:	0000e17d 	.word	0x0000e17d
    e21c:	00018ac4 	.word	0x00018ac4
    e220:	00018acc 	.word	0x00018acc

0000e224 <tcc_get_config_defaults>:
    e224:	b510      	push	{r4, lr}
    e226:	0004      	movs	r4, r0
    e228:	0008      	movs	r0, r1
    e22a:	4b4f      	ldr	r3, [pc, #316]	; (e368 <tcc_get_config_defaults+0x144>)
    e22c:	4798      	blx	r3
    e22e:	2300      	movs	r3, #0
    e230:	6023      	str	r3, [r4, #0]
    e232:	0080      	lsls	r0, r0, #2
    e234:	4a4d      	ldr	r2, [pc, #308]	; (e36c <tcc_get_config_defaults+0x148>)
    e236:	5882      	ldr	r2, [r0, r2]
    e238:	6062      	str	r2, [r4, #4]
    e23a:	72a3      	strb	r3, [r4, #10]
    e23c:	72e3      	strb	r3, [r4, #11]
    e23e:	7323      	strb	r3, [r4, #12]
    e240:	7263      	strb	r3, [r4, #9]
    e242:	7223      	strb	r3, [r4, #8]
    e244:	61e3      	str	r3, [r4, #28]
    e246:	6223      	str	r3, [r4, #32]
    e248:	6263      	str	r3, [r4, #36]	; 0x24
    e24a:	62a3      	str	r3, [r4, #40]	; 0x28
    e24c:	7523      	strb	r3, [r4, #20]
    e24e:	7563      	strb	r3, [r4, #21]
    e250:	75a3      	strb	r3, [r4, #22]
    e252:	75e3      	strb	r3, [r4, #23]
    e254:	7623      	strb	r3, [r4, #24]
    e256:	7663      	strb	r3, [r4, #25]
    e258:	7423      	strb	r3, [r4, #16]
    e25a:	7463      	strb	r3, [r4, #17]
    e25c:	74a3      	strb	r3, [r4, #18]
    e25e:	74e3      	strb	r3, [r4, #19]
    e260:	222c      	movs	r2, #44	; 0x2c
    e262:	54a3      	strb	r3, [r4, r2]
    e264:	3201      	adds	r2, #1
    e266:	54a3      	strb	r3, [r4, r2]
    e268:	3201      	adds	r2, #1
    e26a:	54a3      	strb	r3, [r4, r2]
    e26c:	3201      	adds	r2, #1
    e26e:	54a3      	strb	r3, [r4, r2]
    e270:	3201      	adds	r2, #1
    e272:	54a3      	strb	r3, [r4, r2]
    e274:	3201      	adds	r2, #1
    e276:	54a3      	strb	r3, [r4, r2]
    e278:	3201      	adds	r2, #1
    e27a:	54a3      	strb	r3, [r4, r2]
    e27c:	3201      	adds	r2, #1
    e27e:	54a3      	strb	r3, [r4, r2]
    e280:	3201      	adds	r2, #1
    e282:	54a3      	strb	r3, [r4, r2]
    e284:	3201      	adds	r2, #1
    e286:	54a3      	strb	r3, [r4, r2]
    e288:	3201      	adds	r2, #1
    e28a:	54a3      	strb	r3, [r4, r2]
    e28c:	3201      	adds	r2, #1
    e28e:	54a3      	strb	r3, [r4, r2]
    e290:	3201      	adds	r2, #1
    e292:	54a3      	strb	r3, [r4, r2]
    e294:	3201      	adds	r2, #1
    e296:	54a3      	strb	r3, [r4, r2]
    e298:	3201      	adds	r2, #1
    e29a:	54a3      	strb	r3, [r4, r2]
    e29c:	3201      	adds	r2, #1
    e29e:	54a3      	strb	r3, [r4, r2]
    e2a0:	3201      	adds	r2, #1
    e2a2:	54a3      	strb	r3, [r4, r2]
    e2a4:	3201      	adds	r2, #1
    e2a6:	54a3      	strb	r3, [r4, r2]
    e2a8:	3201      	adds	r2, #1
    e2aa:	54a3      	strb	r3, [r4, r2]
    e2ac:	3201      	adds	r2, #1
    e2ae:	54a3      	strb	r3, [r4, r2]
    e2b0:	3201      	adds	r2, #1
    e2b2:	54a3      	strb	r3, [r4, r2]
    e2b4:	3201      	adds	r2, #1
    e2b6:	54a3      	strb	r3, [r4, r2]
    e2b8:	3201      	adds	r2, #1
    e2ba:	54a3      	strb	r3, [r4, r2]
    e2bc:	3201      	adds	r2, #1
    e2be:	54a3      	strb	r3, [r4, r2]
    e2c0:	3201      	adds	r2, #1
    e2c2:	54a3      	strb	r3, [r4, r2]
    e2c4:	3201      	adds	r2, #1
    e2c6:	54a3      	strb	r3, [r4, r2]
    e2c8:	3201      	adds	r2, #1
    e2ca:	54a3      	strb	r3, [r4, r2]
    e2cc:	3201      	adds	r2, #1
    e2ce:	54a3      	strb	r3, [r4, r2]
    e2d0:	3201      	adds	r2, #1
    e2d2:	54a3      	strb	r3, [r4, r2]
    e2d4:	3201      	adds	r2, #1
    e2d6:	54a3      	strb	r3, [r4, r2]
    e2d8:	3201      	adds	r2, #1
    e2da:	54a3      	strb	r3, [r4, r2]
    e2dc:	3201      	adds	r2, #1
    e2de:	54a3      	strb	r3, [r4, r2]
    e2e0:	3201      	adds	r2, #1
    e2e2:	54a3      	strb	r3, [r4, r2]
    e2e4:	3201      	adds	r2, #1
    e2e6:	54a3      	strb	r3, [r4, r2]
    e2e8:	3201      	adds	r2, #1
    e2ea:	54a3      	strb	r3, [r4, r2]
    e2ec:	3201      	adds	r2, #1
    e2ee:	54a3      	strb	r3, [r4, r2]
    e2f0:	3201      	adds	r2, #1
    e2f2:	54a3      	strb	r3, [r4, r2]
    e2f4:	3201      	adds	r2, #1
    e2f6:	54a3      	strb	r3, [r4, r2]
    e2f8:	3201      	adds	r2, #1
    e2fa:	54a3      	strb	r3, [r4, r2]
    e2fc:	3201      	adds	r2, #1
    e2fe:	54a3      	strb	r3, [r4, r2]
    e300:	3201      	adds	r2, #1
    e302:	54a3      	strb	r3, [r4, r2]
    e304:	3201      	adds	r2, #1
    e306:	54a3      	strb	r3, [r4, r2]
    e308:	3201      	adds	r2, #1
    e30a:	54a3      	strb	r3, [r4, r2]
    e30c:	3201      	adds	r2, #1
    e30e:	54a3      	strb	r3, [r4, r2]
    e310:	3241      	adds	r2, #65	; 0x41
    e312:	54a3      	strb	r3, [r4, r2]
    e314:	65a3      	str	r3, [r4, #88]	; 0x58
    e316:	67a3      	str	r3, [r4, #120]	; 0x78
    e318:	3201      	adds	r2, #1
    e31a:	54a3      	strb	r3, [r4, r2]
    e31c:	65e3      	str	r3, [r4, #92]	; 0x5c
    e31e:	67e3      	str	r3, [r4, #124]	; 0x7c
    e320:	3201      	adds	r2, #1
    e322:	54a3      	strb	r3, [r4, r2]
    e324:	6623      	str	r3, [r4, #96]	; 0x60
    e326:	3a1a      	subs	r2, #26
    e328:	50a3      	str	r3, [r4, r2]
    e32a:	321b      	adds	r2, #27
    e32c:	54a3      	strb	r3, [r4, r2]
    e32e:	6663      	str	r3, [r4, #100]	; 0x64
    e330:	3a17      	subs	r2, #23
    e332:	50a3      	str	r3, [r4, r2]
    e334:	3218      	adds	r2, #24
    e336:	54a3      	strb	r3, [r4, r2]
    e338:	66a3      	str	r3, [r4, #104]	; 0x68
    e33a:	3a14      	subs	r2, #20
    e33c:	50a3      	str	r3, [r4, r2]
    e33e:	3215      	adds	r2, #21
    e340:	54a3      	strb	r3, [r4, r2]
    e342:	66e3      	str	r3, [r4, #108]	; 0x6c
    e344:	3a11      	subs	r2, #17
    e346:	50a3      	str	r3, [r4, r2]
    e348:	3212      	adds	r2, #18
    e34a:	54a3      	strb	r3, [r4, r2]
    e34c:	6723      	str	r3, [r4, #112]	; 0x70
    e34e:	3a0e      	subs	r2, #14
    e350:	50a3      	str	r3, [r4, r2]
    e352:	320f      	adds	r2, #15
    e354:	54a3      	strb	r3, [r4, r2]
    e356:	6763      	str	r3, [r4, #116]	; 0x74
    e358:	3a0b      	subs	r2, #11
    e35a:	50a3      	str	r3, [r4, r2]
    e35c:	2101      	movs	r1, #1
    e35e:	320c      	adds	r2, #12
    e360:	54a1      	strb	r1, [r4, r2]
    e362:	3201      	adds	r2, #1
    e364:	54a3      	strb	r3, [r4, r2]
    e366:	bd10      	pop	{r4, pc}
    e368:	0000e17d 	.word	0x0000e17d
    e36c:	00018acc 	.word	0x00018acc

0000e370 <tcc_init>:
    e370:	b5f0      	push	{r4, r5, r6, r7, lr}
    e372:	46de      	mov	lr, fp
    e374:	4657      	mov	r7, sl
    e376:	464e      	mov	r6, r9
    e378:	4645      	mov	r5, r8
    e37a:	b5e0      	push	{r5, r6, r7, lr}
    e37c:	b091      	sub	sp, #68	; 0x44
    e37e:	9001      	str	r0, [sp, #4]
    e380:	000c      	movs	r4, r1
    e382:	0015      	movs	r5, r2
    e384:	0008      	movs	r0, r1
    e386:	4bc3      	ldr	r3, [pc, #780]	; (e694 <tcc_init+0x324>)
    e388:	4798      	blx	r3
    e38a:	0003      	movs	r3, r0
    e38c:	0001      	movs	r1, r0
    e38e:	48c2      	ldr	r0, [pc, #776]	; (e698 <tcc_init+0x328>)
    e390:	6a02      	ldr	r2, [r0, #32]
    e392:	009e      	lsls	r6, r3, #2
    e394:	4fc1      	ldr	r7, [pc, #772]	; (e69c <tcc_init+0x32c>)
    e396:	59f7      	ldr	r7, [r6, r7]
    e398:	433a      	orrs	r2, r7
    e39a:	6202      	str	r2, [r0, #32]
    e39c:	6822      	ldr	r2, [r4, #0]
    e39e:	201c      	movs	r0, #28
    e3a0:	0792      	lsls	r2, r2, #30
    e3a2:	d506      	bpl.n	e3b2 <tcc_init+0x42>
    e3a4:	b011      	add	sp, #68	; 0x44
    e3a6:	bc3c      	pop	{r2, r3, r4, r5}
    e3a8:	4690      	mov	r8, r2
    e3aa:	4699      	mov	r9, r3
    e3ac:	46a2      	mov	sl, r4
    e3ae:	46ab      	mov	fp, r5
    e3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3b2:	6822      	ldr	r2, [r4, #0]
    e3b4:	2701      	movs	r7, #1
    e3b6:	4017      	ands	r7, r2
    e3b8:	d1f4      	bne.n	e3a4 <tcc_init+0x34>
    e3ba:	48b9      	ldr	r0, [pc, #740]	; (e6a0 <tcc_init+0x330>)
    e3bc:	5832      	ldr	r2, [r6, r0]
    e3be:	2017      	movs	r0, #23
    e3c0:	682e      	ldr	r6, [r5, #0]
    e3c2:	42b2      	cmp	r2, r6
    e3c4:	d3ee      	bcc.n	e3a4 <tcc_init+0x34>
    e3c6:	686e      	ldr	r6, [r5, #4]
    e3c8:	42b2      	cmp	r2, r6
    e3ca:	d3eb      	bcc.n	e3a4 <tcc_init+0x34>
    e3cc:	69e8      	ldr	r0, [r5, #28]
    e3ce:	4282      	cmp	r2, r0
    e3d0:	d200      	bcs.n	e3d4 <tcc_init+0x64>
    e3d2:	e1b9      	b.n	e748 <tcc_init+0x3d8>
    e3d4:	6a28      	ldr	r0, [r5, #32]
    e3d6:	4282      	cmp	r2, r0
    e3d8:	d200      	bcs.n	e3dc <tcc_init+0x6c>
    e3da:	e1b7      	b.n	e74c <tcc_init+0x3dc>
    e3dc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    e3de:	4282      	cmp	r2, r0
    e3e0:	d200      	bcs.n	e3e4 <tcc_init+0x74>
    e3e2:	e1b5      	b.n	e750 <tcc_init+0x3e0>
    e3e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    e3e6:	4282      	cmp	r2, r0
    e3e8:	d200      	bcs.n	e3ec <tcc_init+0x7c>
    e3ea:	e1b3      	b.n	e754 <tcc_init+0x3e4>
    e3ec:	2298      	movs	r2, #152	; 0x98
    e3ee:	4694      	mov	ip, r2
    e3f0:	44ac      	add	ip, r5
    e3f2:	4662      	mov	r2, ip
    e3f4:	9208      	str	r2, [sp, #32]
    e3f6:	2000      	movs	r0, #0
    e3f8:	e003      	b.n	e402 <tcc_init+0x92>
    e3fa:	3001      	adds	r0, #1
    e3fc:	3201      	adds	r2, #1
    e3fe:	2808      	cmp	r0, #8
    e400:	d008      	beq.n	e414 <tcc_init+0xa4>
    e402:	7816      	ldrb	r6, [r2, #0]
    e404:	2e00      	cmp	r6, #0
    e406:	d0f8      	beq.n	e3fa <tcc_init+0x8a>
    e408:	4ea6      	ldr	r6, [pc, #664]	; (e6a4 <tcc_init+0x334>)
    e40a:	5c76      	ldrb	r6, [r6, r1]
    e40c:	4286      	cmp	r6, r0
    e40e:	dcf4      	bgt.n	e3fa <tcc_init+0x8a>
    e410:	2017      	movs	r0, #23
    e412:	e7c7      	b.n	e3a4 <tcc_init+0x34>
    e414:	2200      	movs	r2, #0
    e416:	9202      	str	r2, [sp, #8]
    e418:	2080      	movs	r0, #128	; 0x80
    e41a:	0440      	lsls	r0, r0, #17
    e41c:	4684      	mov	ip, r0
    e41e:	e002      	b.n	e426 <tcc_init+0xb6>
    e420:	3201      	adds	r2, #1
    e422:	2a04      	cmp	r2, #4
    e424:	d00e      	beq.n	e444 <tcc_init+0xd4>
    e426:	18a8      	adds	r0, r5, r2
    e428:	7c00      	ldrb	r0, [r0, #16]
    e42a:	2801      	cmp	r0, #1
    e42c:	d1f8      	bne.n	e420 <tcc_init+0xb0>
    e42e:	489e      	ldr	r0, [pc, #632]	; (e6a8 <tcc_init+0x338>)
    e430:	5c40      	ldrb	r0, [r0, r1]
    e432:	4290      	cmp	r0, r2
    e434:	da00      	bge.n	e438 <tcc_init+0xc8>
    e436:	e18f      	b.n	e758 <tcc_init+0x3e8>
    e438:	4660      	mov	r0, ip
    e43a:	4090      	lsls	r0, r2
    e43c:	9e02      	ldr	r6, [sp, #8]
    e43e:	4306      	orrs	r6, r0
    e440:	9602      	str	r6, [sp, #8]
    e442:	e7ed      	b.n	e420 <tcc_init+0xb0>
    e444:	329d      	adds	r2, #157	; 0x9d
    e446:	5caa      	ldrb	r2, [r5, r2]
    e448:	2a00      	cmp	r2, #0
    e44a:	d004      	beq.n	e456 <tcc_init+0xe6>
    e44c:	2280      	movs	r2, #128	; 0x80
    e44e:	0112      	lsls	r2, r2, #4
    e450:	9902      	ldr	r1, [sp, #8]
    e452:	4311      	orrs	r1, r2
    e454:	9102      	str	r1, [sp, #8]
    e456:	7a2a      	ldrb	r2, [r5, #8]
    e458:	1e51      	subs	r1, r2, #1
    e45a:	418a      	sbcs	r2, r1
    e45c:	0092      	lsls	r2, r2, #2
    e45e:	9206      	str	r2, [sp, #24]
    e460:	7a6a      	ldrb	r2, [r5, #9]
    e462:	2a01      	cmp	r2, #1
    e464:	d022      	beq.n	e4ac <tcc_init+0x13c>
    e466:	4a90      	ldr	r2, [pc, #576]	; (e6a8 <tcc_init+0x338>)
    e468:	5cd2      	ldrb	r2, [r2, r3]
    e46a:	0011      	movs	r1, r2
    e46c:	9205      	str	r2, [sp, #20]
    e46e:	2235      	movs	r2, #53	; 0x35
    e470:	5caa      	ldrb	r2, [r5, r2]
    e472:	428a      	cmp	r2, r1
    e474:	d300      	bcc.n	e478 <tcc_init+0x108>
    e476:	e179      	b.n	e76c <tcc_init+0x3fc>
    e478:	212c      	movs	r1, #44	; 0x2c
    e47a:	5c69      	ldrb	r1, [r5, r1]
    e47c:	290f      	cmp	r1, #15
    e47e:	d900      	bls.n	e482 <tcc_init+0x112>
    e480:	e174      	b.n	e76c <tcc_init+0x3fc>
    e482:	7b28      	ldrb	r0, [r5, #12]
    e484:	900a      	str	r0, [sp, #40]	; 0x28
    e486:	7ae8      	ldrb	r0, [r5, #11]
    e488:	900b      	str	r0, [sp, #44]	; 0x2c
    e48a:	202d      	movs	r0, #45	; 0x2d
    e48c:	4682      	mov	sl, r0
    e48e:	44aa      	add	sl, r5
    e490:	2000      	movs	r0, #0
    e492:	9704      	str	r7, [sp, #16]
    e494:	ae0e      	add	r6, sp, #56	; 0x38
    e496:	9607      	str	r6, [sp, #28]
    e498:	26c0      	movs	r6, #192	; 0xc0
    e49a:	0136      	lsls	r6, r6, #4
    e49c:	46b1      	mov	r9, r6
    e49e:	4684      	mov	ip, r0
    e4a0:	46a0      	mov	r8, r4
    e4a2:	0028      	movs	r0, r5
    e4a4:	4655      	mov	r5, sl
    e4a6:	9309      	str	r3, [sp, #36]	; 0x24
    e4a8:	4682      	mov	sl, r0
    e4aa:	e035      	b.n	e518 <tcc_init+0x1a8>
    e4ac:	9906      	ldr	r1, [sp, #24]
    e4ae:	4311      	orrs	r1, r2
    e4b0:	9106      	str	r1, [sp, #24]
    e4b2:	e7d8      	b.n	e466 <tcc_init+0xf6>
    e4b4:	0292      	lsls	r2, r2, #10
    e4b6:	464f      	mov	r7, r9
    e4b8:	403a      	ands	r2, r7
    e4ba:	430a      	orrs	r2, r1
    e4bc:	7919      	ldrb	r1, [r3, #4]
    e4be:	468b      	mov	fp, r1
    e4c0:	2103      	movs	r1, #3
    e4c2:	465f      	mov	r7, fp
    e4c4:	4039      	ands	r1, r7
    e4c6:	430a      	orrs	r2, r1
    e4c8:	4316      	orrs	r6, r2
    e4ca:	795a      	ldrb	r2, [r3, #5]
    e4cc:	0152      	lsls	r2, r2, #5
    e4ce:	2160      	movs	r1, #96	; 0x60
    e4d0:	400a      	ands	r2, r1
    e4d2:	4332      	orrs	r2, r6
    e4d4:	7999      	ldrb	r1, [r3, #6]
    e4d6:	0209      	lsls	r1, r1, #8
    e4d8:	26c0      	movs	r6, #192	; 0xc0
    e4da:	00b6      	lsls	r6, r6, #2
    e4dc:	400e      	ands	r6, r1
    e4de:	4316      	orrs	r6, r2
    e4e0:	79da      	ldrb	r2, [r3, #7]
    e4e2:	0312      	lsls	r2, r2, #12
    e4e4:	21e0      	movs	r1, #224	; 0xe0
    e4e6:	01c9      	lsls	r1, r1, #7
    e4e8:	400a      	ands	r2, r1
    e4ea:	4316      	orrs	r6, r2
    e4ec:	4334      	orrs	r4, r6
    e4ee:	9a03      	ldr	r2, [sp, #12]
    e4f0:	4314      	orrs	r4, r2
    e4f2:	4320      	orrs	r0, r4
    e4f4:	4662      	mov	r2, ip
    e4f6:	9907      	ldr	r1, [sp, #28]
    e4f8:	5050      	str	r0, [r2, r1]
    e4fa:	2a04      	cmp	r2, #4
    e4fc:	d02a      	beq.n	e554 <tcc_init+0x1e4>
    e4fe:	7c9a      	ldrb	r2, [r3, #18]
    e500:	9905      	ldr	r1, [sp, #20]
    e502:	4291      	cmp	r1, r2
    e504:	d800      	bhi.n	e508 <tcc_init+0x198>
    e506:	e131      	b.n	e76c <tcc_init+0x3fc>
    e508:	7a59      	ldrb	r1, [r3, #9]
    e50a:	350a      	adds	r5, #10
    e50c:	2304      	movs	r3, #4
    e50e:	469b      	mov	fp, r3
    e510:	44dc      	add	ip, fp
    e512:	290f      	cmp	r1, #15
    e514:	d900      	bls.n	e518 <tcc_init+0x1a8>
    e516:	e129      	b.n	e76c <tcc_init+0x3fc>
    e518:	0609      	lsls	r1, r1, #24
    e51a:	23f0      	movs	r3, #240	; 0xf0
    e51c:	051b      	lsls	r3, r3, #20
    e51e:	4019      	ands	r1, r3
    e520:	002b      	movs	r3, r5
    e522:	782e      	ldrb	r6, [r5, #0]
    e524:	0436      	lsls	r6, r6, #16
    e526:	20ff      	movs	r0, #255	; 0xff
    e528:	0400      	lsls	r0, r0, #16
    e52a:	4006      	ands	r6, r0
    e52c:	7868      	ldrb	r0, [r5, #1]
    e52e:	2480      	movs	r4, #128	; 0x80
    e530:	2800      	cmp	r0, #0
    e532:	d100      	bne.n	e536 <tcc_init+0x1c6>
    e534:	9c04      	ldr	r4, [sp, #16]
    e536:	7898      	ldrb	r0, [r3, #2]
    e538:	2708      	movs	r7, #8
    e53a:	9703      	str	r7, [sp, #12]
    e53c:	2800      	cmp	r0, #0
    e53e:	d101      	bne.n	e544 <tcc_init+0x1d4>
    e540:	9804      	ldr	r0, [sp, #16]
    e542:	9003      	str	r0, [sp, #12]
    e544:	78d8      	ldrb	r0, [r3, #3]
    e546:	4683      	mov	fp, r0
    e548:	2010      	movs	r0, #16
    e54a:	465f      	mov	r7, fp
    e54c:	2f00      	cmp	r7, #0
    e54e:	d1b1      	bne.n	e4b4 <tcc_init+0x144>
    e550:	9804      	ldr	r0, [sp, #16]
    e552:	e7af      	b.n	e4b4 <tcc_init+0x144>
    e554:	4644      	mov	r4, r8
    e556:	4655      	mov	r5, sl
    e558:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e55a:	4a52      	ldr	r2, [pc, #328]	; (e6a4 <tcc_init+0x334>)
    e55c:	5cd2      	ldrb	r2, [r2, r3]
    e55e:	4691      	mov	r9, r2
    e560:	4651      	mov	r1, sl
    e562:	3150      	adds	r1, #80	; 0x50
    e564:	4650      	mov	r0, sl
    e566:	3041      	adds	r0, #65	; 0x41
    e568:	2700      	movs	r7, #0
    e56a:	2200      	movs	r2, #0
    e56c:	2601      	movs	r6, #1
    e56e:	46b2      	mov	sl, r6
    e570:	2602      	movs	r6, #2
    e572:	36ff      	adds	r6, #255	; 0xff
    e574:	46b3      	mov	fp, r6
    e576:	2680      	movs	r6, #128	; 0x80
    e578:	0276      	lsls	r6, r6, #9
    e57a:	46b0      	mov	r8, r6
    e57c:	46a4      	mov	ip, r4
    e57e:	001c      	movs	r4, r3
    e580:	464b      	mov	r3, r9
    e582:	e00f      	b.n	e5a4 <tcc_init+0x234>
    e584:	7806      	ldrb	r6, [r0, #0]
    e586:	2e00      	cmp	r6, #0
    e588:	d007      	beq.n	e59a <tcc_init+0x22a>
    e58a:	4293      	cmp	r3, r2
    e58c:	d800      	bhi.n	e590 <tcc_init+0x220>
    e58e:	e0e7      	b.n	e760 <tcc_init+0x3f0>
    e590:	2e02      	cmp	r6, #2
    e592:	d014      	beq.n	e5be <tcc_init+0x24e>
    e594:	4656      	mov	r6, sl
    e596:	4096      	lsls	r6, r2
    e598:	4337      	orrs	r7, r6
    e59a:	3201      	adds	r2, #1
    e59c:	3101      	adds	r1, #1
    e59e:	3002      	adds	r0, #2
    e5a0:	2a08      	cmp	r2, #8
    e5a2:	d010      	beq.n	e5c6 <tcc_init+0x256>
    e5a4:	780e      	ldrb	r6, [r1, #0]
    e5a6:	2e00      	cmp	r6, #0
    e5a8:	d0ec      	beq.n	e584 <tcc_init+0x214>
    e5aa:	4293      	cmp	r3, r2
    e5ac:	d800      	bhi.n	e5b0 <tcc_init+0x240>
    e5ae:	e0d5      	b.n	e75c <tcc_init+0x3ec>
    e5b0:	4646      	mov	r6, r8
    e5b2:	4096      	lsls	r6, r2
    e5b4:	4337      	orrs	r7, r6
    e5b6:	7806      	ldrb	r6, [r0, #0]
    e5b8:	2e00      	cmp	r6, #0
    e5ba:	d1e9      	bne.n	e590 <tcc_init+0x220>
    e5bc:	e7ed      	b.n	e59a <tcc_init+0x22a>
    e5be:	465e      	mov	r6, fp
    e5c0:	4096      	lsls	r6, r2
    e5c2:	4337      	orrs	r7, r6
    e5c4:	e7e9      	b.n	e59a <tcc_init+0x22a>
    e5c6:	4699      	mov	r9, r3
    e5c8:	0023      	movs	r3, r4
    e5ca:	4664      	mov	r4, ip
    e5cc:	7e6a      	ldrb	r2, [r5, #25]
    e5ce:	0112      	lsls	r2, r2, #4
    e5d0:	2130      	movs	r1, #48	; 0x30
    e5d2:	4011      	ands	r1, r2
    e5d4:	7e28      	ldrb	r0, [r5, #24]
    e5d6:	2207      	movs	r2, #7
    e5d8:	4002      	ands	r2, r0
    e5da:	4311      	orrs	r1, r2
    e5dc:	2200      	movs	r2, #0
    e5de:	2080      	movs	r0, #128	; 0x80
    e5e0:	0240      	lsls	r0, r0, #9
    e5e2:	000e      	movs	r6, r1
    e5e4:	e002      	b.n	e5ec <tcc_init+0x27c>
    e5e6:	3201      	adds	r2, #1
    e5e8:	2a04      	cmp	r2, #4
    e5ea:	d00b      	beq.n	e604 <tcc_init+0x294>
    e5ec:	18a9      	adds	r1, r5, r2
    e5ee:	7d09      	ldrb	r1, [r1, #20]
    e5f0:	2900      	cmp	r1, #0
    e5f2:	d0f8      	beq.n	e5e6 <tcc_init+0x276>
    e5f4:	9905      	ldr	r1, [sp, #20]
    e5f6:	4291      	cmp	r1, r2
    e5f8:	dc00      	bgt.n	e5fc <tcc_init+0x28c>
    e5fa:	e0b3      	b.n	e764 <tcc_init+0x3f4>
    e5fc:	0001      	movs	r1, r0
    e5fe:	4091      	lsls	r1, r2
    e600:	430e      	orrs	r6, r1
    e602:	e7f0      	b.n	e5e6 <tcc_init+0x276>
    e604:	46b2      	mov	sl, r6
    e606:	9801      	ldr	r0, [sp, #4]
    e608:	0002      	movs	r2, r0
    e60a:	3204      	adds	r2, #4
    e60c:	3034      	adds	r0, #52	; 0x34
    e60e:	2100      	movs	r1, #0
    e610:	c202      	stmia	r2!, {r1}
    e612:	4282      	cmp	r2, r0
    e614:	d1fc      	bne.n	e610 <tcc_init+0x2a0>
    e616:	2200      	movs	r2, #0
    e618:	9801      	ldr	r0, [sp, #4]
    e61a:	6342      	str	r2, [r0, #52]	; 0x34
    e61c:	6382      	str	r2, [r0, #56]	; 0x38
    e61e:	0099      	lsls	r1, r3, #2
    e620:	4a22      	ldr	r2, [pc, #136]	; (e6ac <tcc_init+0x33c>)
    e622:	5088      	str	r0, [r1, r2]
    e624:	6004      	str	r4, [r0, #0]
    e626:	22a0      	movs	r2, #160	; 0xa0
    e628:	5ca9      	ldrb	r1, [r5, r2]
    e62a:	3a64      	subs	r2, #100	; 0x64
    e62c:	5481      	strb	r1, [r0, r2]
    e62e:	a90d      	add	r1, sp, #52	; 0x34
    e630:	7aaa      	ldrb	r2, [r5, #10]
    e632:	700a      	strb	r2, [r1, #0]
    e634:	4a1e      	ldr	r2, [pc, #120]	; (e6b0 <tcc_init+0x340>)
    e636:	5cd6      	ldrb	r6, [r2, r3]
    e638:	0030      	movs	r0, r6
    e63a:	4b1e      	ldr	r3, [pc, #120]	; (e6b4 <tcc_init+0x344>)
    e63c:	4798      	blx	r3
    e63e:	0030      	movs	r0, r6
    e640:	4b1d      	ldr	r3, [pc, #116]	; (e6b8 <tcc_init+0x348>)
    e642:	4798      	blx	r3
    e644:	464b      	mov	r3, r9
    e646:	2b00      	cmp	r3, #0
    e648:	dd3c      	ble.n	e6c4 <tcc_init+0x354>
    e64a:	002e      	movs	r6, r5
    e64c:	3658      	adds	r6, #88	; 0x58
    e64e:	3398      	adds	r3, #152	; 0x98
    e650:	4698      	mov	r8, r3
    e652:	44a8      	add	r8, r5
    e654:	2301      	movs	r3, #1
    e656:	4699      	mov	r9, r3
    e658:	46ab      	mov	fp, r5
    e65a:	4645      	mov	r5, r8
    e65c:	46a0      	mov	r8, r4
    e65e:	9c08      	ldr	r4, [sp, #32]
    e660:	e003      	b.n	e66a <tcc_init+0x2fa>
    e662:	3401      	adds	r4, #1
    e664:	3604      	adds	r6, #4
    e666:	42ac      	cmp	r4, r5
    e668:	d02a      	beq.n	e6c0 <tcc_init+0x350>
    e66a:	7823      	ldrb	r3, [r4, #0]
    e66c:	2b00      	cmp	r3, #0
    e66e:	d0f8      	beq.n	e662 <tcc_init+0x2f2>
    e670:	ab0c      	add	r3, sp, #48	; 0x30
    e672:	464a      	mov	r2, r9
    e674:	709a      	strb	r2, [r3, #2]
    e676:	2300      	movs	r3, #0
    e678:	aa0c      	add	r2, sp, #48	; 0x30
    e67a:	70d3      	strb	r3, [r2, #3]
    e67c:	0013      	movs	r3, r2
    e67e:	2220      	movs	r2, #32
    e680:	18b2      	adds	r2, r6, r2
    e682:	7812      	ldrb	r2, [r2, #0]
    e684:	701a      	strb	r2, [r3, #0]
    e686:	464a      	mov	r2, r9
    e688:	705a      	strb	r2, [r3, #1]
    e68a:	7830      	ldrb	r0, [r6, #0]
    e68c:	0019      	movs	r1, r3
    e68e:	4b0b      	ldr	r3, [pc, #44]	; (e6bc <tcc_init+0x34c>)
    e690:	4798      	blx	r3
    e692:	e7e6      	b.n	e662 <tcc_init+0x2f2>
    e694:	0000e17d 	.word	0x0000e17d
    e698:	40000400 	.word	0x40000400
    e69c:	00018ab8 	.word	0x00018ab8
    e6a0:	00018acc 	.word	0x00018acc
    e6a4:	00018ad8 	.word	0x00018ad8
    e6a8:	00018ac4 	.word	0x00018ac4
    e6ac:	20005be8 	.word	0x20005be8
    e6b0:	00018ac8 	.word	0x00018ac8
    e6b4:	0000dff5 	.word	0x0000dff5
    e6b8:	0000df69 	.word	0x0000df69
    e6bc:	0000e11d 	.word	0x0000e11d
    e6c0:	4644      	mov	r4, r8
    e6c2:	465d      	mov	r5, fp
    e6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e6c6:	031b      	lsls	r3, r3, #12
    e6c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e6ca:	0212      	lsls	r2, r2, #8
    e6cc:	4313      	orrs	r3, r2
    e6ce:	9a02      	ldr	r2, [sp, #8]
    e6d0:	4313      	orrs	r3, r2
    e6d2:	6023      	str	r3, [r4, #0]
    e6d4:	2204      	movs	r2, #4
    e6d6:	68a3      	ldr	r3, [r4, #8]
    e6d8:	421a      	tst	r2, r3
    e6da:	d1fc      	bne.n	e6d6 <tcc_init+0x366>
    e6dc:	23ff      	movs	r3, #255	; 0xff
    e6de:	7123      	strb	r3, [r4, #4]
    e6e0:	2204      	movs	r2, #4
    e6e2:	68a3      	ldr	r3, [r4, #8]
    e6e4:	421a      	tst	r2, r3
    e6e6:	d1fc      	bne.n	e6e2 <tcc_init+0x372>
    e6e8:	466b      	mov	r3, sp
    e6ea:	7e1b      	ldrb	r3, [r3, #24]
    e6ec:	7163      	strb	r3, [r4, #5]
    e6ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e6f0:	60e3      	str	r3, [r4, #12]
    e6f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e6f4:	6123      	str	r3, [r4, #16]
    e6f6:	61a7      	str	r7, [r4, #24]
    e6f8:	4a1d      	ldr	r2, [pc, #116]	; (e770 <tcc_init+0x400>)
    e6fa:	68a3      	ldr	r3, [r4, #8]
    e6fc:	4213      	tst	r3, r2
    e6fe:	d1fc      	bne.n	e6fa <tcc_init+0x38a>
    e700:	4653      	mov	r3, sl
    e702:	63e3      	str	r3, [r4, #60]	; 0x3c
    e704:	2210      	movs	r2, #16
    e706:	68a3      	ldr	r3, [r4, #8]
    e708:	421a      	tst	r2, r3
    e70a:	d1fc      	bne.n	e706 <tcc_init+0x396>
    e70c:	682b      	ldr	r3, [r5, #0]
    e70e:	6363      	str	r3, [r4, #52]	; 0x34
    e710:	4a18      	ldr	r2, [pc, #96]	; (e774 <tcc_init+0x404>)
    e712:	68a3      	ldr	r3, [r4, #8]
    e714:	4213      	tst	r3, r2
    e716:	d1fc      	bne.n	e712 <tcc_init+0x3a2>
    e718:	686b      	ldr	r3, [r5, #4]
    e71a:	6423      	str	r3, [r4, #64]	; 0x40
    e71c:	9805      	ldr	r0, [sp, #20]
    e71e:	2800      	cmp	r0, #0
    e720:	dd22      	ble.n	e768 <tcc_init+0x3f8>
    e722:	351c      	adds	r5, #28
    e724:	2100      	movs	r1, #0
    e726:	4e14      	ldr	r6, [pc, #80]	; (e778 <tcc_init+0x408>)
    e728:	0032      	movs	r2, r6
    e72a:	408a      	lsls	r2, r1
    e72c:	68a3      	ldr	r3, [r4, #8]
    e72e:	421a      	tst	r2, r3
    e730:	d1fc      	bne.n	e72c <tcc_init+0x3bc>
    e732:	cd04      	ldmia	r5!, {r2}
    e734:	000b      	movs	r3, r1
    e736:	3310      	adds	r3, #16
    e738:	009b      	lsls	r3, r3, #2
    e73a:	18e3      	adds	r3, r4, r3
    e73c:	605a      	str	r2, [r3, #4]
    e73e:	3101      	adds	r1, #1
    e740:	4288      	cmp	r0, r1
    e742:	dcf1      	bgt.n	e728 <tcc_init+0x3b8>
    e744:	2000      	movs	r0, #0
    e746:	e62d      	b.n	e3a4 <tcc_init+0x34>
    e748:	2017      	movs	r0, #23
    e74a:	e62b      	b.n	e3a4 <tcc_init+0x34>
    e74c:	2017      	movs	r0, #23
    e74e:	e629      	b.n	e3a4 <tcc_init+0x34>
    e750:	2017      	movs	r0, #23
    e752:	e627      	b.n	e3a4 <tcc_init+0x34>
    e754:	2017      	movs	r0, #23
    e756:	e625      	b.n	e3a4 <tcc_init+0x34>
    e758:	2017      	movs	r0, #23
    e75a:	e623      	b.n	e3a4 <tcc_init+0x34>
    e75c:	2017      	movs	r0, #23
    e75e:	e621      	b.n	e3a4 <tcc_init+0x34>
    e760:	2017      	movs	r0, #23
    e762:	e61f      	b.n	e3a4 <tcc_init+0x34>
    e764:	2017      	movs	r0, #23
    e766:	e61d      	b.n	e3a4 <tcc_init+0x34>
    e768:	2000      	movs	r0, #0
    e76a:	e61b      	b.n	e3a4 <tcc_init+0x34>
    e76c:	2017      	movs	r0, #23
    e76e:	e619      	b.n	e3a4 <tcc_init+0x34>
    e770:	00020040 	.word	0x00020040
    e774:	00040080 	.word	0x00040080
    e778:	00080100 	.word	0x00080100

0000e77c <tcc_set_compare_value>:
    e77c:	b510      	push	{r4, lr}
    e77e:	233c      	movs	r3, #60	; 0x3c
    e780:	5cc3      	ldrb	r3, [r0, r3]
    e782:	4c01      	ldr	r4, [pc, #4]	; (e788 <tcc_set_compare_value+0xc>)
    e784:	47a0      	blx	r4
    e786:	bd10      	pop	{r4, pc}
    e788:	0000e1b1 	.word	0x0000e1b1

0000e78c <tcc_register_callback>:
    e78c:	0092      	lsls	r2, r2, #2
    e78e:	1883      	adds	r3, r0, r2
    e790:	6059      	str	r1, [r3, #4]
    e792:	4b03      	ldr	r3, [pc, #12]	; (e7a0 <tcc_register_callback+0x14>)
    e794:	58d3      	ldr	r3, [r2, r3]
    e796:	6b42      	ldr	r2, [r0, #52]	; 0x34
    e798:	4313      	orrs	r3, r2
    e79a:	6343      	str	r3, [r0, #52]	; 0x34
    e79c:	2000      	movs	r0, #0
    e79e:	4770      	bx	lr
    e7a0:	00018adc 	.word	0x00018adc

0000e7a4 <tcc_enable_callback>:
    e7a4:	b570      	push	{r4, r5, r6, lr}
    e7a6:	0004      	movs	r4, r0
    e7a8:	000d      	movs	r5, r1
    e7aa:	6800      	ldr	r0, [r0, #0]
    e7ac:	4b09      	ldr	r3, [pc, #36]	; (e7d4 <tcc_enable_callback+0x30>)
    e7ae:	4798      	blx	r3
    e7b0:	4b09      	ldr	r3, [pc, #36]	; (e7d8 <tcc_enable_callback+0x34>)
    e7b2:	5c1b      	ldrb	r3, [r3, r0]
    e7b4:	221f      	movs	r2, #31
    e7b6:	401a      	ands	r2, r3
    e7b8:	2301      	movs	r3, #1
    e7ba:	4093      	lsls	r3, r2
    e7bc:	4a07      	ldr	r2, [pc, #28]	; (e7dc <tcc_enable_callback+0x38>)
    e7be:	6013      	str	r3, [r2, #0]
    e7c0:	00ad      	lsls	r5, r5, #2
    e7c2:	4b07      	ldr	r3, [pc, #28]	; (e7e0 <tcc_enable_callback+0x3c>)
    e7c4:	58ea      	ldr	r2, [r5, r3]
    e7c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e7c8:	4313      	orrs	r3, r2
    e7ca:	63a3      	str	r3, [r4, #56]	; 0x38
    e7cc:	6823      	ldr	r3, [r4, #0]
    e7ce:	629a      	str	r2, [r3, #40]	; 0x28
    e7d0:	bd70      	pop	{r4, r5, r6, pc}
    e7d2:	46c0      	nop			; (mov r8, r8)
    e7d4:	0000e17d 	.word	0x0000e17d
    e7d8:	00018b0c 	.word	0x00018b0c
    e7dc:	e000e100 	.word	0xe000e100
    e7e0:	00018adc 	.word	0x00018adc

0000e7e4 <_tcc_interrupt_handler>:
    e7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7e6:	46c6      	mov	lr, r8
    e7e8:	b500      	push	{lr}
    e7ea:	0080      	lsls	r0, r0, #2
    e7ec:	4b0e      	ldr	r3, [pc, #56]	; (e828 <_tcc_interrupt_handler+0x44>)
    e7ee:	58c7      	ldr	r7, [r0, r3]
    e7f0:	683b      	ldr	r3, [r7, #0]
    e7f2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    e7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e7f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e7f8:	4013      	ands	r3, r2
    e7fa:	401e      	ands	r6, r3
    e7fc:	2400      	movs	r4, #0
    e7fe:	4b0b      	ldr	r3, [pc, #44]	; (e82c <_tcc_interrupt_handler+0x48>)
    e800:	4698      	mov	r8, r3
    e802:	e002      	b.n	e80a <_tcc_interrupt_handler+0x26>
    e804:	3404      	adds	r4, #4
    e806:	2c30      	cmp	r4, #48	; 0x30
    e808:	d00a      	beq.n	e820 <_tcc_interrupt_handler+0x3c>
    e80a:	4643      	mov	r3, r8
    e80c:	58e5      	ldr	r5, [r4, r3]
    e80e:	4235      	tst	r5, r6
    e810:	d0f8      	beq.n	e804 <_tcc_interrupt_handler+0x20>
    e812:	193b      	adds	r3, r7, r4
    e814:	685b      	ldr	r3, [r3, #4]
    e816:	0038      	movs	r0, r7
    e818:	4798      	blx	r3
    e81a:	683b      	ldr	r3, [r7, #0]
    e81c:	62dd      	str	r5, [r3, #44]	; 0x2c
    e81e:	e7f1      	b.n	e804 <_tcc_interrupt_handler+0x20>
    e820:	bc04      	pop	{r2}
    e822:	4690      	mov	r8, r2
    e824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e826:	46c0      	nop			; (mov r8, r8)
    e828:	20005be8 	.word	0x20005be8
    e82c:	00018adc 	.word	0x00018adc

0000e830 <TCC0_Handler>:
    e830:	b510      	push	{r4, lr}
    e832:	2000      	movs	r0, #0
    e834:	4b01      	ldr	r3, [pc, #4]	; (e83c <TCC0_Handler+0xc>)
    e836:	4798      	blx	r3
    e838:	bd10      	pop	{r4, pc}
    e83a:	46c0      	nop			; (mov r8, r8)
    e83c:	0000e7e5 	.word	0x0000e7e5

0000e840 <TCC1_Handler>:
    e840:	b510      	push	{r4, lr}
    e842:	2001      	movs	r0, #1
    e844:	4b01      	ldr	r3, [pc, #4]	; (e84c <TCC1_Handler+0xc>)
    e846:	4798      	blx	r3
    e848:	bd10      	pop	{r4, pc}
    e84a:	46c0      	nop			; (mov r8, r8)
    e84c:	0000e7e5 	.word	0x0000e7e5

0000e850 <TCC2_Handler>:
    e850:	b510      	push	{r4, lr}
    e852:	2002      	movs	r0, #2
    e854:	4b01      	ldr	r3, [pc, #4]	; (e85c <TCC2_Handler+0xc>)
    e856:	4798      	blx	r3
    e858:	bd10      	pop	{r4, pc}
    e85a:	46c0      	nop			; (mov r8, r8)
    e85c:	0000e7e5 	.word	0x0000e7e5

0000e860 <Dummy_Handler>:
    e860:	2004      	movs	r0, #4
    e862:	4671      	mov	r1, lr
    e864:	4208      	tst	r0, r1
    e866:	d002      	beq.n	e86e <_MSP>
    e868:	f3ef 8009 	mrs	r0, PSP
    e86c:	e001      	b.n	e872 <_HALT>

0000e86e <_MSP>:
    e86e:	f3ef 8008 	mrs	r0, MSP

0000e872 <_HALT>:
    e872:	6941      	ldr	r1, [r0, #20]
    e874:	e074      	b.n	e960 <HardFault_HandlerC>
    e876:	be00      	bkpt	0x0000
    e878:	4770      	bx	lr
	...

0000e87c <Reset_Handler>:
    e87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e87e:	4a2a      	ldr	r2, [pc, #168]	; (e928 <Reset_Handler+0xac>)
    e880:	4b2a      	ldr	r3, [pc, #168]	; (e92c <Reset_Handler+0xb0>)
    e882:	429a      	cmp	r2, r3
    e884:	d011      	beq.n	e8aa <Reset_Handler+0x2e>
    e886:	001a      	movs	r2, r3
    e888:	4b29      	ldr	r3, [pc, #164]	; (e930 <Reset_Handler+0xb4>)
    e88a:	429a      	cmp	r2, r3
    e88c:	d20d      	bcs.n	e8aa <Reset_Handler+0x2e>
    e88e:	4a29      	ldr	r2, [pc, #164]	; (e934 <Reset_Handler+0xb8>)
    e890:	3303      	adds	r3, #3
    e892:	1a9b      	subs	r3, r3, r2
    e894:	089b      	lsrs	r3, r3, #2
    e896:	3301      	adds	r3, #1
    e898:	009b      	lsls	r3, r3, #2
    e89a:	2200      	movs	r2, #0
    e89c:	4823      	ldr	r0, [pc, #140]	; (e92c <Reset_Handler+0xb0>)
    e89e:	4922      	ldr	r1, [pc, #136]	; (e928 <Reset_Handler+0xac>)
    e8a0:	588c      	ldr	r4, [r1, r2]
    e8a2:	5084      	str	r4, [r0, r2]
    e8a4:	3204      	adds	r2, #4
    e8a6:	429a      	cmp	r2, r3
    e8a8:	d1fa      	bne.n	e8a0 <Reset_Handler+0x24>
    e8aa:	4a23      	ldr	r2, [pc, #140]	; (e938 <Reset_Handler+0xbc>)
    e8ac:	4b23      	ldr	r3, [pc, #140]	; (e93c <Reset_Handler+0xc0>)
    e8ae:	429a      	cmp	r2, r3
    e8b0:	d20a      	bcs.n	e8c8 <Reset_Handler+0x4c>
    e8b2:	43d3      	mvns	r3, r2
    e8b4:	4921      	ldr	r1, [pc, #132]	; (e93c <Reset_Handler+0xc0>)
    e8b6:	185b      	adds	r3, r3, r1
    e8b8:	2103      	movs	r1, #3
    e8ba:	438b      	bics	r3, r1
    e8bc:	3304      	adds	r3, #4
    e8be:	189b      	adds	r3, r3, r2
    e8c0:	2100      	movs	r1, #0
    e8c2:	c202      	stmia	r2!, {r1}
    e8c4:	4293      	cmp	r3, r2
    e8c6:	d1fc      	bne.n	e8c2 <Reset_Handler+0x46>
    e8c8:	4a1d      	ldr	r2, [pc, #116]	; (e940 <Reset_Handler+0xc4>)
    e8ca:	21ff      	movs	r1, #255	; 0xff
    e8cc:	4b1d      	ldr	r3, [pc, #116]	; (e944 <Reset_Handler+0xc8>)
    e8ce:	438b      	bics	r3, r1
    e8d0:	6093      	str	r3, [r2, #8]
    e8d2:	39fd      	subs	r1, #253	; 0xfd
    e8d4:	2390      	movs	r3, #144	; 0x90
    e8d6:	005b      	lsls	r3, r3, #1
    e8d8:	4a1b      	ldr	r2, [pc, #108]	; (e948 <Reset_Handler+0xcc>)
    e8da:	50d1      	str	r1, [r2, r3]
    e8dc:	4a1b      	ldr	r2, [pc, #108]	; (e94c <Reset_Handler+0xd0>)
    e8de:	78d3      	ldrb	r3, [r2, #3]
    e8e0:	2503      	movs	r5, #3
    e8e2:	43ab      	bics	r3, r5
    e8e4:	2402      	movs	r4, #2
    e8e6:	4323      	orrs	r3, r4
    e8e8:	70d3      	strb	r3, [r2, #3]
    e8ea:	78d3      	ldrb	r3, [r2, #3]
    e8ec:	270c      	movs	r7, #12
    e8ee:	43bb      	bics	r3, r7
    e8f0:	2608      	movs	r6, #8
    e8f2:	4333      	orrs	r3, r6
    e8f4:	70d3      	strb	r3, [r2, #3]
    e8f6:	4b16      	ldr	r3, [pc, #88]	; (e950 <Reset_Handler+0xd4>)
    e8f8:	7b98      	ldrb	r0, [r3, #14]
    e8fa:	2230      	movs	r2, #48	; 0x30
    e8fc:	4390      	bics	r0, r2
    e8fe:	2220      	movs	r2, #32
    e900:	4310      	orrs	r0, r2
    e902:	7398      	strb	r0, [r3, #14]
    e904:	7b99      	ldrb	r1, [r3, #14]
    e906:	43b9      	bics	r1, r7
    e908:	4331      	orrs	r1, r6
    e90a:	7399      	strb	r1, [r3, #14]
    e90c:	7b9a      	ldrb	r2, [r3, #14]
    e90e:	43aa      	bics	r2, r5
    e910:	4322      	orrs	r2, r4
    e912:	739a      	strb	r2, [r3, #14]
    e914:	4a0f      	ldr	r2, [pc, #60]	; (e954 <Reset_Handler+0xd8>)
    e916:	6853      	ldr	r3, [r2, #4]
    e918:	2180      	movs	r1, #128	; 0x80
    e91a:	430b      	orrs	r3, r1
    e91c:	6053      	str	r3, [r2, #4]
    e91e:	4b0e      	ldr	r3, [pc, #56]	; (e958 <Reset_Handler+0xdc>)
    e920:	4798      	blx	r3
    e922:	4b0e      	ldr	r3, [pc, #56]	; (e95c <Reset_Handler+0xe0>)
    e924:	4798      	blx	r3
    e926:	e7fe      	b.n	e926 <Reset_Handler+0xaa>
    e928:	0001964c 	.word	0x0001964c
    e92c:	20000000 	.word	0x20000000
    e930:	200002d0 	.word	0x200002d0
    e934:	20000004 	.word	0x20000004
    e938:	200002d0 	.word	0x200002d0
    e93c:	20005d58 	.word	0x20005d58
    e940:	e000ed00 	.word	0xe000ed00
    e944:	00000000 	.word	0x00000000
    e948:	41007000 	.word	0x41007000
    e94c:	41005000 	.word	0x41005000
    e950:	41004800 	.word	0x41004800
    e954:	41004000 	.word	0x41004000
    e958:	000141d5 	.word	0x000141d5
    e95c:	00011ba5 	.word	0x00011ba5

0000e960 <HardFault_HandlerC>:
    e960:	b08e      	sub	sp, #56	; 0x38
    e962:	6803      	ldr	r3, [r0, #0]
    e964:	930d      	str	r3, [sp, #52]	; 0x34
    e966:	6843      	ldr	r3, [r0, #4]
    e968:	930c      	str	r3, [sp, #48]	; 0x30
    e96a:	6883      	ldr	r3, [r0, #8]
    e96c:	930b      	str	r3, [sp, #44]	; 0x2c
    e96e:	68c3      	ldr	r3, [r0, #12]
    e970:	930a      	str	r3, [sp, #40]	; 0x28
    e972:	6903      	ldr	r3, [r0, #16]
    e974:	9309      	str	r3, [sp, #36]	; 0x24
    e976:	6943      	ldr	r3, [r0, #20]
    e978:	9308      	str	r3, [sp, #32]
    e97a:	6983      	ldr	r3, [r0, #24]
    e97c:	9307      	str	r3, [sp, #28]
    e97e:	69c3      	ldr	r3, [r0, #28]
    e980:	9306      	str	r3, [sp, #24]
    e982:	4b0a      	ldr	r3, [pc, #40]	; (e9ac <HardFault_HandlerC+0x4c>)
    e984:	681b      	ldr	r3, [r3, #0]
    e986:	9305      	str	r3, [sp, #20]
    e988:	4b09      	ldr	r3, [pc, #36]	; (e9b0 <HardFault_HandlerC+0x50>)
    e98a:	681b      	ldr	r3, [r3, #0]
    e98c:	9304      	str	r3, [sp, #16]
    e98e:	4b09      	ldr	r3, [pc, #36]	; (e9b4 <HardFault_HandlerC+0x54>)
    e990:	681b      	ldr	r3, [r3, #0]
    e992:	9303      	str	r3, [sp, #12]
    e994:	4b08      	ldr	r3, [pc, #32]	; (e9b8 <HardFault_HandlerC+0x58>)
    e996:	681b      	ldr	r3, [r3, #0]
    e998:	9302      	str	r3, [sp, #8]
    e99a:	4b08      	ldr	r3, [pc, #32]	; (e9bc <HardFault_HandlerC+0x5c>)
    e99c:	681b      	ldr	r3, [r3, #0]
    e99e:	9300      	str	r3, [sp, #0]
    e9a0:	4b07      	ldr	r3, [pc, #28]	; (e9c0 <HardFault_HandlerC+0x60>)
    e9a2:	681b      	ldr	r3, [r3, #0]
    e9a4:	9301      	str	r3, [sp, #4]
    e9a6:	be00      	bkpt	0x0000
    e9a8:	b00e      	add	sp, #56	; 0x38
    e9aa:	4770      	bx	lr
    e9ac:	e000ed28 	.word	0xe000ed28
    e9b0:	e000ed2c 	.word	0xe000ed2c
    e9b4:	e000ed30 	.word	0xe000ed30
    e9b8:	e000ed3c 	.word	0xe000ed3c
    e9bc:	e000ed34 	.word	0xe000ed34
    e9c0:	e000ed38 	.word	0xe000ed38

0000e9c4 <_read>:
    e9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9c6:	46c6      	mov	lr, r8
    e9c8:	b500      	push	{lr}
    e9ca:	000c      	movs	r4, r1
    e9cc:	4690      	mov	r8, r2
    e9ce:	2800      	cmp	r0, #0
    e9d0:	d10f      	bne.n	e9f2 <_read+0x2e>
    e9d2:	2a00      	cmp	r2, #0
    e9d4:	dd11      	ble.n	e9fa <_read+0x36>
    e9d6:	188f      	adds	r7, r1, r2
    e9d8:	4e09      	ldr	r6, [pc, #36]	; (ea00 <_read+0x3c>)
    e9da:	4d0a      	ldr	r5, [pc, #40]	; (ea04 <_read+0x40>)
    e9dc:	6830      	ldr	r0, [r6, #0]
    e9de:	0021      	movs	r1, r4
    e9e0:	682b      	ldr	r3, [r5, #0]
    e9e2:	4798      	blx	r3
    e9e4:	3401      	adds	r4, #1
    e9e6:	42bc      	cmp	r4, r7
    e9e8:	d1f8      	bne.n	e9dc <_read+0x18>
    e9ea:	4640      	mov	r0, r8
    e9ec:	bc04      	pop	{r2}
    e9ee:	4690      	mov	r8, r2
    e9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e9f2:	2301      	movs	r3, #1
    e9f4:	425b      	negs	r3, r3
    e9f6:	4698      	mov	r8, r3
    e9f8:	e7f7      	b.n	e9ea <_read+0x26>
    e9fa:	4680      	mov	r8, r0
    e9fc:	e7f5      	b.n	e9ea <_read+0x26>
    e9fe:	46c0      	nop			; (mov r8, r8)
    ea00:	20005bfc 	.word	0x20005bfc
    ea04:	20005bf4 	.word	0x20005bf4

0000ea08 <_write>:
    ea08:	b5f0      	push	{r4, r5, r6, r7, lr}
    ea0a:	46c6      	mov	lr, r8
    ea0c:	b500      	push	{lr}
    ea0e:	000e      	movs	r6, r1
    ea10:	0015      	movs	r5, r2
    ea12:	3801      	subs	r0, #1
    ea14:	2802      	cmp	r0, #2
    ea16:	d810      	bhi.n	ea3a <_write+0x32>
    ea18:	2a00      	cmp	r2, #0
    ea1a:	d011      	beq.n	ea40 <_write+0x38>
    ea1c:	2400      	movs	r4, #0
    ea1e:	4b0c      	ldr	r3, [pc, #48]	; (ea50 <_write+0x48>)
    ea20:	4698      	mov	r8, r3
    ea22:	4f0c      	ldr	r7, [pc, #48]	; (ea54 <_write+0x4c>)
    ea24:	4643      	mov	r3, r8
    ea26:	6818      	ldr	r0, [r3, #0]
    ea28:	5d31      	ldrb	r1, [r6, r4]
    ea2a:	683b      	ldr	r3, [r7, #0]
    ea2c:	4798      	blx	r3
    ea2e:	2800      	cmp	r0, #0
    ea30:	db08      	blt.n	ea44 <_write+0x3c>
    ea32:	3401      	adds	r4, #1
    ea34:	42a5      	cmp	r5, r4
    ea36:	d1f5      	bne.n	ea24 <_write+0x1c>
    ea38:	e006      	b.n	ea48 <_write+0x40>
    ea3a:	2401      	movs	r4, #1
    ea3c:	4264      	negs	r4, r4
    ea3e:	e003      	b.n	ea48 <_write+0x40>
    ea40:	0014      	movs	r4, r2
    ea42:	e001      	b.n	ea48 <_write+0x40>
    ea44:	2401      	movs	r4, #1
    ea46:	4264      	negs	r4, r4
    ea48:	0020      	movs	r0, r4
    ea4a:	bc04      	pop	{r2}
    ea4c:	4690      	mov	r8, r2
    ea4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea50:	20005bfc 	.word	0x20005bfc
    ea54:	20005bf8 	.word	0x20005bf8

0000ea58 <_sbrk>:
    ea58:	0003      	movs	r3, r0
    ea5a:	4a06      	ldr	r2, [pc, #24]	; (ea74 <_sbrk+0x1c>)
    ea5c:	6812      	ldr	r2, [r2, #0]
    ea5e:	2a00      	cmp	r2, #0
    ea60:	d004      	beq.n	ea6c <_sbrk+0x14>
    ea62:	4a04      	ldr	r2, [pc, #16]	; (ea74 <_sbrk+0x1c>)
    ea64:	6810      	ldr	r0, [r2, #0]
    ea66:	18c3      	adds	r3, r0, r3
    ea68:	6013      	str	r3, [r2, #0]
    ea6a:	4770      	bx	lr
    ea6c:	4902      	ldr	r1, [pc, #8]	; (ea78 <_sbrk+0x20>)
    ea6e:	4a01      	ldr	r2, [pc, #4]	; (ea74 <_sbrk+0x1c>)
    ea70:	6011      	str	r1, [r2, #0]
    ea72:	e7f6      	b.n	ea62 <_sbrk+0xa>
    ea74:	20003f14 	.word	0x20003f14
    ea78:	20007d58 	.word	0x20007d58

0000ea7c <_close>:
    ea7c:	2001      	movs	r0, #1
    ea7e:	4240      	negs	r0, r0
    ea80:	4770      	bx	lr

0000ea82 <_fstat>:
    ea82:	2380      	movs	r3, #128	; 0x80
    ea84:	019b      	lsls	r3, r3, #6
    ea86:	604b      	str	r3, [r1, #4]
    ea88:	2000      	movs	r0, #0
    ea8a:	4770      	bx	lr

0000ea8c <_isatty>:
    ea8c:	2001      	movs	r0, #1
    ea8e:	4770      	bx	lr

0000ea90 <_lseek>:
    ea90:	2000      	movs	r0, #0
    ea92:	4770      	bx	lr

0000ea94 <disk_initialize>:
    ea94:	b530      	push	{r4, r5, lr}
    ea96:	b087      	sub	sp, #28
    ea98:	0004      	movs	r4, r0
    ea9a:	aa01      	add	r2, sp, #4
    ea9c:	23a0      	movs	r3, #160	; 0xa0
    ea9e:	011b      	lsls	r3, r3, #4
    eaa0:	8013      	strh	r3, [r2, #0]
    eaa2:	2300      	movs	r3, #0
    eaa4:	7093      	strb	r3, [r2, #2]
    eaa6:	70d3      	strb	r3, [r2, #3]
    eaa8:	21fa      	movs	r1, #250	; 0xfa
    eaaa:	00c9      	lsls	r1, r1, #3
    eaac:	80d1      	strh	r1, [r2, #6]
    eaae:	2101      	movs	r1, #1
    eab0:	7111      	strb	r1, [r2, #4]
    eab2:	2004      	movs	r0, #4
    eab4:	7210      	strb	r0, [r2, #8]
    eab6:	7253      	strb	r3, [r2, #9]
    eab8:	7293      	strb	r3, [r2, #10]
    eaba:	72d3      	strb	r3, [r2, #11]
    eabc:	7311      	strb	r1, [r2, #12]
    eabe:	7351      	strb	r1, [r2, #13]
    eac0:	4b14      	ldr	r3, [pc, #80]	; (eb14 <disk_initialize+0x80>)
    eac2:	81d3      	strh	r3, [r2, #14]
    eac4:	2306      	movs	r3, #6
    eac6:	7413      	strb	r3, [r2, #16]
    eac8:	4d13      	ldr	r5, [pc, #76]	; (eb18 <disk_initialize+0x84>)
    eaca:	4914      	ldr	r1, [pc, #80]	; (eb1c <disk_initialize+0x88>)
    eacc:	0028      	movs	r0, r5
    eace:	4b14      	ldr	r3, [pc, #80]	; (eb20 <disk_initialize+0x8c>)
    ead0:	4798      	blx	r3
    ead2:	0028      	movs	r0, r5
    ead4:	4b13      	ldr	r3, [pc, #76]	; (eb24 <disk_initialize+0x90>)
    ead6:	4798      	blx	r3
    ead8:	2001      	movs	r0, #1
    eada:	2c01      	cmp	r4, #1
    eadc:	d901      	bls.n	eae2 <disk_initialize+0x4e>
    eade:	b007      	add	sp, #28
    eae0:	bd30      	pop	{r4, r5, pc}
    eae2:	0020      	movs	r0, r4
    eae4:	4b10      	ldr	r3, [pc, #64]	; (eb28 <disk_initialize+0x94>)
    eae6:	4798      	blx	r3
    eae8:	0003      	movs	r3, r0
    eaea:	2803      	cmp	r0, #3
    eaec:	d106      	bne.n	eafc <disk_initialize+0x68>
    eaee:	0020      	movs	r0, r4
    eaf0:	4b0d      	ldr	r3, [pc, #52]	; (eb28 <disk_initialize+0x94>)
    eaf2:	4798      	blx	r3
    eaf4:	0003      	movs	r3, r0
    eaf6:	2001      	movs	r0, #1
    eaf8:	2b03      	cmp	r3, #3
    eafa:	d0f0      	beq.n	eade <disk_initialize+0x4a>
    eafc:	2b00      	cmp	r3, #0
    eafe:	d106      	bne.n	eb0e <disk_initialize+0x7a>
    eb00:	0020      	movs	r0, r4
    eb02:	4b0a      	ldr	r3, [pc, #40]	; (eb2c <disk_initialize+0x98>)
    eb04:	4798      	blx	r3
    eb06:	1e43      	subs	r3, r0, #1
    eb08:	4198      	sbcs	r0, r3
    eb0a:	0080      	lsls	r0, r0, #2
    eb0c:	e7e7      	b.n	eade <disk_initialize+0x4a>
    eb0e:	2001      	movs	r0, #1
    eb10:	e7e5      	b.n	eade <disk_initialize+0x4a>
    eb12:	46c0      	nop			; (mov r8, r8)
    eb14:	000007de 	.word	0x000007de
    eb18:	20005c00 	.word	0x20005c00
    eb1c:	40001400 	.word	0x40001400
    eb20:	0000c841 	.word	0x0000c841
    eb24:	0000c6dd 	.word	0x0000c6dd
    eb28:	0000c3ad 	.word	0x0000c3ad
    eb2c:	0000c3e9 	.word	0x0000c3e9

0000eb30 <disk_status>:
    eb30:	b510      	push	{r4, lr}
    eb32:	4b05      	ldr	r3, [pc, #20]	; (eb48 <disk_status+0x18>)
    eb34:	4798      	blx	r3
    eb36:	1e03      	subs	r3, r0, #0
    eb38:	d004      	beq.n	eb44 <disk_status+0x14>
    eb3a:	2003      	movs	r0, #3
    eb3c:	2b02      	cmp	r3, #2
    eb3e:	d000      	beq.n	eb42 <disk_status+0x12>
    eb40:	3802      	subs	r0, #2
    eb42:	bd10      	pop	{r4, pc}
    eb44:	2000      	movs	r0, #0
    eb46:	e7fc      	b.n	eb42 <disk_status+0x12>
    eb48:	0000c3ad 	.word	0x0000c3ad

0000eb4c <disk_read>:
    eb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    eb4e:	46de      	mov	lr, fp
    eb50:	464f      	mov	r7, r9
    eb52:	4646      	mov	r6, r8
    eb54:	b5c0      	push	{r6, r7, lr}
    eb56:	b084      	sub	sp, #16
    eb58:	9001      	str	r0, [sp, #4]
    eb5a:	000d      	movs	r5, r1
    eb5c:	0014      	movs	r4, r2
    eb5e:	001f      	movs	r7, r3
    eb60:	4b18      	ldr	r3, [pc, #96]	; (ebc4 <disk_read+0x78>)
    eb62:	4798      	blx	r3
    eb64:	0006      	movs	r6, r0
    eb66:	2001      	movs	r0, #1
    eb68:	2e00      	cmp	r6, #0
    eb6a:	d105      	bne.n	eb78 <disk_read+0x2c>
    eb6c:	b004      	add	sp, #16
    eb6e:	bc1c      	pop	{r2, r3, r4}
    eb70:	4690      	mov	r8, r2
    eb72:	4699      	mov	r9, r3
    eb74:	46a3      	mov	fp, r4
    eb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb78:	a903      	add	r1, sp, #12
    eb7a:	9801      	ldr	r0, [sp, #4]
    eb7c:	4b12      	ldr	r3, [pc, #72]	; (ebc8 <disk_read+0x7c>)
    eb7e:	4798      	blx	r3
    eb80:	46b1      	mov	r9, r6
    eb82:	0032      	movs	r2, r6
    eb84:	437a      	muls	r2, r7
    eb86:	1912      	adds	r2, r2, r4
    eb88:	9b03      	ldr	r3, [sp, #12]
    eb8a:	3301      	adds	r3, #1
    eb8c:	4373      	muls	r3, r6
    eb8e:	2004      	movs	r0, #4
    eb90:	429a      	cmp	r2, r3
    eb92:	d8eb      	bhi.n	eb6c <disk_read+0x20>
    eb94:	2f00      	cmp	r7, #0
    eb96:	d011      	beq.n	ebbc <disk_read+0x70>
    eb98:	0273      	lsls	r3, r6, #9
    eb9a:	4698      	mov	r8, r3
    eb9c:	1c7b      	adds	r3, r7, #1
    eb9e:	469b      	mov	fp, r3
    eba0:	2701      	movs	r7, #1
    eba2:	4e0a      	ldr	r6, [pc, #40]	; (ebcc <disk_read+0x80>)
    eba4:	002a      	movs	r2, r5
    eba6:	0021      	movs	r1, r4
    eba8:	9801      	ldr	r0, [sp, #4]
    ebaa:	47b0      	blx	r6
    ebac:	2800      	cmp	r0, #0
    ebae:	d107      	bne.n	ebc0 <disk_read+0x74>
    ebb0:	3701      	adds	r7, #1
    ebb2:	444c      	add	r4, r9
    ebb4:	4445      	add	r5, r8
    ebb6:	455f      	cmp	r7, fp
    ebb8:	d1f4      	bne.n	eba4 <disk_read+0x58>
    ebba:	e7d7      	b.n	eb6c <disk_read+0x20>
    ebbc:	2000      	movs	r0, #0
    ebbe:	e7d5      	b.n	eb6c <disk_read+0x20>
    ebc0:	2001      	movs	r0, #1
    ebc2:	e7d3      	b.n	eb6c <disk_read+0x20>
    ebc4:	0000c3e1 	.word	0x0000c3e1
    ebc8:	0000c3c5 	.word	0x0000c3c5
    ebcc:	0000c401 	.word	0x0000c401

0000ebd0 <disk_write>:
    ebd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebd2:	46de      	mov	lr, fp
    ebd4:	464f      	mov	r7, r9
    ebd6:	4646      	mov	r6, r8
    ebd8:	b5c0      	push	{r6, r7, lr}
    ebda:	b084      	sub	sp, #16
    ebdc:	9001      	str	r0, [sp, #4]
    ebde:	000d      	movs	r5, r1
    ebe0:	0014      	movs	r4, r2
    ebe2:	001f      	movs	r7, r3
    ebe4:	4b18      	ldr	r3, [pc, #96]	; (ec48 <disk_write+0x78>)
    ebe6:	4798      	blx	r3
    ebe8:	0006      	movs	r6, r0
    ebea:	2001      	movs	r0, #1
    ebec:	2e00      	cmp	r6, #0
    ebee:	d105      	bne.n	ebfc <disk_write+0x2c>
    ebf0:	b004      	add	sp, #16
    ebf2:	bc1c      	pop	{r2, r3, r4}
    ebf4:	4690      	mov	r8, r2
    ebf6:	4699      	mov	r9, r3
    ebf8:	46a3      	mov	fp, r4
    ebfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ebfc:	a903      	add	r1, sp, #12
    ebfe:	9801      	ldr	r0, [sp, #4]
    ec00:	4b12      	ldr	r3, [pc, #72]	; (ec4c <disk_write+0x7c>)
    ec02:	4798      	blx	r3
    ec04:	46b1      	mov	r9, r6
    ec06:	0032      	movs	r2, r6
    ec08:	437a      	muls	r2, r7
    ec0a:	1912      	adds	r2, r2, r4
    ec0c:	9b03      	ldr	r3, [sp, #12]
    ec0e:	3301      	adds	r3, #1
    ec10:	4373      	muls	r3, r6
    ec12:	2004      	movs	r0, #4
    ec14:	429a      	cmp	r2, r3
    ec16:	d8eb      	bhi.n	ebf0 <disk_write+0x20>
    ec18:	2f00      	cmp	r7, #0
    ec1a:	d011      	beq.n	ec40 <disk_write+0x70>
    ec1c:	0273      	lsls	r3, r6, #9
    ec1e:	4698      	mov	r8, r3
    ec20:	1c7b      	adds	r3, r7, #1
    ec22:	469b      	mov	fp, r3
    ec24:	2701      	movs	r7, #1
    ec26:	4e0a      	ldr	r6, [pc, #40]	; (ec50 <disk_write+0x80>)
    ec28:	002a      	movs	r2, r5
    ec2a:	0021      	movs	r1, r4
    ec2c:	9801      	ldr	r0, [sp, #4]
    ec2e:	47b0      	blx	r6
    ec30:	2800      	cmp	r0, #0
    ec32:	d107      	bne.n	ec44 <disk_write+0x74>
    ec34:	3701      	adds	r7, #1
    ec36:	444c      	add	r4, r9
    ec38:	4445      	add	r5, r8
    ec3a:	455f      	cmp	r7, fp
    ec3c:	d1f4      	bne.n	ec28 <disk_write+0x58>
    ec3e:	e7d7      	b.n	ebf0 <disk_write+0x20>
    ec40:	2000      	movs	r0, #0
    ec42:	e7d5      	b.n	ebf0 <disk_write+0x20>
    ec44:	2001      	movs	r0, #1
    ec46:	e7d3      	b.n	ebf0 <disk_write+0x20>
    ec48:	0000c3e1 	.word	0x0000c3e1
    ec4c:	0000c3c5 	.word	0x0000c3c5
    ec50:	0000c421 	.word	0x0000c421

0000ec54 <disk_ioctl>:
    ec54:	b510      	push	{r4, lr}
    ec56:	b082      	sub	sp, #8
    ec58:	0014      	movs	r4, r2
    ec5a:	2901      	cmp	r1, #1
    ec5c:	d00b      	beq.n	ec76 <disk_ioctl+0x22>
    ec5e:	2900      	cmp	r1, #0
    ec60:	d020      	beq.n	eca4 <disk_ioctl+0x50>
    ec62:	2902      	cmp	r1, #2
    ec64:	d00f      	beq.n	ec86 <disk_ioctl+0x32>
    ec66:	2004      	movs	r0, #4
    ec68:	2903      	cmp	r1, #3
    ec6a:	d102      	bne.n	ec72 <disk_ioctl+0x1e>
    ec6c:	2301      	movs	r3, #1
    ec6e:	6013      	str	r3, [r2, #0]
    ec70:	2000      	movs	r0, #0
    ec72:	b002      	add	sp, #8
    ec74:	bd10      	pop	{r4, pc}
    ec76:	a901      	add	r1, sp, #4
    ec78:	4b0e      	ldr	r3, [pc, #56]	; (ecb4 <disk_ioctl+0x60>)
    ec7a:	4798      	blx	r3
    ec7c:	9b01      	ldr	r3, [sp, #4]
    ec7e:	3301      	adds	r3, #1
    ec80:	6023      	str	r3, [r4, #0]
    ec82:	2000      	movs	r0, #0
    ec84:	e7f5      	b.n	ec72 <disk_ioctl+0x1e>
    ec86:	4b0c      	ldr	r3, [pc, #48]	; (ecb8 <disk_ioctl+0x64>)
    ec88:	4798      	blx	r3
    ec8a:	1e43      	subs	r3, r0, #1
    ec8c:	b2db      	uxtb	r3, r3
    ec8e:	2b01      	cmp	r3, #1
    ec90:	d904      	bls.n	ec9c <disk_ioctl+0x48>
    ec92:	1f03      	subs	r3, r0, #4
    ec94:	22fb      	movs	r2, #251	; 0xfb
    ec96:	2001      	movs	r0, #1
    ec98:	4213      	tst	r3, r2
    ec9a:	d1ea      	bne.n	ec72 <disk_ioctl+0x1e>
    ec9c:	2300      	movs	r3, #0
    ec9e:	7023      	strb	r3, [r4, #0]
    eca0:	2000      	movs	r0, #0
    eca2:	e7e6      	b.n	ec72 <disk_ioctl+0x1e>
    eca4:	4b05      	ldr	r3, [pc, #20]	; (ecbc <disk_ioctl+0x68>)
    eca6:	4798      	blx	r3
    eca8:	2800      	cmp	r0, #0
    ecaa:	d001      	beq.n	ecb0 <disk_ioctl+0x5c>
    ecac:	2003      	movs	r0, #3
    ecae:	e7e0      	b.n	ec72 <disk_ioctl+0x1e>
    ecb0:	2000      	movs	r0, #0
    ecb2:	e7de      	b.n	ec72 <disk_ioctl+0x1e>
    ecb4:	0000c3c5 	.word	0x0000c3c5
    ecb8:	0000c3e1 	.word	0x0000c3e1
    ecbc:	0000c3ad 	.word	0x0000c3ad

0000ecc0 <get_fattime>:
    ecc0:	b500      	push	{lr}
    ecc2:	b083      	sub	sp, #12
    ecc4:	4669      	mov	r1, sp
    ecc6:	480f      	ldr	r0, [pc, #60]	; (ed04 <get_fattime+0x44>)
    ecc8:	4b0f      	ldr	r3, [pc, #60]	; (ed08 <get_fattime+0x48>)
    ecca:	4798      	blx	r3
    eccc:	466b      	mov	r3, sp
    ecce:	7958      	ldrb	r0, [r3, #5]
    ecd0:	0540      	lsls	r0, r0, #21
    ecd2:	791b      	ldrb	r3, [r3, #4]
    ecd4:	041b      	lsls	r3, r3, #16
    ecd6:	4318      	orrs	r0, r3
    ecd8:	466b      	mov	r3, sp
    ecda:	789b      	ldrb	r3, [r3, #2]
    ecdc:	02db      	lsls	r3, r3, #11
    ecde:	4318      	orrs	r0, r3
    ece0:	466b      	mov	r3, sp
    ece2:	785b      	ldrb	r3, [r3, #1]
    ece4:	015b      	lsls	r3, r3, #5
    ece6:	4318      	orrs	r0, r3
    ece8:	466b      	mov	r3, sp
    ecea:	781b      	ldrb	r3, [r3, #0]
    ecec:	085b      	lsrs	r3, r3, #1
    ecee:	4318      	orrs	r0, r3
    ecf0:	466b      	mov	r3, sp
    ecf2:	88db      	ldrh	r3, [r3, #6]
    ecf4:	4a05      	ldr	r2, [pc, #20]	; (ed0c <get_fattime+0x4c>)
    ecf6:	4694      	mov	ip, r2
    ecf8:	4463      	add	r3, ip
    ecfa:	065b      	lsls	r3, r3, #25
    ecfc:	4318      	orrs	r0, r3
    ecfe:	b003      	add	sp, #12
    ed00:	bd00      	pop	{pc}
    ed02:	46c0      	nop			; (mov r8, r8)
    ed04:	20005c00 	.word	0x20005c00
    ed08:	0000c7c9 	.word	0x0000c7c9
    ed0c:	fffff844 	.word	0xfffff844

0000ed10 <mem_cpy>:
    ed10:	b510      	push	{r4, lr}
    ed12:	2a00      	cmp	r2, #0
    ed14:	d005      	beq.n	ed22 <mem_cpy+0x12>
    ed16:	2300      	movs	r3, #0
    ed18:	5ccc      	ldrb	r4, [r1, r3]
    ed1a:	54c4      	strb	r4, [r0, r3]
    ed1c:	3301      	adds	r3, #1
    ed1e:	4293      	cmp	r3, r2
    ed20:	d1fa      	bne.n	ed18 <mem_cpy+0x8>
    ed22:	bd10      	pop	{r4, pc}

0000ed24 <mem_set>:
    ed24:	2a00      	cmp	r2, #0
    ed26:	d005      	beq.n	ed34 <mem_set+0x10>
    ed28:	0003      	movs	r3, r0
    ed2a:	1882      	adds	r2, r0, r2
    ed2c:	7019      	strb	r1, [r3, #0]
    ed2e:	3301      	adds	r3, #1
    ed30:	4293      	cmp	r3, r2
    ed32:	d1fb      	bne.n	ed2c <mem_set+0x8>
    ed34:	4770      	bx	lr

0000ed36 <clust2sect>:
    ed36:	0002      	movs	r2, r0
    ed38:	3902      	subs	r1, #2
    ed3a:	6983      	ldr	r3, [r0, #24]
    ed3c:	3b02      	subs	r3, #2
    ed3e:	2000      	movs	r0, #0
    ed40:	4299      	cmp	r1, r3
    ed42:	d203      	bcs.n	ed4c <clust2sect+0x16>
    ed44:	7890      	ldrb	r0, [r2, #2]
    ed46:	4341      	muls	r1, r0
    ed48:	6a90      	ldr	r0, [r2, #40]	; 0x28
    ed4a:	1808      	adds	r0, r1, r0
    ed4c:	4770      	bx	lr

0000ed4e <sum_sfn>:
    ed4e:	0002      	movs	r2, r0
    ed50:	0001      	movs	r1, r0
    ed52:	310b      	adds	r1, #11
    ed54:	2000      	movs	r0, #0
    ed56:	0843      	lsrs	r3, r0, #1
    ed58:	01c0      	lsls	r0, r0, #7
    ed5a:	4303      	orrs	r3, r0
    ed5c:	7810      	ldrb	r0, [r2, #0]
    ed5e:	1818      	adds	r0, r3, r0
    ed60:	b2c0      	uxtb	r0, r0
    ed62:	3201      	adds	r2, #1
    ed64:	428a      	cmp	r2, r1
    ed66:	d1f6      	bne.n	ed56 <sum_sfn+0x8>
    ed68:	4770      	bx	lr
	...

0000ed6c <validate>:
    ed6c:	b510      	push	{r4, lr}
    ed6e:	2800      	cmp	r0, #0
    ed70:	d010      	beq.n	ed94 <validate+0x28>
    ed72:	7802      	ldrb	r2, [r0, #0]
    ed74:	2309      	movs	r3, #9
    ed76:	2a00      	cmp	r2, #0
    ed78:	d101      	bne.n	ed7e <validate+0x12>
    ed7a:	0018      	movs	r0, r3
    ed7c:	bd10      	pop	{r4, pc}
    ed7e:	88c2      	ldrh	r2, [r0, #6]
    ed80:	428a      	cmp	r2, r1
    ed82:	d1fa      	bne.n	ed7a <validate+0xe>
    ed84:	7840      	ldrb	r0, [r0, #1]
    ed86:	4b04      	ldr	r3, [pc, #16]	; (ed98 <validate+0x2c>)
    ed88:	4798      	blx	r3
    ed8a:	2303      	movs	r3, #3
    ed8c:	07c0      	lsls	r0, r0, #31
    ed8e:	17c0      	asrs	r0, r0, #31
    ed90:	4003      	ands	r3, r0
    ed92:	e7f2      	b.n	ed7a <validate+0xe>
    ed94:	2309      	movs	r3, #9
    ed96:	e7f0      	b.n	ed7a <validate+0xe>
    ed98:	0000eb31 	.word	0x0000eb31

0000ed9c <check_fs>:
    ed9c:	b570      	push	{r4, r5, r6, lr}
    ed9e:	0004      	movs	r4, r0
    eda0:	000a      	movs	r2, r1
    eda2:	0001      	movs	r1, r0
    eda4:	3130      	adds	r1, #48	; 0x30
    eda6:	7840      	ldrb	r0, [r0, #1]
    eda8:	2301      	movs	r3, #1
    edaa:	4d1f      	ldr	r5, [pc, #124]	; (ee28 <check_fs+0x8c>)
    edac:	47a8      	blx	r5
    edae:	2303      	movs	r3, #3
    edb0:	2800      	cmp	r0, #0
    edb2:	d001      	beq.n	edb8 <check_fs+0x1c>
    edb4:	0018      	movs	r0, r3
    edb6:	bd70      	pop	{r4, r5, r6, pc}
    edb8:	4b1c      	ldr	r3, [pc, #112]	; (ee2c <check_fs+0x90>)
    edba:	5ce3      	ldrb	r3, [r4, r3]
    edbc:	021b      	lsls	r3, r3, #8
    edbe:	4a1c      	ldr	r2, [pc, #112]	; (ee30 <check_fs+0x94>)
    edc0:	5ca2      	ldrb	r2, [r4, r2]
    edc2:	431a      	orrs	r2, r3
    edc4:	491b      	ldr	r1, [pc, #108]	; (ee34 <check_fs+0x98>)
    edc6:	b212      	sxth	r2, r2
    edc8:	2302      	movs	r3, #2
    edca:	428a      	cmp	r2, r1
    edcc:	d1f2      	bne.n	edb4 <check_fs+0x18>
    edce:	3367      	adds	r3, #103	; 0x67
    edd0:	5ce3      	ldrb	r3, [r4, r3]
    edd2:	061b      	lsls	r3, r3, #24
    edd4:	2268      	movs	r2, #104	; 0x68
    edd6:	5ca2      	ldrb	r2, [r4, r2]
    edd8:	0412      	lsls	r2, r2, #16
    edda:	4313      	orrs	r3, r2
    eddc:	2266      	movs	r2, #102	; 0x66
    edde:	5ca2      	ldrb	r2, [r4, r2]
    ede0:	4313      	orrs	r3, r2
    ede2:	2267      	movs	r2, #103	; 0x67
    ede4:	5ca2      	ldrb	r2, [r4, r2]
    ede6:	0212      	lsls	r2, r2, #8
    ede8:	4313      	orrs	r3, r2
    edea:	021b      	lsls	r3, r3, #8
    edec:	0a1b      	lsrs	r3, r3, #8
    edee:	4a12      	ldr	r2, [pc, #72]	; (ee38 <check_fs+0x9c>)
    edf0:	4293      	cmp	r3, r2
    edf2:	d016      	beq.n	ee22 <check_fs+0x86>
    edf4:	2385      	movs	r3, #133	; 0x85
    edf6:	5ce3      	ldrb	r3, [r4, r3]
    edf8:	061b      	lsls	r3, r3, #24
    edfa:	2284      	movs	r2, #132	; 0x84
    edfc:	5ca2      	ldrb	r2, [r4, r2]
    edfe:	0412      	lsls	r2, r2, #16
    ee00:	4313      	orrs	r3, r2
    ee02:	2282      	movs	r2, #130	; 0x82
    ee04:	5ca2      	ldrb	r2, [r4, r2]
    ee06:	4313      	orrs	r3, r2
    ee08:	2283      	movs	r2, #131	; 0x83
    ee0a:	5ca2      	ldrb	r2, [r4, r2]
    ee0c:	0212      	lsls	r2, r2, #8
    ee0e:	4313      	orrs	r3, r2
    ee10:	021b      	lsls	r3, r3, #8
    ee12:	0a1b      	lsrs	r3, r3, #8
    ee14:	4a09      	ldr	r2, [pc, #36]	; (ee3c <check_fs+0xa0>)
    ee16:	4694      	mov	ip, r2
    ee18:	4463      	add	r3, ip
    ee1a:	1e58      	subs	r0, r3, #1
    ee1c:	4183      	sbcs	r3, r0
    ee1e:	b2db      	uxtb	r3, r3
    ee20:	e7c8      	b.n	edb4 <check_fs+0x18>
    ee22:	2300      	movs	r3, #0
    ee24:	e7c6      	b.n	edb4 <check_fs+0x18>
    ee26:	46c0      	nop			; (mov r8, r8)
    ee28:	0000eb4d 	.word	0x0000eb4d
    ee2c:	0000022f 	.word	0x0000022f
    ee30:	0000022e 	.word	0x0000022e
    ee34:	ffffaa55 	.word	0xffffaa55
    ee38:	00544146 	.word	0x00544146
    ee3c:	ffabbeba 	.word	0xffabbeba

0000ee40 <chk_mounted>:
    ee40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee42:	46d6      	mov	lr, sl
    ee44:	464f      	mov	r7, r9
    ee46:	4646      	mov	r6, r8
    ee48:	b5c0      	push	{r6, r7, lr}
    ee4a:	0015      	movs	r5, r2
    ee4c:	6803      	ldr	r3, [r0, #0]
    ee4e:	781c      	ldrb	r4, [r3, #0]
    ee50:	3c30      	subs	r4, #48	; 0x30
    ee52:	2c09      	cmp	r4, #9
    ee54:	d80e      	bhi.n	ee74 <chk_mounted+0x34>
    ee56:	785a      	ldrb	r2, [r3, #1]
    ee58:	2a3a      	cmp	r2, #58	; 0x3a
    ee5a:	d001      	beq.n	ee60 <chk_mounted+0x20>
    ee5c:	2400      	movs	r4, #0
    ee5e:	e00a      	b.n	ee76 <chk_mounted+0x36>
    ee60:	3302      	adds	r3, #2
    ee62:	6003      	str	r3, [r0, #0]
    ee64:	200b      	movs	r0, #11
    ee66:	2c07      	cmp	r4, #7
    ee68:	d905      	bls.n	ee76 <chk_mounted+0x36>
    ee6a:	bc1c      	pop	{r2, r3, r4}
    ee6c:	4690      	mov	r8, r2
    ee6e:	4699      	mov	r9, r3
    ee70:	46a2      	mov	sl, r4
    ee72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee74:	2400      	movs	r4, #0
    ee76:	00a3      	lsls	r3, r4, #2
    ee78:	4ac5      	ldr	r2, [pc, #788]	; (f190 <chk_mounted+0x350>)
    ee7a:	589e      	ldr	r6, [r3, r2]
    ee7c:	600e      	str	r6, [r1, #0]
    ee7e:	2e00      	cmp	r6, #0
    ee80:	d100      	bne.n	ee84 <chk_mounted+0x44>
    ee82:	e0e8      	b.n	f056 <chk_mounted+0x216>
    ee84:	7833      	ldrb	r3, [r6, #0]
    ee86:	2b00      	cmp	r3, #0
    ee88:	d00d      	beq.n	eea6 <chk_mounted+0x66>
    ee8a:	7870      	ldrb	r0, [r6, #1]
    ee8c:	4bc1      	ldr	r3, [pc, #772]	; (f194 <chk_mounted+0x354>)
    ee8e:	4798      	blx	r3
    ee90:	0003      	movs	r3, r0
    ee92:	07c2      	lsls	r2, r0, #31
    ee94:	d407      	bmi.n	eea6 <chk_mounted+0x66>
    ee96:	2000      	movs	r0, #0
    ee98:	2d00      	cmp	r5, #0
    ee9a:	d0e6      	beq.n	ee6a <chk_mounted+0x2a>
    ee9c:	075b      	lsls	r3, r3, #29
    ee9e:	d400      	bmi.n	eea2 <chk_mounted+0x62>
    eea0:	e0db      	b.n	f05a <chk_mounted+0x21a>
    eea2:	300a      	adds	r0, #10
    eea4:	e7e1      	b.n	ee6a <chk_mounted+0x2a>
    eea6:	2300      	movs	r3, #0
    eea8:	7033      	strb	r3, [r6, #0]
    eeaa:	b2e0      	uxtb	r0, r4
    eeac:	7070      	strb	r0, [r6, #1]
    eeae:	4bba      	ldr	r3, [pc, #744]	; (f198 <chk_mounted+0x358>)
    eeb0:	4798      	blx	r3
    eeb2:	0003      	movs	r3, r0
    eeb4:	2003      	movs	r0, #3
    eeb6:	07da      	lsls	r2, r3, #31
    eeb8:	d4d7      	bmi.n	ee6a <chk_mounted+0x2a>
    eeba:	2d00      	cmp	r5, #0
    eebc:	d002      	beq.n	eec4 <chk_mounted+0x84>
    eebe:	3007      	adds	r0, #7
    eec0:	075b      	lsls	r3, r3, #29
    eec2:	d4d2      	bmi.n	ee6a <chk_mounted+0x2a>
    eec4:	2100      	movs	r1, #0
    eec6:	0030      	movs	r0, r6
    eec8:	4bb4      	ldr	r3, [pc, #720]	; (f19c <chk_mounted+0x35c>)
    eeca:	4798      	blx	r3
    eecc:	0003      	movs	r3, r0
    eece:	2400      	movs	r4, #0
    eed0:	2801      	cmp	r0, #1
    eed2:	d100      	bne.n	eed6 <chk_mounted+0x96>
    eed4:	e09a      	b.n	f00c <chk_mounted+0x1cc>
    eed6:	2b03      	cmp	r3, #3
    eed8:	d100      	bne.n	eedc <chk_mounted+0x9c>
    eeda:	e0c0      	b.n	f05e <chk_mounted+0x21e>
    eedc:	200d      	movs	r0, #13
    eede:	2b00      	cmp	r3, #0
    eee0:	d1c3      	bne.n	ee6a <chk_mounted+0x2a>
    eee2:	333c      	adds	r3, #60	; 0x3c
    eee4:	5cf2      	ldrb	r2, [r6, r3]
    eee6:	0212      	lsls	r2, r2, #8
    eee8:	3b01      	subs	r3, #1
    eeea:	5cf3      	ldrb	r3, [r6, r3]
    eeec:	4313      	orrs	r3, r2
    eeee:	2280      	movs	r2, #128	; 0x80
    eef0:	0092      	lsls	r2, r2, #2
    eef2:	b21b      	sxth	r3, r3
    eef4:	4293      	cmp	r3, r2
    eef6:	d1b8      	bne.n	ee6a <chk_mounted+0x2a>
    eef8:	2347      	movs	r3, #71	; 0x47
    eefa:	5cf3      	ldrb	r3, [r6, r3]
    eefc:	021b      	lsls	r3, r3, #8
    eefe:	3abb      	subs	r2, #187	; 0xbb
    ef00:	3aff      	subs	r2, #255	; 0xff
    ef02:	5cb5      	ldrb	r5, [r6, r2]
    ef04:	431d      	orrs	r5, r3
    ef06:	d10d      	bne.n	ef24 <chk_mounted+0xe4>
    ef08:	2357      	movs	r3, #87	; 0x57
    ef0a:	5cf5      	ldrb	r5, [r6, r3]
    ef0c:	062d      	lsls	r5, r5, #24
    ef0e:	3b01      	subs	r3, #1
    ef10:	5cf3      	ldrb	r3, [r6, r3]
    ef12:	041b      	lsls	r3, r3, #16
    ef14:	431d      	orrs	r5, r3
    ef16:	2354      	movs	r3, #84	; 0x54
    ef18:	5cf3      	ldrb	r3, [r6, r3]
    ef1a:	431d      	orrs	r5, r3
    ef1c:	2355      	movs	r3, #85	; 0x55
    ef1e:	5cf3      	ldrb	r3, [r6, r3]
    ef20:	021b      	lsls	r3, r3, #8
    ef22:	431d      	orrs	r5, r3
    ef24:	61f5      	str	r5, [r6, #28]
    ef26:	2340      	movs	r3, #64	; 0x40
    ef28:	5cf2      	ldrb	r2, [r6, r3]
    ef2a:	70f2      	strb	r2, [r6, #3]
    ef2c:	1e53      	subs	r3, r2, #1
    ef2e:	200d      	movs	r0, #13
    ef30:	2b01      	cmp	r3, #1
    ef32:	d89a      	bhi.n	ee6a <chk_mounted+0x2a>
    ef34:	233d      	movs	r3, #61	; 0x3d
    ef36:	5cf1      	ldrb	r1, [r6, r3]
    ef38:	70b1      	strb	r1, [r6, #2]
    ef3a:	2900      	cmp	r1, #0
    ef3c:	d095      	beq.n	ee6a <chk_mounted+0x2a>
    ef3e:	1e4b      	subs	r3, r1, #1
    ef40:	4219      	tst	r1, r3
    ef42:	d192      	bne.n	ee6a <chk_mounted+0x2a>
    ef44:	2342      	movs	r3, #66	; 0x42
    ef46:	5cf3      	ldrb	r3, [r6, r3]
    ef48:	021b      	lsls	r3, r3, #8
    ef4a:	3034      	adds	r0, #52	; 0x34
    ef4c:	5c30      	ldrb	r0, [r6, r0]
    ef4e:	4318      	orrs	r0, r3
    ef50:	4680      	mov	r8, r0
    ef52:	8130      	strh	r0, [r6, #8]
    ef54:	200d      	movs	r0, #13
    ef56:	4643      	mov	r3, r8
    ef58:	071b      	lsls	r3, r3, #28
    ef5a:	d000      	beq.n	ef5e <chk_mounted+0x11e>
    ef5c:	e785      	b.n	ee6a <chk_mounted+0x2a>
    ef5e:	2344      	movs	r3, #68	; 0x44
    ef60:	5cf3      	ldrb	r3, [r6, r3]
    ef62:	021b      	lsls	r3, r3, #8
    ef64:	3036      	adds	r0, #54	; 0x36
    ef66:	5c30      	ldrb	r0, [r6, r0]
    ef68:	4303      	orrs	r3, r0
    ef6a:	d10d      	bne.n	ef88 <chk_mounted+0x148>
    ef6c:	3353      	adds	r3, #83	; 0x53
    ef6e:	5cf3      	ldrb	r3, [r6, r3]
    ef70:	061b      	lsls	r3, r3, #24
    ef72:	2052      	movs	r0, #82	; 0x52
    ef74:	5c30      	ldrb	r0, [r6, r0]
    ef76:	0400      	lsls	r0, r0, #16
    ef78:	4303      	orrs	r3, r0
    ef7a:	2050      	movs	r0, #80	; 0x50
    ef7c:	5c30      	ldrb	r0, [r6, r0]
    ef7e:	4303      	orrs	r3, r0
    ef80:	2051      	movs	r0, #81	; 0x51
    ef82:	5c30      	ldrb	r0, [r6, r0]
    ef84:	0200      	lsls	r0, r0, #8
    ef86:	4303      	orrs	r3, r0
    ef88:	203f      	movs	r0, #63	; 0x3f
    ef8a:	5c30      	ldrb	r0, [r6, r0]
    ef8c:	0200      	lsls	r0, r0, #8
    ef8e:	273e      	movs	r7, #62	; 0x3e
    ef90:	5df7      	ldrb	r7, [r6, r7]
    ef92:	4307      	orrs	r7, r0
    ef94:	46ba      	mov	sl, r7
    ef96:	200d      	movs	r0, #13
    ef98:	2f00      	cmp	r7, #0
    ef9a:	d100      	bne.n	ef9e <chk_mounted+0x15e>
    ef9c:	e765      	b.n	ee6a <chk_mounted+0x2a>
    ef9e:	436a      	muls	r2, r5
    efa0:	4691      	mov	r9, r2
    efa2:	4642      	mov	r2, r8
    efa4:	0917      	lsrs	r7, r2, #4
    efa6:	4457      	add	r7, sl
    efa8:	444f      	add	r7, r9
    efaa:	42bb      	cmp	r3, r7
    efac:	d200      	bcs.n	efb0 <chk_mounted+0x170>
    efae:	e75c      	b.n	ee6a <chk_mounted+0x2a>
    efb0:	1bd8      	subs	r0, r3, r7
    efb2:	4b7b      	ldr	r3, [pc, #492]	; (f1a0 <chk_mounted+0x360>)
    efb4:	4798      	blx	r3
    efb6:	0003      	movs	r3, r0
    efb8:	200d      	movs	r0, #13
    efba:	2b00      	cmp	r3, #0
    efbc:	d100      	bne.n	efc0 <chk_mounted+0x180>
    efbe:	e754      	b.n	ee6a <chk_mounted+0x2a>
    efc0:	4a78      	ldr	r2, [pc, #480]	; (f1a4 <chk_mounted+0x364>)
    efc2:	429a      	cmp	r2, r3
    efc4:	4192      	sbcs	r2, r2
    efc6:	4252      	negs	r2, r2
    efc8:	3201      	adds	r2, #1
    efca:	4977      	ldr	r1, [pc, #476]	; (f1a8 <chk_mounted+0x368>)
    efcc:	428b      	cmp	r3, r1
    efce:	d848      	bhi.n	f062 <chk_mounted+0x222>
    efd0:	3302      	adds	r3, #2
    efd2:	61b3      	str	r3, [r6, #24]
    efd4:	19e7      	adds	r7, r4, r7
    efd6:	62b7      	str	r7, [r6, #40]	; 0x28
    efd8:	4454      	add	r4, sl
    efda:	6234      	str	r4, [r6, #32]
    efdc:	200d      	movs	r0, #13
    efde:	4641      	mov	r1, r8
    efe0:	2900      	cmp	r1, #0
    efe2:	d100      	bne.n	efe6 <chk_mounted+0x1a6>
    efe4:	e741      	b.n	ee6a <chk_mounted+0x2a>
    efe6:	444c      	add	r4, r9
    efe8:	6274      	str	r4, [r6, #36]	; 0x24
    efea:	2a02      	cmp	r2, #2
    efec:	d12c      	bne.n	f048 <chk_mounted+0x208>
    efee:	005b      	lsls	r3, r3, #1
    eff0:	496e      	ldr	r1, [pc, #440]	; (f1ac <chk_mounted+0x36c>)
    eff2:	468c      	mov	ip, r1
    eff4:	4463      	add	r3, ip
    eff6:	0a5b      	lsrs	r3, r3, #9
    eff8:	200d      	movs	r0, #13
    effa:	429d      	cmp	r5, r3
    effc:	d200      	bcs.n	f000 <chk_mounted+0x1c0>
    effe:	e734      	b.n	ee6a <chk_mounted+0x2a>
    f000:	2301      	movs	r3, #1
    f002:	425b      	negs	r3, r3
    f004:	6133      	str	r3, [r6, #16]
    f006:	2300      	movs	r3, #0
    f008:	60f3      	str	r3, [r6, #12]
    f00a:	e0b6      	b.n	f17a <chk_mounted+0x33a>
    f00c:	33f2      	adds	r3, #242	; 0xf2
    f00e:	33ff      	adds	r3, #255	; 0xff
    f010:	5cf3      	ldrb	r3, [r6, r3]
    f012:	200d      	movs	r0, #13
    f014:	2b00      	cmp	r3, #0
    f016:	d100      	bne.n	f01a <chk_mounted+0x1da>
    f018:	e727      	b.n	ee6a <chk_mounted+0x2a>
    f01a:	23fa      	movs	r3, #250	; 0xfa
    f01c:	33ff      	adds	r3, #255	; 0xff
    f01e:	5cf4      	ldrb	r4, [r6, r3]
    f020:	0624      	lsls	r4, r4, #24
    f022:	3b01      	subs	r3, #1
    f024:	5cf3      	ldrb	r3, [r6, r3]
    f026:	041b      	lsls	r3, r3, #16
    f028:	431c      	orrs	r4, r3
    f02a:	23fb      	movs	r3, #251	; 0xfb
    f02c:	005b      	lsls	r3, r3, #1
    f02e:	5cf3      	ldrb	r3, [r6, r3]
    f030:	431c      	orrs	r4, r3
    f032:	23f8      	movs	r3, #248	; 0xf8
    f034:	33ff      	adds	r3, #255	; 0xff
    f036:	5cf2      	ldrb	r2, [r6, r3]
    f038:	0212      	lsls	r2, r2, #8
    f03a:	4314      	orrs	r4, r2
    f03c:	0021      	movs	r1, r4
    f03e:	0030      	movs	r0, r6
    f040:	4b56      	ldr	r3, [pc, #344]	; (f19c <chk_mounted+0x35c>)
    f042:	4798      	blx	r3
    f044:	0003      	movs	r3, r0
    f046:	e746      	b.n	eed6 <chk_mounted+0x96>
    f048:	2103      	movs	r1, #3
    f04a:	4359      	muls	r1, r3
    f04c:	0849      	lsrs	r1, r1, #1
    f04e:	2001      	movs	r0, #1
    f050:	4003      	ands	r3, r0
    f052:	18cb      	adds	r3, r1, r3
    f054:	e7cc      	b.n	eff0 <chk_mounted+0x1b0>
    f056:	200c      	movs	r0, #12
    f058:	e707      	b.n	ee6a <chk_mounted+0x2a>
    f05a:	2000      	movs	r0, #0
    f05c:	e705      	b.n	ee6a <chk_mounted+0x2a>
    f05e:	2001      	movs	r0, #1
    f060:	e703      	b.n	ee6a <chk_mounted+0x2a>
    f062:	3302      	adds	r3, #2
    f064:	61b3      	str	r3, [r6, #24]
    f066:	19e7      	adds	r7, r4, r7
    f068:	62b7      	str	r7, [r6, #40]	; 0x28
    f06a:	4652      	mov	r2, sl
    f06c:	18a2      	adds	r2, r4, r2
    f06e:	6232      	str	r2, [r6, #32]
    f070:	200d      	movs	r0, #13
    f072:	4642      	mov	r2, r8
    f074:	2a00      	cmp	r2, #0
    f076:	d000      	beq.n	f07a <chk_mounted+0x23a>
    f078:	e6f7      	b.n	ee6a <chk_mounted+0x2a>
    f07a:	225f      	movs	r2, #95	; 0x5f
    f07c:	5cb2      	ldrb	r2, [r6, r2]
    f07e:	0612      	lsls	r2, r2, #24
    f080:	215e      	movs	r1, #94	; 0x5e
    f082:	5c71      	ldrb	r1, [r6, r1]
    f084:	0409      	lsls	r1, r1, #16
    f086:	430a      	orrs	r2, r1
    f088:	215c      	movs	r1, #92	; 0x5c
    f08a:	5c71      	ldrb	r1, [r6, r1]
    f08c:	430a      	orrs	r2, r1
    f08e:	215d      	movs	r1, #93	; 0x5d
    f090:	5c71      	ldrb	r1, [r6, r1]
    f092:	0209      	lsls	r1, r1, #8
    f094:	430a      	orrs	r2, r1
    f096:	6272      	str	r2, [r6, #36]	; 0x24
    f098:	009b      	lsls	r3, r3, #2
    f09a:	4a44      	ldr	r2, [pc, #272]	; (f1ac <chk_mounted+0x36c>)
    f09c:	4694      	mov	ip, r2
    f09e:	4463      	add	r3, ip
    f0a0:	0a5b      	lsrs	r3, r3, #9
    f0a2:	200d      	movs	r0, #13
    f0a4:	429d      	cmp	r5, r3
    f0a6:	d200      	bcs.n	f0aa <chk_mounted+0x26a>
    f0a8:	e6df      	b.n	ee6a <chk_mounted+0x2a>
    f0aa:	2301      	movs	r3, #1
    f0ac:	425b      	negs	r3, r3
    f0ae:	6133      	str	r3, [r6, #16]
    f0b0:	2300      	movs	r3, #0
    f0b2:	60f3      	str	r3, [r6, #12]
    f0b4:	7173      	strb	r3, [r6, #5]
    f0b6:	3361      	adds	r3, #97	; 0x61
    f0b8:	5cf3      	ldrb	r3, [r6, r3]
    f0ba:	021b      	lsls	r3, r3, #8
    f0bc:	2260      	movs	r2, #96	; 0x60
    f0be:	5cb2      	ldrb	r2, [r6, r2]
    f0c0:	431a      	orrs	r2, r3
    f0c2:	1912      	adds	r2, r2, r4
    f0c4:	6172      	str	r2, [r6, #20]
    f0c6:	0031      	movs	r1, r6
    f0c8:	3130      	adds	r1, #48	; 0x30
    f0ca:	7870      	ldrb	r0, [r6, #1]
    f0cc:	2301      	movs	r3, #1
    f0ce:	4c38      	ldr	r4, [pc, #224]	; (f1b0 <chk_mounted+0x370>)
    f0d0:	47a0      	blx	r4
    f0d2:	2203      	movs	r2, #3
    f0d4:	2800      	cmp	r0, #0
    f0d6:	d150      	bne.n	f17a <chk_mounted+0x33a>
    f0d8:	4b36      	ldr	r3, [pc, #216]	; (f1b4 <chk_mounted+0x374>)
    f0da:	5cf2      	ldrb	r2, [r6, r3]
    f0dc:	0212      	lsls	r2, r2, #8
    f0de:	4b36      	ldr	r3, [pc, #216]	; (f1b8 <chk_mounted+0x378>)
    f0e0:	5cf3      	ldrb	r3, [r6, r3]
    f0e2:	4313      	orrs	r3, r2
    f0e4:	4935      	ldr	r1, [pc, #212]	; (f1bc <chk_mounted+0x37c>)
    f0e6:	b21b      	sxth	r3, r3
    f0e8:	2203      	movs	r2, #3
    f0ea:	428b      	cmp	r3, r1
    f0ec:	d145      	bne.n	f17a <chk_mounted+0x33a>
    f0ee:	2333      	movs	r3, #51	; 0x33
    f0f0:	5cf3      	ldrb	r3, [r6, r3]
    f0f2:	061b      	lsls	r3, r3, #24
    f0f4:	322f      	adds	r2, #47	; 0x2f
    f0f6:	5cb2      	ldrb	r2, [r6, r2]
    f0f8:	0412      	lsls	r2, r2, #16
    f0fa:	4313      	orrs	r3, r2
    f0fc:	2230      	movs	r2, #48	; 0x30
    f0fe:	5cb2      	ldrb	r2, [r6, r2]
    f100:	4313      	orrs	r3, r2
    f102:	2231      	movs	r2, #49	; 0x31
    f104:	5cb2      	ldrb	r2, [r6, r2]
    f106:	0212      	lsls	r2, r2, #8
    f108:	4313      	orrs	r3, r2
    f10a:	492d      	ldr	r1, [pc, #180]	; (f1c0 <chk_mounted+0x380>)
    f10c:	2203      	movs	r2, #3
    f10e:	428b      	cmp	r3, r1
    f110:	d133      	bne.n	f17a <chk_mounted+0x33a>
    f112:	4b2c      	ldr	r3, [pc, #176]	; (f1c4 <chk_mounted+0x384>)
    f114:	5cf3      	ldrb	r3, [r6, r3]
    f116:	061b      	lsls	r3, r3, #24
    f118:	4a2b      	ldr	r2, [pc, #172]	; (f1c8 <chk_mounted+0x388>)
    f11a:	5cb2      	ldrb	r2, [r6, r2]
    f11c:	0412      	lsls	r2, r2, #16
    f11e:	4313      	orrs	r3, r2
    f120:	2285      	movs	r2, #133	; 0x85
    f122:	0092      	lsls	r2, r2, #2
    f124:	5cb2      	ldrb	r2, [r6, r2]
    f126:	4313      	orrs	r3, r2
    f128:	4a28      	ldr	r2, [pc, #160]	; (f1cc <chk_mounted+0x38c>)
    f12a:	5cb2      	ldrb	r2, [r6, r2]
    f12c:	0212      	lsls	r2, r2, #8
    f12e:	4313      	orrs	r3, r2
    f130:	4927      	ldr	r1, [pc, #156]	; (f1d0 <chk_mounted+0x390>)
    f132:	2203      	movs	r2, #3
    f134:	428b      	cmp	r3, r1
    f136:	d120      	bne.n	f17a <chk_mounted+0x33a>
    f138:	4b26      	ldr	r3, [pc, #152]	; (f1d4 <chk_mounted+0x394>)
    f13a:	5cf3      	ldrb	r3, [r6, r3]
    f13c:	061b      	lsls	r3, r3, #24
    f13e:	4a26      	ldr	r2, [pc, #152]	; (f1d8 <chk_mounted+0x398>)
    f140:	5cb2      	ldrb	r2, [r6, r2]
    f142:	0412      	lsls	r2, r2, #16
    f144:	4313      	orrs	r3, r2
    f146:	2287      	movs	r2, #135	; 0x87
    f148:	0092      	lsls	r2, r2, #2
    f14a:	5cb2      	ldrb	r2, [r6, r2]
    f14c:	4313      	orrs	r3, r2
    f14e:	4a23      	ldr	r2, [pc, #140]	; (f1dc <chk_mounted+0x39c>)
    f150:	5cb2      	ldrb	r2, [r6, r2]
    f152:	0212      	lsls	r2, r2, #8
    f154:	4313      	orrs	r3, r2
    f156:	60f3      	str	r3, [r6, #12]
    f158:	4b21      	ldr	r3, [pc, #132]	; (f1e0 <chk_mounted+0x3a0>)
    f15a:	5cf3      	ldrb	r3, [r6, r3]
    f15c:	061b      	lsls	r3, r3, #24
    f15e:	4a21      	ldr	r2, [pc, #132]	; (f1e4 <chk_mounted+0x3a4>)
    f160:	5cb2      	ldrb	r2, [r6, r2]
    f162:	0412      	lsls	r2, r2, #16
    f164:	4313      	orrs	r3, r2
    f166:	2286      	movs	r2, #134	; 0x86
    f168:	0092      	lsls	r2, r2, #2
    f16a:	5cb2      	ldrb	r2, [r6, r2]
    f16c:	4313      	orrs	r3, r2
    f16e:	4a1e      	ldr	r2, [pc, #120]	; (f1e8 <chk_mounted+0x3a8>)
    f170:	5cb2      	ldrb	r2, [r6, r2]
    f172:	0212      	lsls	r2, r2, #8
    f174:	4313      	orrs	r3, r2
    f176:	6133      	str	r3, [r6, #16]
    f178:	2203      	movs	r2, #3
    f17a:	7032      	strb	r2, [r6, #0]
    f17c:	4a1b      	ldr	r2, [pc, #108]	; (f1ec <chk_mounted+0x3ac>)
    f17e:	8813      	ldrh	r3, [r2, #0]
    f180:	3301      	adds	r3, #1
    f182:	b29b      	uxth	r3, r3
    f184:	8013      	strh	r3, [r2, #0]
    f186:	80f3      	strh	r3, [r6, #6]
    f188:	2000      	movs	r0, #0
    f18a:	62f0      	str	r0, [r6, #44]	; 0x2c
    f18c:	7130      	strb	r0, [r6, #4]
    f18e:	e66c      	b.n	ee6a <chk_mounted+0x2a>
    f190:	20003f18 	.word	0x20003f18
    f194:	0000eb31 	.word	0x0000eb31
    f198:	0000ea95 	.word	0x0000ea95
    f19c:	0000ed9d 	.word	0x0000ed9d
    f1a0:	00011d75 	.word	0x00011d75
    f1a4:	00000ff5 	.word	0x00000ff5
    f1a8:	0000fff5 	.word	0x0000fff5
    f1ac:	000001ff 	.word	0x000001ff
    f1b0:	0000eb4d 	.word	0x0000eb4d
    f1b4:	0000022f 	.word	0x0000022f
    f1b8:	0000022e 	.word	0x0000022e
    f1bc:	ffffaa55 	.word	0xffffaa55
    f1c0:	41615252 	.word	0x41615252
    f1c4:	00000217 	.word	0x00000217
    f1c8:	00000216 	.word	0x00000216
    f1cc:	00000215 	.word	0x00000215
    f1d0:	61417272 	.word	0x61417272
    f1d4:	0000021f 	.word	0x0000021f
    f1d8:	0000021e 	.word	0x0000021e
    f1dc:	0000021d 	.word	0x0000021d
    f1e0:	0000021b 	.word	0x0000021b
    f1e4:	0000021a 	.word	0x0000021a
    f1e8:	00000219 	.word	0x00000219
    f1ec:	20003f38 	.word	0x20003f38

0000f1f0 <move_window>:
    f1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1f2:	46ce      	mov	lr, r9
    f1f4:	b500      	push	{lr}
    f1f6:	b082      	sub	sp, #8
    f1f8:	0004      	movs	r4, r0
    f1fa:	000f      	movs	r7, r1
    f1fc:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
    f1fe:	428d      	cmp	r5, r1
    f200:	d03f      	beq.n	f282 <move_window+0x92>
    f202:	7903      	ldrb	r3, [r0, #4]
    f204:	2b00      	cmp	r3, #0
    f206:	d107      	bne.n	f218 <move_window+0x28>
    f208:	2300      	movs	r3, #0
    f20a:	2f00      	cmp	r7, #0
    f20c:	d12c      	bne.n	f268 <move_window+0x78>
    f20e:	0018      	movs	r0, r3
    f210:	b002      	add	sp, #8
    f212:	bc04      	pop	{r2}
    f214:	4691      	mov	r9, r2
    f216:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f218:	2330      	movs	r3, #48	; 0x30
    f21a:	469c      	mov	ip, r3
    f21c:	4484      	add	ip, r0
    f21e:	4663      	mov	r3, ip
    f220:	4661      	mov	r1, ip
    f222:	9301      	str	r3, [sp, #4]
    f224:	7840      	ldrb	r0, [r0, #1]
    f226:	2301      	movs	r3, #1
    f228:	002a      	movs	r2, r5
    f22a:	4e17      	ldr	r6, [pc, #92]	; (f288 <move_window+0x98>)
    f22c:	47b0      	blx	r6
    f22e:	2301      	movs	r3, #1
    f230:	2800      	cmp	r0, #0
    f232:	d1ec      	bne.n	f20e <move_window+0x1e>
    f234:	2300      	movs	r3, #0
    f236:	7123      	strb	r3, [r4, #4]
    f238:	6a23      	ldr	r3, [r4, #32]
    f23a:	69e2      	ldr	r2, [r4, #28]
    f23c:	4694      	mov	ip, r2
    f23e:	4463      	add	r3, ip
    f240:	429d      	cmp	r5, r3
    f242:	d2e1      	bcs.n	f208 <move_window+0x18>
    f244:	78e6      	ldrb	r6, [r4, #3]
    f246:	2e01      	cmp	r6, #1
    f248:	d9de      	bls.n	f208 <move_window+0x18>
    f24a:	4b0f      	ldr	r3, [pc, #60]	; (f288 <move_window+0x98>)
    f24c:	4699      	mov	r9, r3
    f24e:	69e3      	ldr	r3, [r4, #28]
    f250:	469c      	mov	ip, r3
    f252:	4465      	add	r5, ip
    f254:	7860      	ldrb	r0, [r4, #1]
    f256:	2301      	movs	r3, #1
    f258:	002a      	movs	r2, r5
    f25a:	9901      	ldr	r1, [sp, #4]
    f25c:	47c8      	blx	r9
    f25e:	3e01      	subs	r6, #1
    f260:	b2f6      	uxtb	r6, r6
    f262:	2e01      	cmp	r6, #1
    f264:	d1f3      	bne.n	f24e <move_window+0x5e>
    f266:	e7cf      	b.n	f208 <move_window+0x18>
    f268:	0021      	movs	r1, r4
    f26a:	3130      	adds	r1, #48	; 0x30
    f26c:	7860      	ldrb	r0, [r4, #1]
    f26e:	3301      	adds	r3, #1
    f270:	003a      	movs	r2, r7
    f272:	4d06      	ldr	r5, [pc, #24]	; (f28c <move_window+0x9c>)
    f274:	47a8      	blx	r5
    f276:	2301      	movs	r3, #1
    f278:	2800      	cmp	r0, #0
    f27a:	d1c8      	bne.n	f20e <move_window+0x1e>
    f27c:	62e7      	str	r7, [r4, #44]	; 0x2c
    f27e:	2300      	movs	r3, #0
    f280:	e7c5      	b.n	f20e <move_window+0x1e>
    f282:	2300      	movs	r3, #0
    f284:	e7c3      	b.n	f20e <move_window+0x1e>
    f286:	46c0      	nop			; (mov r8, r8)
    f288:	0000ebd1 	.word	0x0000ebd1
    f28c:	0000eb4d 	.word	0x0000eb4d

0000f290 <get_fat>:
    f290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f292:	0005      	movs	r5, r0
    f294:	000c      	movs	r4, r1
    f296:	2901      	cmp	r1, #1
    f298:	d974      	bls.n	f384 <get_fat+0xf4>
    f29a:	2001      	movs	r0, #1
    f29c:	69ab      	ldr	r3, [r5, #24]
    f29e:	4299      	cmp	r1, r3
    f2a0:	d271      	bcs.n	f386 <get_fat+0xf6>
    f2a2:	782b      	ldrb	r3, [r5, #0]
    f2a4:	2b02      	cmp	r3, #2
    f2a6:	d034      	beq.n	f312 <get_fat+0x82>
    f2a8:	2b03      	cmp	r3, #3
    f2aa:	d049      	beq.n	f340 <get_fat+0xb0>
    f2ac:	2b01      	cmp	r3, #1
    f2ae:	d002      	beq.n	f2b6 <get_fat+0x26>
    f2b0:	2001      	movs	r0, #1
    f2b2:	4240      	negs	r0, r0
    f2b4:	e067      	b.n	f386 <get_fat+0xf6>
    f2b6:	084e      	lsrs	r6, r1, #1
    f2b8:	1876      	adds	r6, r6, r1
    f2ba:	0a71      	lsrs	r1, r6, #9
    f2bc:	6a2b      	ldr	r3, [r5, #32]
    f2be:	469c      	mov	ip, r3
    f2c0:	4461      	add	r1, ip
    f2c2:	0028      	movs	r0, r5
    f2c4:	4b30      	ldr	r3, [pc, #192]	; (f388 <get_fat+0xf8>)
    f2c6:	4798      	blx	r3
    f2c8:	2800      	cmp	r0, #0
    f2ca:	d002      	beq.n	f2d2 <get_fat+0x42>
    f2cc:	2001      	movs	r0, #1
    f2ce:	4240      	negs	r0, r0
    f2d0:	e059      	b.n	f386 <get_fat+0xf6>
    f2d2:	05f3      	lsls	r3, r6, #23
    f2d4:	0ddb      	lsrs	r3, r3, #23
    f2d6:	18eb      	adds	r3, r5, r3
    f2d8:	3330      	adds	r3, #48	; 0x30
    f2da:	781f      	ldrb	r7, [r3, #0]
    f2dc:	3601      	adds	r6, #1
    f2de:	0a71      	lsrs	r1, r6, #9
    f2e0:	6a2b      	ldr	r3, [r5, #32]
    f2e2:	469c      	mov	ip, r3
    f2e4:	4461      	add	r1, ip
    f2e6:	0028      	movs	r0, r5
    f2e8:	4b27      	ldr	r3, [pc, #156]	; (f388 <get_fat+0xf8>)
    f2ea:	4798      	blx	r3
    f2ec:	2800      	cmp	r0, #0
    f2ee:	d002      	beq.n	f2f6 <get_fat+0x66>
    f2f0:	2001      	movs	r0, #1
    f2f2:	4240      	negs	r0, r0
    f2f4:	e047      	b.n	f386 <get_fat+0xf6>
    f2f6:	05f6      	lsls	r6, r6, #23
    f2f8:	0df6      	lsrs	r6, r6, #23
    f2fa:	19ad      	adds	r5, r5, r6
    f2fc:	3530      	adds	r5, #48	; 0x30
    f2fe:	7828      	ldrb	r0, [r5, #0]
    f300:	0200      	lsls	r0, r0, #8
    f302:	4338      	orrs	r0, r7
    f304:	07e3      	lsls	r3, r4, #31
    f306:	d501      	bpl.n	f30c <get_fat+0x7c>
    f308:	0900      	lsrs	r0, r0, #4
    f30a:	e03c      	b.n	f386 <get_fat+0xf6>
    f30c:	0500      	lsls	r0, r0, #20
    f30e:	0d00      	lsrs	r0, r0, #20
    f310:	e039      	b.n	f386 <get_fat+0xf6>
    f312:	0a09      	lsrs	r1, r1, #8
    f314:	6a2b      	ldr	r3, [r5, #32]
    f316:	469c      	mov	ip, r3
    f318:	4461      	add	r1, ip
    f31a:	0028      	movs	r0, r5
    f31c:	4b1a      	ldr	r3, [pc, #104]	; (f388 <get_fat+0xf8>)
    f31e:	4798      	blx	r3
    f320:	2800      	cmp	r0, #0
    f322:	d002      	beq.n	f32a <get_fat+0x9a>
    f324:	2001      	movs	r0, #1
    f326:	4240      	negs	r0, r0
    f328:	e02d      	b.n	f386 <get_fat+0xf6>
    f32a:	0064      	lsls	r4, r4, #1
    f32c:	23ff      	movs	r3, #255	; 0xff
    f32e:	005b      	lsls	r3, r3, #1
    f330:	401c      	ands	r4, r3
    f332:	192d      	adds	r5, r5, r4
    f334:	3530      	adds	r5, #48	; 0x30
    f336:	786b      	ldrb	r3, [r5, #1]
    f338:	021b      	lsls	r3, r3, #8
    f33a:	7828      	ldrb	r0, [r5, #0]
    f33c:	4318      	orrs	r0, r3
    f33e:	e022      	b.n	f386 <get_fat+0xf6>
    f340:	09c9      	lsrs	r1, r1, #7
    f342:	6a2b      	ldr	r3, [r5, #32]
    f344:	469c      	mov	ip, r3
    f346:	4461      	add	r1, ip
    f348:	0028      	movs	r0, r5
    f34a:	4b0f      	ldr	r3, [pc, #60]	; (f388 <get_fat+0xf8>)
    f34c:	4798      	blx	r3
    f34e:	2800      	cmp	r0, #0
    f350:	d002      	beq.n	f358 <get_fat+0xc8>
    f352:	2001      	movs	r0, #1
    f354:	4240      	negs	r0, r0
    f356:	e016      	b.n	f386 <get_fat+0xf6>
    f358:	00a4      	lsls	r4, r4, #2
    f35a:	23fe      	movs	r3, #254	; 0xfe
    f35c:	005b      	lsls	r3, r3, #1
    f35e:	401c      	ands	r4, r3
    f360:	0023      	movs	r3, r4
    f362:	3330      	adds	r3, #48	; 0x30
    f364:	18eb      	adds	r3, r5, r3
    f366:	78d8      	ldrb	r0, [r3, #3]
    f368:	0600      	lsls	r0, r0, #24
    f36a:	789a      	ldrb	r2, [r3, #2]
    f36c:	0412      	lsls	r2, r2, #16
    f36e:	4310      	orrs	r0, r2
    f370:	192c      	adds	r4, r5, r4
    f372:	3430      	adds	r4, #48	; 0x30
    f374:	7822      	ldrb	r2, [r4, #0]
    f376:	4310      	orrs	r0, r2
    f378:	785b      	ldrb	r3, [r3, #1]
    f37a:	021b      	lsls	r3, r3, #8
    f37c:	4318      	orrs	r0, r3
    f37e:	0100      	lsls	r0, r0, #4
    f380:	0900      	lsrs	r0, r0, #4
    f382:	e000      	b.n	f386 <get_fat+0xf6>
    f384:	2001      	movs	r0, #1
    f386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f388:	0000f1f1 	.word	0x0000f1f1

0000f38c <dir_sdi>:
    f38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f38e:	0004      	movs	r4, r0
    f390:	000d      	movs	r5, r1
    f392:	80e1      	strh	r1, [r4, #6]
    f394:	6881      	ldr	r1, [r0, #8]
    f396:	2002      	movs	r0, #2
    f398:	2901      	cmp	r1, #1
    f39a:	d003      	beq.n	f3a4 <dir_sdi+0x18>
    f39c:	6823      	ldr	r3, [r4, #0]
    f39e:	699a      	ldr	r2, [r3, #24]
    f3a0:	4291      	cmp	r1, r2
    f3a2:	d300      	bcc.n	f3a6 <dir_sdi+0x1a>
    f3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3a6:	2900      	cmp	r1, #0
    f3a8:	d119      	bne.n	f3de <dir_sdi+0x52>
    f3aa:	781a      	ldrb	r2, [r3, #0]
    f3ac:	2a03      	cmp	r2, #3
    f3ae:	d013      	beq.n	f3d8 <dir_sdi+0x4c>
    f3b0:	2200      	movs	r2, #0
    f3b2:	60e2      	str	r2, [r4, #12]
    f3b4:	891a      	ldrh	r2, [r3, #8]
    f3b6:	2002      	movs	r0, #2
    f3b8:	42aa      	cmp	r2, r5
    f3ba:	d9f3      	bls.n	f3a4 <dir_sdi+0x18>
    f3bc:	092a      	lsrs	r2, r5, #4
    f3be:	b292      	uxth	r2, r2
    f3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f3c2:	189b      	adds	r3, r3, r2
    f3c4:	6123      	str	r3, [r4, #16]
    f3c6:	6823      	ldr	r3, [r4, #0]
    f3c8:	3330      	adds	r3, #48	; 0x30
    f3ca:	220f      	movs	r2, #15
    f3cc:	4015      	ands	r5, r2
    f3ce:	016d      	lsls	r5, r5, #5
    f3d0:	195d      	adds	r5, r3, r5
    f3d2:	6165      	str	r5, [r4, #20]
    f3d4:	2000      	movs	r0, #0
    f3d6:	e7e5      	b.n	f3a4 <dir_sdi+0x18>
    f3d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
    f3da:	2900      	cmp	r1, #0
    f3dc:	d0e8      	beq.n	f3b0 <dir_sdi+0x24>
    f3de:	789e      	ldrb	r6, [r3, #2]
    f3e0:	0136      	lsls	r6, r6, #4
    f3e2:	42b5      	cmp	r5, r6
    f3e4:	d313      	bcc.n	f40e <dir_sdi+0x82>
    f3e6:	1bad      	subs	r5, r5, r6
    f3e8:	b2ad      	uxth	r5, r5
    f3ea:	4f10      	ldr	r7, [pc, #64]	; (f42c <dir_sdi+0xa0>)
    f3ec:	e000      	b.n	f3f0 <dir_sdi+0x64>
    f3ee:	001d      	movs	r5, r3
    f3f0:	6820      	ldr	r0, [r4, #0]
    f3f2:	47b8      	blx	r7
    f3f4:	0001      	movs	r1, r0
    f3f6:	1c43      	adds	r3, r0, #1
    f3f8:	d012      	beq.n	f420 <dir_sdi+0x94>
    f3fa:	2801      	cmp	r0, #1
    f3fc:	d912      	bls.n	f424 <dir_sdi+0x98>
    f3fe:	6823      	ldr	r3, [r4, #0]
    f400:	699b      	ldr	r3, [r3, #24]
    f402:	4298      	cmp	r0, r3
    f404:	d210      	bcs.n	f428 <dir_sdi+0x9c>
    f406:	1bab      	subs	r3, r5, r6
    f408:	b29b      	uxth	r3, r3
    f40a:	42b5      	cmp	r5, r6
    f40c:	d2ef      	bcs.n	f3ee <dir_sdi+0x62>
    f40e:	60e1      	str	r1, [r4, #12]
    f410:	6820      	ldr	r0, [r4, #0]
    f412:	4b07      	ldr	r3, [pc, #28]	; (f430 <dir_sdi+0xa4>)
    f414:	4798      	blx	r3
    f416:	092b      	lsrs	r3, r5, #4
    f418:	b29b      	uxth	r3, r3
    f41a:	1818      	adds	r0, r3, r0
    f41c:	6120      	str	r0, [r4, #16]
    f41e:	e7d2      	b.n	f3c6 <dir_sdi+0x3a>
    f420:	2001      	movs	r0, #1
    f422:	e7bf      	b.n	f3a4 <dir_sdi+0x18>
    f424:	2002      	movs	r0, #2
    f426:	e7bd      	b.n	f3a4 <dir_sdi+0x18>
    f428:	2002      	movs	r0, #2
    f42a:	e7bb      	b.n	f3a4 <dir_sdi+0x18>
    f42c:	0000f291 	.word	0x0000f291
    f430:	0000ed37 	.word	0x0000ed37

0000f434 <put_fat>:
    f434:	b5f0      	push	{r4, r5, r6, r7, lr}
    f436:	46c6      	mov	lr, r8
    f438:	b500      	push	{lr}
    f43a:	0007      	movs	r7, r0
    f43c:	000c      	movs	r4, r1
    f43e:	0016      	movs	r6, r2
    f440:	2502      	movs	r5, #2
    f442:	2901      	cmp	r1, #1
    f444:	d902      	bls.n	f44c <put_fat+0x18>
    f446:	6983      	ldr	r3, [r0, #24]
    f448:	4299      	cmp	r1, r3
    f44a:	d303      	bcc.n	f454 <put_fat+0x20>
    f44c:	0028      	movs	r0, r5
    f44e:	bc04      	pop	{r2}
    f450:	4690      	mov	r8, r2
    f452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f454:	7803      	ldrb	r3, [r0, #0]
    f456:	2b02      	cmp	r3, #2
    f458:	d053      	beq.n	f502 <put_fat+0xce>
    f45a:	2b03      	cmp	r3, #3
    f45c:	d063      	beq.n	f526 <put_fat+0xf2>
    f45e:	2502      	movs	r5, #2
    f460:	2b01      	cmp	r3, #1
    f462:	d002      	beq.n	f46a <put_fat+0x36>
    f464:	2301      	movs	r3, #1
    f466:	713b      	strb	r3, [r7, #4]
    f468:	e7f0      	b.n	f44c <put_fat+0x18>
    f46a:	084b      	lsrs	r3, r1, #1
    f46c:	4698      	mov	r8, r3
    f46e:	4488      	add	r8, r1
    f470:	4643      	mov	r3, r8
    f472:	0a59      	lsrs	r1, r3, #9
    f474:	6a03      	ldr	r3, [r0, #32]
    f476:	469c      	mov	ip, r3
    f478:	4461      	add	r1, ip
    f47a:	4b3b      	ldr	r3, [pc, #236]	; (f568 <put_fat+0x134>)
    f47c:	4798      	blx	r3
    f47e:	1e05      	subs	r5, r0, #0
    f480:	d1f0      	bne.n	f464 <put_fat+0x30>
    f482:	4643      	mov	r3, r8
    f484:	05db      	lsls	r3, r3, #23
    f486:	0ddb      	lsrs	r3, r3, #23
    f488:	07e2      	lsls	r2, r4, #31
    f48a:	d51f      	bpl.n	f4cc <put_fat+0x98>
    f48c:	18fb      	adds	r3, r7, r3
    f48e:	3330      	adds	r3, #48	; 0x30
    f490:	7819      	ldrb	r1, [r3, #0]
    f492:	220f      	movs	r2, #15
    f494:	400a      	ands	r2, r1
    f496:	0131      	lsls	r1, r6, #4
    f498:	20ff      	movs	r0, #255	; 0xff
    f49a:	0100      	lsls	r0, r0, #4
    f49c:	4001      	ands	r1, r0
    f49e:	430a      	orrs	r2, r1
    f4a0:	701a      	strb	r2, [r3, #0]
    f4a2:	4644      	mov	r4, r8
    f4a4:	3401      	adds	r4, #1
    f4a6:	2301      	movs	r3, #1
    f4a8:	713b      	strb	r3, [r7, #4]
    f4aa:	0a61      	lsrs	r1, r4, #9
    f4ac:	6a3b      	ldr	r3, [r7, #32]
    f4ae:	469c      	mov	ip, r3
    f4b0:	4461      	add	r1, ip
    f4b2:	0038      	movs	r0, r7
    f4b4:	4b2c      	ldr	r3, [pc, #176]	; (f568 <put_fat+0x134>)
    f4b6:	4798      	blx	r3
    f4b8:	2800      	cmp	r0, #0
    f4ba:	d151      	bne.n	f560 <put_fat+0x12c>
    f4bc:	05e4      	lsls	r4, r4, #23
    f4be:	0de4      	lsrs	r4, r4, #23
    f4c0:	0936      	lsrs	r6, r6, #4
    f4c2:	b2f6      	uxtb	r6, r6
    f4c4:	193c      	adds	r4, r7, r4
    f4c6:	3430      	adds	r4, #48	; 0x30
    f4c8:	7026      	strb	r6, [r4, #0]
    f4ca:	e7cb      	b.n	f464 <put_fat+0x30>
    f4cc:	18fb      	adds	r3, r7, r3
    f4ce:	3330      	adds	r3, #48	; 0x30
    f4d0:	701e      	strb	r6, [r3, #0]
    f4d2:	4644      	mov	r4, r8
    f4d4:	3401      	adds	r4, #1
    f4d6:	2301      	movs	r3, #1
    f4d8:	713b      	strb	r3, [r7, #4]
    f4da:	0a61      	lsrs	r1, r4, #9
    f4dc:	6a3b      	ldr	r3, [r7, #32]
    f4de:	469c      	mov	ip, r3
    f4e0:	4461      	add	r1, ip
    f4e2:	0038      	movs	r0, r7
    f4e4:	4b20      	ldr	r3, [pc, #128]	; (f568 <put_fat+0x134>)
    f4e6:	4798      	blx	r3
    f4e8:	2800      	cmp	r0, #0
    f4ea:	d13b      	bne.n	f564 <put_fat+0x130>
    f4ec:	05e4      	lsls	r4, r4, #23
    f4ee:	0de4      	lsrs	r4, r4, #23
    f4f0:	193b      	adds	r3, r7, r4
    f4f2:	3330      	adds	r3, #48	; 0x30
    f4f4:	781b      	ldrb	r3, [r3, #0]
    f4f6:	220f      	movs	r2, #15
    f4f8:	4393      	bics	r3, r2
    f4fa:	0536      	lsls	r6, r6, #20
    f4fc:	0f36      	lsrs	r6, r6, #28
    f4fe:	431e      	orrs	r6, r3
    f500:	e7e0      	b.n	f4c4 <put_fat+0x90>
    f502:	0a09      	lsrs	r1, r1, #8
    f504:	6a03      	ldr	r3, [r0, #32]
    f506:	469c      	mov	ip, r3
    f508:	4461      	add	r1, ip
    f50a:	4b17      	ldr	r3, [pc, #92]	; (f568 <put_fat+0x134>)
    f50c:	4798      	blx	r3
    f50e:	1e05      	subs	r5, r0, #0
    f510:	d1a8      	bne.n	f464 <put_fat+0x30>
    f512:	0063      	lsls	r3, r4, #1
    f514:	24ff      	movs	r4, #255	; 0xff
    f516:	0064      	lsls	r4, r4, #1
    f518:	4023      	ands	r3, r4
    f51a:	18fb      	adds	r3, r7, r3
    f51c:	3330      	adds	r3, #48	; 0x30
    f51e:	701e      	strb	r6, [r3, #0]
    f520:	0a36      	lsrs	r6, r6, #8
    f522:	705e      	strb	r6, [r3, #1]
    f524:	e79e      	b.n	f464 <put_fat+0x30>
    f526:	09c9      	lsrs	r1, r1, #7
    f528:	6a03      	ldr	r3, [r0, #32]
    f52a:	469c      	mov	ip, r3
    f52c:	4461      	add	r1, ip
    f52e:	4b0e      	ldr	r3, [pc, #56]	; (f568 <put_fat+0x134>)
    f530:	4798      	blx	r3
    f532:	1e05      	subs	r5, r0, #0
    f534:	d196      	bne.n	f464 <put_fat+0x30>
    f536:	00a4      	lsls	r4, r4, #2
    f538:	23fe      	movs	r3, #254	; 0xfe
    f53a:	005b      	lsls	r3, r3, #1
    f53c:	401c      	ands	r4, r3
    f53e:	0022      	movs	r2, r4
    f540:	3230      	adds	r2, #48	; 0x30
    f542:	18ba      	adds	r2, r7, r2
    f544:	78d3      	ldrb	r3, [r2, #3]
    f546:	193c      	adds	r4, r7, r4
    f548:	3430      	adds	r4, #48	; 0x30
    f54a:	091b      	lsrs	r3, r3, #4
    f54c:	071b      	lsls	r3, r3, #28
    f54e:	431e      	orrs	r6, r3
    f550:	7026      	strb	r6, [r4, #0]
    f552:	0a33      	lsrs	r3, r6, #8
    f554:	7053      	strb	r3, [r2, #1]
    f556:	0c33      	lsrs	r3, r6, #16
    f558:	7093      	strb	r3, [r2, #2]
    f55a:	0e36      	lsrs	r6, r6, #24
    f55c:	70d6      	strb	r6, [r2, #3]
    f55e:	e781      	b.n	f464 <put_fat+0x30>
    f560:	0005      	movs	r5, r0
    f562:	e77f      	b.n	f464 <put_fat+0x30>
    f564:	0005      	movs	r5, r0
    f566:	e77d      	b.n	f464 <put_fat+0x30>
    f568:	0000f1f1 	.word	0x0000f1f1

0000f56c <create_chain>:
    f56c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f56e:	46c6      	mov	lr, r8
    f570:	b500      	push	{lr}
    f572:	0005      	movs	r5, r0
    f574:	4688      	mov	r8, r1
    f576:	2900      	cmp	r1, #0
    f578:	d107      	bne.n	f58a <create_chain+0x1e>
    f57a:	68c6      	ldr	r6, [r0, #12]
    f57c:	2e00      	cmp	r6, #0
    f57e:	d00d      	beq.n	f59c <create_chain+0x30>
    f580:	6983      	ldr	r3, [r0, #24]
    f582:	429e      	cmp	r6, r3
    f584:	d30b      	bcc.n	f59e <create_chain+0x32>
    f586:	2601      	movs	r6, #1
    f588:	e009      	b.n	f59e <create_chain+0x32>
    f58a:	4b26      	ldr	r3, [pc, #152]	; (f624 <create_chain+0xb8>)
    f58c:	4798      	blx	r3
    f58e:	2801      	cmp	r0, #1
    f590:	d93d      	bls.n	f60e <create_chain+0xa2>
    f592:	69ab      	ldr	r3, [r5, #24]
    f594:	4646      	mov	r6, r8
    f596:	4298      	cmp	r0, r3
    f598:	d201      	bcs.n	f59e <create_chain+0x32>
    f59a:	e03d      	b.n	f618 <create_chain+0xac>
    f59c:	2601      	movs	r6, #1
    f59e:	0034      	movs	r4, r6
    f5a0:	4f20      	ldr	r7, [pc, #128]	; (f624 <create_chain+0xb8>)
    f5a2:	e00a      	b.n	f5ba <create_chain+0x4e>
    f5a4:	0021      	movs	r1, r4
    f5a6:	0028      	movs	r0, r5
    f5a8:	47b8      	blx	r7
    f5aa:	2800      	cmp	r0, #0
    f5ac:	d00d      	beq.n	f5ca <create_chain+0x5e>
    f5ae:	1c43      	adds	r3, r0, #1
    f5b0:	d032      	beq.n	f618 <create_chain+0xac>
    f5b2:	2801      	cmp	r0, #1
    f5b4:	d030      	beq.n	f618 <create_chain+0xac>
    f5b6:	42b4      	cmp	r4, r6
    f5b8:	d02d      	beq.n	f616 <create_chain+0xaa>
    f5ba:	3401      	adds	r4, #1
    f5bc:	69ab      	ldr	r3, [r5, #24]
    f5be:	429c      	cmp	r4, r3
    f5c0:	d3f0      	bcc.n	f5a4 <create_chain+0x38>
    f5c2:	2e01      	cmp	r6, #1
    f5c4:	d925      	bls.n	f612 <create_chain+0xa6>
    f5c6:	2402      	movs	r4, #2
    f5c8:	e7ec      	b.n	f5a4 <create_chain+0x38>
    f5ca:	4a17      	ldr	r2, [pc, #92]	; (f628 <create_chain+0xbc>)
    f5cc:	0021      	movs	r1, r4
    f5ce:	0028      	movs	r0, r5
    f5d0:	4b16      	ldr	r3, [pc, #88]	; (f62c <create_chain+0xc0>)
    f5d2:	4798      	blx	r3
    f5d4:	2800      	cmp	r0, #0
    f5d6:	d113      	bne.n	f600 <create_chain+0x94>
    f5d8:	4643      	mov	r3, r8
    f5da:	2b00      	cmp	r3, #0
    f5dc:	d109      	bne.n	f5f2 <create_chain+0x86>
    f5de:	60ec      	str	r4, [r5, #12]
    f5e0:	692b      	ldr	r3, [r5, #16]
    f5e2:	1c5a      	adds	r2, r3, #1
    f5e4:	d01b      	beq.n	f61e <create_chain+0xb2>
    f5e6:	3b01      	subs	r3, #1
    f5e8:	612b      	str	r3, [r5, #16]
    f5ea:	2301      	movs	r3, #1
    f5ec:	716b      	strb	r3, [r5, #5]
    f5ee:	0020      	movs	r0, r4
    f5f0:	e012      	b.n	f618 <create_chain+0xac>
    f5f2:	0022      	movs	r2, r4
    f5f4:	4641      	mov	r1, r8
    f5f6:	0028      	movs	r0, r5
    f5f8:	4b0c      	ldr	r3, [pc, #48]	; (f62c <create_chain+0xc0>)
    f5fa:	4798      	blx	r3
    f5fc:	2800      	cmp	r0, #0
    f5fe:	d0ee      	beq.n	f5de <create_chain+0x72>
    f600:	3801      	subs	r0, #1
    f602:	4242      	negs	r2, r0
    f604:	4142      	adcs	r2, r0
    f606:	4250      	negs	r0, r2
    f608:	2301      	movs	r3, #1
    f60a:	4318      	orrs	r0, r3
    f60c:	e004      	b.n	f618 <create_chain+0xac>
    f60e:	2001      	movs	r0, #1
    f610:	e002      	b.n	f618 <create_chain+0xac>
    f612:	2000      	movs	r0, #0
    f614:	e000      	b.n	f618 <create_chain+0xac>
    f616:	2000      	movs	r0, #0
    f618:	bc04      	pop	{r2}
    f61a:	4690      	mov	r8, r2
    f61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f61e:	0020      	movs	r0, r4
    f620:	e7fa      	b.n	f618 <create_chain+0xac>
    f622:	46c0      	nop			; (mov r8, r8)
    f624:	0000f291 	.word	0x0000f291
    f628:	0fffffff 	.word	0x0fffffff
    f62c:	0000f435 	.word	0x0000f435

0000f630 <remove_chain>:
    f630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f632:	46ce      	mov	lr, r9
    f634:	4647      	mov	r7, r8
    f636:	b580      	push	{r7, lr}
    f638:	0004      	movs	r4, r0
    f63a:	000d      	movs	r5, r1
    f63c:	2002      	movs	r0, #2
    f63e:	2901      	cmp	r1, #1
    f640:	d902      	bls.n	f648 <remove_chain+0x18>
    f642:	69a3      	ldr	r3, [r4, #24]
    f644:	4299      	cmp	r1, r3
    f646:	d303      	bcc.n	f650 <remove_chain+0x20>
    f648:	bc0c      	pop	{r2, r3}
    f64a:	4690      	mov	r8, r2
    f64c:	4699      	mov	r9, r3
    f64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f650:	4f13      	ldr	r7, [pc, #76]	; (f6a0 <remove_chain+0x70>)
    f652:	4b14      	ldr	r3, [pc, #80]	; (f6a4 <remove_chain+0x74>)
    f654:	4698      	mov	r8, r3
    f656:	2301      	movs	r3, #1
    f658:	4699      	mov	r9, r3
    f65a:	e003      	b.n	f664 <remove_chain+0x34>
    f65c:	0035      	movs	r5, r6
    f65e:	69a3      	ldr	r3, [r4, #24]
    f660:	42b3      	cmp	r3, r6
    f662:	d9f1      	bls.n	f648 <remove_chain+0x18>
    f664:	0029      	movs	r1, r5
    f666:	0020      	movs	r0, r4
    f668:	47b8      	blx	r7
    f66a:	1e06      	subs	r6, r0, #0
    f66c:	d011      	beq.n	f692 <remove_chain+0x62>
    f66e:	2801      	cmp	r0, #1
    f670:	d011      	beq.n	f696 <remove_chain+0x66>
    f672:	1c43      	adds	r3, r0, #1
    f674:	d011      	beq.n	f69a <remove_chain+0x6a>
    f676:	2200      	movs	r2, #0
    f678:	0029      	movs	r1, r5
    f67a:	0020      	movs	r0, r4
    f67c:	47c0      	blx	r8
    f67e:	2800      	cmp	r0, #0
    f680:	d1e2      	bne.n	f648 <remove_chain+0x18>
    f682:	6923      	ldr	r3, [r4, #16]
    f684:	1c5a      	adds	r2, r3, #1
    f686:	d0e9      	beq.n	f65c <remove_chain+0x2c>
    f688:	3301      	adds	r3, #1
    f68a:	6123      	str	r3, [r4, #16]
    f68c:	464b      	mov	r3, r9
    f68e:	7163      	strb	r3, [r4, #5]
    f690:	e7e4      	b.n	f65c <remove_chain+0x2c>
    f692:	2000      	movs	r0, #0
    f694:	e7d8      	b.n	f648 <remove_chain+0x18>
    f696:	2002      	movs	r0, #2
    f698:	e7d6      	b.n	f648 <remove_chain+0x18>
    f69a:	2001      	movs	r0, #1
    f69c:	e7d4      	b.n	f648 <remove_chain+0x18>
    f69e:	46c0      	nop			; (mov r8, r8)
    f6a0:	0000f291 	.word	0x0000f291
    f6a4:	0000f435 	.word	0x0000f435

0000f6a8 <dir_next>:
    f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6aa:	46d6      	mov	lr, sl
    f6ac:	4647      	mov	r7, r8
    f6ae:	b580      	push	{r7, lr}
    f6b0:	0006      	movs	r6, r0
    f6b2:	000d      	movs	r5, r1
    f6b4:	88c4      	ldrh	r4, [r0, #6]
    f6b6:	3401      	adds	r4, #1
    f6b8:	b2a4      	uxth	r4, r4
    f6ba:	2004      	movs	r0, #4
    f6bc:	2c00      	cmp	r4, #0
    f6be:	d103      	bne.n	f6c8 <dir_next+0x20>
    f6c0:	bc0c      	pop	{r2, r3}
    f6c2:	4690      	mov	r8, r2
    f6c4:	469a      	mov	sl, r3
    f6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f6c8:	6933      	ldr	r3, [r6, #16]
    f6ca:	2b00      	cmp	r3, #0
    f6cc:	d0f8      	beq.n	f6c0 <dir_next+0x18>
    f6ce:	270f      	movs	r7, #15
    f6d0:	4027      	ands	r7, r4
    f6d2:	d10f      	bne.n	f6f4 <dir_next+0x4c>
    f6d4:	3301      	adds	r3, #1
    f6d6:	6133      	str	r3, [r6, #16]
    f6d8:	68f1      	ldr	r1, [r6, #12]
    f6da:	2900      	cmp	r1, #0
    f6dc:	d104      	bne.n	f6e8 <dir_next+0x40>
    f6de:	6833      	ldr	r3, [r6, #0]
    f6e0:	891b      	ldrh	r3, [r3, #8]
    f6e2:	42a3      	cmp	r3, r4
    f6e4:	d9ec      	bls.n	f6c0 <dir_next+0x18>
    f6e6:	e005      	b.n	f6f4 <dir_next+0x4c>
    f6e8:	6830      	ldr	r0, [r6, #0]
    f6ea:	7883      	ldrb	r3, [r0, #2]
    f6ec:	3b01      	subs	r3, #1
    f6ee:	0922      	lsrs	r2, r4, #4
    f6f0:	421a      	tst	r2, r3
    f6f2:	d007      	beq.n	f704 <dir_next+0x5c>
    f6f4:	80f4      	strh	r4, [r6, #6]
    f6f6:	6833      	ldr	r3, [r6, #0]
    f6f8:	3330      	adds	r3, #48	; 0x30
    f6fa:	017f      	lsls	r7, r7, #5
    f6fc:	19df      	adds	r7, r3, r7
    f6fe:	6177      	str	r7, [r6, #20]
    f700:	2000      	movs	r0, #0
    f702:	e7dd      	b.n	f6c0 <dir_next+0x18>
    f704:	4b2c      	ldr	r3, [pc, #176]	; (f7b8 <dir_next+0x110>)
    f706:	4798      	blx	r3
    f708:	4680      	mov	r8, r0
    f70a:	2002      	movs	r0, #2
    f70c:	4643      	mov	r3, r8
    f70e:	2b01      	cmp	r3, #1
    f710:	d9d6      	bls.n	f6c0 <dir_next+0x18>
    f712:	3301      	adds	r3, #1
    f714:	d04b      	beq.n	f7ae <dir_next+0x106>
    f716:	6833      	ldr	r3, [r6, #0]
    f718:	699a      	ldr	r2, [r3, #24]
    f71a:	4590      	cmp	r8, r2
    f71c:	d33f      	bcc.n	f79e <dir_next+0xf6>
    f71e:	3002      	adds	r0, #2
    f720:	2d00      	cmp	r5, #0
    f722:	d0cd      	beq.n	f6c0 <dir_next+0x18>
    f724:	68f1      	ldr	r1, [r6, #12]
    f726:	0018      	movs	r0, r3
    f728:	4b24      	ldr	r3, [pc, #144]	; (f7bc <dir_next+0x114>)
    f72a:	4798      	blx	r3
    f72c:	4680      	mov	r8, r0
    f72e:	2007      	movs	r0, #7
    f730:	4643      	mov	r3, r8
    f732:	2b00      	cmp	r3, #0
    f734:	d0c4      	beq.n	f6c0 <dir_next+0x18>
    f736:	3805      	subs	r0, #5
    f738:	2b01      	cmp	r3, #1
    f73a:	d0c1      	beq.n	f6c0 <dir_next+0x18>
    f73c:	3801      	subs	r0, #1
    f73e:	3301      	adds	r3, #1
    f740:	d0be      	beq.n	f6c0 <dir_next+0x18>
    f742:	2100      	movs	r1, #0
    f744:	6830      	ldr	r0, [r6, #0]
    f746:	4b1e      	ldr	r3, [pc, #120]	; (f7c0 <dir_next+0x118>)
    f748:	4798      	blx	r3
    f74a:	0003      	movs	r3, r0
    f74c:	2001      	movs	r0, #1
    f74e:	2b00      	cmp	r3, #0
    f750:	d1b6      	bne.n	f6c0 <dir_next+0x18>
    f752:	6830      	ldr	r0, [r6, #0]
    f754:	3030      	adds	r0, #48	; 0x30
    f756:	2280      	movs	r2, #128	; 0x80
    f758:	0092      	lsls	r2, r2, #2
    f75a:	2100      	movs	r1, #0
    f75c:	4b19      	ldr	r3, [pc, #100]	; (f7c4 <dir_next+0x11c>)
    f75e:	4798      	blx	r3
    f760:	6835      	ldr	r5, [r6, #0]
    f762:	4641      	mov	r1, r8
    f764:	0028      	movs	r0, r5
    f766:	4b18      	ldr	r3, [pc, #96]	; (f7c8 <dir_next+0x120>)
    f768:	4798      	blx	r3
    f76a:	62e8      	str	r0, [r5, #44]	; 0x2c
    f76c:	2500      	movs	r5, #0
    f76e:	2301      	movs	r3, #1
    f770:	469a      	mov	sl, r3
    f772:	6833      	ldr	r3, [r6, #0]
    f774:	789a      	ldrb	r2, [r3, #2]
    f776:	42aa      	cmp	r2, r5
    f778:	d90e      	bls.n	f798 <dir_next+0xf0>
    f77a:	4652      	mov	r2, sl
    f77c:	711a      	strb	r2, [r3, #4]
    f77e:	2100      	movs	r1, #0
    f780:	6830      	ldr	r0, [r6, #0]
    f782:	4b0f      	ldr	r3, [pc, #60]	; (f7c0 <dir_next+0x118>)
    f784:	4798      	blx	r3
    f786:	2800      	cmp	r0, #0
    f788:	d113      	bne.n	f7b2 <dir_next+0x10a>
    f78a:	6832      	ldr	r2, [r6, #0]
    f78c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    f78e:	3301      	adds	r3, #1
    f790:	62d3      	str	r3, [r2, #44]	; 0x2c
    f792:	3501      	adds	r5, #1
    f794:	b2ed      	uxtb	r5, r5
    f796:	e7ec      	b.n	f772 <dir_next+0xca>
    f798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f79a:	1b52      	subs	r2, r2, r5
    f79c:	62da      	str	r2, [r3, #44]	; 0x2c
    f79e:	4643      	mov	r3, r8
    f7a0:	60f3      	str	r3, [r6, #12]
    f7a2:	4641      	mov	r1, r8
    f7a4:	6830      	ldr	r0, [r6, #0]
    f7a6:	4b08      	ldr	r3, [pc, #32]	; (f7c8 <dir_next+0x120>)
    f7a8:	4798      	blx	r3
    f7aa:	6130      	str	r0, [r6, #16]
    f7ac:	e7a2      	b.n	f6f4 <dir_next+0x4c>
    f7ae:	2001      	movs	r0, #1
    f7b0:	e786      	b.n	f6c0 <dir_next+0x18>
    f7b2:	2001      	movs	r0, #1
    f7b4:	e784      	b.n	f6c0 <dir_next+0x18>
    f7b6:	46c0      	nop			; (mov r8, r8)
    f7b8:	0000f291 	.word	0x0000f291
    f7bc:	0000f56d 	.word	0x0000f56d
    f7c0:	0000f1f1 	.word	0x0000f1f1
    f7c4:	0000ed25 	.word	0x0000ed25
    f7c8:	0000ed37 	.word	0x0000ed37

0000f7cc <dir_find>:
    f7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7ce:	46de      	mov	lr, fp
    f7d0:	4657      	mov	r7, sl
    f7d2:	464e      	mov	r6, r9
    f7d4:	4645      	mov	r5, r8
    f7d6:	b5e0      	push	{r5, r6, r7, lr}
    f7d8:	b083      	sub	sp, #12
    f7da:	0005      	movs	r5, r0
    f7dc:	2100      	movs	r1, #0
    f7de:	4b5a      	ldr	r3, [pc, #360]	; (f948 <dir_find+0x17c>)
    f7e0:	4798      	blx	r3
    f7e2:	1e07      	subs	r7, r0, #0
    f7e4:	d000      	beq.n	f7e8 <dir_find+0x1c>
    f7e6:	e09e      	b.n	f926 <dir_find+0x15a>
    f7e8:	23ff      	movs	r3, #255	; 0xff
    f7ea:	4699      	mov	r9, r3
    f7ec:	469a      	mov	sl, r3
    f7ee:	4b57      	ldr	r3, [pc, #348]	; (f94c <dir_find+0x180>)
    f7f0:	469b      	mov	fp, r3
    f7f2:	e01b      	b.n	f82c <dir_find+0x60>
    f7f4:	2b0f      	cmp	r3, #15
    f7f6:	d030      	beq.n	f85a <dir_find+0x8e>
    f7f8:	4653      	mov	r3, sl
    f7fa:	2b00      	cmp	r3, #0
    f7fc:	d105      	bne.n	f80a <dir_find+0x3e>
    f7fe:	0020      	movs	r0, r4
    f800:	4b53      	ldr	r3, [pc, #332]	; (f950 <dir_find+0x184>)
    f802:	4798      	blx	r3
    f804:	4581      	cmp	r9, r0
    f806:	d100      	bne.n	f80a <dir_find+0x3e>
    f808:	e08d      	b.n	f926 <dir_find+0x15a>
    f80a:	2301      	movs	r3, #1
    f80c:	425b      	negs	r3, r3
    f80e:	842b      	strh	r3, [r5, #32]
    f810:	69a8      	ldr	r0, [r5, #24]
    f812:	7ac3      	ldrb	r3, [r0, #11]
    f814:	07db      	lsls	r3, r3, #31
    f816:	d400      	bmi.n	f81a <dir_find+0x4e>
    f818:	e07d      	b.n	f916 <dir_find+0x14a>
    f81a:	23ff      	movs	r3, #255	; 0xff
    f81c:	469a      	mov	sl, r3
    f81e:	2100      	movs	r1, #0
    f820:	0028      	movs	r0, r5
    f822:	4b4c      	ldr	r3, [pc, #304]	; (f954 <dir_find+0x188>)
    f824:	4798      	blx	r3
    f826:	1e07      	subs	r7, r0, #0
    f828:	d000      	beq.n	f82c <dir_find+0x60>
    f82a:	e07c      	b.n	f926 <dir_find+0x15a>
    f82c:	6929      	ldr	r1, [r5, #16]
    f82e:	6828      	ldr	r0, [r5, #0]
    f830:	47d8      	blx	fp
    f832:	1e07      	subs	r7, r0, #0
    f834:	d177      	bne.n	f926 <dir_find+0x15a>
    f836:	696c      	ldr	r4, [r5, #20]
    f838:	7826      	ldrb	r6, [r4, #0]
    f83a:	2e00      	cmp	r6, #0
    f83c:	d100      	bne.n	f840 <dir_find+0x74>
    f83e:	e080      	b.n	f942 <dir_find+0x176>
    f840:	7ae2      	ldrb	r2, [r4, #11]
    f842:	233f      	movs	r3, #63	; 0x3f
    f844:	4013      	ands	r3, r2
    f846:	2ee5      	cmp	r6, #229	; 0xe5
    f848:	d100      	bne.n	f84c <dir_find+0x80>
    f84a:	e077      	b.n	f93c <dir_find+0x170>
    f84c:	0712      	lsls	r2, r2, #28
    f84e:	d5d1      	bpl.n	f7f4 <dir_find+0x28>
    f850:	2b0f      	cmp	r3, #15
    f852:	d002      	beq.n	f85a <dir_find+0x8e>
    f854:	23ff      	movs	r3, #255	; 0xff
    f856:	469a      	mov	sl, r3
    f858:	e7e1      	b.n	f81e <dir_find+0x52>
    f85a:	69ef      	ldr	r7, [r5, #28]
    f85c:	2f00      	cmp	r7, #0
    f85e:	d0de      	beq.n	f81e <dir_find+0x52>
    f860:	0673      	lsls	r3, r6, #25
    f862:	d518      	bpl.n	f896 <dir_find+0xca>
    f864:	7b63      	ldrb	r3, [r4, #13]
    f866:	4699      	mov	r9, r3
    f868:	2340      	movs	r3, #64	; 0x40
    f86a:	439e      	bics	r6, r3
    f86c:	88eb      	ldrh	r3, [r5, #6]
    f86e:	842b      	strh	r3, [r5, #32]
    f870:	7b63      	ldrb	r3, [r4, #13]
    f872:	9300      	str	r3, [sp, #0]
    f874:	22ff      	movs	r2, #255	; 0xff
    f876:	4692      	mov	sl, r2
    f878:	454b      	cmp	r3, r9
    f87a:	d1d0      	bne.n	f81e <dir_find+0x52>
    f87c:	7823      	ldrb	r3, [r4, #0]
    f87e:	3abf      	subs	r2, #191	; 0xbf
    f880:	4393      	bics	r3, r2
    f882:	3b01      	subs	r3, #1
    f884:	005a      	lsls	r2, r3, #1
    f886:	18d2      	adds	r2, r2, r3
    f888:	0092      	lsls	r2, r2, #2
    f88a:	4692      	mov	sl, r2
    f88c:	449a      	add	sl, r3
    f88e:	2201      	movs	r2, #1
    f890:	2300      	movs	r3, #0
    f892:	4699      	mov	r9, r3
    f894:	e01d      	b.n	f8d2 <dir_find+0x106>
    f896:	45b2      	cmp	sl, r6
    f898:	d0ea      	beq.n	f870 <dir_find+0xa4>
    f89a:	23ff      	movs	r3, #255	; 0xff
    f89c:	469a      	mov	sl, r3
    f89e:	e7be      	b.n	f81e <dir_find+0x52>
    f8a0:	4b2d      	ldr	r3, [pc, #180]	; (f958 <dir_find+0x18c>)
    f8a2:	4798      	blx	r3
    f8a4:	9001      	str	r0, [sp, #4]
    f8a6:	4653      	mov	r3, sl
    f8a8:	2bfe      	cmp	r3, #254	; 0xfe
    f8aa:	d81f      	bhi.n	f8ec <dir_find+0x120>
    f8ac:	2301      	movs	r3, #1
    f8ae:	4453      	add	r3, sl
    f8b0:	4698      	mov	r8, r3
    f8b2:	4653      	mov	r3, sl
    f8b4:	005b      	lsls	r3, r3, #1
    f8b6:	5bd8      	ldrh	r0, [r3, r7]
    f8b8:	4b27      	ldr	r3, [pc, #156]	; (f958 <dir_find+0x18c>)
    f8ba:	4798      	blx	r3
    f8bc:	0002      	movs	r2, r0
    f8be:	9b01      	ldr	r3, [sp, #4]
    f8c0:	4283      	cmp	r3, r0
    f8c2:	d113      	bne.n	f8ec <dir_find+0x120>
    f8c4:	46c2      	mov	sl, r8
    f8c6:	2301      	movs	r3, #1
    f8c8:	469c      	mov	ip, r3
    f8ca:	44e1      	add	r9, ip
    f8cc:	464b      	mov	r3, r9
    f8ce:	2b0d      	cmp	r3, #13
    f8d0:	d011      	beq.n	f8f6 <dir_find+0x12a>
    f8d2:	4b22      	ldr	r3, [pc, #136]	; (f95c <dir_find+0x190>)
    f8d4:	4649      	mov	r1, r9
    f8d6:	5cc9      	ldrb	r1, [r1, r3]
    f8d8:	1863      	adds	r3, r4, r1
    f8da:	785b      	ldrb	r3, [r3, #1]
    f8dc:	021b      	lsls	r3, r3, #8
    f8de:	5c60      	ldrb	r0, [r4, r1]
    f8e0:	4318      	orrs	r0, r3
    f8e2:	2a00      	cmp	r2, #0
    f8e4:	d1dc      	bne.n	f8a0 <dir_find+0xd4>
    f8e6:	4b1e      	ldr	r3, [pc, #120]	; (f960 <dir_find+0x194>)
    f8e8:	4298      	cmp	r0, r3
    f8ea:	d0ec      	beq.n	f8c6 <dir_find+0xfa>
    f8ec:	9b00      	ldr	r3, [sp, #0]
    f8ee:	4699      	mov	r9, r3
    f8f0:	23ff      	movs	r3, #255	; 0xff
    f8f2:	469a      	mov	sl, r3
    f8f4:	e793      	b.n	f81e <dir_find+0x52>
    f8f6:	7823      	ldrb	r3, [r4, #0]
    f8f8:	065b      	lsls	r3, r3, #25
    f8fa:	d506      	bpl.n	f90a <dir_find+0x13e>
    f8fc:	2a00      	cmp	r2, #0
    f8fe:	d004      	beq.n	f90a <dir_find+0x13e>
    f900:	4653      	mov	r3, sl
    f902:	005b      	lsls	r3, r3, #1
    f904:	5bdb      	ldrh	r3, [r3, r7]
    f906:	2b00      	cmp	r3, #0
    f908:	d1f0      	bne.n	f8ec <dir_find+0x120>
    f90a:	3e01      	subs	r6, #1
    f90c:	b2f3      	uxtb	r3, r6
    f90e:	469a      	mov	sl, r3
    f910:	9b00      	ldr	r3, [sp, #0]
    f912:	4699      	mov	r9, r3
    f914:	e783      	b.n	f81e <dir_find+0x52>
    f916:	2300      	movs	r3, #0
    f918:	5ce1      	ldrb	r1, [r4, r3]
    f91a:	5cc2      	ldrb	r2, [r0, r3]
    f91c:	4291      	cmp	r1, r2
    f91e:	d10a      	bne.n	f936 <dir_find+0x16a>
    f920:	3301      	adds	r3, #1
    f922:	2b0b      	cmp	r3, #11
    f924:	d1f8      	bne.n	f918 <dir_find+0x14c>
    f926:	0038      	movs	r0, r7
    f928:	b003      	add	sp, #12
    f92a:	bc3c      	pop	{r2, r3, r4, r5}
    f92c:	4690      	mov	r8, r2
    f92e:	4699      	mov	r9, r3
    f930:	46a2      	mov	sl, r4
    f932:	46ab      	mov	fp, r5
    f934:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f936:	23ff      	movs	r3, #255	; 0xff
    f938:	469a      	mov	sl, r3
    f93a:	e770      	b.n	f81e <dir_find+0x52>
    f93c:	23ff      	movs	r3, #255	; 0xff
    f93e:	469a      	mov	sl, r3
    f940:	e76d      	b.n	f81e <dir_find+0x52>
    f942:	2704      	movs	r7, #4
    f944:	e7ef      	b.n	f926 <dir_find+0x15a>
    f946:	46c0      	nop			; (mov r8, r8)
    f948:	0000f38d 	.word	0x0000f38d
    f94c:	0000f1f1 	.word	0x0000f1f1
    f950:	0000ed4f 	.word	0x0000ed4f
    f954:	0000f6a9 	.word	0x0000f6a9
    f958:	0001052d 	.word	0x0001052d
    f95c:	00018b10 	.word	0x00018b10
    f960:	0000ffff 	.word	0x0000ffff

0000f964 <dir_register>:
    f964:	b5f0      	push	{r4, r5, r6, r7, lr}
    f966:	46de      	mov	lr, fp
    f968:	4657      	mov	r7, sl
    f96a:	464e      	mov	r6, r9
    f96c:	4645      	mov	r5, r8
    f96e:	b5e0      	push	{r5, r6, r7, lr}
    f970:	b089      	sub	sp, #36	; 0x24
    f972:	0004      	movs	r4, r0
    f974:	6987      	ldr	r7, [r0, #24]
    f976:	69c3      	ldr	r3, [r0, #28]
    f978:	469a      	mov	sl, r3
    f97a:	ad05      	add	r5, sp, #20
    f97c:	220c      	movs	r2, #12
    f97e:	0039      	movs	r1, r7
    f980:	0028      	movs	r0, r5
    f982:	4ba7      	ldr	r3, [pc, #668]	; (fc20 <dir_register+0x2bc>)
    f984:	4798      	blx	r3
    f986:	7aeb      	ldrb	r3, [r5, #11]
    f988:	07db      	lsls	r3, r3, #31
    f98a:	d400      	bmi.n	f98e <dir_register+0x2a>
    f98c:	e070      	b.n	fa70 <dir_register+0x10c>
    f98e:	2300      	movs	r3, #0
    f990:	72fb      	strb	r3, [r7, #11]
    f992:	61e3      	str	r3, [r4, #28]
    f994:	220b      	movs	r2, #11
    f996:	a905      	add	r1, sp, #20
    f998:	0038      	movs	r0, r7
    f99a:	4ba1      	ldr	r3, [pc, #644]	; (fc20 <dir_register+0x2bc>)
    f99c:	4798      	blx	r3
    f99e:	2301      	movs	r3, #1
    f9a0:	ad03      	add	r5, sp, #12
    f9a2:	001e      	movs	r6, r3
    f9a4:	46a0      	mov	r8, r4
    f9a6:	e049      	b.n	fa3c <dir_register+0xd8>
    f9a8:	3801      	subs	r0, #1
    f9aa:	1829      	adds	r1, r5, r0
    f9ac:	704a      	strb	r2, [r1, #1]
    f9ae:	091b      	lsrs	r3, r3, #4
    f9b0:	b29b      	uxth	r3, r3
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	d007      	beq.n	f9c6 <dir_register+0x62>
    f9b6:	0021      	movs	r1, r4
    f9b8:	4019      	ands	r1, r3
    f9ba:	000a      	movs	r2, r1
    f9bc:	3230      	adds	r2, #48	; 0x30
    f9be:	2a39      	cmp	r2, #57	; 0x39
    f9c0:	d9f2      	bls.n	f9a8 <dir_register+0x44>
    f9c2:	3207      	adds	r2, #7
    f9c4:	e7f0      	b.n	f9a8 <dir_register+0x44>
    f9c6:	337e      	adds	r3, #126	; 0x7e
    f9c8:	542b      	strb	r3, [r5, r0]
    f9ca:	2800      	cmp	r0, #0
    f9cc:	d00a      	beq.n	f9e4 <dir_register+0x80>
    f9ce:	783b      	ldrb	r3, [r7, #0]
    f9d0:	2b20      	cmp	r3, #32
    f9d2:	d009      	beq.n	f9e8 <dir_register+0x84>
    f9d4:	2300      	movs	r3, #0
    f9d6:	3301      	adds	r3, #1
    f9d8:	4298      	cmp	r0, r3
    f9da:	d007      	beq.n	f9ec <dir_register+0x88>
    f9dc:	5cfa      	ldrb	r2, [r7, r3]
    f9de:	2a20      	cmp	r2, #32
    f9e0:	d1f9      	bne.n	f9d6 <dir_register+0x72>
    f9e2:	e009      	b.n	f9f8 <dir_register+0x94>
    f9e4:	0003      	movs	r3, r0
    f9e6:	e007      	b.n	f9f8 <dir_register+0x94>
    f9e8:	2300      	movs	r3, #0
    f9ea:	e005      	b.n	f9f8 <dir_register+0x94>
    f9ec:	0003      	movs	r3, r0
    f9ee:	e003      	b.n	f9f8 <dir_register+0x94>
    f9f0:	54fa      	strb	r2, [r7, r3]
    f9f2:	3301      	adds	r3, #1
    f9f4:	2b07      	cmp	r3, #7
    f9f6:	d805      	bhi.n	fa04 <dir_register+0xa0>
    f9f8:	2220      	movs	r2, #32
    f9fa:	2807      	cmp	r0, #7
    f9fc:	d8f8      	bhi.n	f9f0 <dir_register+0x8c>
    f9fe:	5c2a      	ldrb	r2, [r5, r0]
    fa00:	3001      	adds	r0, #1
    fa02:	e7f5      	b.n	f9f0 <dir_register+0x8c>
    fa04:	4640      	mov	r0, r8
    fa06:	4b87      	ldr	r3, [pc, #540]	; (fc24 <dir_register+0x2c0>)
    fa08:	4798      	blx	r3
    fa0a:	2800      	cmp	r0, #0
    fa0c:	d11c      	bne.n	fa48 <dir_register+0xe4>
    fa0e:	3601      	adds	r6, #1
    fa10:	b2b6      	uxth	r6, r6
    fa12:	2e64      	cmp	r6, #100	; 0x64
    fa14:	d015      	beq.n	fa42 <dir_register+0xde>
    fa16:	220b      	movs	r2, #11
    fa18:	a905      	add	r1, sp, #20
    fa1a:	0038      	movs	r0, r7
    fa1c:	4b80      	ldr	r3, [pc, #512]	; (fc20 <dir_register+0x2bc>)
    fa1e:	4798      	blx	r3
    fa20:	0033      	movs	r3, r6
    fa22:	2e05      	cmp	r6, #5
    fa24:	d90a      	bls.n	fa3c <dir_register+0xd8>
    fa26:	4651      	mov	r1, sl
    fa28:	085a      	lsrs	r2, r3, #1
    fa2a:	03db      	lsls	r3, r3, #15
    fa2c:	4313      	orrs	r3, r2
    fa2e:	880a      	ldrh	r2, [r1, #0]
    fa30:	189b      	adds	r3, r3, r2
    fa32:	b29b      	uxth	r3, r3
    fa34:	3102      	adds	r1, #2
    fa36:	880a      	ldrh	r2, [r1, #0]
    fa38:	2a00      	cmp	r2, #0
    fa3a:	d1f5      	bne.n	fa28 <dir_register+0xc4>
    fa3c:	2007      	movs	r0, #7
    fa3e:	240f      	movs	r4, #15
    fa40:	e7b9      	b.n	f9b6 <dir_register+0x52>
    fa42:	2307      	movs	r3, #7
    fa44:	4698      	mov	r8, r3
    fa46:	e006      	b.n	fa56 <dir_register+0xf2>
    fa48:	4644      	mov	r4, r8
    fa4a:	4680      	mov	r8, r0
    fa4c:	2e64      	cmp	r6, #100	; 0x64
    fa4e:	d100      	bne.n	fa52 <dir_register+0xee>
    fa50:	e0a5      	b.n	fb9e <dir_register+0x23a>
    fa52:	2804      	cmp	r0, #4
    fa54:	d007      	beq.n	fa66 <dir_register+0x102>
    fa56:	4640      	mov	r0, r8
    fa58:	b009      	add	sp, #36	; 0x24
    fa5a:	bc3c      	pop	{r2, r3, r4, r5}
    fa5c:	4690      	mov	r8, r2
    fa5e:	4699      	mov	r9, r3
    fa60:	46a2      	mov	sl, r4
    fa62:	46ab      	mov	fp, r5
    fa64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa66:	ab05      	add	r3, sp, #20
    fa68:	7adb      	ldrb	r3, [r3, #11]
    fa6a:	72fb      	strb	r3, [r7, #11]
    fa6c:	4653      	mov	r3, sl
    fa6e:	61e3      	str	r3, [r4, #28]
    fa70:	ab05      	add	r3, sp, #20
    fa72:	7adb      	ldrb	r3, [r3, #11]
    fa74:	2201      	movs	r2, #1
    fa76:	4693      	mov	fp, r2
    fa78:	079b      	lsls	r3, r3, #30
    fa7a:	d511      	bpl.n	faa0 <dir_register+0x13c>
    fa7c:	4653      	mov	r3, sl
    fa7e:	881b      	ldrh	r3, [r3, #0]
    fa80:	2b00      	cmp	r3, #0
    fa82:	d01b      	beq.n	fabc <dir_register+0x158>
    fa84:	2000      	movs	r0, #0
    fa86:	4652      	mov	r2, sl
    fa88:	3001      	adds	r0, #1
    fa8a:	b280      	uxth	r0, r0
    fa8c:	0043      	lsls	r3, r0, #1
    fa8e:	5a9b      	ldrh	r3, [r3, r2]
    fa90:	2b00      	cmp	r3, #0
    fa92:	d1f9      	bne.n	fa88 <dir_register+0x124>
    fa94:	3019      	adds	r0, #25
    fa96:	210d      	movs	r1, #13
    fa98:	4b63      	ldr	r3, [pc, #396]	; (fc28 <dir_register+0x2c4>)
    fa9a:	4798      	blx	r3
    fa9c:	b283      	uxth	r3, r0
    fa9e:	469b      	mov	fp, r3
    faa0:	2100      	movs	r1, #0
    faa2:	0020      	movs	r0, r4
    faa4:	4b61      	ldr	r3, [pc, #388]	; (fc2c <dir_register+0x2c8>)
    faa6:	4798      	blx	r3
    faa8:	4680      	mov	r8, r0
    faaa:	2800      	cmp	r0, #0
    faac:	d1d3      	bne.n	fa56 <dir_register+0xf2>
    faae:	4682      	mov	sl, r0
    fab0:	2500      	movs	r5, #0
    fab2:	4f5f      	ldr	r7, [pc, #380]	; (fc30 <dir_register+0x2cc>)
    fab4:	2600      	movs	r6, #0
    fab6:	4b5f      	ldr	r3, [pc, #380]	; (fc34 <dir_register+0x2d0>)
    fab8:	4699      	mov	r9, r3
    faba:	e00b      	b.n	fad4 <dir_register+0x170>
    fabc:	2000      	movs	r0, #0
    fabe:	e7e9      	b.n	fa94 <dir_register+0x130>
    fac0:	1c6b      	adds	r3, r5, #1
    fac2:	b29b      	uxth	r3, r3
    fac4:	459b      	cmp	fp, r3
    fac6:	d06d      	beq.n	fba4 <dir_register+0x240>
    fac8:	001d      	movs	r5, r3
    faca:	2101      	movs	r1, #1
    facc:	0020      	movs	r0, r4
    face:	47c8      	blx	r9
    fad0:	2800      	cmp	r0, #0
    fad2:	d112      	bne.n	fafa <dir_register+0x196>
    fad4:	6921      	ldr	r1, [r4, #16]
    fad6:	6820      	ldr	r0, [r4, #0]
    fad8:	47b8      	blx	r7
    fada:	2800      	cmp	r0, #0
    fadc:	d000      	beq.n	fae0 <dir_register+0x17c>
    fade:	e098      	b.n	fc12 <dir_register+0x2ae>
    fae0:	6963      	ldr	r3, [r4, #20]
    fae2:	781b      	ldrb	r3, [r3, #0]
    fae4:	2be5      	cmp	r3, #229	; 0xe5
    fae6:	d001      	beq.n	faec <dir_register+0x188>
    fae8:	2b00      	cmp	r3, #0
    faea:	d104      	bne.n	faf6 <dir_register+0x192>
    faec:	2d00      	cmp	r5, #0
    faee:	d1e7      	bne.n	fac0 <dir_register+0x15c>
    faf0:	88e3      	ldrh	r3, [r4, #6]
    faf2:	469a      	mov	sl, r3
    faf4:	e7e4      	b.n	fac0 <dir_register+0x15c>
    faf6:	0035      	movs	r5, r6
    faf8:	e7e7      	b.n	faca <dir_register+0x166>
    fafa:	4680      	mov	r8, r0
    fafc:	e7ab      	b.n	fa56 <dir_register+0xf2>
    fafe:	4651      	mov	r1, sl
    fb00:	0020      	movs	r0, r4
    fb02:	4b4a      	ldr	r3, [pc, #296]	; (fc2c <dir_register+0x2c8>)
    fb04:	4798      	blx	r3
    fb06:	4680      	mov	r8, r0
    fb08:	2800      	cmp	r0, #0
    fb0a:	d1a4      	bne.n	fa56 <dir_register+0xf2>
    fb0c:	69a0      	ldr	r0, [r4, #24]
    fb0e:	4b4a      	ldr	r3, [pc, #296]	; (fc38 <dir_register+0x2d4>)
    fb10:	4798      	blx	r3
    fb12:	9001      	str	r0, [sp, #4]
    fb14:	46a8      	mov	r8, r5
    fb16:	e01f      	b.n	fb58 <dir_register+0x1f4>
    fb18:	0022      	movs	r2, r4
    fb1a:	e067      	b.n	fbec <dir_register+0x288>
    fb1c:	465e      	mov	r6, fp
    fb1e:	4664      	mov	r4, ip
    fb20:	4946      	ldr	r1, [pc, #280]	; (fc3c <dir_register+0x2d8>)
    fb22:	428b      	cmp	r3, r1
    fb24:	d003      	beq.n	fb2e <dir_register+0x1ca>
    fb26:	0052      	lsls	r2, r2, #1
    fb28:	5b93      	ldrh	r3, [r2, r6]
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	d103      	bne.n	fb36 <dir_register+0x1d2>
    fb2e:	2340      	movs	r3, #64	; 0x40
    fb30:	464a      	mov	r2, r9
    fb32:	431a      	orrs	r2, r3
    fb34:	4691      	mov	r9, r2
    fb36:	464b      	mov	r3, r9
    fb38:	7003      	strb	r3, [r0, #0]
    fb3a:	2301      	movs	r3, #1
    fb3c:	6822      	ldr	r2, [r4, #0]
    fb3e:	7113      	strb	r3, [r2, #4]
    fb40:	2100      	movs	r1, #0
    fb42:	0020      	movs	r0, r4
    fb44:	4b3b      	ldr	r3, [pc, #236]	; (fc34 <dir_register+0x2d0>)
    fb46:	4798      	blx	r3
    fb48:	2800      	cmp	r0, #0
    fb4a:	d166      	bne.n	fc1a <dir_register+0x2b6>
    fb4c:	4645      	mov	r5, r8
    fb4e:	3d01      	subs	r5, #1
    fb50:	b2ab      	uxth	r3, r5
    fb52:	4698      	mov	r8, r3
    fb54:	2b00      	cmp	r3, #0
    fb56:	d027      	beq.n	fba8 <dir_register+0x244>
    fb58:	6921      	ldr	r1, [r4, #16]
    fb5a:	6820      	ldr	r0, [r4, #0]
    fb5c:	4b34      	ldr	r3, [pc, #208]	; (fc30 <dir_register+0x2cc>)
    fb5e:	4798      	blx	r3
    fb60:	2800      	cmp	r0, #0
    fb62:	d158      	bne.n	fc16 <dir_register+0x2b2>
    fb64:	69e6      	ldr	r6, [r4, #28]
    fb66:	6960      	ldr	r0, [r4, #20]
    fb68:	4643      	mov	r3, r8
    fb6a:	466a      	mov	r2, sp
    fb6c:	70d3      	strb	r3, [r2, #3]
    fb6e:	78d3      	ldrb	r3, [r2, #3]
    fb70:	4699      	mov	r9, r3
    fb72:	7913      	ldrb	r3, [r2, #4]
    fb74:	7343      	strb	r3, [r0, #13]
    fb76:	230f      	movs	r3, #15
    fb78:	72c3      	strb	r3, [r0, #11]
    fb7a:	2300      	movs	r3, #0
    fb7c:	7303      	strb	r3, [r0, #12]
    fb7e:	7683      	strb	r3, [r0, #26]
    fb80:	76c3      	strb	r3, [r0, #27]
    fb82:	464b      	mov	r3, r9
    fb84:	3b01      	subs	r3, #1
    fb86:	005a      	lsls	r2, r3, #1
    fb88:	18d2      	adds	r2, r2, r3
    fb8a:	0092      	lsls	r2, r2, #2
    fb8c:	18d2      	adds	r2, r2, r3
    fb8e:	492c      	ldr	r1, [pc, #176]	; (fc40 <dir_register+0x2dc>)
    fb90:	000d      	movs	r5, r1
    fb92:	350d      	adds	r5, #13
    fb94:	2300      	movs	r3, #0
    fb96:	4f29      	ldr	r7, [pc, #164]	; (fc3c <dir_register+0x2d8>)
    fb98:	46b3      	mov	fp, r6
    fb9a:	46a4      	mov	ip, r4
    fb9c:	e029      	b.n	fbf2 <dir_register+0x28e>
    fb9e:	2307      	movs	r3, #7
    fba0:	4698      	mov	r8, r3
    fba2:	e758      	b.n	fa56 <dir_register+0xf2>
    fba4:	2b01      	cmp	r3, #1
    fba6:	d8aa      	bhi.n	fafe <dir_register+0x19a>
    fba8:	6921      	ldr	r1, [r4, #16]
    fbaa:	6820      	ldr	r0, [r4, #0]
    fbac:	4b20      	ldr	r3, [pc, #128]	; (fc30 <dir_register+0x2cc>)
    fbae:	4798      	blx	r3
    fbb0:	4680      	mov	r8, r0
    fbb2:	2800      	cmp	r0, #0
    fbb4:	d000      	beq.n	fbb8 <dir_register+0x254>
    fbb6:	e74e      	b.n	fa56 <dir_register+0xf2>
    fbb8:	6965      	ldr	r5, [r4, #20]
    fbba:	2220      	movs	r2, #32
    fbbc:	2100      	movs	r1, #0
    fbbe:	0028      	movs	r0, r5
    fbc0:	4b20      	ldr	r3, [pc, #128]	; (fc44 <dir_register+0x2e0>)
    fbc2:	4798      	blx	r3
    fbc4:	220b      	movs	r2, #11
    fbc6:	69a1      	ldr	r1, [r4, #24]
    fbc8:	0028      	movs	r0, r5
    fbca:	4b15      	ldr	r3, [pc, #84]	; (fc20 <dir_register+0x2bc>)
    fbcc:	4798      	blx	r3
    fbce:	69a3      	ldr	r3, [r4, #24]
    fbd0:	7ada      	ldrb	r2, [r3, #11]
    fbd2:	2318      	movs	r3, #24
    fbd4:	4013      	ands	r3, r2
    fbd6:	732b      	strb	r3, [r5, #12]
    fbd8:	6823      	ldr	r3, [r4, #0]
    fbda:	2201      	movs	r2, #1
    fbdc:	711a      	strb	r2, [r3, #4]
    fbde:	e73a      	b.n	fa56 <dir_register+0xf2>
    fbe0:	780c      	ldrb	r4, [r1, #0]
    fbe2:	26ff      	movs	r6, #255	; 0xff
    fbe4:	5506      	strb	r6, [r0, r4]
    fbe6:	1904      	adds	r4, r0, r4
    fbe8:	26ff      	movs	r6, #255	; 0xff
    fbea:	7066      	strb	r6, [r4, #1]
    fbec:	3101      	adds	r1, #1
    fbee:	42a9      	cmp	r1, r5
    fbf0:	d094      	beq.n	fb1c <dir_register+0x1b8>
    fbf2:	42bb      	cmp	r3, r7
    fbf4:	d0f4      	beq.n	fbe0 <dir_register+0x27c>
    fbf6:	1c54      	adds	r4, r2, #1
    fbf8:	0052      	lsls	r2, r2, #1
    fbfa:	465b      	mov	r3, fp
    fbfc:	5ad3      	ldrh	r3, [r2, r3]
    fbfe:	780a      	ldrb	r2, [r1, #0]
    fc00:	5483      	strb	r3, [r0, r2]
    fc02:	1882      	adds	r2, r0, r2
    fc04:	0a1e      	lsrs	r6, r3, #8
    fc06:	7056      	strb	r6, [r2, #1]
    fc08:	2b00      	cmp	r3, #0
    fc0a:	d185      	bne.n	fb18 <dir_register+0x1b4>
    fc0c:	0022      	movs	r2, r4
    fc0e:	003b      	movs	r3, r7
    fc10:	e7ec      	b.n	fbec <dir_register+0x288>
    fc12:	4680      	mov	r8, r0
    fc14:	e71f      	b.n	fa56 <dir_register+0xf2>
    fc16:	4680      	mov	r8, r0
    fc18:	e71d      	b.n	fa56 <dir_register+0xf2>
    fc1a:	4680      	mov	r8, r0
    fc1c:	e71b      	b.n	fa56 <dir_register+0xf2>
    fc1e:	46c0      	nop			; (mov r8, r8)
    fc20:	0000ed11 	.word	0x0000ed11
    fc24:	0000f7cd 	.word	0x0000f7cd
    fc28:	00011e89 	.word	0x00011e89
    fc2c:	0000f38d 	.word	0x0000f38d
    fc30:	0000f1f1 	.word	0x0000f1f1
    fc34:	0000f6a9 	.word	0x0000f6a9
    fc38:	0000ed4f 	.word	0x0000ed4f
    fc3c:	0000ffff 	.word	0x0000ffff
    fc40:	00018b10 	.word	0x00018b10
    fc44:	0000ed25 	.word	0x0000ed25

0000fc48 <sync>:
    fc48:	b570      	push	{r4, r5, r6, lr}
    fc4a:	0004      	movs	r4, r0
    fc4c:	2100      	movs	r1, #0
    fc4e:	4b2c      	ldr	r3, [pc, #176]	; (fd00 <sync+0xb8>)
    fc50:	4798      	blx	r3
    fc52:	2800      	cmp	r0, #0
    fc54:	d10a      	bne.n	fc6c <sync+0x24>
    fc56:	7823      	ldrb	r3, [r4, #0]
    fc58:	2b03      	cmp	r3, #3
    fc5a:	d008      	beq.n	fc6e <sync+0x26>
    fc5c:	7860      	ldrb	r0, [r4, #1]
    fc5e:	2200      	movs	r2, #0
    fc60:	2100      	movs	r1, #0
    fc62:	4b28      	ldr	r3, [pc, #160]	; (fd04 <sync+0xbc>)
    fc64:	4798      	blx	r3
    fc66:	1e43      	subs	r3, r0, #1
    fc68:	4198      	sbcs	r0, r3
    fc6a:	b2c0      	uxtb	r0, r0
    fc6c:	bd70      	pop	{r4, r5, r6, pc}
    fc6e:	7963      	ldrb	r3, [r4, #5]
    fc70:	2b00      	cmp	r3, #0
    fc72:	d0f3      	beq.n	fc5c <sync+0x14>
    fc74:	2600      	movs	r6, #0
    fc76:	62e6      	str	r6, [r4, #44]	; 0x2c
    fc78:	0025      	movs	r5, r4
    fc7a:	3530      	adds	r5, #48	; 0x30
    fc7c:	2280      	movs	r2, #128	; 0x80
    fc7e:	0092      	lsls	r2, r2, #2
    fc80:	2100      	movs	r1, #0
    fc82:	0028      	movs	r0, r5
    fc84:	4b20      	ldr	r3, [pc, #128]	; (fd08 <sync+0xc0>)
    fc86:	4798      	blx	r3
    fc88:	2255      	movs	r2, #85	; 0x55
    fc8a:	4b20      	ldr	r3, [pc, #128]	; (fd0c <sync+0xc4>)
    fc8c:	54e2      	strb	r2, [r4, r3]
    fc8e:	3255      	adds	r2, #85	; 0x55
    fc90:	4b1f      	ldr	r3, [pc, #124]	; (fd10 <sync+0xc8>)
    fc92:	54e2      	strb	r2, [r4, r3]
    fc94:	3bde      	subs	r3, #222	; 0xde
    fc96:	3bff      	subs	r3, #255	; 0xff
    fc98:	3a7a      	subs	r2, #122	; 0x7a
    fc9a:	54a3      	strb	r3, [r4, r2]
    fc9c:	3201      	adds	r2, #1
    fc9e:	54a3      	strb	r3, [r4, r2]
    fca0:	330f      	adds	r3, #15
    fca2:	3201      	adds	r2, #1
    fca4:	54a3      	strb	r3, [r4, r2]
    fca6:	320f      	adds	r2, #15
    fca8:	2133      	movs	r1, #51	; 0x33
    fcaa:	5462      	strb	r2, [r4, r1]
    fcac:	313f      	adds	r1, #63	; 0x3f
    fcae:	2085      	movs	r0, #133	; 0x85
    fcb0:	0080      	lsls	r0, r0, #2
    fcb2:	5421      	strb	r1, [r4, r0]
    fcb4:	4817      	ldr	r0, [pc, #92]	; (fd14 <sync+0xcc>)
    fcb6:	5421      	strb	r1, [r4, r0]
    fcb8:	4917      	ldr	r1, [pc, #92]	; (fd18 <sync+0xd0>)
    fcba:	5462      	strb	r2, [r4, r1]
    fcbc:	4a17      	ldr	r2, [pc, #92]	; (fd1c <sync+0xd4>)
    fcbe:	54a3      	strb	r3, [r4, r2]
    fcc0:	6923      	ldr	r3, [r4, #16]
    fcc2:	3201      	adds	r2, #1
    fcc4:	54a3      	strb	r3, [r4, r2]
    fcc6:	0a19      	lsrs	r1, r3, #8
    fcc8:	4a15      	ldr	r2, [pc, #84]	; (fd20 <sync+0xd8>)
    fcca:	54a1      	strb	r1, [r4, r2]
    fccc:	0c19      	lsrs	r1, r3, #16
    fcce:	4a15      	ldr	r2, [pc, #84]	; (fd24 <sync+0xdc>)
    fcd0:	54a1      	strb	r1, [r4, r2]
    fcd2:	0e1b      	lsrs	r3, r3, #24
    fcd4:	4a14      	ldr	r2, [pc, #80]	; (fd28 <sync+0xe0>)
    fcd6:	54a3      	strb	r3, [r4, r2]
    fcd8:	68e3      	ldr	r3, [r4, #12]
    fcda:	3201      	adds	r2, #1
    fcdc:	54a3      	strb	r3, [r4, r2]
    fcde:	0a19      	lsrs	r1, r3, #8
    fce0:	4a12      	ldr	r2, [pc, #72]	; (fd2c <sync+0xe4>)
    fce2:	54a1      	strb	r1, [r4, r2]
    fce4:	0c19      	lsrs	r1, r3, #16
    fce6:	4a12      	ldr	r2, [pc, #72]	; (fd30 <sync+0xe8>)
    fce8:	54a1      	strb	r1, [r4, r2]
    fcea:	0e1b      	lsrs	r3, r3, #24
    fcec:	4a11      	ldr	r2, [pc, #68]	; (fd34 <sync+0xec>)
    fcee:	54a3      	strb	r3, [r4, r2]
    fcf0:	7860      	ldrb	r0, [r4, #1]
    fcf2:	2301      	movs	r3, #1
    fcf4:	6962      	ldr	r2, [r4, #20]
    fcf6:	0029      	movs	r1, r5
    fcf8:	4d0f      	ldr	r5, [pc, #60]	; (fd38 <sync+0xf0>)
    fcfa:	47a8      	blx	r5
    fcfc:	7166      	strb	r6, [r4, #5]
    fcfe:	e7ad      	b.n	fc5c <sync+0x14>
    fd00:	0000f1f1 	.word	0x0000f1f1
    fd04:	0000ec55 	.word	0x0000ec55
    fd08:	0000ed25 	.word	0x0000ed25
    fd0c:	0000022e 	.word	0x0000022e
    fd10:	0000022f 	.word	0x0000022f
    fd14:	00000215 	.word	0x00000215
    fd18:	00000216 	.word	0x00000216
    fd1c:	00000217 	.word	0x00000217
    fd20:	00000219 	.word	0x00000219
    fd24:	0000021a 	.word	0x0000021a
    fd28:	0000021b 	.word	0x0000021b
    fd2c:	0000021d 	.word	0x0000021d
    fd30:	0000021e 	.word	0x0000021e
    fd34:	0000021f 	.word	0x0000021f
    fd38:	0000ebd1 	.word	0x0000ebd1

0000fd3c <follow_path>:
    fd3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd3e:	46de      	mov	lr, fp
    fd40:	4657      	mov	r7, sl
    fd42:	464e      	mov	r6, r9
    fd44:	4645      	mov	r5, r8
    fd46:	b5e0      	push	{r5, r6, r7, lr}
    fd48:	b083      	sub	sp, #12
    fd4a:	4682      	mov	sl, r0
    fd4c:	000d      	movs	r5, r1
    fd4e:	780b      	ldrb	r3, [r1, #0]
    fd50:	2b2f      	cmp	r3, #47	; 0x2f
    fd52:	d00f      	beq.n	fd74 <follow_path+0x38>
    fd54:	2b5c      	cmp	r3, #92	; 0x5c
    fd56:	d00d      	beq.n	fd74 <follow_path+0x38>
    fd58:	2300      	movs	r3, #0
    fd5a:	4652      	mov	r2, sl
    fd5c:	6093      	str	r3, [r2, #8]
    fd5e:	782b      	ldrb	r3, [r5, #0]
    fd60:	4657      	mov	r7, sl
    fd62:	2b1f      	cmp	r3, #31
    fd64:	d809      	bhi.n	fd7a <follow_path+0x3e>
    fd66:	2100      	movs	r1, #0
    fd68:	4650      	mov	r0, sl
    fd6a:	4bb2      	ldr	r3, [pc, #712]	; (10034 <follow_path+0x2f8>)
    fd6c:	4798      	blx	r3
    fd6e:	2300      	movs	r3, #0
    fd70:	617b      	str	r3, [r7, #20]
    fd72:	e13a      	b.n	ffea <follow_path+0x2ae>
    fd74:	3501      	adds	r5, #1
    fd76:	e7ef      	b.n	fd58 <follow_path+0x1c>
    fd78:	3501      	adds	r5, #1
    fd7a:	7828      	ldrb	r0, [r5, #0]
    fd7c:	282f      	cmp	r0, #47	; 0x2f
    fd7e:	d0fb      	beq.n	fd78 <follow_path+0x3c>
    fd80:	285c      	cmp	r0, #92	; 0x5c
    fd82:	d0f9      	beq.n	fd78 <follow_path+0x3c>
    fd84:	69fb      	ldr	r3, [r7, #28]
    fd86:	469a      	mov	sl, r3
    fd88:	b280      	uxth	r0, r0
    fd8a:	281f      	cmp	r0, #31
    fd8c:	d800      	bhi.n	fd90 <follow_path+0x54>
    fd8e:	e13b      	b.n	10008 <follow_path+0x2cc>
    fd90:	282f      	cmp	r0, #47	; 0x2f
    fd92:	d100      	bne.n	fd96 <follow_path+0x5a>
    fd94:	e13b      	b.n	1000e <follow_path+0x2d2>
    fd96:	285c      	cmp	r0, #92	; 0x5c
    fd98:	d100      	bne.n	fd9c <follow_path+0x60>
    fd9a:	e13b      	b.n	10014 <follow_path+0x2d8>
    fd9c:	1c6e      	adds	r6, r5, #1
    fd9e:	2401      	movs	r4, #1
    fda0:	2380      	movs	r3, #128	; 0x80
    fda2:	005b      	lsls	r3, r3, #1
    fda4:	4698      	mov	r8, r3
    fda6:	46bb      	mov	fp, r7
    fda8:	002b      	movs	r3, r5
    fdaa:	0025      	movs	r5, r4
    fdac:	0034      	movs	r4, r6
    fdae:	4656      	mov	r6, sl
    fdb0:	4699      	mov	r9, r3
    fdb2:	e011      	b.n	fdd8 <follow_path+0x9c>
    fdb4:	2b00      	cmp	r3, #0
    fdb6:	d135      	bne.n	fe24 <follow_path+0xe8>
    fdb8:	8030      	strh	r0, [r6, #0]
    fdba:	1c6b      	adds	r3, r5, #1
    fdbc:	7820      	ldrb	r0, [r4, #0]
    fdbe:	281f      	cmp	r0, #31
    fdc0:	d91e      	bls.n	fe00 <follow_path+0xc4>
    fdc2:	282f      	cmp	r0, #47	; 0x2f
    fdc4:	d100      	bne.n	fdc8 <follow_path+0x8c>
    fdc6:	e128      	b.n	1001a <follow_path+0x2de>
    fdc8:	285c      	cmp	r0, #92	; 0x5c
    fdca:	d100      	bne.n	fdce <follow_path+0x92>
    fdcc:	e142      	b.n	10054 <follow_path+0x318>
    fdce:	3602      	adds	r6, #2
    fdd0:	3401      	adds	r4, #1
    fdd2:	4543      	cmp	r3, r8
    fdd4:	d026      	beq.n	fe24 <follow_path+0xe8>
    fdd6:	001d      	movs	r5, r3
    fdd8:	2101      	movs	r1, #1
    fdda:	4b97      	ldr	r3, [pc, #604]	; (10038 <follow_path+0x2fc>)
    fddc:	4798      	blx	r3
    fdde:	1e01      	subs	r1, r0, #0
    fde0:	d020      	beq.n	fe24 <follow_path+0xe8>
    fde2:	287f      	cmp	r0, #127	; 0x7f
    fde4:	d8e8      	bhi.n	fdb8 <follow_path+0x7c>
    fde6:	2822      	cmp	r0, #34	; 0x22
    fde8:	d100      	bne.n	fdec <follow_path+0xb0>
    fdea:	e0fd      	b.n	ffe8 <follow_path+0x2ac>
    fdec:	232a      	movs	r3, #42	; 0x2a
    fdee:	4a93      	ldr	r2, [pc, #588]	; (1003c <follow_path+0x300>)
    fdf0:	b29f      	uxth	r7, r3
    fdf2:	428f      	cmp	r7, r1
    fdf4:	d0de      	beq.n	fdb4 <follow_path+0x78>
    fdf6:	3201      	adds	r2, #1
    fdf8:	7813      	ldrb	r3, [r2, #0]
    fdfa:	2b00      	cmp	r3, #0
    fdfc:	d1f8      	bne.n	fdf0 <follow_path+0xb4>
    fdfe:	e7db      	b.n	fdb8 <follow_path+0x7c>
    fe00:	002c      	movs	r4, r5
    fe02:	465f      	mov	r7, fp
    fe04:	464d      	mov	r5, r9
    fe06:	18ed      	adds	r5, r5, r3
    fe08:	2604      	movs	r6, #4
    fe0a:	e10b      	b.n	10024 <follow_path+0x2e8>
    fe0c:	3c01      	subs	r4, #1
    fe0e:	3b02      	subs	r3, #2
    fe10:	2c00      	cmp	r4, #0
    fe12:	d100      	bne.n	fe16 <follow_path+0xda>
    fe14:	e0e8      	b.n	ffe8 <follow_path+0x2ac>
    fe16:	881a      	ldrh	r2, [r3, #0]
    fe18:	2a20      	cmp	r2, #32
    fe1a:	d0f7      	beq.n	fe0c <follow_path+0xd0>
    fe1c:	2a2e      	cmp	r2, #46	; 0x2e
    fe1e:	d0f5      	beq.n	fe0c <follow_path+0xd0>
    fe20:	2c00      	cmp	r4, #0
    fe22:	d101      	bne.n	fe28 <follow_path+0xec>
    fe24:	2006      	movs	r0, #6
    fe26:	e0e0      	b.n	ffea <follow_path+0x2ae>
    fe28:	0063      	lsls	r3, r4, #1
    fe2a:	4698      	mov	r8, r3
    fe2c:	2300      	movs	r3, #0
    fe2e:	4652      	mov	r2, sl
    fe30:	4641      	mov	r1, r8
    fe32:	5253      	strh	r3, [r2, r1]
    fe34:	220b      	movs	r2, #11
    fe36:	2120      	movs	r1, #32
    fe38:	69b8      	ldr	r0, [r7, #24]
    fe3a:	4b81      	ldr	r3, [pc, #516]	; (10040 <follow_path+0x304>)
    fe3c:	4798      	blx	r3
    fe3e:	4652      	mov	r2, sl
    fe40:	2300      	movs	r3, #0
    fe42:	e001      	b.n	fe48 <follow_path+0x10c>
    fe44:	3301      	adds	r3, #1
    fe46:	3202      	adds	r2, #2
    fe48:	8811      	ldrh	r1, [r2, #0]
    fe4a:	2920      	cmp	r1, #32
    fe4c:	d0fa      	beq.n	fe44 <follow_path+0x108>
    fe4e:	292e      	cmp	r1, #46	; 0x2e
    fe50:	d0f8      	beq.n	fe44 <follow_path+0x108>
    fe52:	2b00      	cmp	r3, #0
    fe54:	d001      	beq.n	fe5a <follow_path+0x11e>
    fe56:	2203      	movs	r2, #3
    fe58:	4316      	orrs	r6, r2
    fe5a:	4652      	mov	r2, sl
    fe5c:	4442      	add	r2, r8
    fe5e:	3a02      	subs	r2, #2
    fe60:	8812      	ldrh	r2, [r2, #0]
    fe62:	2a2e      	cmp	r2, #46	; 0x2e
    fe64:	d009      	beq.n	fe7a <follow_path+0x13e>
    fe66:	4642      	mov	r2, r8
    fe68:	3a04      	subs	r2, #4
    fe6a:	4452      	add	r2, sl
    fe6c:	3c01      	subs	r4, #1
    fe6e:	2c00      	cmp	r4, #0
    fe70:	d003      	beq.n	fe7a <follow_path+0x13e>
    fe72:	3a02      	subs	r2, #2
    fe74:	8851      	ldrh	r1, [r2, #2]
    fe76:	292e      	cmp	r1, #46	; 0x2e
    fe78:	d1f8      	bne.n	fe6c <follow_path+0x130>
    fe7a:	2208      	movs	r2, #8
    fe7c:	9201      	str	r2, [sp, #4]
    fe7e:	2200      	movs	r2, #0
    fe80:	4693      	mov	fp, r2
    fe82:	4691      	mov	r9, r2
    fe84:	46a0      	mov	r8, r4
    fe86:	e006      	b.n	fe96 <follow_path+0x15a>
    fe88:	4544      	cmp	r4, r8
    fe8a:	d100      	bne.n	fe8e <follow_path+0x152>
    fe8c:	e0e6      	b.n	1005c <follow_path+0x320>
    fe8e:	2303      	movs	r3, #3
    fe90:	431e      	orrs	r6, r3
    fe92:	b2f6      	uxtb	r6, r6
    fe94:	0023      	movs	r3, r4
    fe96:	1c5c      	adds	r4, r3, #1
    fe98:	005b      	lsls	r3, r3, #1
    fe9a:	4652      	mov	r2, sl
    fe9c:	5a98      	ldrh	r0, [r3, r2]
    fe9e:	2800      	cmp	r0, #0
    fea0:	d02c      	beq.n	fefc <follow_path+0x1c0>
    fea2:	2820      	cmp	r0, #32
    fea4:	d0f3      	beq.n	fe8e <follow_path+0x152>
    fea6:	282e      	cmp	r0, #46	; 0x2e
    fea8:	d0ee      	beq.n	fe88 <follow_path+0x14c>
    feaa:	9b01      	ldr	r3, [sp, #4]
    feac:	459b      	cmp	fp, r3
    feae:	d219      	bcs.n	fee4 <follow_path+0x1a8>
    feb0:	4544      	cmp	r4, r8
    feb2:	d100      	bne.n	feb6 <follow_path+0x17a>
    feb4:	e0d2      	b.n	1005c <follow_path+0x320>
    feb6:	287f      	cmp	r0, #127	; 0x7f
    feb8:	d85e      	bhi.n	ff78 <follow_path+0x23c>
    feba:	282b      	cmp	r0, #43	; 0x2b
    febc:	d06e      	beq.n	ff9c <follow_path+0x260>
    febe:	232c      	movs	r3, #44	; 0x2c
    fec0:	4a60      	ldr	r2, [pc, #384]	; (10044 <follow_path+0x308>)
    fec2:	b299      	uxth	r1, r3
    fec4:	4281      	cmp	r1, r0
    fec6:	d067      	beq.n	ff98 <follow_path+0x25c>
    fec8:	3201      	adds	r2, #1
    feca:	7813      	ldrb	r3, [r2, #0]
    fecc:	2b00      	cmp	r3, #0
    fece:	d1f8      	bne.n	fec2 <follow_path+0x186>
    fed0:	0003      	movs	r3, r0
    fed2:	3b41      	subs	r3, #65	; 0x41
    fed4:	b29b      	uxth	r3, r3
    fed6:	2b19      	cmp	r3, #25
    fed8:	d86c      	bhi.n	ffb4 <follow_path+0x278>
    feda:	2302      	movs	r3, #2
    fedc:	464a      	mov	r2, r9
    fede:	431a      	orrs	r2, r3
    fee0:	4691      	mov	r9, r2
    fee2:	e05f      	b.n	ffa4 <follow_path+0x268>
    fee4:	9b01      	ldr	r3, [sp, #4]
    fee6:	2b0b      	cmp	r3, #11
    fee8:	d03b      	beq.n	ff62 <follow_path+0x226>
    feea:	4544      	cmp	r4, r8
    feec:	d100      	bne.n	fef0 <follow_path+0x1b4>
    feee:	e0b9      	b.n	10064 <follow_path+0x328>
    fef0:	2303      	movs	r3, #3
    fef2:	431e      	orrs	r6, r3
    fef4:	b2f6      	uxtb	r6, r6
    fef6:	4544      	cmp	r4, r8
    fef8:	d800      	bhi.n	fefc <follow_path+0x1c0>
    fefa:	e0b3      	b.n	10064 <follow_path+0x328>
    fefc:	69bb      	ldr	r3, [r7, #24]
    fefe:	781a      	ldrb	r2, [r3, #0]
    ff00:	2ae5      	cmp	r2, #229	; 0xe5
    ff02:	d036      	beq.n	ff72 <follow_path+0x236>
    ff04:	9b01      	ldr	r3, [sp, #4]
    ff06:	2b08      	cmp	r3, #8
    ff08:	d060      	beq.n	ffcc <follow_path+0x290>
    ff0a:	230c      	movs	r3, #12
    ff0c:	464a      	mov	r2, r9
    ff0e:	4013      	ands	r3, r2
    ff10:	2b0c      	cmp	r3, #12
    ff12:	d060      	beq.n	ffd6 <follow_path+0x29a>
    ff14:	43d2      	mvns	r2, r2
    ff16:	0792      	lsls	r2, r2, #30
    ff18:	d05d      	beq.n	ffd6 <follow_path+0x29a>
    ff1a:	07b2      	lsls	r2, r6, #30
    ff1c:	d406      	bmi.n	ff2c <follow_path+0x1f0>
    ff1e:	2203      	movs	r2, #3
    ff20:	4649      	mov	r1, r9
    ff22:	400a      	ands	r2, r1
    ff24:	2a01      	cmp	r2, #1
    ff26:	d059      	beq.n	ffdc <follow_path+0x2a0>
    ff28:	2b04      	cmp	r3, #4
    ff2a:	d05a      	beq.n	ffe2 <follow_path+0x2a6>
    ff2c:	69bb      	ldr	r3, [r7, #24]
    ff2e:	72de      	strb	r6, [r3, #11]
    ff30:	0038      	movs	r0, r7
    ff32:	4b45      	ldr	r3, [pc, #276]	; (10048 <follow_path+0x30c>)
    ff34:	4798      	blx	r3
    ff36:	69bb      	ldr	r3, [r7, #24]
    ff38:	7adb      	ldrb	r3, [r3, #11]
    ff3a:	2800      	cmp	r0, #0
    ff3c:	d15c      	bne.n	fff8 <follow_path+0x2bc>
    ff3e:	075b      	lsls	r3, r3, #29
    ff40:	d453      	bmi.n	ffea <follow_path+0x2ae>
    ff42:	697a      	ldr	r2, [r7, #20]
    ff44:	7ad3      	ldrb	r3, [r2, #11]
    ff46:	06db      	lsls	r3, r3, #27
    ff48:	d55c      	bpl.n	10004 <follow_path+0x2c8>
    ff4a:	7d51      	ldrb	r1, [r2, #21]
    ff4c:	0209      	lsls	r1, r1, #8
    ff4e:	7d13      	ldrb	r3, [r2, #20]
    ff50:	430b      	orrs	r3, r1
    ff52:	041b      	lsls	r3, r3, #16
    ff54:	7ed1      	ldrb	r1, [r2, #27]
    ff56:	0209      	lsls	r1, r1, #8
    ff58:	7e92      	ldrb	r2, [r2, #26]
    ff5a:	430a      	orrs	r2, r1
    ff5c:	4313      	orrs	r3, r2
    ff5e:	60bb      	str	r3, [r7, #8]
    ff60:	e70b      	b.n	fd7a <follow_path+0x3e>
    ff62:	2303      	movs	r3, #3
    ff64:	431e      	orrs	r6, r3
    ff66:	69bb      	ldr	r3, [r7, #24]
    ff68:	781a      	ldrb	r2, [r3, #0]
    ff6a:	2ae5      	cmp	r2, #229	; 0xe5
    ff6c:	d1cd      	bne.n	ff0a <follow_path+0x1ce>
    ff6e:	220b      	movs	r2, #11
    ff70:	9201      	str	r2, [sp, #4]
    ff72:	2205      	movs	r2, #5
    ff74:	701a      	strb	r2, [r3, #0]
    ff76:	e7c5      	b.n	ff04 <follow_path+0x1c8>
    ff78:	2100      	movs	r1, #0
    ff7a:	4b2f      	ldr	r3, [pc, #188]	; (10038 <follow_path+0x2fc>)
    ff7c:	4798      	blx	r3
    ff7e:	2800      	cmp	r0, #0
    ff80:	d100      	bne.n	ff84 <follow_path+0x248>
    ff82:	e079      	b.n	10078 <follow_path+0x33c>
    ff84:	4b31      	ldr	r3, [pc, #196]	; (1004c <follow_path+0x310>)
    ff86:	469c      	mov	ip, r3
    ff88:	4460      	add	r0, ip
    ff8a:	3880      	subs	r0, #128	; 0x80
    ff8c:	7800      	ldrb	r0, [r0, #0]
    ff8e:	2302      	movs	r3, #2
    ff90:	431e      	orrs	r6, r3
    ff92:	2800      	cmp	r0, #0
    ff94:	d002      	beq.n	ff9c <follow_path+0x260>
    ff96:	e790      	b.n	feba <follow_path+0x17e>
    ff98:	2b00      	cmp	r3, #0
    ff9a:	d099      	beq.n	fed0 <follow_path+0x194>
    ff9c:	2303      	movs	r3, #3
    ff9e:	431e      	orrs	r6, r3
    ffa0:	b2f6      	uxtb	r6, r6
    ffa2:	205f      	movs	r0, #95	; 0x5f
    ffa4:	69bb      	ldr	r3, [r7, #24]
    ffa6:	465a      	mov	r2, fp
    ffa8:	5498      	strb	r0, [r3, r2]
    ffaa:	0023      	movs	r3, r4
    ffac:	2201      	movs	r2, #1
    ffae:	4694      	mov	ip, r2
    ffb0:	44e3      	add	fp, ip
    ffb2:	e770      	b.n	fe96 <follow_path+0x15a>
    ffb4:	0003      	movs	r3, r0
    ffb6:	3b61      	subs	r3, #97	; 0x61
    ffb8:	b29b      	uxth	r3, r3
    ffba:	2b19      	cmp	r3, #25
    ffbc:	d8f2      	bhi.n	ffa4 <follow_path+0x268>
    ffbe:	2301      	movs	r3, #1
    ffc0:	464a      	mov	r2, r9
    ffc2:	431a      	orrs	r2, r3
    ffc4:	4691      	mov	r9, r2
    ffc6:	3820      	subs	r0, #32
    ffc8:	b280      	uxth	r0, r0
    ffca:	e7eb      	b.n	ffa4 <follow_path+0x268>
    ffcc:	464b      	mov	r3, r9
    ffce:	009b      	lsls	r3, r3, #2
    ffd0:	b2db      	uxtb	r3, r3
    ffd2:	4699      	mov	r9, r3
    ffd4:	e799      	b.n	ff0a <follow_path+0x1ce>
    ffd6:	2202      	movs	r2, #2
    ffd8:	4316      	orrs	r6, r2
    ffda:	e79e      	b.n	ff1a <follow_path+0x1de>
    ffdc:	320f      	adds	r2, #15
    ffde:	4316      	orrs	r6, r2
    ffe0:	e7a2      	b.n	ff28 <follow_path+0x1ec>
    ffe2:	3304      	adds	r3, #4
    ffe4:	431e      	orrs	r6, r3
    ffe6:	e7a1      	b.n	ff2c <follow_path+0x1f0>
    ffe8:	2006      	movs	r0, #6
    ffea:	b003      	add	sp, #12
    ffec:	bc3c      	pop	{r2, r3, r4, r5}
    ffee:	4690      	mov	r8, r2
    fff0:	4699      	mov	r9, r3
    fff2:	46a2      	mov	sl, r4
    fff4:	46ab      	mov	fp, r5
    fff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fff8:	2804      	cmp	r0, #4
    fffa:	d1f6      	bne.n	ffea <follow_path+0x2ae>
    fffc:	075b      	lsls	r3, r3, #29
    fffe:	d4f4      	bmi.n	ffea <follow_path+0x2ae>
   10000:	3001      	adds	r0, #1
   10002:	e7f2      	b.n	ffea <follow_path+0x2ae>
   10004:	2005      	movs	r0, #5
   10006:	e7f0      	b.n	ffea <follow_path+0x2ae>
   10008:	2301      	movs	r3, #1
   1000a:	2400      	movs	r4, #0
   1000c:	e6fb      	b.n	fe06 <follow_path+0xca>
   1000e:	2301      	movs	r3, #1
   10010:	2400      	movs	r4, #0
   10012:	e005      	b.n	10020 <follow_path+0x2e4>
   10014:	2301      	movs	r3, #1
   10016:	2400      	movs	r4, #0
   10018:	e002      	b.n	10020 <follow_path+0x2e4>
   1001a:	002c      	movs	r4, r5
   1001c:	465f      	mov	r7, fp
   1001e:	464d      	mov	r5, r9
   10020:	18ed      	adds	r5, r5, r3
   10022:	2600      	movs	r6, #0
   10024:	2c00      	cmp	r4, #0
   10026:	d0df      	beq.n	ffe8 <follow_path+0x2ac>
   10028:	4b09      	ldr	r3, [pc, #36]	; (10050 <follow_path+0x314>)
   1002a:	18e3      	adds	r3, r4, r3
   1002c:	005b      	lsls	r3, r3, #1
   1002e:	4453      	add	r3, sl
   10030:	e6f1      	b.n	fe16 <follow_path+0xda>
   10032:	46c0      	nop			; (mov r8, r8)
   10034:	0000f38d 	.word	0x0000f38d
   10038:	000104e5 	.word	0x000104e5
   1003c:	00018ba1 	.word	0x00018ba1
   10040:	0000ed25 	.word	0x0000ed25
   10044:	00018bad 	.word	0x00018bad
   10048:	0000f7cd 	.word	0x0000f7cd
   1004c:	00018b20 	.word	0x00018b20
   10050:	7fffffff 	.word	0x7fffffff
   10054:	002c      	movs	r4, r5
   10056:	465f      	mov	r7, fp
   10058:	464d      	mov	r5, r9
   1005a:	e7e1      	b.n	10020 <follow_path+0x2e4>
   1005c:	9b01      	ldr	r3, [sp, #4]
   1005e:	2b0b      	cmp	r3, #11
   10060:	d100      	bne.n	10064 <follow_path+0x328>
   10062:	e77e      	b.n	ff62 <follow_path+0x226>
   10064:	464b      	mov	r3, r9
   10066:	009b      	lsls	r3, r3, #2
   10068:	b2db      	uxtb	r3, r3
   1006a:	4699      	mov	r9, r3
   1006c:	4643      	mov	r3, r8
   1006e:	220b      	movs	r2, #11
   10070:	9201      	str	r2, [sp, #4]
   10072:	3a03      	subs	r2, #3
   10074:	4693      	mov	fp, r2
   10076:	e70e      	b.n	fe96 <follow_path+0x15a>
   10078:	2302      	movs	r3, #2
   1007a:	431e      	orrs	r6, r3
   1007c:	e78e      	b.n	ff9c <follow_path+0x260>
   1007e:	46c0      	nop			; (mov r8, r8)

00010080 <f_open>:
   10080:	b5f0      	push	{r4, r5, r6, r7, lr}
   10082:	46c6      	mov	lr, r8
   10084:	b500      	push	{lr}
   10086:	4c59      	ldr	r4, [pc, #356]	; (101ec <f_open+0x16c>)
   10088:	44a5      	add	sp, r4
   1008a:	0005      	movs	r5, r0
   1008c:	9101      	str	r1, [sp, #4]
   1008e:	0017      	movs	r7, r2
   10090:	2300      	movs	r3, #0
   10092:	6003      	str	r3, [r0, #0]
   10094:	261f      	movs	r6, #31
   10096:	4016      	ands	r6, r2
   10098:	221e      	movs	r2, #30
   1009a:	403a      	ands	r2, r7
   1009c:	a985      	add	r1, sp, #532	; 0x214
   1009e:	a801      	add	r0, sp, #4
   100a0:	4b53      	ldr	r3, [pc, #332]	; (101f0 <f_open+0x170>)
   100a2:	4798      	blx	r3
   100a4:	ab82      	add	r3, sp, #520	; 0x208
   100a6:	938b      	str	r3, [sp, #556]	; 0x22c
   100a8:	ab02      	add	r3, sp, #8
   100aa:	938c      	str	r3, [sp, #560]	; 0x230
   100ac:	2800      	cmp	r0, #0
   100ae:	d006      	beq.n	100be <f_open+0x3e>
   100b0:	9c8a      	ldr	r4, [sp, #552]	; 0x228
   100b2:	231c      	movs	r3, #28
   100b4:	423b      	tst	r3, r7
   100b6:	d145      	bne.n	10144 <f_open+0xc4>
   100b8:	2800      	cmp	r0, #0
   100ba:	d13d      	bne.n	10138 <f_open+0xb8>
   100bc:	e00c      	b.n	100d8 <f_open+0x58>
   100be:	9901      	ldr	r1, [sp, #4]
   100c0:	a885      	add	r0, sp, #532	; 0x214
   100c2:	4b4c      	ldr	r3, [pc, #304]	; (101f4 <f_open+0x174>)
   100c4:	4798      	blx	r3
   100c6:	9c8a      	ldr	r4, [sp, #552]	; 0x228
   100c8:	2800      	cmp	r0, #0
   100ca:	d1f2      	bne.n	100b2 <f_open+0x32>
   100cc:	2c00      	cmp	r4, #0
   100ce:	d100      	bne.n	100d2 <f_open+0x52>
   100d0:	e086      	b.n	101e0 <f_open+0x160>
   100d2:	231c      	movs	r3, #28
   100d4:	423b      	tst	r3, r7
   100d6:	d146      	bne.n	10166 <f_open+0xe6>
   100d8:	7ae3      	ldrb	r3, [r4, #11]
   100da:	2004      	movs	r0, #4
   100dc:	06da      	lsls	r2, r3, #27
   100de:	d42b      	bmi.n	10138 <f_open+0xb8>
   100e0:	07ba      	lsls	r2, r7, #30
   100e2:	d502      	bpl.n	100ea <f_open+0x6a>
   100e4:	3003      	adds	r0, #3
   100e6:	07db      	lsls	r3, r3, #31
   100e8:	d426      	bmi.n	10138 <f_open+0xb8>
   100ea:	073b      	lsls	r3, r7, #28
   100ec:	d501      	bpl.n	100f2 <f_open+0x72>
   100ee:	2320      	movs	r3, #32
   100f0:	431e      	orrs	r6, r3
   100f2:	9b85      	ldr	r3, [sp, #532]	; 0x214
   100f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   100f6:	61eb      	str	r3, [r5, #28]
   100f8:	622c      	str	r4, [r5, #32]
   100fa:	71ae      	strb	r6, [r5, #6]
   100fc:	7d62      	ldrb	r2, [r4, #21]
   100fe:	0212      	lsls	r2, r2, #8
   10100:	7d23      	ldrb	r3, [r4, #20]
   10102:	4313      	orrs	r3, r2
   10104:	041b      	lsls	r3, r3, #16
   10106:	7ee1      	ldrb	r1, [r4, #27]
   10108:	0209      	lsls	r1, r1, #8
   1010a:	7ea2      	ldrb	r2, [r4, #26]
   1010c:	430a      	orrs	r2, r1
   1010e:	4313      	orrs	r3, r2
   10110:	612b      	str	r3, [r5, #16]
   10112:	7fe3      	ldrb	r3, [r4, #31]
   10114:	061b      	lsls	r3, r3, #24
   10116:	7fa2      	ldrb	r2, [r4, #30]
   10118:	0412      	lsls	r2, r2, #16
   1011a:	4313      	orrs	r3, r2
   1011c:	7f22      	ldrb	r2, [r4, #28]
   1011e:	4313      	orrs	r3, r2
   10120:	7f62      	ldrb	r2, [r4, #29]
   10122:	0212      	lsls	r2, r2, #8
   10124:	4313      	orrs	r3, r2
   10126:	60eb      	str	r3, [r5, #12]
   10128:	2300      	movs	r3, #0
   1012a:	60ab      	str	r3, [r5, #8]
   1012c:	61ab      	str	r3, [r5, #24]
   1012e:	9b85      	ldr	r3, [sp, #532]	; 0x214
   10130:	602b      	str	r3, [r5, #0]
   10132:	88db      	ldrh	r3, [r3, #6]
   10134:	80ab      	strh	r3, [r5, #4]
   10136:	2000      	movs	r0, #0
   10138:	238e      	movs	r3, #142	; 0x8e
   1013a:	009b      	lsls	r3, r3, #2
   1013c:	449d      	add	sp, r3
   1013e:	bc04      	pop	{r2}
   10140:	4690      	mov	r8, r2
   10142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10144:	2804      	cmp	r0, #4
   10146:	d005      	beq.n	10154 <f_open+0xd4>
   10148:	2308      	movs	r3, #8
   1014a:	431e      	orrs	r6, r3
   1014c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
   1014e:	2800      	cmp	r0, #0
   10150:	d0d3      	beq.n	100fa <f_open+0x7a>
   10152:	e7f1      	b.n	10138 <f_open+0xb8>
   10154:	a885      	add	r0, sp, #532	; 0x214
   10156:	4b28      	ldr	r3, [pc, #160]	; (101f8 <f_open+0x178>)
   10158:	4798      	blx	r3
   1015a:	2308      	movs	r3, #8
   1015c:	431e      	orrs	r6, r3
   1015e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
   10160:	2800      	cmp	r0, #0
   10162:	d008      	beq.n	10176 <f_open+0xf6>
   10164:	e7e8      	b.n	10138 <f_open+0xb8>
   10166:	7ae3      	ldrb	r3, [r4, #11]
   10168:	2211      	movs	r2, #17
   1016a:	2007      	movs	r0, #7
   1016c:	421a      	tst	r2, r3
   1016e:	d1e3      	bne.n	10138 <f_open+0xb8>
   10170:	3001      	adds	r0, #1
   10172:	077b      	lsls	r3, r7, #29
   10174:	d4e0      	bmi.n	10138 <f_open+0xb8>
   10176:	0733      	lsls	r3, r6, #28
   10178:	d5bb      	bpl.n	100f2 <f_open+0x72>
   1017a:	4b20      	ldr	r3, [pc, #128]	; (101fc <f_open+0x17c>)
   1017c:	4798      	blx	r3
   1017e:	73a0      	strb	r0, [r4, #14]
   10180:	0a03      	lsrs	r3, r0, #8
   10182:	73e3      	strb	r3, [r4, #15]
   10184:	0c03      	lsrs	r3, r0, #16
   10186:	7423      	strb	r3, [r4, #16]
   10188:	0e00      	lsrs	r0, r0, #24
   1018a:	7460      	strb	r0, [r4, #17]
   1018c:	2300      	movs	r3, #0
   1018e:	72e3      	strb	r3, [r4, #11]
   10190:	7723      	strb	r3, [r4, #28]
   10192:	7763      	strb	r3, [r4, #29]
   10194:	77a3      	strb	r3, [r4, #30]
   10196:	77e3      	strb	r3, [r4, #31]
   10198:	7d62      	ldrb	r2, [r4, #21]
   1019a:	0212      	lsls	r2, r2, #8
   1019c:	7d27      	ldrb	r7, [r4, #20]
   1019e:	4317      	orrs	r7, r2
   101a0:	043f      	lsls	r7, r7, #16
   101a2:	7ee1      	ldrb	r1, [r4, #27]
   101a4:	0209      	lsls	r1, r1, #8
   101a6:	7ea2      	ldrb	r2, [r4, #26]
   101a8:	430a      	orrs	r2, r1
   101aa:	4317      	orrs	r7, r2
   101ac:	76a3      	strb	r3, [r4, #26]
   101ae:	76e3      	strb	r3, [r4, #27]
   101b0:	7523      	strb	r3, [r4, #20]
   101b2:	7563      	strb	r3, [r4, #21]
   101b4:	9885      	ldr	r0, [sp, #532]	; 0x214
   101b6:	3301      	adds	r3, #1
   101b8:	7103      	strb	r3, [r0, #4]
   101ba:	2f00      	cmp	r7, #0
   101bc:	d097      	beq.n	100ee <f_open+0x6e>
   101be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   101c0:	4698      	mov	r8, r3
   101c2:	0039      	movs	r1, r7
   101c4:	4b0e      	ldr	r3, [pc, #56]	; (10200 <f_open+0x180>)
   101c6:	4798      	blx	r3
   101c8:	2800      	cmp	r0, #0
   101ca:	d1b5      	bne.n	10138 <f_open+0xb8>
   101cc:	9885      	ldr	r0, [sp, #532]	; 0x214
   101ce:	3f01      	subs	r7, #1
   101d0:	60c7      	str	r7, [r0, #12]
   101d2:	4641      	mov	r1, r8
   101d4:	4b0b      	ldr	r3, [pc, #44]	; (10204 <f_open+0x184>)
   101d6:	4798      	blx	r3
   101d8:	2800      	cmp	r0, #0
   101da:	d100      	bne.n	101de <f_open+0x15e>
   101dc:	e787      	b.n	100ee <f_open+0x6e>
   101de:	e7ab      	b.n	10138 <f_open+0xb8>
   101e0:	231c      	movs	r3, #28
   101e2:	2006      	movs	r0, #6
   101e4:	423b      	tst	r3, r7
   101e6:	d0b2      	beq.n	1014e <f_open+0xce>
   101e8:	2006      	movs	r0, #6
   101ea:	e7ad      	b.n	10148 <f_open+0xc8>
   101ec:	fffffdc8 	.word	0xfffffdc8
   101f0:	0000ee41 	.word	0x0000ee41
   101f4:	0000fd3d 	.word	0x0000fd3d
   101f8:	0000f965 	.word	0x0000f965
   101fc:	0000ecc1 	.word	0x0000ecc1
   10200:	0000f631 	.word	0x0000f631
   10204:	0000f1f1 	.word	0x0000f1f1

00010208 <f_write>:
   10208:	b5f0      	push	{r4, r5, r6, r7, lr}
   1020a:	46de      	mov	lr, fp
   1020c:	4657      	mov	r7, sl
   1020e:	464e      	mov	r6, r9
   10210:	4645      	mov	r5, r8
   10212:	b5e0      	push	{r5, r6, r7, lr}
   10214:	b083      	sub	sp, #12
   10216:	0004      	movs	r4, r0
   10218:	000d      	movs	r5, r1
   1021a:	0016      	movs	r6, r2
   1021c:	4699      	mov	r9, r3
   1021e:	2300      	movs	r3, #0
   10220:	464a      	mov	r2, r9
   10222:	6013      	str	r3, [r2, #0]
   10224:	8881      	ldrh	r1, [r0, #4]
   10226:	6800      	ldr	r0, [r0, #0]
   10228:	4b7f      	ldr	r3, [pc, #508]	; (10428 <f_write+0x220>)
   1022a:	4798      	blx	r3
   1022c:	9000      	str	r0, [sp, #0]
   1022e:	2800      	cmp	r0, #0
   10230:	d000      	beq.n	10234 <f_write+0x2c>
   10232:	e0f1      	b.n	10418 <f_write+0x210>
   10234:	79a3      	ldrb	r3, [r4, #6]
   10236:	b25a      	sxtb	r2, r3
   10238:	2a00      	cmp	r2, #0
   1023a:	da00      	bge.n	1023e <f_write+0x36>
   1023c:	e0ea      	b.n	10414 <f_write+0x20c>
   1023e:	079b      	lsls	r3, r3, #30
   10240:	d402      	bmi.n	10248 <f_write+0x40>
   10242:	2307      	movs	r3, #7
   10244:	9300      	str	r3, [sp, #0]
   10246:	e0e7      	b.n	10418 <f_write+0x210>
   10248:	68e3      	ldr	r3, [r4, #12]
   1024a:	199a      	adds	r2, r3, r6
   1024c:	4293      	cmp	r3, r2
   1024e:	d810      	bhi.n	10272 <f_write+0x6a>
   10250:	2e00      	cmp	r6, #0
   10252:	d00e      	beq.n	10272 <f_write+0x6a>
   10254:	002f      	movs	r7, r5
   10256:	e07b      	b.n	10350 <f_write+0x148>
   10258:	2100      	movs	r1, #0
   1025a:	4b74      	ldr	r3, [pc, #464]	; (1042c <f_write+0x224>)
   1025c:	4798      	blx	r3
   1025e:	0003      	movs	r3, r0
   10260:	6120      	str	r0, [r4, #16]
   10262:	e003      	b.n	1026c <f_write+0x64>
   10264:	6961      	ldr	r1, [r4, #20]
   10266:	4b71      	ldr	r3, [pc, #452]	; (1042c <f_write+0x224>)
   10268:	4798      	blx	r3
   1026a:	0003      	movs	r3, r0
   1026c:	2b00      	cmp	r3, #0
   1026e:	d000      	beq.n	10272 <f_write+0x6a>
   10270:	e080      	b.n	10374 <f_write+0x16c>
   10272:	68a3      	ldr	r3, [r4, #8]
   10274:	68e2      	ldr	r2, [r4, #12]
   10276:	4293      	cmp	r3, r2
   10278:	d900      	bls.n	1027c <f_write+0x74>
   1027a:	60e3      	str	r3, [r4, #12]
   1027c:	79a3      	ldrb	r3, [r4, #6]
   1027e:	2220      	movs	r2, #32
   10280:	4313      	orrs	r3, r2
   10282:	71a3      	strb	r3, [r4, #6]
   10284:	e0c8      	b.n	10418 <f_write+0x210>
   10286:	79a2      	ldrb	r2, [r4, #6]
   10288:	3b81      	subs	r3, #129	; 0x81
   1028a:	4313      	orrs	r3, r2
   1028c:	71a3      	strb	r3, [r4, #6]
   1028e:	2302      	movs	r3, #2
   10290:	9300      	str	r3, [sp, #0]
   10292:	e0c1      	b.n	10418 <f_write+0x210>
   10294:	79a2      	ldrb	r2, [r4, #6]
   10296:	3b7f      	subs	r3, #127	; 0x7f
   10298:	4313      	orrs	r3, r2
   1029a:	71a3      	strb	r3, [r4, #6]
   1029c:	2301      	movs	r3, #1
   1029e:	9300      	str	r3, [sp, #0]
   102a0:	e0ba      	b.n	10418 <f_write+0x210>
   102a2:	2100      	movs	r1, #0
   102a4:	4b62      	ldr	r3, [pc, #392]	; (10430 <f_write+0x228>)
   102a6:	4798      	blx	r3
   102a8:	2800      	cmp	r0, #0
   102aa:	d06d      	beq.n	10388 <f_write+0x180>
   102ac:	79a2      	ldrb	r2, [r4, #6]
   102ae:	2380      	movs	r3, #128	; 0x80
   102b0:	425b      	negs	r3, r3
   102b2:	4313      	orrs	r3, r2
   102b4:	71a3      	strb	r3, [r4, #6]
   102b6:	2301      	movs	r3, #1
   102b8:	9300      	str	r3, [sp, #0]
   102ba:	e0ad      	b.n	10418 <f_write+0x210>
   102bc:	79a2      	ldrb	r2, [r4, #6]
   102be:	2380      	movs	r3, #128	; 0x80
   102c0:	425b      	negs	r3, r3
   102c2:	4313      	orrs	r3, r2
   102c4:	71a3      	strb	r3, [r4, #6]
   102c6:	2302      	movs	r3, #2
   102c8:	9300      	str	r3, [sp, #0]
   102ca:	e0a5      	b.n	10418 <f_write+0x210>
   102cc:	79a2      	ldrb	r2, [r4, #6]
   102ce:	2380      	movs	r3, #128	; 0x80
   102d0:	425b      	negs	r3, r3
   102d2:	4313      	orrs	r3, r2
   102d4:	71a3      	strb	r3, [r4, #6]
   102d6:	2301      	movs	r3, #1
   102d8:	9300      	str	r3, [sp, #0]
   102da:	e09d      	b.n	10418 <f_write+0x210>
   102dc:	0240      	lsls	r0, r0, #9
   102de:	1839      	adds	r1, r7, r0
   102e0:	3330      	adds	r3, #48	; 0x30
   102e2:	0018      	movs	r0, r3
   102e4:	2280      	movs	r2, #128	; 0x80
   102e6:	0092      	lsls	r2, r2, #2
   102e8:	4b52      	ldr	r3, [pc, #328]	; (10434 <f_write+0x22c>)
   102ea:	4798      	blx	r3
   102ec:	2300      	movs	r3, #0
   102ee:	6822      	ldr	r2, [r4, #0]
   102f0:	7113      	strb	r3, [r2, #4]
   102f2:	e072      	b.n	103da <f_write+0x1d2>
   102f4:	68a3      	ldr	r3, [r4, #8]
   102f6:	68e2      	ldr	r2, [r4, #12]
   102f8:	4293      	cmp	r3, r2
   102fa:	d271      	bcs.n	103e0 <f_write+0x1d8>
   102fc:	4643      	mov	r3, r8
   102fe:	61a3      	str	r3, [r4, #24]
   10300:	68a3      	ldr	r3, [r4, #8]
   10302:	05dd      	lsls	r5, r3, #23
   10304:	0ded      	lsrs	r5, r5, #23
   10306:	2380      	movs	r3, #128	; 0x80
   10308:	009b      	lsls	r3, r3, #2
   1030a:	1b5d      	subs	r5, r3, r5
   1030c:	42b5      	cmp	r5, r6
   1030e:	d900      	bls.n	10312 <f_write+0x10a>
   10310:	0035      	movs	r5, r6
   10312:	69a1      	ldr	r1, [r4, #24]
   10314:	6820      	ldr	r0, [r4, #0]
   10316:	4b46      	ldr	r3, [pc, #280]	; (10430 <f_write+0x228>)
   10318:	4798      	blx	r3
   1031a:	2800      	cmp	r0, #0
   1031c:	d172      	bne.n	10404 <f_write+0x1fc>
   1031e:	68a3      	ldr	r3, [r4, #8]
   10320:	05d8      	lsls	r0, r3, #23
   10322:	0dc0      	lsrs	r0, r0, #23
   10324:	3030      	adds	r0, #48	; 0x30
   10326:	6823      	ldr	r3, [r4, #0]
   10328:	469c      	mov	ip, r3
   1032a:	4460      	add	r0, ip
   1032c:	002a      	movs	r2, r5
   1032e:	0039      	movs	r1, r7
   10330:	4b40      	ldr	r3, [pc, #256]	; (10434 <f_write+0x22c>)
   10332:	4798      	blx	r3
   10334:	2301      	movs	r3, #1
   10336:	6822      	ldr	r2, [r4, #0]
   10338:	7113      	strb	r3, [r2, #4]
   1033a:	197f      	adds	r7, r7, r5
   1033c:	68a3      	ldr	r3, [r4, #8]
   1033e:	195b      	adds	r3, r3, r5
   10340:	60a3      	str	r3, [r4, #8]
   10342:	464b      	mov	r3, r9
   10344:	681b      	ldr	r3, [r3, #0]
   10346:	195b      	adds	r3, r3, r5
   10348:	464a      	mov	r2, r9
   1034a:	6013      	str	r3, [r2, #0]
   1034c:	1b76      	subs	r6, r6, r5
   1034e:	d090      	beq.n	10272 <f_write+0x6a>
   10350:	68a3      	ldr	r3, [r4, #8]
   10352:	05da      	lsls	r2, r3, #23
   10354:	d1d4      	bne.n	10300 <f_write+0xf8>
   10356:	6820      	ldr	r0, [r4, #0]
   10358:	7882      	ldrb	r2, [r0, #2]
   1035a:	3a01      	subs	r2, #1
   1035c:	0a5d      	lsrs	r5, r3, #9
   1035e:	4015      	ands	r5, r2
   10360:	b2ed      	uxtb	r5, r5
   10362:	2d00      	cmp	r5, #0
   10364:	d10b      	bne.n	1037e <f_write+0x176>
   10366:	2b00      	cmp	r3, #0
   10368:	d000      	beq.n	1036c <f_write+0x164>
   1036a:	e77b      	b.n	10264 <f_write+0x5c>
   1036c:	6923      	ldr	r3, [r4, #16]
   1036e:	2b00      	cmp	r3, #0
   10370:	d100      	bne.n	10374 <f_write+0x16c>
   10372:	e771      	b.n	10258 <f_write+0x50>
   10374:	2b01      	cmp	r3, #1
   10376:	d086      	beq.n	10286 <f_write+0x7e>
   10378:	1c5a      	adds	r2, r3, #1
   1037a:	d08b      	beq.n	10294 <f_write+0x8c>
   1037c:	6163      	str	r3, [r4, #20]
   1037e:	6820      	ldr	r0, [r4, #0]
   10380:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   10382:	69a2      	ldr	r2, [r4, #24]
   10384:	4293      	cmp	r3, r2
   10386:	d08c      	beq.n	102a2 <f_write+0x9a>
   10388:	6823      	ldr	r3, [r4, #0]
   1038a:	469a      	mov	sl, r3
   1038c:	6961      	ldr	r1, [r4, #20]
   1038e:	0018      	movs	r0, r3
   10390:	4b29      	ldr	r3, [pc, #164]	; (10438 <f_write+0x230>)
   10392:	4798      	blx	r3
   10394:	2800      	cmp	r0, #0
   10396:	d091      	beq.n	102bc <f_write+0xb4>
   10398:	4680      	mov	r8, r0
   1039a:	44a8      	add	r8, r5
   1039c:	0a73      	lsrs	r3, r6, #9
   1039e:	469b      	mov	fp, r3
   103a0:	d0a8      	beq.n	102f4 <f_write+0xec>
   103a2:	4653      	mov	r3, sl
   103a4:	789b      	ldrb	r3, [r3, #2]
   103a6:	465a      	mov	r2, fp
   103a8:	18aa      	adds	r2, r5, r2
   103aa:	429a      	cmp	r2, r3
   103ac:	d901      	bls.n	103b2 <f_write+0x1aa>
   103ae:	1b5b      	subs	r3, r3, r5
   103b0:	469b      	mov	fp, r3
   103b2:	465b      	mov	r3, fp
   103b4:	466a      	mov	r2, sp
   103b6:	71d3      	strb	r3, [r2, #7]
   103b8:	79d3      	ldrb	r3, [r2, #7]
   103ba:	4652      	mov	r2, sl
   103bc:	7850      	ldrb	r0, [r2, #1]
   103be:	4642      	mov	r2, r8
   103c0:	0039      	movs	r1, r7
   103c2:	4d1e      	ldr	r5, [pc, #120]	; (1043c <f_write+0x234>)
   103c4:	47a8      	blx	r5
   103c6:	2800      	cmp	r0, #0
   103c8:	d000      	beq.n	103cc <f_write+0x1c4>
   103ca:	e77f      	b.n	102cc <f_write+0xc4>
   103cc:	6823      	ldr	r3, [r4, #0]
   103ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   103d0:	4641      	mov	r1, r8
   103d2:	1a50      	subs	r0, r2, r1
   103d4:	4583      	cmp	fp, r0
   103d6:	d900      	bls.n	103da <f_write+0x1d2>
   103d8:	e780      	b.n	102dc <f_write+0xd4>
   103da:	465b      	mov	r3, fp
   103dc:	025d      	lsls	r5, r3, #9
   103de:	e7ac      	b.n	1033a <f_write+0x132>
   103e0:	2100      	movs	r1, #0
   103e2:	4650      	mov	r0, sl
   103e4:	4b12      	ldr	r3, [pc, #72]	; (10430 <f_write+0x228>)
   103e6:	4798      	blx	r3
   103e8:	2800      	cmp	r0, #0
   103ea:	d103      	bne.n	103f4 <f_write+0x1ec>
   103ec:	6823      	ldr	r3, [r4, #0]
   103ee:	4642      	mov	r2, r8
   103f0:	62da      	str	r2, [r3, #44]	; 0x2c
   103f2:	e783      	b.n	102fc <f_write+0xf4>
   103f4:	79a2      	ldrb	r2, [r4, #6]
   103f6:	2380      	movs	r3, #128	; 0x80
   103f8:	425b      	negs	r3, r3
   103fa:	4313      	orrs	r3, r2
   103fc:	71a3      	strb	r3, [r4, #6]
   103fe:	2301      	movs	r3, #1
   10400:	9300      	str	r3, [sp, #0]
   10402:	e009      	b.n	10418 <f_write+0x210>
   10404:	79a2      	ldrb	r2, [r4, #6]
   10406:	2380      	movs	r3, #128	; 0x80
   10408:	425b      	negs	r3, r3
   1040a:	4313      	orrs	r3, r2
   1040c:	71a3      	strb	r3, [r4, #6]
   1040e:	2301      	movs	r3, #1
   10410:	9300      	str	r3, [sp, #0]
   10412:	e001      	b.n	10418 <f_write+0x210>
   10414:	2302      	movs	r3, #2
   10416:	9300      	str	r3, [sp, #0]
   10418:	9800      	ldr	r0, [sp, #0]
   1041a:	b003      	add	sp, #12
   1041c:	bc3c      	pop	{r2, r3, r4, r5}
   1041e:	4690      	mov	r8, r2
   10420:	4699      	mov	r9, r3
   10422:	46a2      	mov	sl, r4
   10424:	46ab      	mov	fp, r5
   10426:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10428:	0000ed6d 	.word	0x0000ed6d
   1042c:	0000f56d 	.word	0x0000f56d
   10430:	0000f1f1 	.word	0x0000f1f1
   10434:	0000ed11 	.word	0x0000ed11
   10438:	0000ed37 	.word	0x0000ed37
   1043c:	0000ebd1 	.word	0x0000ebd1

00010440 <f_sync>:
   10440:	b570      	push	{r4, r5, r6, lr}
   10442:	0004      	movs	r4, r0
   10444:	8881      	ldrh	r1, [r0, #4]
   10446:	6800      	ldr	r0, [r0, #0]
   10448:	4b1c      	ldr	r3, [pc, #112]	; (104bc <f_sync+0x7c>)
   1044a:	4798      	blx	r3
   1044c:	2800      	cmp	r0, #0
   1044e:	d102      	bne.n	10456 <f_sync+0x16>
   10450:	79a3      	ldrb	r3, [r4, #6]
   10452:	069b      	lsls	r3, r3, #26
   10454:	d400      	bmi.n	10458 <f_sync+0x18>
   10456:	bd70      	pop	{r4, r5, r6, pc}
   10458:	69e1      	ldr	r1, [r4, #28]
   1045a:	6820      	ldr	r0, [r4, #0]
   1045c:	4b18      	ldr	r3, [pc, #96]	; (104c0 <f_sync+0x80>)
   1045e:	4798      	blx	r3
   10460:	2800      	cmp	r0, #0
   10462:	d1f8      	bne.n	10456 <f_sync+0x16>
   10464:	6a25      	ldr	r5, [r4, #32]
   10466:	7aeb      	ldrb	r3, [r5, #11]
   10468:	2220      	movs	r2, #32
   1046a:	4313      	orrs	r3, r2
   1046c:	72eb      	strb	r3, [r5, #11]
   1046e:	7b23      	ldrb	r3, [r4, #12]
   10470:	772b      	strb	r3, [r5, #28]
   10472:	89a3      	ldrh	r3, [r4, #12]
   10474:	0a1b      	lsrs	r3, r3, #8
   10476:	776b      	strb	r3, [r5, #29]
   10478:	89e3      	ldrh	r3, [r4, #14]
   1047a:	77ab      	strb	r3, [r5, #30]
   1047c:	7be3      	ldrb	r3, [r4, #15]
   1047e:	77eb      	strb	r3, [r5, #31]
   10480:	7c23      	ldrb	r3, [r4, #16]
   10482:	76ab      	strb	r3, [r5, #26]
   10484:	8a23      	ldrh	r3, [r4, #16]
   10486:	0a1b      	lsrs	r3, r3, #8
   10488:	76eb      	strb	r3, [r5, #27]
   1048a:	8a63      	ldrh	r3, [r4, #18]
   1048c:	752b      	strb	r3, [r5, #20]
   1048e:	8a63      	ldrh	r3, [r4, #18]
   10490:	0a1b      	lsrs	r3, r3, #8
   10492:	756b      	strb	r3, [r5, #21]
   10494:	4b0b      	ldr	r3, [pc, #44]	; (104c4 <f_sync+0x84>)
   10496:	4798      	blx	r3
   10498:	75a8      	strb	r0, [r5, #22]
   1049a:	0a03      	lsrs	r3, r0, #8
   1049c:	75eb      	strb	r3, [r5, #23]
   1049e:	0c03      	lsrs	r3, r0, #16
   104a0:	762b      	strb	r3, [r5, #24]
   104a2:	0e00      	lsrs	r0, r0, #24
   104a4:	7668      	strb	r0, [r5, #25]
   104a6:	79a3      	ldrb	r3, [r4, #6]
   104a8:	2220      	movs	r2, #32
   104aa:	4393      	bics	r3, r2
   104ac:	71a3      	strb	r3, [r4, #6]
   104ae:	2301      	movs	r3, #1
   104b0:	6822      	ldr	r2, [r4, #0]
   104b2:	7113      	strb	r3, [r2, #4]
   104b4:	6820      	ldr	r0, [r4, #0]
   104b6:	4b04      	ldr	r3, [pc, #16]	; (104c8 <f_sync+0x88>)
   104b8:	4798      	blx	r3
   104ba:	e7cc      	b.n	10456 <f_sync+0x16>
   104bc:	0000ed6d 	.word	0x0000ed6d
   104c0:	0000f1f1 	.word	0x0000f1f1
   104c4:	0000ecc1 	.word	0x0000ecc1
   104c8:	0000fc49 	.word	0x0000fc49

000104cc <f_close>:
   104cc:	b510      	push	{r4, lr}
   104ce:	0004      	movs	r4, r0
   104d0:	4b03      	ldr	r3, [pc, #12]	; (104e0 <f_close+0x14>)
   104d2:	4798      	blx	r3
   104d4:	2800      	cmp	r0, #0
   104d6:	d101      	bne.n	104dc <f_close+0x10>
   104d8:	2300      	movs	r3, #0
   104da:	6023      	str	r3, [r4, #0]
   104dc:	bd10      	pop	{r4, pc}
   104de:	46c0      	nop			; (mov r8, r8)
   104e0:	00010441 	.word	0x00010441

000104e4 <ff_convert>:
   104e4:	0003      	movs	r3, r0
   104e6:	287f      	cmp	r0, #127	; 0x7f
   104e8:	d911      	bls.n	1050e <ff_convert+0x2a>
   104ea:	2900      	cmp	r1, #0
   104ec:	d111      	bne.n	10512 <ff_convert+0x2e>
   104ee:	28c7      	cmp	r0, #199	; 0xc7
   104f0:	d017      	beq.n	10522 <ff_convert+0x3e>
   104f2:	4a0d      	ldr	r2, [pc, #52]	; (10528 <ff_convert+0x44>)
   104f4:	3202      	adds	r2, #2
   104f6:	2301      	movs	r3, #1
   104f8:	8811      	ldrh	r1, [r2, #0]
   104fa:	4281      	cmp	r1, r0
   104fc:	d004      	beq.n	10508 <ff_convert+0x24>
   104fe:	3301      	adds	r3, #1
   10500:	b29b      	uxth	r3, r3
   10502:	3202      	adds	r2, #2
   10504:	2b80      	cmp	r3, #128	; 0x80
   10506:	d1f7      	bne.n	104f8 <ff_convert+0x14>
   10508:	3380      	adds	r3, #128	; 0x80
   1050a:	20ff      	movs	r0, #255	; 0xff
   1050c:	4003      	ands	r3, r0
   1050e:	0018      	movs	r0, r3
   10510:	4770      	bx	lr
   10512:	2300      	movs	r3, #0
   10514:	28ff      	cmp	r0, #255	; 0xff
   10516:	d8fa      	bhi.n	1050e <ff_convert+0x2a>
   10518:	3880      	subs	r0, #128	; 0x80
   1051a:	0040      	lsls	r0, r0, #1
   1051c:	4b02      	ldr	r3, [pc, #8]	; (10528 <ff_convert+0x44>)
   1051e:	5ac3      	ldrh	r3, [r0, r3]
   10520:	e7f5      	b.n	1050e <ff_convert+0x2a>
   10522:	2300      	movs	r3, #0
   10524:	e7f0      	b.n	10508 <ff_convert+0x24>
   10526:	46c0      	nop			; (mov r8, r8)
   10528:	00018bb4 	.word	0x00018bb4

0001052c <ff_wtoupper>:
   1052c:	2861      	cmp	r0, #97	; 0x61
   1052e:	d014      	beq.n	1055a <ff_wtoupper+0x2e>
   10530:	4b0b      	ldr	r3, [pc, #44]	; (10560 <ff_wtoupper+0x34>)
   10532:	3304      	adds	r3, #4
   10534:	2101      	movs	r1, #1
   10536:	2262      	movs	r2, #98	; 0x62
   10538:	4290      	cmp	r0, r2
   1053a:	d007      	beq.n	1054c <ff_wtoupper+0x20>
   1053c:	3101      	adds	r1, #1
   1053e:	3302      	adds	r3, #2
   10540:	1e9a      	subs	r2, r3, #2
   10542:	8812      	ldrh	r2, [r2, #0]
   10544:	2a00      	cmp	r2, #0
   10546:	d1f7      	bne.n	10538 <ff_wtoupper+0xc>
   10548:	0003      	movs	r3, r0
   1054a:	e004      	b.n	10556 <ff_wtoupper+0x2a>
   1054c:	1e03      	subs	r3, r0, #0
   1054e:	d002      	beq.n	10556 <ff_wtoupper+0x2a>
   10550:	0049      	lsls	r1, r1, #1
   10552:	4b04      	ldr	r3, [pc, #16]	; (10564 <ff_wtoupper+0x38>)
   10554:	5acb      	ldrh	r3, [r1, r3]
   10556:	0018      	movs	r0, r3
   10558:	4770      	bx	lr
   1055a:	2100      	movs	r1, #0
   1055c:	e7f8      	b.n	10550 <ff_wtoupper+0x24>
   1055e:	46c0      	nop			; (mov r8, r8)
   10560:	00018cb4 	.word	0x00018cb4
   10564:	00018e94 	.word	0x00018e94

00010568 <sendPacket>:
   10568:	b5f0      	push	{r4, r5, r6, r7, lr}
   1056a:	46de      	mov	lr, fp
   1056c:	4657      	mov	r7, sl
   1056e:	464e      	mov	r6, r9
   10570:	4645      	mov	r5, r8
   10572:	b5e0      	push	{r5, r6, r7, lr}
   10574:	b083      	sub	sp, #12
   10576:	0007      	movs	r7, r0
   10578:	4688      	mov	r8, r1
   1057a:	9201      	str	r2, [sp, #4]
   1057c:	2400      	movs	r4, #0
   1057e:	2900      	cmp	r1, #0
   10580:	dd18      	ble.n	105b4 <sendPacket+0x4c>
   10582:	4b15      	ldr	r3, [pc, #84]	; (105d8 <sendPacket+0x70>)
   10584:	469a      	mov	sl, r3
   10586:	4b15      	ldr	r3, [pc, #84]	; (105dc <sendPacket+0x74>)
   10588:	469b      	mov	fp, r3
   1058a:	9801      	ldr	r0, [sp, #4]
   1058c:	47d0      	blx	sl
   1058e:	2800      	cmp	r0, #0
   10590:	d110      	bne.n	105b4 <sendPacket+0x4c>
   10592:	6d3e      	ldr	r6, [r7, #80]	; 0x50
   10594:	68f3      	ldr	r3, [r6, #12]
   10596:	4699      	mov	r9, r3
   10598:	693b      	ldr	r3, [r7, #16]
   1059a:	191d      	adds	r5, r3, r4
   1059c:	9801      	ldr	r0, [sp, #4]
   1059e:	47d8      	blx	fp
   105a0:	0003      	movs	r3, r0
   105a2:	4642      	mov	r2, r8
   105a4:	0029      	movs	r1, r5
   105a6:	0030      	movs	r0, r6
   105a8:	47c8      	blx	r9
   105aa:	2800      	cmp	r0, #0
   105ac:	db02      	blt.n	105b4 <sendPacket+0x4c>
   105ae:	1824      	adds	r4, r4, r0
   105b0:	45a0      	cmp	r8, r4
   105b2:	dcea      	bgt.n	1058a <sendPacket+0x22>
   105b4:	45a0      	cmp	r8, r4
   105b6:	d10c      	bne.n	105d2 <sendPacket+0x6a>
   105b8:	69b9      	ldr	r1, [r7, #24]
   105ba:	0038      	movs	r0, r7
   105bc:	3054      	adds	r0, #84	; 0x54
   105be:	4b08      	ldr	r3, [pc, #32]	; (105e0 <sendPacket+0x78>)
   105c0:	4798      	blx	r3
   105c2:	2000      	movs	r0, #0
   105c4:	b003      	add	sp, #12
   105c6:	bc3c      	pop	{r2, r3, r4, r5}
   105c8:	4690      	mov	r8, r2
   105ca:	4699      	mov	r9, r3
   105cc:	46a2      	mov	sl, r4
   105ce:	46ab      	mov	fp, r5
   105d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105d2:	2001      	movs	r0, #1
   105d4:	4240      	negs	r0, r0
   105d6:	e7f5      	b.n	105c4 <sendPacket+0x5c>
   105d8:	00010ed5 	.word	0x00010ed5
   105dc:	00010f0d 	.word	0x00010f0d
   105e0:	00010efd 	.word	0x00010efd

000105e4 <MQTTClientInit>:
   105e4:	b510      	push	{r4, lr}
   105e6:	6501      	str	r1, [r0, #80]	; 0x50
   105e8:	2100      	movs	r1, #0
   105ea:	6241      	str	r1, [r0, #36]	; 0x24
   105ec:	62c1      	str	r1, [r0, #44]	; 0x2c
   105ee:	6341      	str	r1, [r0, #52]	; 0x34
   105f0:	63c1      	str	r1, [r0, #60]	; 0x3c
   105f2:	6441      	str	r1, [r0, #68]	; 0x44
   105f4:	6042      	str	r2, [r0, #4]
   105f6:	6103      	str	r3, [r0, #16]
   105f8:	9b02      	ldr	r3, [sp, #8]
   105fa:	6083      	str	r3, [r0, #8]
   105fc:	9b03      	ldr	r3, [sp, #12]
   105fe:	6143      	str	r3, [r0, #20]
   10600:	9b04      	ldr	r3, [sp, #16]
   10602:	60c3      	str	r3, [r0, #12]
   10604:	6201      	str	r1, [r0, #32]
   10606:	7701      	strb	r1, [r0, #28]
   10608:	64c1      	str	r1, [r0, #76]	; 0x4c
   1060a:	2301      	movs	r3, #1
   1060c:	6003      	str	r3, [r0, #0]
   1060e:	3054      	adds	r0, #84	; 0x54
   10610:	4b01      	ldr	r3, [pc, #4]	; (10618 <MQTTClientInit+0x34>)
   10612:	4798      	blx	r3
   10614:	bd10      	pop	{r4, pc}
   10616:	46c0      	nop			; (mov r8, r8)
   10618:	00010f25 	.word	0x00010f25

0001061c <deliverMessage>:
   1061c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1061e:	46de      	mov	lr, fp
   10620:	4657      	mov	r7, sl
   10622:	464e      	mov	r6, r9
   10624:	4645      	mov	r5, r8
   10626:	b5e0      	push	{r5, r6, r7, lr}
   10628:	b085      	sub	sp, #20
   1062a:	4682      	mov	sl, r0
   1062c:	000f      	movs	r7, r1
   1062e:	4691      	mov	r9, r2
   10630:	0004      	movs	r4, r0
   10632:	3424      	adds	r4, #36	; 0x24
   10634:	234c      	movs	r3, #76	; 0x4c
   10636:	4453      	add	r3, sl
   10638:	4698      	mov	r8, r3
   1063a:	2301      	movs	r3, #1
   1063c:	425b      	negs	r3, r3
   1063e:	9301      	str	r3, [sp, #4]
   10640:	e056      	b.n	106f0 <deliverMessage+0xd4>
   10642:	6821      	ldr	r1, [r4, #0]
   10644:	68bb      	ldr	r3, [r7, #8]
   10646:	687a      	ldr	r2, [r7, #4]
   10648:	189e      	adds	r6, r3, r2
   1064a:	780a      	ldrb	r2, [r1, #0]
   1064c:	2a00      	cmp	r2, #0
   1064e:	d04a      	beq.n	106e6 <deliverMessage+0xca>
   10650:	42b3      	cmp	r3, r6
   10652:	d24a      	bcs.n	106ea <deliverMessage+0xce>
   10654:	3101      	adds	r1, #1
   10656:	1e70      	subs	r0, r6, #1
   10658:	e008      	b.n	1066c <deliverMessage+0x50>
   1065a:	2a2f      	cmp	r2, #47	; 0x2f
   1065c:	d10f      	bne.n	1067e <deliverMessage+0x62>
   1065e:	3301      	adds	r3, #1
   10660:	780a      	ldrb	r2, [r1, #0]
   10662:	2a00      	cmp	r2, #0
   10664:	d03f      	beq.n	106e6 <deliverMessage+0xca>
   10666:	429e      	cmp	r6, r3
   10668:	d93f      	bls.n	106ea <deliverMessage+0xce>
   1066a:	3101      	adds	r1, #1
   1066c:	781d      	ldrb	r5, [r3, #0]
   1066e:	2d2f      	cmp	r5, #47	; 0x2f
   10670:	d0f3      	beq.n	1065a <deliverMessage+0x3e>
   10672:	2a2b      	cmp	r2, #43	; 0x2b
   10674:	d008      	beq.n	10688 <deliverMessage+0x6c>
   10676:	2a23      	cmp	r2, #35	; 0x23
   10678:	d013      	beq.n	106a2 <deliverMessage+0x86>
   1067a:	4295      	cmp	r5, r2
   1067c:	d0ef      	beq.n	1065e <deliverMessage+0x42>
   1067e:	429e      	cmp	r6, r3
   10680:	d133      	bne.n	106ea <deliverMessage+0xce>
   10682:	2a00      	cmp	r2, #0
   10684:	d03d      	beq.n	10702 <deliverMessage+0xe6>
   10686:	e030      	b.n	106ea <deliverMessage+0xce>
   10688:	1c5d      	adds	r5, r3, #1
   1068a:	42ae      	cmp	r6, r5
   1068c:	d927      	bls.n	106de <deliverMessage+0xc2>
   1068e:	785a      	ldrb	r2, [r3, #1]
   10690:	2a2f      	cmp	r2, #47	; 0x2f
   10692:	d01f      	beq.n	106d4 <deliverMessage+0xb8>
   10694:	3301      	adds	r3, #1
   10696:	4283      	cmp	r3, r0
   10698:	d0e1      	beq.n	1065e <deliverMessage+0x42>
   1069a:	785a      	ldrb	r2, [r3, #1]
   1069c:	2a2f      	cmp	r2, #47	; 0x2f
   1069e:	d1f9      	bne.n	10694 <deliverMessage+0x78>
   106a0:	e7dd      	b.n	1065e <deliverMessage+0x42>
   106a2:	1e73      	subs	r3, r6, #1
   106a4:	e7db      	b.n	1065e <deliverMessage+0x42>
   106a6:	9b01      	ldr	r3, [sp, #4]
   106a8:	3301      	adds	r3, #1
   106aa:	d007      	beq.n	106bc <deliverMessage+0xa0>
   106ac:	9801      	ldr	r0, [sp, #4]
   106ae:	b005      	add	sp, #20
   106b0:	bc3c      	pop	{r2, r3, r4, r5}
   106b2:	4690      	mov	r8, r2
   106b4:	4699      	mov	r9, r3
   106b6:	46a2      	mov	sl, r4
   106b8:	46ab      	mov	fp, r5
   106ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106bc:	4653      	mov	r3, sl
   106be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   106c0:	2b00      	cmp	r3, #0
   106c2:	d0f3      	beq.n	106ac <deliverMessage+0x90>
   106c4:	9703      	str	r7, [sp, #12]
   106c6:	464a      	mov	r2, r9
   106c8:	9202      	str	r2, [sp, #8]
   106ca:	a802      	add	r0, sp, #8
   106cc:	4798      	blx	r3
   106ce:	2300      	movs	r3, #0
   106d0:	9301      	str	r3, [sp, #4]
   106d2:	e7eb      	b.n	106ac <deliverMessage+0x90>
   106d4:	780a      	ldrb	r2, [r1, #0]
   106d6:	2a00      	cmp	r2, #0
   106d8:	d007      	beq.n	106ea <deliverMessage+0xce>
   106da:	002b      	movs	r3, r5
   106dc:	e7c5      	b.n	1066a <deliverMessage+0x4e>
   106de:	3301      	adds	r3, #1
   106e0:	780a      	ldrb	r2, [r1, #0]
   106e2:	2a00      	cmp	r2, #0
   106e4:	d101      	bne.n	106ea <deliverMessage+0xce>
   106e6:	429e      	cmp	r6, r3
   106e8:	d00b      	beq.n	10702 <deliverMessage+0xe6>
   106ea:	3408      	adds	r4, #8
   106ec:	4544      	cmp	r4, r8
   106ee:	d0da      	beq.n	106a6 <deliverMessage+0x8a>
   106f0:	46a3      	mov	fp, r4
   106f2:	6821      	ldr	r1, [r4, #0]
   106f4:	2900      	cmp	r1, #0
   106f6:	d0f8      	beq.n	106ea <deliverMessage+0xce>
   106f8:	0038      	movs	r0, r7
   106fa:	4b08      	ldr	r3, [pc, #32]	; (1071c <deliverMessage+0x100>)
   106fc:	4798      	blx	r3
   106fe:	2800      	cmp	r0, #0
   10700:	d09f      	beq.n	10642 <deliverMessage+0x26>
   10702:	465b      	mov	r3, fp
   10704:	685b      	ldr	r3, [r3, #4]
   10706:	2b00      	cmp	r3, #0
   10708:	d0ef      	beq.n	106ea <deliverMessage+0xce>
   1070a:	9703      	str	r7, [sp, #12]
   1070c:	464a      	mov	r2, r9
   1070e:	9202      	str	r2, [sp, #8]
   10710:	a802      	add	r0, sp, #8
   10712:	4798      	blx	r3
   10714:	2300      	movs	r3, #0
   10716:	9301      	str	r3, [sp, #4]
   10718:	e7e7      	b.n	106ea <deliverMessage+0xce>
   1071a:	46c0      	nop			; (mov r8, r8)
   1071c:	000117f9 	.word	0x000117f9

00010720 <keepalive>:
   10720:	b510      	push	{r4, lr}
   10722:	b082      	sub	sp, #8
   10724:	0004      	movs	r4, r0
   10726:	2000      	movs	r0, #0
   10728:	69a3      	ldr	r3, [r4, #24]
   1072a:	2b00      	cmp	r3, #0
   1072c:	d101      	bne.n	10732 <keepalive+0x12>
   1072e:	b002      	add	sp, #8
   10730:	bd10      	pop	{r4, pc}
   10732:	0020      	movs	r0, r4
   10734:	3054      	adds	r0, #84	; 0x54
   10736:	4b14      	ldr	r3, [pc, #80]	; (10788 <keepalive+0x68>)
   10738:	4798      	blx	r3
   1073a:	2800      	cmp	r0, #0
   1073c:	d01d      	beq.n	1077a <keepalive+0x5a>
   1073e:	7f23      	ldrb	r3, [r4, #28]
   10740:	2b00      	cmp	r3, #0
   10742:	d11d      	bne.n	10780 <keepalive+0x60>
   10744:	4668      	mov	r0, sp
   10746:	4b11      	ldr	r3, [pc, #68]	; (1078c <keepalive+0x6c>)
   10748:	4798      	blx	r3
   1074a:	21fa      	movs	r1, #250	; 0xfa
   1074c:	0089      	lsls	r1, r1, #2
   1074e:	4668      	mov	r0, sp
   10750:	4b0f      	ldr	r3, [pc, #60]	; (10790 <keepalive+0x70>)
   10752:	4798      	blx	r3
   10754:	68a1      	ldr	r1, [r4, #8]
   10756:	6920      	ldr	r0, [r4, #16]
   10758:	4b0e      	ldr	r3, [pc, #56]	; (10794 <keepalive+0x74>)
   1075a:	4798      	blx	r3
   1075c:	2800      	cmp	r0, #0
   1075e:	dd09      	ble.n	10774 <keepalive+0x54>
   10760:	466a      	mov	r2, sp
   10762:	0001      	movs	r1, r0
   10764:	0020      	movs	r0, r4
   10766:	4b0c      	ldr	r3, [pc, #48]	; (10798 <keepalive+0x78>)
   10768:	4798      	blx	r3
   1076a:	2800      	cmp	r0, #0
   1076c:	d1df      	bne.n	1072e <keepalive+0xe>
   1076e:	2301      	movs	r3, #1
   10770:	7723      	strb	r3, [r4, #28]
   10772:	e7dc      	b.n	1072e <keepalive+0xe>
   10774:	2001      	movs	r0, #1
   10776:	4240      	negs	r0, r0
   10778:	e7d9      	b.n	1072e <keepalive+0xe>
   1077a:	2001      	movs	r0, #1
   1077c:	4240      	negs	r0, r0
   1077e:	e7d6      	b.n	1072e <keepalive+0xe>
   10780:	2001      	movs	r0, #1
   10782:	4240      	negs	r0, r0
   10784:	e7d3      	b.n	1072e <keepalive+0xe>
   10786:	46c0      	nop			; (mov r8, r8)
   10788:	00010ed5 	.word	0x00010ed5
   1078c:	00010f25 	.word	0x00010f25
   10790:	00010ee9 	.word	0x00010ee9
   10794:	000114e1 	.word	0x000114e1
   10798:	00010569 	.word	0x00010569

0001079c <cycle>:
   1079c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1079e:	46de      	mov	lr, fp
   107a0:	464f      	mov	r7, r9
   107a2:	4646      	mov	r6, r8
   107a4:	b5c0      	push	{r6, r7, lr}
   107a6:	b090      	sub	sp, #64	; 0x40
   107a8:	0004      	movs	r4, r0
   107aa:	6d05      	ldr	r5, [r0, #80]	; 0x50
   107ac:	68ae      	ldr	r6, [r5, #8]
   107ae:	6947      	ldr	r7, [r0, #20]
   107b0:	9107      	str	r1, [sp, #28]
   107b2:	0008      	movs	r0, r1
   107b4:	4b65      	ldr	r3, [pc, #404]	; (1094c <cycle+0x1b0>)
   107b6:	4798      	blx	r3
   107b8:	0003      	movs	r3, r0
   107ba:	2201      	movs	r2, #1
   107bc:	0039      	movs	r1, r7
   107be:	0028      	movs	r0, r5
   107c0:	47b0      	blx	r6
   107c2:	0005      	movs	r5, r0
   107c4:	2801      	cmp	r0, #1
   107c6:	d000      	beq.n	107ca <cycle+0x2e>
   107c8:	e0bd      	b.n	10946 <cycle+0x1aa>
   107ca:	9807      	ldr	r0, [sp, #28]
   107cc:	4b5f      	ldr	r3, [pc, #380]	; (1094c <cycle+0x1b0>)
   107ce:	4798      	blx	r3
   107d0:	9006      	str	r0, [sp, #24]
   107d2:	2604      	movs	r6, #4
   107d4:	2700      	movs	r7, #0
   107d6:	237f      	movs	r3, #127	; 0x7f
   107d8:	469b      	mov	fp, r3
   107da:	6d20      	ldr	r0, [r4, #80]	; 0x50
   107dc:	6883      	ldr	r3, [r0, #8]
   107de:	4698      	mov	r8, r3
   107e0:	9b06      	ldr	r3, [sp, #24]
   107e2:	2201      	movs	r2, #1
   107e4:	a90c      	add	r1, sp, #48	; 0x30
   107e6:	47c0      	blx	r8
   107e8:	2801      	cmp	r0, #1
   107ea:	d10e      	bne.n	1080a <cycle+0x6e>
   107ec:	ab02      	add	r3, sp, #8
   107ee:	2228      	movs	r2, #40	; 0x28
   107f0:	189b      	adds	r3, r3, r2
   107f2:	781b      	ldrb	r3, [r3, #0]
   107f4:	465a      	mov	r2, fp
   107f6:	401a      	ands	r2, r3
   107f8:	436a      	muls	r2, r5
   107fa:	18bf      	adds	r7, r7, r2
   107fc:	01ed      	lsls	r5, r5, #7
   107fe:	b25b      	sxtb	r3, r3
   10800:	2b00      	cmp	r3, #0
   10802:	da02      	bge.n	1080a <cycle+0x6e>
   10804:	3e01      	subs	r6, #1
   10806:	2e00      	cmp	r6, #0
   10808:	d1e7      	bne.n	107da <cycle+0x3e>
   1080a:	6963      	ldr	r3, [r4, #20]
   1080c:	1c58      	adds	r0, r3, #1
   1080e:	0039      	movs	r1, r7
   10810:	4b4f      	ldr	r3, [pc, #316]	; (10950 <cycle+0x1b4>)
   10812:	4798      	blx	r3
   10814:	2f00      	cmp	r7, #0
   10816:	dd10      	ble.n	1083a <cycle+0x9e>
   10818:	6d26      	ldr	r6, [r4, #80]	; 0x50
   1081a:	68b3      	ldr	r3, [r6, #8]
   1081c:	4699      	mov	r9, r3
   1081e:	3001      	adds	r0, #1
   10820:	6963      	ldr	r3, [r4, #20]
   10822:	181d      	adds	r5, r3, r0
   10824:	9807      	ldr	r0, [sp, #28]
   10826:	4b49      	ldr	r3, [pc, #292]	; (1094c <cycle+0x1b0>)
   10828:	4798      	blx	r3
   1082a:	0003      	movs	r3, r0
   1082c:	003a      	movs	r2, r7
   1082e:	0029      	movs	r1, r5
   10830:	0030      	movs	r0, r6
   10832:	47c8      	blx	r9
   10834:	42b8      	cmp	r0, r7
   10836:	d000      	beq.n	1083a <cycle+0x9e>
   10838:	e085      	b.n	10946 <cycle+0x1aa>
   1083a:	6963      	ldr	r3, [r4, #20]
   1083c:	781d      	ldrb	r5, [r3, #0]
   1083e:	092d      	lsrs	r5, r5, #4
   10840:	2d05      	cmp	r5, #5
   10842:	d051      	beq.n	108e8 <cycle+0x14c>
   10844:	2d0d      	cmp	r5, #13
   10846:	d06e      	beq.n	10926 <cycle+0x18a>
   10848:	2600      	movs	r6, #0
   1084a:	2d03      	cmp	r5, #3
   1084c:	d16e      	bne.n	1092c <cycle+0x190>
   1084e:	68e2      	ldr	r2, [r4, #12]
   10850:	9204      	str	r2, [sp, #16]
   10852:	9303      	str	r3, [sp, #12]
   10854:	ab0f      	add	r3, sp, #60	; 0x3c
   10856:	9302      	str	r3, [sp, #8]
   10858:	ab0e      	add	r3, sp, #56	; 0x38
   1085a:	9301      	str	r3, [sp, #4]
   1085c:	ab09      	add	r3, sp, #36	; 0x24
   1085e:	9300      	str	r3, [sp, #0]
   10860:	ab0d      	add	r3, sp, #52	; 0x34
   10862:	2229      	movs	r2, #41	; 0x29
   10864:	a902      	add	r1, sp, #8
   10866:	468c      	mov	ip, r1
   10868:	4462      	add	r2, ip
   1086a:	a908      	add	r1, sp, #32
   1086c:	202a      	movs	r0, #42	; 0x2a
   1086e:	4460      	add	r0, ip
   10870:	4e38      	ldr	r6, [pc, #224]	; (10954 <cycle+0x1b8>)
   10872:	47b0      	blx	r6
   10874:	2600      	movs	r6, #0
   10876:	2801      	cmp	r0, #1
   10878:	d15b      	bne.n	10932 <cycle+0x196>
   1087a:	ae0c      	add	r6, sp, #48	; 0x30
   1087c:	ab02      	add	r3, sp, #8
   1087e:	7e1b      	ldrb	r3, [r3, #24]
   10880:	7033      	strb	r3, [r6, #0]
   10882:	0032      	movs	r2, r6
   10884:	a909      	add	r1, sp, #36	; 0x24
   10886:	0020      	movs	r0, r4
   10888:	4b33      	ldr	r3, [pc, #204]	; (10958 <cycle+0x1bc>)
   1088a:	4798      	blx	r3
   1088c:	7833      	ldrb	r3, [r6, #0]
   1088e:	2b00      	cmp	r3, #0
   10890:	d028      	beq.n	108e4 <cycle+0x148>
   10892:	2b01      	cmp	r3, #1
   10894:	d004      	beq.n	108a0 <cycle+0x104>
   10896:	2b02      	cmp	r3, #2
   10898:	d016      	beq.n	108c8 <cycle+0x12c>
   1089a:	2601      	movs	r6, #1
   1089c:	4276      	negs	r6, r6
   1089e:	e048      	b.n	10932 <cycle+0x196>
   108a0:	ab0c      	add	r3, sp, #48	; 0x30
   108a2:	889b      	ldrh	r3, [r3, #4]
   108a4:	9300      	str	r3, [sp, #0]
   108a6:	2300      	movs	r3, #0
   108a8:	2204      	movs	r2, #4
   108aa:	68a1      	ldr	r1, [r4, #8]
   108ac:	6920      	ldr	r0, [r4, #16]
   108ae:	4e2b      	ldr	r6, [pc, #172]	; (1095c <cycle+0x1c0>)
   108b0:	47b0      	blx	r6
   108b2:	0001      	movs	r1, r0
   108b4:	2900      	cmp	r1, #0
   108b6:	dd12      	ble.n	108de <cycle+0x142>
   108b8:	9a07      	ldr	r2, [sp, #28]
   108ba:	0020      	movs	r0, r4
   108bc:	4b28      	ldr	r3, [pc, #160]	; (10960 <cycle+0x1c4>)
   108be:	4798      	blx	r3
   108c0:	0006      	movs	r6, r0
   108c2:	1c43      	adds	r3, r0, #1
   108c4:	d132      	bne.n	1092c <cycle+0x190>
   108c6:	e034      	b.n	10932 <cycle+0x196>
   108c8:	ab0c      	add	r3, sp, #48	; 0x30
   108ca:	889b      	ldrh	r3, [r3, #4]
   108cc:	9300      	str	r3, [sp, #0]
   108ce:	2300      	movs	r3, #0
   108d0:	2205      	movs	r2, #5
   108d2:	68a1      	ldr	r1, [r4, #8]
   108d4:	6920      	ldr	r0, [r4, #16]
   108d6:	4e21      	ldr	r6, [pc, #132]	; (1095c <cycle+0x1c0>)
   108d8:	47b0      	blx	r6
   108da:	0001      	movs	r1, r0
   108dc:	e7ea      	b.n	108b4 <cycle+0x118>
   108de:	2601      	movs	r6, #1
   108e0:	4276      	negs	r6, r6
   108e2:	e026      	b.n	10932 <cycle+0x196>
   108e4:	2600      	movs	r6, #0
   108e6:	e021      	b.n	1092c <cycle+0x190>
   108e8:	68e2      	ldr	r2, [r4, #12]
   108ea:	9200      	str	r2, [sp, #0]
   108ec:	aa0c      	add	r2, sp, #48	; 0x30
   108ee:	a908      	add	r1, sp, #32
   108f0:	a809      	add	r0, sp, #36	; 0x24
   108f2:	4e1c      	ldr	r6, [pc, #112]	; (10964 <cycle+0x1c8>)
   108f4:	47b0      	blx	r6
   108f6:	2801      	cmp	r0, #1
   108f8:	d002      	beq.n	10900 <cycle+0x164>
   108fa:	2601      	movs	r6, #1
   108fc:	4276      	negs	r6, r6
   108fe:	e01b      	b.n	10938 <cycle+0x19c>
   10900:	ab0c      	add	r3, sp, #48	; 0x30
   10902:	881b      	ldrh	r3, [r3, #0]
   10904:	9300      	str	r3, [sp, #0]
   10906:	2300      	movs	r3, #0
   10908:	2206      	movs	r2, #6
   1090a:	68a1      	ldr	r1, [r4, #8]
   1090c:	6920      	ldr	r0, [r4, #16]
   1090e:	4e13      	ldr	r6, [pc, #76]	; (1095c <cycle+0x1c0>)
   10910:	47b0      	blx	r6
   10912:	2800      	cmp	r0, #0
   10914:	ddf1      	ble.n	108fa <cycle+0x15e>
   10916:	9a07      	ldr	r2, [sp, #28]
   10918:	0001      	movs	r1, r0
   1091a:	0020      	movs	r0, r4
   1091c:	4b10      	ldr	r3, [pc, #64]	; (10960 <cycle+0x1c4>)
   1091e:	4798      	blx	r3
   10920:	1e06      	subs	r6, r0, #0
   10922:	d1ea      	bne.n	108fa <cycle+0x15e>
   10924:	e002      	b.n	1092c <cycle+0x190>
   10926:	2300      	movs	r3, #0
   10928:	7723      	strb	r3, [r4, #28]
   1092a:	2600      	movs	r6, #0
   1092c:	0020      	movs	r0, r4
   1092e:	4b0e      	ldr	r3, [pc, #56]	; (10968 <cycle+0x1cc>)
   10930:	4798      	blx	r3
   10932:	2e00      	cmp	r6, #0
   10934:	d100      	bne.n	10938 <cycle+0x19c>
   10936:	002e      	movs	r6, r5
   10938:	0030      	movs	r0, r6
   1093a:	b010      	add	sp, #64	; 0x40
   1093c:	bc1c      	pop	{r2, r3, r4}
   1093e:	4690      	mov	r8, r2
   10940:	4699      	mov	r9, r3
   10942:	46a3      	mov	fp, r4
   10944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10946:	4d09      	ldr	r5, [pc, #36]	; (1096c <cycle+0x1d0>)
   10948:	2600      	movs	r6, #0
   1094a:	e7ef      	b.n	1092c <cycle+0x190>
   1094c:	00010f0d 	.word	0x00010f0d
   10950:	000115f9 	.word	0x000115f9
   10954:	000114f1 	.word	0x000114f1
   10958:	0001061d 	.word	0x0001061d
   1095c:	0001192d 	.word	0x0001192d
   10960:	00010569 	.word	0x00010569
   10964:	00011589 	.word	0x00011589
   10968:	00010721 	.word	0x00010721
   1096c:	0000ffff 	.word	0x0000ffff

00010970 <MQTTYield>:
   10970:	b570      	push	{r4, r5, r6, lr}
   10972:	b082      	sub	sp, #8
   10974:	0005      	movs	r5, r0
   10976:	000c      	movs	r4, r1
   10978:	4668      	mov	r0, sp
   1097a:	4b0a      	ldr	r3, [pc, #40]	; (109a4 <MQTTYield+0x34>)
   1097c:	4798      	blx	r3
   1097e:	0021      	movs	r1, r4
   10980:	4668      	mov	r0, sp
   10982:	4b09      	ldr	r3, [pc, #36]	; (109a8 <MQTTYield+0x38>)
   10984:	4798      	blx	r3
   10986:	4c09      	ldr	r4, [pc, #36]	; (109ac <MQTTYield+0x3c>)
   10988:	4e09      	ldr	r6, [pc, #36]	; (109b0 <MQTTYield+0x40>)
   1098a:	4669      	mov	r1, sp
   1098c:	0028      	movs	r0, r5
   1098e:	47a0      	blx	r4
   10990:	1c43      	adds	r3, r0, #1
   10992:	d004      	beq.n	1099e <MQTTYield+0x2e>
   10994:	4668      	mov	r0, sp
   10996:	47b0      	blx	r6
   10998:	2800      	cmp	r0, #0
   1099a:	d0f6      	beq.n	1098a <MQTTYield+0x1a>
   1099c:	2000      	movs	r0, #0
   1099e:	b002      	add	sp, #8
   109a0:	bd70      	pop	{r4, r5, r6, pc}
   109a2:	46c0      	nop			; (mov r8, r8)
   109a4:	00010f25 	.word	0x00010f25
   109a8:	00010ee9 	.word	0x00010ee9
   109ac:	0001079d 	.word	0x0001079d
   109b0:	00010ed5 	.word	0x00010ed5

000109b4 <waitfor>:
   109b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   109b6:	b083      	sub	sp, #12
   109b8:	9001      	str	r0, [sp, #4]
   109ba:	000e      	movs	r6, r1
   109bc:	9200      	str	r2, [sp, #0]
   109be:	2401      	movs	r4, #1
   109c0:	4264      	negs	r4, r4
   109c2:	4f08      	ldr	r7, [pc, #32]	; (109e4 <waitfor+0x30>)
   109c4:	4d08      	ldr	r5, [pc, #32]	; (109e8 <waitfor+0x34>)
   109c6:	9800      	ldr	r0, [sp, #0]
   109c8:	47b8      	blx	r7
   109ca:	2800      	cmp	r0, #0
   109cc:	d106      	bne.n	109dc <waitfor+0x28>
   109ce:	9900      	ldr	r1, [sp, #0]
   109d0:	9801      	ldr	r0, [sp, #4]
   109d2:	47a8      	blx	r5
   109d4:	0004      	movs	r4, r0
   109d6:	42b0      	cmp	r0, r6
   109d8:	d1f5      	bne.n	109c6 <waitfor+0x12>
   109da:	0034      	movs	r4, r6
   109dc:	0020      	movs	r0, r4
   109de:	b003      	add	sp, #12
   109e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   109e2:	46c0      	nop			; (mov r8, r8)
   109e4:	00010ed5 	.word	0x00010ed5
   109e8:	0001079d 	.word	0x0001079d

000109ec <MQTTConnect>:
   109ec:	b530      	push	{r4, r5, lr}
   109ee:	b09b      	sub	sp, #108	; 0x6c
   109f0:	0004      	movs	r4, r0
   109f2:	000d      	movs	r5, r1
   109f4:	2258      	movs	r2, #88	; 0x58
   109f6:	4928      	ldr	r1, [pc, #160]	; (10a98 <MQTTConnect+0xac>)
   109f8:	a802      	add	r0, sp, #8
   109fa:	4b28      	ldr	r3, [pc, #160]	; (10a9c <MQTTConnect+0xb0>)
   109fc:	4798      	blx	r3
   109fe:	6a23      	ldr	r3, [r4, #32]
   10a00:	2b00      	cmp	r3, #0
   10a02:	d13f      	bne.n	10a84 <MQTTConnect+0x98>
   10a04:	a818      	add	r0, sp, #96	; 0x60
   10a06:	4b26      	ldr	r3, [pc, #152]	; (10aa0 <MQTTConnect+0xb4>)
   10a08:	4798      	blx	r3
   10a0a:	6861      	ldr	r1, [r4, #4]
   10a0c:	a818      	add	r0, sp, #96	; 0x60
   10a0e:	4b25      	ldr	r3, [pc, #148]	; (10aa4 <MQTTConnect+0xb8>)
   10a10:	4798      	blx	r3
   10a12:	2d00      	cmp	r5, #0
   10a14:	d015      	beq.n	10a42 <MQTTConnect+0x56>
   10a16:	8b29      	ldrh	r1, [r5, #24]
   10a18:	61a1      	str	r1, [r4, #24]
   10a1a:	0020      	movs	r0, r4
   10a1c:	3054      	adds	r0, #84	; 0x54
   10a1e:	4b22      	ldr	r3, [pc, #136]	; (10aa8 <MQTTConnect+0xbc>)
   10a20:	4798      	blx	r3
   10a22:	002a      	movs	r2, r5
   10a24:	68a1      	ldr	r1, [r4, #8]
   10a26:	6920      	ldr	r0, [r4, #16]
   10a28:	4b20      	ldr	r3, [pc, #128]	; (10aac <MQTTConnect+0xc0>)
   10a2a:	4798      	blx	r3
   10a2c:	2800      	cmp	r0, #0
   10a2e:	dd2c      	ble.n	10a8a <MQTTConnect+0x9e>
   10a30:	aa18      	add	r2, sp, #96	; 0x60
   10a32:	0001      	movs	r1, r0
   10a34:	0020      	movs	r0, r4
   10a36:	4b1e      	ldr	r3, [pc, #120]	; (10ab0 <MQTTConnect+0xc4>)
   10a38:	4798      	blx	r3
   10a3a:	2800      	cmp	r0, #0
   10a3c:	d003      	beq.n	10a46 <MQTTConnect+0x5a>
   10a3e:	b01b      	add	sp, #108	; 0x6c
   10a40:	bd30      	pop	{r4, r5, pc}
   10a42:	ad02      	add	r5, sp, #8
   10a44:	e7e7      	b.n	10a16 <MQTTConnect+0x2a>
   10a46:	aa18      	add	r2, sp, #96	; 0x60
   10a48:	2102      	movs	r1, #2
   10a4a:	0020      	movs	r0, r4
   10a4c:	4b19      	ldr	r3, [pc, #100]	; (10ab4 <MQTTConnect+0xc8>)
   10a4e:	4798      	blx	r3
   10a50:	2802      	cmp	r0, #2
   10a52:	d11d      	bne.n	10a90 <MQTTConnect+0xa4>
   10a54:	466b      	mov	r3, sp
   10a56:	1d99      	adds	r1, r3, #6
   10a58:	23ff      	movs	r3, #255	; 0xff
   10a5a:	700b      	strb	r3, [r1, #0]
   10a5c:	466b      	mov	r3, sp
   10a5e:	1dd8      	adds	r0, r3, #7
   10a60:	2300      	movs	r3, #0
   10a62:	7003      	strb	r3, [r0, #0]
   10a64:	68e3      	ldr	r3, [r4, #12]
   10a66:	6962      	ldr	r2, [r4, #20]
   10a68:	4d13      	ldr	r5, [pc, #76]	; (10ab8 <MQTTConnect+0xcc>)
   10a6a:	47a8      	blx	r5
   10a6c:	2801      	cmp	r0, #1
   10a6e:	d002      	beq.n	10a76 <MQTTConnect+0x8a>
   10a70:	2001      	movs	r0, #1
   10a72:	4240      	negs	r0, r0
   10a74:	e7e3      	b.n	10a3e <MQTTConnect+0x52>
   10a76:	466b      	mov	r3, sp
   10a78:	7998      	ldrb	r0, [r3, #6]
   10a7a:	2800      	cmp	r0, #0
   10a7c:	d1df      	bne.n	10a3e <MQTTConnect+0x52>
   10a7e:	2301      	movs	r3, #1
   10a80:	6223      	str	r3, [r4, #32]
   10a82:	e7dc      	b.n	10a3e <MQTTConnect+0x52>
   10a84:	2001      	movs	r0, #1
   10a86:	4240      	negs	r0, r0
   10a88:	e7d9      	b.n	10a3e <MQTTConnect+0x52>
   10a8a:	2001      	movs	r0, #1
   10a8c:	4240      	negs	r0, r0
   10a8e:	e7d6      	b.n	10a3e <MQTTConnect+0x52>
   10a90:	2001      	movs	r0, #1
   10a92:	4240      	negs	r0, r0
   10a94:	e7d3      	b.n	10a3e <MQTTConnect+0x52>
   10a96:	46c0      	nop			; (mov r8, r8)
   10a98:	00019074 	.word	0x00019074
   10a9c:	00014245 	.word	0x00014245
   10aa0:	00010f25 	.word	0x00010f25
   10aa4:	00010ee9 	.word	0x00010ee9
   10aa8:	00010efd 	.word	0x00010efd
   10aac:	000112fd 	.word	0x000112fd
   10ab0:	00010569 	.word	0x00010569
   10ab4:	000109b5 	.word	0x000109b5
   10ab8:	00011445 	.word	0x00011445

00010abc <MQTTSubscribe>:
   10abc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10abe:	b091      	sub	sp, #68	; 0x44
   10ac0:	0004      	movs	r4, r0
   10ac2:	000f      	movs	r7, r1
   10ac4:	9305      	str	r3, [sp, #20]
   10ac6:	2300      	movs	r3, #0
   10ac8:	930c      	str	r3, [sp, #48]	; 0x30
   10aca:	930d      	str	r3, [sp, #52]	; 0x34
   10acc:	920a      	str	r2, [sp, #40]	; 0x28
   10ace:	910b      	str	r1, [sp, #44]	; 0x2c
   10ad0:	6a03      	ldr	r3, [r0, #32]
   10ad2:	2b00      	cmp	r3, #0
   10ad4:	d05c      	beq.n	10b90 <MQTTSubscribe+0xd4>
   10ad6:	a80e      	add	r0, sp, #56	; 0x38
   10ad8:	4b32      	ldr	r3, [pc, #200]	; (10ba4 <MQTTSubscribe+0xe8>)
   10ada:	4798      	blx	r3
   10adc:	6861      	ldr	r1, [r4, #4]
   10ade:	a80e      	add	r0, sp, #56	; 0x38
   10ae0:	4b31      	ldr	r3, [pc, #196]	; (10ba8 <MQTTSubscribe+0xec>)
   10ae2:	4798      	blx	r3
   10ae4:	6920      	ldr	r0, [r4, #16]
   10ae6:	68a1      	ldr	r1, [r4, #8]
   10ae8:	6823      	ldr	r3, [r4, #0]
   10aea:	4a30      	ldr	r2, [pc, #192]	; (10bac <MQTTSubscribe+0xf0>)
   10aec:	4293      	cmp	r3, r2
   10aee:	d017      	beq.n	10b20 <MQTTSubscribe+0x64>
   10af0:	3301      	adds	r3, #1
   10af2:	6023      	str	r3, [r4, #0]
   10af4:	b29b      	uxth	r3, r3
   10af6:	aa0a      	add	r2, sp, #40	; 0x28
   10af8:	9202      	str	r2, [sp, #8]
   10afa:	aa0b      	add	r2, sp, #44	; 0x2c
   10afc:	9201      	str	r2, [sp, #4]
   10afe:	2201      	movs	r2, #1
   10b00:	9200      	str	r2, [sp, #0]
   10b02:	2200      	movs	r2, #0
   10b04:	4e2a      	ldr	r6, [pc, #168]	; (10bb0 <MQTTSubscribe+0xf4>)
   10b06:	47b0      	blx	r6
   10b08:	2800      	cmp	r0, #0
   10b0a:	dd44      	ble.n	10b96 <MQTTSubscribe+0xda>
   10b0c:	aa0e      	add	r2, sp, #56	; 0x38
   10b0e:	0001      	movs	r1, r0
   10b10:	0020      	movs	r0, r4
   10b12:	4b28      	ldr	r3, [pc, #160]	; (10bb4 <MQTTSubscribe+0xf8>)
   10b14:	4798      	blx	r3
   10b16:	1e06      	subs	r6, r0, #0
   10b18:	d004      	beq.n	10b24 <MQTTSubscribe+0x68>
   10b1a:	0030      	movs	r0, r6
   10b1c:	b011      	add	sp, #68	; 0x44
   10b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b20:	2301      	movs	r3, #1
   10b22:	e7e6      	b.n	10af2 <MQTTSubscribe+0x36>
   10b24:	aa0e      	add	r2, sp, #56	; 0x38
   10b26:	2109      	movs	r1, #9
   10b28:	0020      	movs	r0, r4
   10b2a:	4b23      	ldr	r3, [pc, #140]	; (10bb8 <MQTTSubscribe+0xfc>)
   10b2c:	4798      	blx	r3
   10b2e:	2809      	cmp	r0, #9
   10b30:	d134      	bne.n	10b9c <MQTTSubscribe+0xe0>
   10b32:	2300      	movs	r3, #0
   10b34:	9308      	str	r3, [sp, #32]
   10b36:	3b01      	subs	r3, #1
   10b38:	9309      	str	r3, [sp, #36]	; 0x24
   10b3a:	68e3      	ldr	r3, [r4, #12]
   10b3c:	9301      	str	r3, [sp, #4]
   10b3e:	6963      	ldr	r3, [r4, #20]
   10b40:	9300      	str	r3, [sp, #0]
   10b42:	ab09      	add	r3, sp, #36	; 0x24
   10b44:	aa08      	add	r2, sp, #32
   10b46:	2101      	movs	r1, #1
   10b48:	300d      	adds	r0, #13
   10b4a:	ad02      	add	r5, sp, #8
   10b4c:	46ac      	mov	ip, r5
   10b4e:	4460      	add	r0, ip
   10b50:	4d1a      	ldr	r5, [pc, #104]	; (10bbc <MQTTSubscribe+0x100>)
   10b52:	47a8      	blx	r5
   10b54:	0031      	movs	r1, r6
   10b56:	2801      	cmp	r0, #1
   10b58:	d00e      	beq.n	10b78 <MQTTSubscribe+0xbc>
   10b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10b5c:	2b00      	cmp	r3, #0
   10b5e:	d010      	beq.n	10b82 <MQTTSubscribe+0xc6>
   10b60:	0022      	movs	r2, r4
   10b62:	322c      	adds	r2, #44	; 0x2c
   10b64:	2301      	movs	r3, #1
   10b66:	6810      	ldr	r0, [r2, #0]
   10b68:	2800      	cmp	r0, #0
   10b6a:	d00b      	beq.n	10b84 <MQTTSubscribe+0xc8>
   10b6c:	3301      	adds	r3, #1
   10b6e:	3208      	adds	r2, #8
   10b70:	2b05      	cmp	r3, #5
   10b72:	d1f8      	bne.n	10b66 <MQTTSubscribe+0xaa>
   10b74:	000e      	movs	r6, r1
   10b76:	e7d0      	b.n	10b1a <MQTTSubscribe+0x5e>
   10b78:	9909      	ldr	r1, [sp, #36]	; 0x24
   10b7a:	2980      	cmp	r1, #128	; 0x80
   10b7c:	d1ed      	bne.n	10b5a <MQTTSubscribe+0x9e>
   10b7e:	000e      	movs	r6, r1
   10b80:	e7cb      	b.n	10b1a <MQTTSubscribe+0x5e>
   10b82:	0033      	movs	r3, r6
   10b84:	00db      	lsls	r3, r3, #3
   10b86:	18e4      	adds	r4, r4, r3
   10b88:	6267      	str	r7, [r4, #36]	; 0x24
   10b8a:	9b05      	ldr	r3, [sp, #20]
   10b8c:	62a3      	str	r3, [r4, #40]	; 0x28
   10b8e:	e7c4      	b.n	10b1a <MQTTSubscribe+0x5e>
   10b90:	2601      	movs	r6, #1
   10b92:	4276      	negs	r6, r6
   10b94:	e7c1      	b.n	10b1a <MQTTSubscribe+0x5e>
   10b96:	2601      	movs	r6, #1
   10b98:	4276      	negs	r6, r6
   10b9a:	e7be      	b.n	10b1a <MQTTSubscribe+0x5e>
   10b9c:	2601      	movs	r6, #1
   10b9e:	4276      	negs	r6, r6
   10ba0:	e7bb      	b.n	10b1a <MQTTSubscribe+0x5e>
   10ba2:	46c0      	nop			; (mov r8, r8)
   10ba4:	00010f25 	.word	0x00010f25
   10ba8:	00010ee9 	.word	0x00010ee9
   10bac:	0000ffff 	.word	0x0000ffff
   10bb0:	000119c5 	.word	0x000119c5
   10bb4:	00010569 	.word	0x00010569
   10bb8:	000109b5 	.word	0x000109b5
   10bbc:	00011a79 	.word	0x00011a79

00010bc0 <MQTTPublish>:
   10bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bc2:	b08f      	sub	sp, #60	; 0x3c
   10bc4:	0005      	movs	r5, r0
   10bc6:	0014      	movs	r4, r2
   10bc8:	2300      	movs	r3, #0
   10bca:	930a      	str	r3, [sp, #40]	; 0x28
   10bcc:	930b      	str	r3, [sp, #44]	; 0x2c
   10bce:	9109      	str	r1, [sp, #36]	; 0x24
   10bd0:	6a03      	ldr	r3, [r0, #32]
   10bd2:	2b00      	cmp	r3, #0
   10bd4:	d062      	beq.n	10c9c <MQTTPublish+0xdc>
   10bd6:	a80c      	add	r0, sp, #48	; 0x30
   10bd8:	4b36      	ldr	r3, [pc, #216]	; (10cb4 <MQTTPublish+0xf4>)
   10bda:	4798      	blx	r3
   10bdc:	6869      	ldr	r1, [r5, #4]
   10bde:	a80c      	add	r0, sp, #48	; 0x30
   10be0:	4b35      	ldr	r3, [pc, #212]	; (10cb8 <MQTTPublish+0xf8>)
   10be2:	4798      	blx	r3
   10be4:	7823      	ldrb	r3, [r4, #0]
   10be6:	3b01      	subs	r3, #1
   10be8:	2b01      	cmp	r3, #1
   10bea:	d921      	bls.n	10c30 <MQTTPublish+0x70>
   10bec:	7823      	ldrb	r3, [r4, #0]
   10bee:	68e2      	ldr	r2, [r4, #12]
   10bf0:	9206      	str	r2, [sp, #24]
   10bf2:	68a2      	ldr	r2, [r4, #8]
   10bf4:	9205      	str	r2, [sp, #20]
   10bf6:	aa09      	add	r2, sp, #36	; 0x24
   10bf8:	a902      	add	r1, sp, #8
   10bfa:	cac1      	ldmia	r2!, {r0, r6, r7}
   10bfc:	c1c1      	stmia	r1!, {r0, r6, r7}
   10bfe:	88a2      	ldrh	r2, [r4, #4]
   10c00:	9201      	str	r2, [sp, #4]
   10c02:	7862      	ldrb	r2, [r4, #1]
   10c04:	9200      	str	r2, [sp, #0]
   10c06:	2200      	movs	r2, #0
   10c08:	68a9      	ldr	r1, [r5, #8]
   10c0a:	6928      	ldr	r0, [r5, #16]
   10c0c:	4e2b      	ldr	r6, [pc, #172]	; (10cbc <MQTTPublish+0xfc>)
   10c0e:	47b0      	blx	r6
   10c10:	2800      	cmp	r0, #0
   10c12:	dd46      	ble.n	10ca2 <MQTTPublish+0xe2>
   10c14:	aa0c      	add	r2, sp, #48	; 0x30
   10c16:	0001      	movs	r1, r0
   10c18:	0028      	movs	r0, r5
   10c1a:	4b29      	ldr	r3, [pc, #164]	; (10cc0 <MQTTPublish+0x100>)
   10c1c:	4798      	blx	r3
   10c1e:	2800      	cmp	r0, #0
   10c20:	d104      	bne.n	10c2c <MQTTPublish+0x6c>
   10c22:	7823      	ldrb	r3, [r4, #0]
   10c24:	2b01      	cmp	r3, #1
   10c26:	d00d      	beq.n	10c44 <MQTTPublish+0x84>
   10c28:	2b02      	cmp	r3, #2
   10c2a:	d021      	beq.n	10c70 <MQTTPublish+0xb0>
   10c2c:	b00f      	add	sp, #60	; 0x3c
   10c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c30:	682b      	ldr	r3, [r5, #0]
   10c32:	4a24      	ldr	r2, [pc, #144]	; (10cc4 <MQTTPublish+0x104>)
   10c34:	4293      	cmp	r3, r2
   10c36:	d003      	beq.n	10c40 <MQTTPublish+0x80>
   10c38:	3301      	adds	r3, #1
   10c3a:	602b      	str	r3, [r5, #0]
   10c3c:	80a3      	strh	r3, [r4, #4]
   10c3e:	e7d5      	b.n	10bec <MQTTPublish+0x2c>
   10c40:	2301      	movs	r3, #1
   10c42:	e7fa      	b.n	10c3a <MQTTPublish+0x7a>
   10c44:	aa0c      	add	r2, sp, #48	; 0x30
   10c46:	2104      	movs	r1, #4
   10c48:	0028      	movs	r0, r5
   10c4a:	4b1f      	ldr	r3, [pc, #124]	; (10cc8 <MQTTPublish+0x108>)
   10c4c:	4798      	blx	r3
   10c4e:	2804      	cmp	r0, #4
   10c50:	d12a      	bne.n	10ca8 <MQTTPublish+0xe8>
   10c52:	696b      	ldr	r3, [r5, #20]
   10c54:	68ea      	ldr	r2, [r5, #12]
   10c56:	9200      	str	r2, [sp, #0]
   10c58:	2222      	movs	r2, #34	; 0x22
   10c5a:	446a      	add	r2, sp
   10c5c:	a908      	add	r1, sp, #32
   10c5e:	301d      	adds	r0, #29
   10c60:	4468      	add	r0, sp
   10c62:	4c1a      	ldr	r4, [pc, #104]	; (10ccc <MQTTPublish+0x10c>)
   10c64:	47a0      	blx	r4
   10c66:	3801      	subs	r0, #1
   10c68:	1e43      	subs	r3, r0, #1
   10c6a:	4198      	sbcs	r0, r3
   10c6c:	4240      	negs	r0, r0
   10c6e:	e7dd      	b.n	10c2c <MQTTPublish+0x6c>
   10c70:	aa0c      	add	r2, sp, #48	; 0x30
   10c72:	2107      	movs	r1, #7
   10c74:	0028      	movs	r0, r5
   10c76:	4b14      	ldr	r3, [pc, #80]	; (10cc8 <MQTTPublish+0x108>)
   10c78:	4798      	blx	r3
   10c7a:	2807      	cmp	r0, #7
   10c7c:	d117      	bne.n	10cae <MQTTPublish+0xee>
   10c7e:	696b      	ldr	r3, [r5, #20]
   10c80:	68ea      	ldr	r2, [r5, #12]
   10c82:	9200      	str	r2, [sp, #0]
   10c84:	2222      	movs	r2, #34	; 0x22
   10c86:	446a      	add	r2, sp
   10c88:	a908      	add	r1, sp, #32
   10c8a:	301a      	adds	r0, #26
   10c8c:	4468      	add	r0, sp
   10c8e:	4c0f      	ldr	r4, [pc, #60]	; (10ccc <MQTTPublish+0x10c>)
   10c90:	47a0      	blx	r4
   10c92:	3801      	subs	r0, #1
   10c94:	1e43      	subs	r3, r0, #1
   10c96:	4198      	sbcs	r0, r3
   10c98:	4240      	negs	r0, r0
   10c9a:	e7c7      	b.n	10c2c <MQTTPublish+0x6c>
   10c9c:	2001      	movs	r0, #1
   10c9e:	4240      	negs	r0, r0
   10ca0:	e7c4      	b.n	10c2c <MQTTPublish+0x6c>
   10ca2:	2001      	movs	r0, #1
   10ca4:	4240      	negs	r0, r0
   10ca6:	e7c1      	b.n	10c2c <MQTTPublish+0x6c>
   10ca8:	2001      	movs	r0, #1
   10caa:	4240      	negs	r0, r0
   10cac:	e7be      	b.n	10c2c <MQTTPublish+0x6c>
   10cae:	2001      	movs	r0, #1
   10cb0:	4240      	negs	r0, r0
   10cb2:	e7bb      	b.n	10c2c <MQTTPublish+0x6c>
   10cb4:	00010f25 	.word	0x00010f25
   10cb8:	00010ee9 	.word	0x00010ee9
   10cbc:	00011865 	.word	0x00011865
   10cc0:	00010569 	.word	0x00010569
   10cc4:	0000ffff 	.word	0x0000ffff
   10cc8:	000109b5 	.word	0x000109b5
   10ccc:	00011589 	.word	0x00011589

00010cd0 <MQTTDisconnect>:
   10cd0:	b510      	push	{r4, lr}
   10cd2:	b082      	sub	sp, #8
   10cd4:	0004      	movs	r4, r0
   10cd6:	4668      	mov	r0, sp
   10cd8:	4b0b      	ldr	r3, [pc, #44]	; (10d08 <MQTTDisconnect+0x38>)
   10cda:	4798      	blx	r3
   10cdc:	6861      	ldr	r1, [r4, #4]
   10cde:	4668      	mov	r0, sp
   10ce0:	4b0a      	ldr	r3, [pc, #40]	; (10d0c <MQTTDisconnect+0x3c>)
   10ce2:	4798      	blx	r3
   10ce4:	68a1      	ldr	r1, [r4, #8]
   10ce6:	6920      	ldr	r0, [r4, #16]
   10ce8:	4b09      	ldr	r3, [pc, #36]	; (10d10 <MQTTDisconnect+0x40>)
   10cea:	4798      	blx	r3
   10cec:	2800      	cmp	r0, #0
   10cee:	dd08      	ble.n	10d02 <MQTTDisconnect+0x32>
   10cf0:	466a      	mov	r2, sp
   10cf2:	0001      	movs	r1, r0
   10cf4:	0020      	movs	r0, r4
   10cf6:	4b07      	ldr	r3, [pc, #28]	; (10d14 <MQTTDisconnect+0x44>)
   10cf8:	4798      	blx	r3
   10cfa:	2300      	movs	r3, #0
   10cfc:	6223      	str	r3, [r4, #32]
   10cfe:	b002      	add	sp, #8
   10d00:	bd10      	pop	{r4, pc}
   10d02:	2001      	movs	r0, #1
   10d04:	4240      	negs	r0, r0
   10d06:	e7f8      	b.n	10cfa <MQTTDisconnect+0x2a>
   10d08:	00010f25 	.word	0x00010f25
   10d0c:	00010ee9 	.word	0x00010ee9
   10d10:	000114d1 	.word	0x000114d1
   10d14:	00010569 	.word	0x00010569

00010d18 <WINC1500_disconnect>:
   10d18:	b510      	push	{r4, lr}
   10d1a:	0004      	movs	r4, r0
   10d1c:	2000      	movs	r0, #0
   10d1e:	5620      	ldrsb	r0, [r4, r0]
   10d20:	4b04      	ldr	r3, [pc, #16]	; (10d34 <WINC1500_disconnect+0x1c>)
   10d22:	4798      	blx	r3
   10d24:	2301      	movs	r3, #1
   10d26:	425b      	negs	r3, r3
   10d28:	6023      	str	r3, [r4, #0]
   10d2a:	2200      	movs	r2, #0
   10d2c:	4b02      	ldr	r3, [pc, #8]	; (10d38 <WINC1500_disconnect+0x20>)
   10d2e:	701a      	strb	r2, [r3, #0]
   10d30:	bd10      	pop	{r4, pc}
   10d32:	46c0      	nop			; (mov r8, r8)
   10d34:	0000c185 	.word	0x0000c185
   10d38:	20003f3a 	.word	0x20003f3a

00010d3c <WINC1500_write>:
   10d3c:	b570      	push	{r4, r5, r6, lr}
   10d3e:	0016      	movs	r6, r2
   10d40:	2200      	movs	r2, #0
   10d42:	4b0d      	ldr	r3, [pc, #52]	; (10d78 <WINC1500_write+0x3c>)
   10d44:	701a      	strb	r2, [r3, #0]
   10d46:	b2b2      	uxth	r2, r6
   10d48:	7800      	ldrb	r0, [r0, #0]
   10d4a:	b240      	sxtb	r0, r0
   10d4c:	2300      	movs	r3, #0
   10d4e:	4c0b      	ldr	r4, [pc, #44]	; (10d7c <WINC1500_write+0x40>)
   10d50:	47a0      	blx	r4
   10d52:	2800      	cmp	r0, #0
   10d54:	d10c      	bne.n	10d70 <WINC1500_write+0x34>
   10d56:	4b08      	ldr	r3, [pc, #32]	; (10d78 <WINC1500_write+0x3c>)
   10d58:	781b      	ldrb	r3, [r3, #0]
   10d5a:	2b00      	cmp	r3, #0
   10d5c:	d106      	bne.n	10d6c <WINC1500_write+0x30>
   10d5e:	4d08      	ldr	r5, [pc, #32]	; (10d80 <WINC1500_write+0x44>)
   10d60:	4c05      	ldr	r4, [pc, #20]	; (10d78 <WINC1500_write+0x3c>)
   10d62:	2000      	movs	r0, #0
   10d64:	47a8      	blx	r5
   10d66:	7823      	ldrb	r3, [r4, #0]
   10d68:	2b00      	cmp	r3, #0
   10d6a:	d0fa      	beq.n	10d62 <WINC1500_write+0x26>
   10d6c:	0030      	movs	r0, r6
   10d6e:	bd70      	pop	{r4, r5, r6, pc}
   10d70:	2601      	movs	r6, #1
   10d72:	4276      	negs	r6, r6
   10d74:	e7fa      	b.n	10d6c <WINC1500_write+0x30>
   10d76:	46c0      	nop			; (mov r8, r8)
   10d78:	20003f3d 	.word	0x20003f3d
   10d7c:	0000c059 	.word	0x0000c059
   10d80:	0000a071 	.word	0x0000a071

00010d84 <WINC1500_read>:
   10d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d86:	b083      	sub	sp, #12
   10d88:	9101      	str	r1, [sp, #4]
   10d8a:	0014      	movs	r4, r2
   10d8c:	2b00      	cmp	r3, #0
   10d8e:	d100      	bne.n	10d92 <WINC1500_read+0xe>
   10d90:	330a      	adds	r3, #10
   10d92:	4a22      	ldr	r2, [pc, #136]	; (10e1c <WINC1500_read+0x98>)
   10d94:	6812      	ldr	r2, [r2, #0]
   10d96:	2a00      	cmp	r2, #0
   10d98:	d013      	beq.n	10dc2 <WINC1500_read+0x3e>
   10d9a:	4b20      	ldr	r3, [pc, #128]	; (10e1c <WINC1500_read+0x98>)
   10d9c:	681d      	ldr	r5, [r3, #0]
   10d9e:	42a5      	cmp	r5, r4
   10da0:	db39      	blt.n	10e16 <WINC1500_read+0x92>
   10da2:	4e1f      	ldr	r6, [pc, #124]	; (10e20 <WINC1500_read+0x9c>)
   10da4:	6837      	ldr	r7, [r6, #0]
   10da6:	491f      	ldr	r1, [pc, #124]	; (10e24 <WINC1500_read+0xa0>)
   10da8:	19c9      	adds	r1, r1, r7
   10daa:	0022      	movs	r2, r4
   10dac:	9801      	ldr	r0, [sp, #4]
   10dae:	4b1e      	ldr	r3, [pc, #120]	; (10e28 <WINC1500_read+0xa4>)
   10db0:	4798      	blx	r3
   10db2:	1b2d      	subs	r5, r5, r4
   10db4:	4b19      	ldr	r3, [pc, #100]	; (10e1c <WINC1500_read+0x98>)
   10db6:	601d      	str	r5, [r3, #0]
   10db8:	193f      	adds	r7, r7, r4
   10dba:	6037      	str	r7, [r6, #0]
   10dbc:	0020      	movs	r0, r4
   10dbe:	b003      	add	sp, #12
   10dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10dc2:	2100      	movs	r1, #0
   10dc4:	4a19      	ldr	r2, [pc, #100]	; (10e2c <WINC1500_read+0xa8>)
   10dc6:	7011      	strb	r1, [r2, #0]
   10dc8:	7800      	ldrb	r0, [r0, #0]
   10dca:	b240      	sxtb	r0, r0
   10dcc:	2280      	movs	r2, #128	; 0x80
   10dce:	0052      	lsls	r2, r2, #1
   10dd0:	4914      	ldr	r1, [pc, #80]	; (10e24 <WINC1500_read+0xa0>)
   10dd2:	4d17      	ldr	r5, [pc, #92]	; (10e30 <WINC1500_read+0xac>)
   10dd4:	47a8      	blx	r5
   10dd6:	2800      	cmp	r0, #0
   10dd8:	d11a      	bne.n	10e10 <WINC1500_read+0x8c>
   10dda:	4b14      	ldr	r3, [pc, #80]	; (10e2c <WINC1500_read+0xa8>)
   10ddc:	781b      	ldrb	r3, [r3, #0]
   10dde:	2b00      	cmp	r3, #0
   10de0:	d106      	bne.n	10df0 <WINC1500_read+0x6c>
   10de2:	4f14      	ldr	r7, [pc, #80]	; (10e34 <WINC1500_read+0xb0>)
   10de4:	4d11      	ldr	r5, [pc, #68]	; (10e2c <WINC1500_read+0xa8>)
   10de6:	2000      	movs	r0, #0
   10de8:	47b8      	blx	r7
   10dea:	782b      	ldrb	r3, [r5, #0]
   10dec:	2b00      	cmp	r3, #0
   10dee:	d0fa      	beq.n	10de6 <WINC1500_read+0x62>
   10df0:	4b11      	ldr	r3, [pc, #68]	; (10e38 <WINC1500_read+0xb4>)
   10df2:	6818      	ldr	r0, [r3, #0]
   10df4:	2800      	cmp	r0, #0
   10df6:	dd05      	ble.n	10e04 <WINC1500_read+0x80>
   10df8:	4b08      	ldr	r3, [pc, #32]	; (10e1c <WINC1500_read+0x98>)
   10dfa:	6018      	str	r0, [r3, #0]
   10dfc:	2200      	movs	r2, #0
   10dfe:	4b08      	ldr	r3, [pc, #32]	; (10e20 <WINC1500_read+0x9c>)
   10e00:	601a      	str	r2, [r3, #0]
   10e02:	e7ca      	b.n	10d9a <WINC1500_read+0x16>
   10e04:	2300      	movs	r3, #0
   10e06:	4a05      	ldr	r2, [pc, #20]	; (10e1c <WINC1500_read+0x98>)
   10e08:	6013      	str	r3, [r2, #0]
   10e0a:	4a05      	ldr	r2, [pc, #20]	; (10e20 <WINC1500_read+0x9c>)
   10e0c:	6013      	str	r3, [r2, #0]
   10e0e:	e7d6      	b.n	10dbe <WINC1500_read+0x3a>
   10e10:	2001      	movs	r0, #1
   10e12:	4240      	negs	r0, r0
   10e14:	e7d3      	b.n	10dbe <WINC1500_read+0x3a>
   10e16:	2001      	movs	r0, #1
   10e18:	4240      	negs	r0, r0
   10e1a:	e7d0      	b.n	10dbe <WINC1500_read+0x3a>
   10e1c:	2000404c 	.word	0x2000404c
   10e20:	20004050 	.word	0x20004050
   10e24:	20003f40 	.word	0x20003f40
   10e28:	00014245 	.word	0x00014245
   10e2c:	20003f3c 	.word	0x20003f3c
   10e30:	0000c0f1 	.word	0x0000c0f1
   10e34:	0000a071 	.word	0x0000a071
   10e38:	20004044 	.word	0x20004044

00010e3c <dnsResolveCallback>:
   10e3c:	b510      	push	{r4, lr}
   10e3e:	0002      	movs	r2, r0
   10e40:	000c      	movs	r4, r1
   10e42:	4b08      	ldr	r3, [pc, #32]	; (10e64 <dnsResolveCallback+0x28>)
   10e44:	781b      	ldrb	r3, [r3, #0]
   10e46:	2b00      	cmp	r3, #0
   10e48:	d10b      	bne.n	10e62 <dnsResolveCallback+0x26>
   10e4a:	4b07      	ldr	r3, [pc, #28]	; (10e68 <dnsResolveCallback+0x2c>)
   10e4c:	6818      	ldr	r0, [r3, #0]
   10e4e:	0011      	movs	r1, r2
   10e50:	4b06      	ldr	r3, [pc, #24]	; (10e6c <dnsResolveCallback+0x30>)
   10e52:	4798      	blx	r3
   10e54:	2800      	cmp	r0, #0
   10e56:	d104      	bne.n	10e62 <dnsResolveCallback+0x26>
   10e58:	4b05      	ldr	r3, [pc, #20]	; (10e70 <dnsResolveCallback+0x34>)
   10e5a:	601c      	str	r4, [r3, #0]
   10e5c:	2201      	movs	r2, #1
   10e5e:	4b01      	ldr	r3, [pc, #4]	; (10e64 <dnsResolveCallback+0x28>)
   10e60:	701a      	strb	r2, [r3, #0]
   10e62:	bd10      	pop	{r4, pc}
   10e64:	20003f3b 	.word	0x20003f3b
   10e68:	20004048 	.word	0x20004048
   10e6c:	000145d3 	.word	0x000145d3
   10e70:	20004040 	.word	0x20004040

00010e74 <tcpClientSocketEventHandler>:
   10e74:	b530      	push	{r4, r5, lr}
   10e76:	4b12      	ldr	r3, [pc, #72]	; (10ec0 <tcpClientSocketEventHandler+0x4c>)
   10e78:	24a8      	movs	r4, #168	; 0xa8
   10e7a:	00a4      	lsls	r4, r4, #2
   10e7c:	191d      	adds	r5, r3, r4
   10e7e:	e002      	b.n	10e86 <tcpClientSocketEventHandler+0x12>
   10e80:	3360      	adds	r3, #96	; 0x60
   10e82:	42ab      	cmp	r3, r5
   10e84:	d00b      	beq.n	10e9e <tcpClientSocketEventHandler+0x2a>
   10e86:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
   10e88:	2c00      	cmp	r4, #0
   10e8a:	d0f9      	beq.n	10e80 <tcpClientSocketEventHandler+0xc>
   10e8c:	6a24      	ldr	r4, [r4, #32]
   10e8e:	4284      	cmp	r4, r0
   10e90:	d1f6      	bne.n	10e80 <tcpClientSocketEventHandler+0xc>
   10e92:	2906      	cmp	r1, #6
   10e94:	d00c      	beq.n	10eb0 <tcpClientSocketEventHandler+0x3c>
   10e96:	2907      	cmp	r1, #7
   10e98:	d006      	beq.n	10ea8 <tcpClientSocketEventHandler+0x34>
   10e9a:	2905      	cmp	r1, #5
   10e9c:	d000      	beq.n	10ea0 <tcpClientSocketEventHandler+0x2c>
   10e9e:	bd30      	pop	{r4, r5, pc}
   10ea0:	2201      	movs	r2, #1
   10ea2:	4b08      	ldr	r3, [pc, #32]	; (10ec4 <tcpClientSocketEventHandler+0x50>)
   10ea4:	701a      	strb	r2, [r3, #0]
   10ea6:	e7fa      	b.n	10e9e <tcpClientSocketEventHandler+0x2a>
   10ea8:	2201      	movs	r2, #1
   10eaa:	4b07      	ldr	r3, [pc, #28]	; (10ec8 <tcpClientSocketEventHandler+0x54>)
   10eac:	701a      	strb	r2, [r3, #0]
   10eae:	e7f6      	b.n	10e9e <tcpClientSocketEventHandler+0x2a>
   10eb0:	2304      	movs	r3, #4
   10eb2:	5ed2      	ldrsh	r2, [r2, r3]
   10eb4:	4b05      	ldr	r3, [pc, #20]	; (10ecc <tcpClientSocketEventHandler+0x58>)
   10eb6:	601a      	str	r2, [r3, #0]
   10eb8:	2201      	movs	r2, #1
   10eba:	4b05      	ldr	r3, [pc, #20]	; (10ed0 <tcpClientSocketEventHandler+0x5c>)
   10ebc:	701a      	strb	r2, [r3, #0]
   10ebe:	e7ee      	b.n	10e9e <tcpClientSocketEventHandler+0x2a>
   10ec0:	20004054 	.word	0x20004054
   10ec4:	20003f3a 	.word	0x20003f3a
   10ec8:	20003f3d 	.word	0x20003f3d
   10ecc:	20004044 	.word	0x20004044
   10ed0:	20003f3c 	.word	0x20003f3c

00010ed4 <TimerIsExpired>:
   10ed4:	b510      	push	{r4, lr}
   10ed6:	6844      	ldr	r4, [r0, #4]
   10ed8:	4b02      	ldr	r3, [pc, #8]	; (10ee4 <TimerIsExpired+0x10>)
   10eda:	4798      	blx	r3
   10edc:	1a20      	subs	r0, r4, r0
   10ede:	0fc0      	lsrs	r0, r0, #31
   10ee0:	bd10      	pop	{r4, pc}
   10ee2:	46c0      	nop			; (mov r8, r8)
   10ee4:	00006e15 	.word	0x00006e15

00010ee8 <TimerCountdownMS>:
   10ee8:	b570      	push	{r4, r5, r6, lr}
   10eea:	0004      	movs	r4, r0
   10eec:	000d      	movs	r5, r1
   10eee:	4b02      	ldr	r3, [pc, #8]	; (10ef8 <TimerCountdownMS+0x10>)
   10ef0:	4798      	blx	r3
   10ef2:	1940      	adds	r0, r0, r5
   10ef4:	6060      	str	r0, [r4, #4]
   10ef6:	bd70      	pop	{r4, r5, r6, pc}
   10ef8:	00006e15 	.word	0x00006e15

00010efc <TimerCountdown>:
   10efc:	b510      	push	{r4, lr}
   10efe:	0004      	movs	r4, r0
   10f00:	4b01      	ldr	r3, [pc, #4]	; (10f08 <TimerCountdown+0xc>)
   10f02:	4798      	blx	r3
   10f04:	6060      	str	r0, [r4, #4]
   10f06:	bd10      	pop	{r4, pc}
   10f08:	00006e15 	.word	0x00006e15

00010f0c <TimerLeftMS>:
   10f0c:	b510      	push	{r4, lr}
   10f0e:	6844      	ldr	r4, [r0, #4]
   10f10:	4b03      	ldr	r3, [pc, #12]	; (10f20 <TimerLeftMS+0x14>)
   10f12:	4798      	blx	r3
   10f14:	1a20      	subs	r0, r4, r0
   10f16:	43c3      	mvns	r3, r0
   10f18:	17db      	asrs	r3, r3, #31
   10f1a:	4018      	ands	r0, r3
   10f1c:	bd10      	pop	{r4, pc}
   10f1e:	46c0      	nop			; (mov r8, r8)
   10f20:	00006e15 	.word	0x00006e15

00010f24 <TimerInit>:
   10f24:	2300      	movs	r3, #0
   10f26:	6043      	str	r3, [r0, #4]
   10f28:	4770      	bx	lr
	...

00010f2c <NetworkInit>:
   10f2c:	2301      	movs	r3, #1
   10f2e:	425b      	negs	r3, r3
   10f30:	6003      	str	r3, [r0, #0]
   10f32:	4b03      	ldr	r3, [pc, #12]	; (10f40 <NetworkInit+0x14>)
   10f34:	6083      	str	r3, [r0, #8]
   10f36:	4b03      	ldr	r3, [pc, #12]	; (10f44 <NetworkInit+0x18>)
   10f38:	60c3      	str	r3, [r0, #12]
   10f3a:	4b03      	ldr	r3, [pc, #12]	; (10f48 <NetworkInit+0x1c>)
   10f3c:	6103      	str	r3, [r0, #16]
   10f3e:	4770      	bx	lr
   10f40:	00010d85 	.word	0x00010d85
   10f44:	00010d3d 	.word	0x00010d3d
   10f48:	00010d19 	.word	0x00010d19

00010f4c <ConnectNetwork>:
   10f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f4e:	b087      	sub	sp, #28
   10f50:	0006      	movs	r6, r0
   10f52:	0015      	movs	r5, r2
   10f54:	9301      	str	r3, [sp, #4]
   10f56:	4c25      	ldr	r4, [pc, #148]	; (10fec <ConnectNetwork+0xa0>)
   10f58:	2300      	movs	r3, #0
   10f5a:	7023      	strb	r3, [r4, #0]
   10f5c:	4b24      	ldr	r3, [pc, #144]	; (10ff0 <ConnectNetwork+0xa4>)
   10f5e:	6019      	str	r1, [r3, #0]
   10f60:	0008      	movs	r0, r1
   10f62:	4b24      	ldr	r3, [pc, #144]	; (10ff4 <ConnectNetwork+0xa8>)
   10f64:	4798      	blx	r3
   10f66:	7823      	ldrb	r3, [r4, #0]
   10f68:	2b00      	cmp	r3, #0
   10f6a:	d106      	bne.n	10f7a <ConnectNetwork+0x2e>
   10f6c:	4f22      	ldr	r7, [pc, #136]	; (10ff8 <ConnectNetwork+0xac>)
   10f6e:	4c1f      	ldr	r4, [pc, #124]	; (10fec <ConnectNetwork+0xa0>)
   10f70:	2000      	movs	r0, #0
   10f72:	47b8      	blx	r7
   10f74:	7823      	ldrb	r3, [r4, #0]
   10f76:	2b00      	cmp	r3, #0
   10f78:	d0fa      	beq.n	10f70 <ConnectNetwork+0x24>
   10f7a:	4b20      	ldr	r3, [pc, #128]	; (10ffc <ConnectNetwork+0xb0>)
   10f7c:	681a      	ldr	r2, [r3, #0]
   10f7e:	6072      	str	r2, [r6, #4]
   10f80:	2302      	movs	r3, #2
   10f82:	a902      	add	r1, sp, #8
   10f84:	800b      	strh	r3, [r1, #0]
   10f86:	022b      	lsls	r3, r5, #8
   10f88:	491d      	ldr	r1, [pc, #116]	; (11000 <ConnectNetwork+0xb4>)
   10f8a:	400b      	ands	r3, r1
   10f8c:	b2ad      	uxth	r5, r5
   10f8e:	0a2d      	lsrs	r5, r5, #8
   10f90:	431d      	orrs	r5, r3
   10f92:	ab02      	add	r3, sp, #8
   10f94:	805d      	strh	r5, [r3, #2]
   10f96:	9203      	str	r2, [sp, #12]
   10f98:	6833      	ldr	r3, [r6, #0]
   10f9a:	2b00      	cmp	r3, #0
   10f9c:	db16      	blt.n	10fcc <ConnectNetwork+0x80>
   10f9e:	6830      	ldr	r0, [r6, #0]
   10fa0:	1c43      	adds	r3, r0, #1
   10fa2:	d01b      	beq.n	10fdc <ConnectNetwork+0x90>
   10fa4:	b240      	sxtb	r0, r0
   10fa6:	2210      	movs	r2, #16
   10fa8:	a902      	add	r1, sp, #8
   10faa:	4b16      	ldr	r3, [pc, #88]	; (11004 <ConnectNetwork+0xb8>)
   10fac:	4798      	blx	r3
   10fae:	2800      	cmp	r0, #0
   10fb0:	d119      	bne.n	10fe6 <ConnectNetwork+0x9a>
   10fb2:	2200      	movs	r2, #0
   10fb4:	4b14      	ldr	r3, [pc, #80]	; (11008 <ConnectNetwork+0xbc>)
   10fb6:	701a      	strb	r2, [r3, #0]
   10fb8:	4d0f      	ldr	r5, [pc, #60]	; (10ff8 <ConnectNetwork+0xac>)
   10fba:	001c      	movs	r4, r3
   10fbc:	2000      	movs	r0, #0
   10fbe:	47a8      	blx	r5
   10fc0:	7823      	ldrb	r3, [r4, #0]
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	d0fa      	beq.n	10fbc <ConnectNetwork+0x70>
   10fc6:	2000      	movs	r0, #0
   10fc8:	b007      	add	sp, #28
   10fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fcc:	466b      	mov	r3, sp
   10fce:	791a      	ldrb	r2, [r3, #4]
   10fd0:	2101      	movs	r1, #1
   10fd2:	2002      	movs	r0, #2
   10fd4:	4b0d      	ldr	r3, [pc, #52]	; (1100c <ConnectNetwork+0xc0>)
   10fd6:	4798      	blx	r3
   10fd8:	6030      	str	r0, [r6, #0]
   10fda:	e7e0      	b.n	10f9e <ConnectNetwork+0x52>
   10fdc:	4b0c      	ldr	r3, [pc, #48]	; (11010 <ConnectNetwork+0xc4>)
   10fde:	4798      	blx	r3
   10fe0:	2009      	movs	r0, #9
   10fe2:	4240      	negs	r0, r0
   10fe4:	e7f0      	b.n	10fc8 <ConnectNetwork+0x7c>
   10fe6:	2009      	movs	r0, #9
   10fe8:	4240      	negs	r0, r0
   10fea:	e7ed      	b.n	10fc8 <ConnectNetwork+0x7c>
   10fec:	20003f3b 	.word	0x20003f3b
   10ff0:	20004048 	.word	0x20004048
   10ff4:	0000c289 	.word	0x0000c289
   10ff8:	0000a071 	.word	0x0000a071
   10ffc:	20004040 	.word	0x20004040
   11000:	00ffff00 	.word	0x00ffff00
   11004:	0000bfc9 	.word	0x0000bfc9
   11008:	20003f3a 	.word	0x20003f3a
   1100c:	0000be49 	.word	0x0000be49
   11010:	0000c185 	.word	0x0000c185

00011014 <mqtt_init>:
   11014:	b5f0      	push	{r4, r5, r6, r7, lr}
   11016:	b085      	sub	sp, #20
   11018:	0006      	movs	r6, r0
   1101a:	000d      	movs	r5, r1
   1101c:	2800      	cmp	r0, #0
   1101e:	d03d      	beq.n	1109c <mqtt_init+0x88>
   11020:	2900      	cmp	r1, #0
   11022:	d03e      	beq.n	110a2 <mqtt_init+0x8e>
   11024:	690b      	ldr	r3, [r1, #16]
   11026:	2b00      	cmp	r3, #0
   11028:	d03e      	beq.n	110a8 <mqtt_init+0x94>
   1102a:	688b      	ldr	r3, [r1, #8]
   1102c:	2b00      	cmp	r3, #0
   1102e:	d03e      	beq.n	110ae <mqtt_init+0x9a>
   11030:	888b      	ldrh	r3, [r1, #4]
   11032:	27fa      	movs	r7, #250	; 0xfa
   11034:	00bf      	lsls	r7, r7, #2
   11036:	435f      	muls	r7, r3
   11038:	0004      	movs	r4, r0
   1103a:	3420      	adds	r4, #32
   1103c:	0020      	movs	r0, r4
   1103e:	4b1f      	ldr	r3, [pc, #124]	; (110bc <mqtt_init+0xa8>)
   11040:	4798      	blx	r3
   11042:	1d30      	adds	r0, r6, #4
   11044:	2218      	movs	r2, #24
   11046:	0029      	movs	r1, r5
   11048:	4b1d      	ldr	r3, [pc, #116]	; (110c0 <mqtt_init+0xac>)
   1104a:	4798      	blx	r3
   1104c:	4b1d      	ldr	r3, [pc, #116]	; (110c4 <mqtt_init+0xb0>)
   1104e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   11050:	2b00      	cmp	r3, #0
   11052:	d01a      	beq.n	1108a <mqtt_init+0x76>
   11054:	4b1b      	ldr	r3, [pc, #108]	; (110c4 <mqtt_init+0xb0>)
   11056:	33bc      	adds	r3, #188	; 0xbc
   11058:	2201      	movs	r2, #1
   1105a:	6819      	ldr	r1, [r3, #0]
   1105c:	2900      	cmp	r1, #0
   1105e:	d015      	beq.n	1108c <mqtt_init+0x78>
   11060:	3201      	adds	r2, #1
   11062:	3360      	adds	r3, #96	; 0x60
   11064:	2a07      	cmp	r2, #7
   11066:	d1f8      	bne.n	1105a <mqtt_init+0x46>
   11068:	69f0      	ldr	r0, [r6, #28]
   1106a:	2800      	cmp	r0, #0
   1106c:	d022      	beq.n	110b4 <mqtt_init+0xa0>
   1106e:	692b      	ldr	r3, [r5, #16]
   11070:	68ea      	ldr	r2, [r5, #12]
   11072:	9202      	str	r2, [sp, #8]
   11074:	68aa      	ldr	r2, [r5, #8]
   11076:	9201      	str	r2, [sp, #4]
   11078:	696a      	ldr	r2, [r5, #20]
   1107a:	9200      	str	r2, [sp, #0]
   1107c:	003a      	movs	r2, r7
   1107e:	0021      	movs	r1, r4
   11080:	4c11      	ldr	r4, [pc, #68]	; (110c8 <mqtt_init+0xb4>)
   11082:	47a0      	blx	r4
   11084:	2000      	movs	r0, #0
   11086:	b005      	add	sp, #20
   11088:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1108a:	2200      	movs	r2, #0
   1108c:	480d      	ldr	r0, [pc, #52]	; (110c4 <mqtt_init+0xb0>)
   1108e:	0053      	lsls	r3, r2, #1
   11090:	1899      	adds	r1, r3, r2
   11092:	0149      	lsls	r1, r1, #5
   11094:	1841      	adds	r1, r0, r1
   11096:	65ce      	str	r6, [r1, #92]	; 0x5c
   11098:	61f1      	str	r1, [r6, #28]
   1109a:	e7e5      	b.n	11068 <mqtt_init+0x54>
   1109c:	2001      	movs	r0, #1
   1109e:	4240      	negs	r0, r0
   110a0:	e7f1      	b.n	11086 <mqtt_init+0x72>
   110a2:	2001      	movs	r0, #1
   110a4:	4240      	negs	r0, r0
   110a6:	e7ee      	b.n	11086 <mqtt_init+0x72>
   110a8:	2001      	movs	r0, #1
   110aa:	4240      	negs	r0, r0
   110ac:	e7eb      	b.n	11086 <mqtt_init+0x72>
   110ae:	2001      	movs	r0, #1
   110b0:	4240      	negs	r0, r0
   110b2:	e7e8      	b.n	11086 <mqtt_init+0x72>
   110b4:	2001      	movs	r0, #1
   110b6:	4240      	negs	r0, r0
   110b8:	e7e5      	b.n	11086 <mqtt_init+0x72>
   110ba:	46c0      	nop			; (mov r8, r8)
   110bc:	00010f2d 	.word	0x00010f2d
   110c0:	00014245 	.word	0x00014245
   110c4:	20004054 	.word	0x20004054
   110c8:	000105e5 	.word	0x000105e5

000110cc <mqtt_get_config_defaults>:
   110cc:	4b05      	ldr	r3, [pc, #20]	; (110e4 <mqtt_get_config_defaults+0x18>)
   110ce:	8003      	strh	r3, [r0, #0]
   110d0:	2300      	movs	r3, #0
   110d2:	7083      	strb	r3, [r0, #2]
   110d4:	223c      	movs	r2, #60	; 0x3c
   110d6:	8082      	strh	r2, [r0, #4]
   110d8:	6083      	str	r3, [r0, #8]
   110da:	6103      	str	r3, [r0, #16]
   110dc:	60c3      	str	r3, [r0, #12]
   110de:	6143      	str	r3, [r0, #20]
   110e0:	4770      	bx	lr
   110e2:	46c0      	nop			; (mov r8, r8)
   110e4:	0000075b 	.word	0x0000075b

000110e8 <mqtt_register_callback>:
   110e8:	2800      	cmp	r0, #0
   110ea:	d002      	beq.n	110f2 <mqtt_register_callback+0xa>
   110ec:	6001      	str	r1, [r0, #0]
   110ee:	2000      	movs	r0, #0
   110f0:	4770      	bx	lr
   110f2:	2001      	movs	r0, #1
   110f4:	4240      	negs	r0, r0
   110f6:	e7fb      	b.n	110f0 <mqtt_register_callback+0x8>

000110f8 <mqtt_socket_event_handler>:
   110f8:	b510      	push	{r4, lr}
   110fa:	4b01      	ldr	r3, [pc, #4]	; (11100 <mqtt_socket_event_handler+0x8>)
   110fc:	4798      	blx	r3
   110fe:	bd10      	pop	{r4, pc}
   11100:	00010e75 	.word	0x00010e75

00011104 <mqtt_socket_resolve_handler>:
   11104:	b510      	push	{r4, lr}
   11106:	4b01      	ldr	r3, [pc, #4]	; (1110c <mqtt_socket_resolve_handler+0x8>)
   11108:	4798      	blx	r3
   1110a:	bd10      	pop	{r4, pc}
   1110c:	00010e3d 	.word	0x00010e3d

00011110 <mqtt_connect>:
   11110:	b530      	push	{r4, r5, lr}
   11112:	b083      	sub	sp, #12
   11114:	0004      	movs	r4, r0
   11116:	7983      	ldrb	r3, [r0, #6]
   11118:	8882      	ldrh	r2, [r0, #4]
   1111a:	3020      	adds	r0, #32
   1111c:	4d06      	ldr	r5, [pc, #24]	; (11138 <mqtt_connect+0x28>)
   1111e:	47a8      	blx	r5
   11120:	9001      	str	r0, [sp, #4]
   11122:	6823      	ldr	r3, [r4, #0]
   11124:	2b00      	cmp	r3, #0
   11126:	d003      	beq.n	11130 <mqtt_connect+0x20>
   11128:	aa01      	add	r2, sp, #4
   1112a:	2100      	movs	r1, #0
   1112c:	0020      	movs	r0, r4
   1112e:	4798      	blx	r3
   11130:	9801      	ldr	r0, [sp, #4]
   11132:	b003      	add	sp, #12
   11134:	bd30      	pop	{r4, r5, pc}
   11136:	46c0      	nop			; (mov r8, r8)
   11138:	00010f4d 	.word	0x00010f4d

0001113c <mqtt_connect_broker>:
   1113c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1113e:	46de      	mov	lr, fp
   11140:	4657      	mov	r7, sl
   11142:	464e      	mov	r6, r9
   11144:	b5c0      	push	{r6, r7, lr}
   11146:	b098      	sub	sp, #96	; 0x60
   11148:	0005      	movs	r5, r0
   1114a:	4689      	mov	r9, r1
   1114c:	4693      	mov	fp, r2
   1114e:	469a      	mov	sl, r3
   11150:	ab24      	add	r3, sp, #144	; 0x90
   11152:	781f      	ldrb	r7, [r3, #0]
   11154:	ab25      	add	r3, sp, #148	; 0x94
   11156:	781e      	ldrb	r6, [r3, #0]
   11158:	ac01      	add	r4, sp, #4
   1115a:	2258      	movs	r2, #88	; 0x58
   1115c:	491a      	ldr	r1, [pc, #104]	; (111c8 <mqtt_connect_broker+0x8c>)
   1115e:	0020      	movs	r0, r4
   11160:	4b1a      	ldr	r3, [pc, #104]	; (111cc <mqtt_connect_broker+0x90>)
   11162:	4798      	blx	r3
   11164:	9b20      	ldr	r3, [sp, #128]	; 0x80
   11166:	60e3      	str	r3, [r4, #12]
   11168:	465b      	mov	r3, fp
   1116a:	6423      	str	r3, [r4, #64]	; 0x40
   1116c:	4653      	mov	r3, sl
   1116e:	64e3      	str	r3, [r4, #76]	; 0x4c
   11170:	464b      	mov	r3, r9
   11172:	76a3      	strb	r3, [r4, #26]
   11174:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11176:	6263      	str	r3, [r4, #36]	; 0x24
   11178:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1117a:	6323      	str	r3, [r4, #48]	; 0x30
   1117c:	233c      	movs	r3, #60	; 0x3c
   1117e:	54e6      	strb	r6, [r4, r3]
   11180:	3301      	adds	r3, #1
   11182:	54e7      	strb	r7, [r4, r3]
   11184:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11186:	2b00      	cmp	r3, #0
   11188:	d005      	beq.n	11196 <mqtt_connect_broker+0x5a>
   1118a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1118c:	2b00      	cmp	r3, #0
   1118e:	d002      	beq.n	11196 <mqtt_connect_broker+0x5a>
   11190:	2201      	movs	r2, #1
   11192:	ab01      	add	r3, sp, #4
   11194:	76da      	strb	r2, [r3, #27]
   11196:	a901      	add	r1, sp, #4
   11198:	69e8      	ldr	r0, [r5, #28]
   1119a:	4b0d      	ldr	r3, [pc, #52]	; (111d0 <mqtt_connect_broker+0x94>)
   1119c:	4798      	blx	r3
   1119e:	0004      	movs	r4, r0
   111a0:	ab17      	add	r3, sp, #92	; 0x5c
   111a2:	7018      	strb	r0, [r3, #0]
   111a4:	682b      	ldr	r3, [r5, #0]
   111a6:	2b00      	cmp	r3, #0
   111a8:	d003      	beq.n	111b2 <mqtt_connect_broker+0x76>
   111aa:	aa17      	add	r2, sp, #92	; 0x5c
   111ac:	2101      	movs	r1, #1
   111ae:	0028      	movs	r0, r5
   111b0:	4798      	blx	r3
   111b2:	2201      	movs	r2, #1
   111b4:	2334      	movs	r3, #52	; 0x34
   111b6:	54ea      	strb	r2, [r5, r3]
   111b8:	0020      	movs	r0, r4
   111ba:	b018      	add	sp, #96	; 0x60
   111bc:	bc1c      	pop	{r2, r3, r4}
   111be:	4691      	mov	r9, r2
   111c0:	469a      	mov	sl, r3
   111c2:	46a3      	mov	fp, r4
   111c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111c6:	46c0      	nop			; (mov r8, r8)
   111c8:	000190cc 	.word	0x000190cc
   111cc:	00014245 	.word	0x00014245
   111d0:	000109ed 	.word	0x000109ed

000111d4 <mqtt_disconnect>:
   111d4:	b530      	push	{r4, r5, lr}
   111d6:	b083      	sub	sp, #12
   111d8:	0004      	movs	r4, r0
   111da:	69c0      	ldr	r0, [r0, #28]
   111dc:	4b08      	ldr	r3, [pc, #32]	; (11200 <mqtt_disconnect+0x2c>)
   111de:	4798      	blx	r3
   111e0:	0005      	movs	r5, r0
   111e2:	9001      	str	r0, [sp, #4]
   111e4:	6823      	ldr	r3, [r4, #0]
   111e6:	2b00      	cmp	r3, #0
   111e8:	d003      	beq.n	111f2 <mqtt_disconnect+0x1e>
   111ea:	aa01      	add	r2, sp, #4
   111ec:	2105      	movs	r1, #5
   111ee:	0020      	movs	r0, r4
   111f0:	4798      	blx	r3
   111f2:	2200      	movs	r2, #0
   111f4:	2334      	movs	r3, #52	; 0x34
   111f6:	54e2      	strb	r2, [r4, r3]
   111f8:	0028      	movs	r0, r5
   111fa:	b003      	add	sp, #12
   111fc:	bd30      	pop	{r4, r5, pc}
   111fe:	46c0      	nop			; (mov r8, r8)
   11200:	00010cd1 	.word	0x00010cd1

00011204 <mqtt_publish>:
   11204:	b570      	push	{r4, r5, r6, lr}
   11206:	b084      	sub	sp, #16
   11208:	0004      	movs	r4, r0
   1120a:	a808      	add	r0, sp, #32
   1120c:	7805      	ldrb	r5, [r0, #0]
   1120e:	a809      	add	r0, sp, #36	; 0x24
   11210:	7800      	ldrb	r0, [r0, #0]
   11212:	466e      	mov	r6, sp
   11214:	7035      	strb	r5, [r6, #0]
   11216:	9202      	str	r2, [sp, #8]
   11218:	9303      	str	r3, [sp, #12]
   1121a:	7070      	strb	r0, [r6, #1]
   1121c:	466a      	mov	r2, sp
   1121e:	69e0      	ldr	r0, [r4, #28]
   11220:	4b06      	ldr	r3, [pc, #24]	; (1123c <mqtt_publish+0x38>)
   11222:	4798      	blx	r3
   11224:	0005      	movs	r5, r0
   11226:	6823      	ldr	r3, [r4, #0]
   11228:	2b00      	cmp	r3, #0
   1122a:	d003      	beq.n	11234 <mqtt_publish+0x30>
   1122c:	2200      	movs	r2, #0
   1122e:	2102      	movs	r1, #2
   11230:	0020      	movs	r0, r4
   11232:	4798      	blx	r3
   11234:	0028      	movs	r0, r5
   11236:	b004      	add	sp, #16
   11238:	bd70      	pop	{r4, r5, r6, pc}
   1123a:	46c0      	nop			; (mov r8, r8)
   1123c:	00010bc1 	.word	0x00010bc1

00011240 <mqtt_subscribe>:
   11240:	b570      	push	{r4, r5, r6, lr}
   11242:	0004      	movs	r4, r0
   11244:	69c0      	ldr	r0, [r0, #28]
   11246:	4d06      	ldr	r5, [pc, #24]	; (11260 <mqtt_subscribe+0x20>)
   11248:	47a8      	blx	r5
   1124a:	0005      	movs	r5, r0
   1124c:	6823      	ldr	r3, [r4, #0]
   1124e:	2b00      	cmp	r3, #0
   11250:	d003      	beq.n	1125a <mqtt_subscribe+0x1a>
   11252:	2200      	movs	r2, #0
   11254:	2103      	movs	r1, #3
   11256:	0020      	movs	r0, r4
   11258:	4798      	blx	r3
   1125a:	0028      	movs	r0, r5
   1125c:	bd70      	pop	{r4, r5, r6, pc}
   1125e:	46c0      	nop			; (mov r8, r8)
   11260:	00010abd 	.word	0x00010abd

00011264 <mqtt_yield>:
   11264:	b510      	push	{r4, lr}
   11266:	69c0      	ldr	r0, [r0, #28]
   11268:	4b01      	ldr	r3, [pc, #4]	; (11270 <mqtt_yield+0xc>)
   1126a:	4798      	blx	r3
   1126c:	bd10      	pop	{r4, pc}
   1126e:	46c0      	nop			; (mov r8, r8)
   11270:	00010971 	.word	0x00010971

00011274 <MQTTSerialize_connectLength>:
   11274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11276:	0004      	movs	r4, r0
   11278:	7a03      	ldrb	r3, [r0, #8]
   1127a:	2b03      	cmp	r3, #3
   1127c:	d024      	beq.n	112c8 <MQTTSerialize_connectLength+0x54>
   1127e:	2600      	movs	r6, #0
   11280:	2b04      	cmp	r3, #4
   11282:	d01f      	beq.n	112c4 <MQTTSerialize_connectLength+0x50>
   11284:	68e0      	ldr	r0, [r4, #12]
   11286:	6921      	ldr	r1, [r4, #16]
   11288:	6962      	ldr	r2, [r4, #20]
   1128a:	4b1b      	ldr	r3, [pc, #108]	; (112f8 <MQTTSerialize_connectLength+0x84>)
   1128c:	4798      	blx	r3
   1128e:	1c85      	adds	r5, r0, #2
   11290:	19ad      	adds	r5, r5, r6
   11292:	7ee3      	ldrb	r3, [r4, #27]
   11294:	2b00      	cmp	r3, #0
   11296:	d119      	bne.n	112cc <MQTTSerialize_connectLength+0x58>
   11298:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1129a:	2b00      	cmp	r3, #0
   1129c:	d024      	beq.n	112e8 <MQTTSerialize_connectLength+0x74>
   1129e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   112a0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   112a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   112a4:	4b14      	ldr	r3, [pc, #80]	; (112f8 <MQTTSerialize_connectLength+0x84>)
   112a6:	4798      	blx	r3
   112a8:	3002      	adds	r0, #2
   112aa:	182d      	adds	r5, r5, r0
   112ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   112ae:	2b00      	cmp	r3, #0
   112b0:	d01e      	beq.n	112f0 <MQTTSerialize_connectLength+0x7c>
   112b2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   112b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
   112b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
   112b8:	4b0f      	ldr	r3, [pc, #60]	; (112f8 <MQTTSerialize_connectLength+0x84>)
   112ba:	4798      	blx	r3
   112bc:	3002      	adds	r0, #2
   112be:	182d      	adds	r5, r5, r0
   112c0:	0028      	movs	r0, r5
   112c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112c4:	360a      	adds	r6, #10
   112c6:	e7dd      	b.n	11284 <MQTTSerialize_connectLength+0x10>
   112c8:	260c      	movs	r6, #12
   112ca:	e7db      	b.n	11284 <MQTTSerialize_connectLength+0x10>
   112cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   112ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   112d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   112d2:	4f09      	ldr	r7, [pc, #36]	; (112f8 <MQTTSerialize_connectLength+0x84>)
   112d4:	47b8      	blx	r7
   112d6:	0006      	movs	r6, r0
   112d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   112da:	6b61      	ldr	r1, [r4, #52]	; 0x34
   112dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   112de:	47b8      	blx	r7
   112e0:	1836      	adds	r6, r6, r0
   112e2:	3604      	adds	r6, #4
   112e4:	19ad      	adds	r5, r5, r6
   112e6:	e7d7      	b.n	11298 <MQTTSerialize_connectLength+0x24>
   112e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   112ea:	2b00      	cmp	r3, #0
   112ec:	d1d7      	bne.n	1129e <MQTTSerialize_connectLength+0x2a>
   112ee:	e7dd      	b.n	112ac <MQTTSerialize_connectLength+0x38>
   112f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   112f2:	2b00      	cmp	r3, #0
   112f4:	d1dd      	bne.n	112b2 <MQTTSerialize_connectLength+0x3e>
   112f6:	e7e3      	b.n	112c0 <MQTTSerialize_connectLength+0x4c>
   112f8:	000117dd 	.word	0x000117dd

000112fc <MQTTSerialize_connect>:
   112fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   112fe:	b083      	sub	sp, #12
   11300:	0006      	movs	r6, r0
   11302:	000f      	movs	r7, r1
   11304:	0015      	movs	r5, r2
   11306:	9001      	str	r0, [sp, #4]
   11308:	0010      	movs	r0, r2
   1130a:	4b45      	ldr	r3, [pc, #276]	; (11420 <MQTTSerialize_connect+0x124>)
   1130c:	4798      	blx	r3
   1130e:	0004      	movs	r4, r0
   11310:	4b44      	ldr	r3, [pc, #272]	; (11424 <MQTTSerialize_connect+0x128>)
   11312:	4798      	blx	r3
   11314:	42b8      	cmp	r0, r7
   11316:	dd00      	ble.n	1131a <MQTTSerialize_connect+0x1e>
   11318:	e07f      	b.n	1141a <MQTTSerialize_connect+0x11e>
   1131a:	2110      	movs	r1, #16
   1131c:	a801      	add	r0, sp, #4
   1131e:	4b42      	ldr	r3, [pc, #264]	; (11428 <MQTTSerialize_connect+0x12c>)
   11320:	4798      	blx	r3
   11322:	0021      	movs	r1, r4
   11324:	9801      	ldr	r0, [sp, #4]
   11326:	4b41      	ldr	r3, [pc, #260]	; (1142c <MQTTSerialize_connect+0x130>)
   11328:	4798      	blx	r3
   1132a:	9b01      	ldr	r3, [sp, #4]
   1132c:	469c      	mov	ip, r3
   1132e:	4460      	add	r0, ip
   11330:	9001      	str	r0, [sp, #4]
   11332:	7a2b      	ldrb	r3, [r5, #8]
   11334:	2b04      	cmp	r3, #4
   11336:	d045      	beq.n	113c4 <MQTTSerialize_connect+0xc8>
   11338:	493d      	ldr	r1, [pc, #244]	; (11430 <MQTTSerialize_connect+0x134>)
   1133a:	a801      	add	r0, sp, #4
   1133c:	4b3d      	ldr	r3, [pc, #244]	; (11434 <MQTTSerialize_connect+0x138>)
   1133e:	4798      	blx	r3
   11340:	2103      	movs	r1, #3
   11342:	a801      	add	r0, sp, #4
   11344:	4b38      	ldr	r3, [pc, #224]	; (11428 <MQTTSerialize_connect+0x12c>)
   11346:	4798      	blx	r3
   11348:	7ea9      	ldrb	r1, [r5, #26]
   1134a:	2301      	movs	r3, #1
   1134c:	4019      	ands	r1, r3
   1134e:	7eea      	ldrb	r2, [r5, #27]
   11350:	1e50      	subs	r0, r2, #1
   11352:	4182      	sbcs	r2, r0
   11354:	b2d2      	uxtb	r2, r2
   11356:	4013      	ands	r3, r2
   11358:	009b      	lsls	r3, r3, #2
   1135a:	0049      	lsls	r1, r1, #1
   1135c:	4319      	orrs	r1, r3
   1135e:	2b00      	cmp	r3, #0
   11360:	d00b      	beq.n	1137a <MQTTSerialize_connect+0x7e>
   11362:	233d      	movs	r3, #61	; 0x3d
   11364:	5cea      	ldrb	r2, [r5, r3]
   11366:	3b3a      	subs	r3, #58	; 0x3a
   11368:	4013      	ands	r3, r2
   1136a:	00db      	lsls	r3, r3, #3
   1136c:	223c      	movs	r2, #60	; 0x3c
   1136e:	5ca8      	ldrb	r0, [r5, r2]
   11370:	3a3b      	subs	r2, #59	; 0x3b
   11372:	4002      	ands	r2, r0
   11374:	0152      	lsls	r2, r2, #5
   11376:	4319      	orrs	r1, r3
   11378:	4311      	orrs	r1, r2
   1137a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1137c:	2b00      	cmp	r3, #0
   1137e:	d02a      	beq.n	113d6 <MQTTSerialize_connect+0xda>
   11380:	2380      	movs	r3, #128	; 0x80
   11382:	4319      	orrs	r1, r3
   11384:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   11386:	2b00      	cmp	r3, #0
   11388:	d029      	beq.n	113de <MQTTSerialize_connect+0xe2>
   1138a:	2340      	movs	r3, #64	; 0x40
   1138c:	4319      	orrs	r1, r3
   1138e:	b2cc      	uxtb	r4, r1
   11390:	0021      	movs	r1, r4
   11392:	a801      	add	r0, sp, #4
   11394:	4b24      	ldr	r3, [pc, #144]	; (11428 <MQTTSerialize_connect+0x12c>)
   11396:	4798      	blx	r3
   11398:	8b29      	ldrh	r1, [r5, #24]
   1139a:	a801      	add	r0, sp, #4
   1139c:	4b26      	ldr	r3, [pc, #152]	; (11438 <MQTTSerialize_connect+0x13c>)
   1139e:	4798      	blx	r3
   113a0:	68e9      	ldr	r1, [r5, #12]
   113a2:	692a      	ldr	r2, [r5, #16]
   113a4:	696b      	ldr	r3, [r5, #20]
   113a6:	a801      	add	r0, sp, #4
   113a8:	4f24      	ldr	r7, [pc, #144]	; (1143c <MQTTSerialize_connect+0x140>)
   113aa:	47b8      	blx	r7
   113ac:	7eeb      	ldrb	r3, [r5, #27]
   113ae:	2b00      	cmp	r3, #0
   113b0:	d119      	bne.n	113e6 <MQTTSerialize_connect+0xea>
   113b2:	b263      	sxtb	r3, r4
   113b4:	2b00      	cmp	r3, #0
   113b6:	db22      	blt.n	113fe <MQTTSerialize_connect+0x102>
   113b8:	0663      	lsls	r3, r4, #25
   113ba:	d427      	bmi.n	1140c <MQTTSerialize_connect+0x110>
   113bc:	9b01      	ldr	r3, [sp, #4]
   113be:	1b98      	subs	r0, r3, r6
   113c0:	b003      	add	sp, #12
   113c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   113c4:	491e      	ldr	r1, [pc, #120]	; (11440 <MQTTSerialize_connect+0x144>)
   113c6:	a801      	add	r0, sp, #4
   113c8:	4b1a      	ldr	r3, [pc, #104]	; (11434 <MQTTSerialize_connect+0x138>)
   113ca:	4798      	blx	r3
   113cc:	2104      	movs	r1, #4
   113ce:	a801      	add	r0, sp, #4
   113d0:	4b15      	ldr	r3, [pc, #84]	; (11428 <MQTTSerialize_connect+0x12c>)
   113d2:	4798      	blx	r3
   113d4:	e7b8      	b.n	11348 <MQTTSerialize_connect+0x4c>
   113d6:	6cab      	ldr	r3, [r5, #72]	; 0x48
   113d8:	2b00      	cmp	r3, #0
   113da:	d1d1      	bne.n	11380 <MQTTSerialize_connect+0x84>
   113dc:	e7d2      	b.n	11384 <MQTTSerialize_connect+0x88>
   113de:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   113e0:	2b00      	cmp	r3, #0
   113e2:	d1d2      	bne.n	1138a <MQTTSerialize_connect+0x8e>
   113e4:	e7d3      	b.n	1138e <MQTTSerialize_connect+0x92>
   113e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   113e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   113ea:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   113ec:	a801      	add	r0, sp, #4
   113ee:	4f13      	ldr	r7, [pc, #76]	; (1143c <MQTTSerialize_connect+0x140>)
   113f0:	47b8      	blx	r7
   113f2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   113f4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   113f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   113f8:	a801      	add	r0, sp, #4
   113fa:	47b8      	blx	r7
   113fc:	e7d9      	b.n	113b2 <MQTTSerialize_connect+0xb6>
   113fe:	6c29      	ldr	r1, [r5, #64]	; 0x40
   11400:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   11402:	6cab      	ldr	r3, [r5, #72]	; 0x48
   11404:	a801      	add	r0, sp, #4
   11406:	4f0d      	ldr	r7, [pc, #52]	; (1143c <MQTTSerialize_connect+0x140>)
   11408:	47b8      	blx	r7
   1140a:	e7d5      	b.n	113b8 <MQTTSerialize_connect+0xbc>
   1140c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   1140e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   11410:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   11412:	a801      	add	r0, sp, #4
   11414:	4c09      	ldr	r4, [pc, #36]	; (1143c <MQTTSerialize_connect+0x140>)
   11416:	47a0      	blx	r4
   11418:	e7d0      	b.n	113bc <MQTTSerialize_connect+0xc0>
   1141a:	2002      	movs	r0, #2
   1141c:	4240      	negs	r0, r0
   1141e:	e7cf      	b.n	113c0 <MQTTSerialize_connect+0xc4>
   11420:	00011275 	.word	0x00011275
   11424:	00011681 	.word	0x00011681
   11428:	000116e3 	.word	0x000116e3
   1142c:	000115f9 	.word	0x000115f9
   11430:	0001912c 	.word	0x0001912c
   11434:	00011719 	.word	0x00011719
   11438:	000116ef 	.word	0x000116ef
   1143c:	00011751 	.word	0x00011751
   11440:	00019124 	.word	0x00019124

00011444 <MQTTDeserialize_connack>:
   11444:	b570      	push	{r4, r5, r6, lr}
   11446:	b082      	sub	sp, #8
   11448:	0005      	movs	r5, r0
   1144a:	000c      	movs	r4, r1
   1144c:	9201      	str	r2, [sp, #4]
   1144e:	a801      	add	r0, sp, #4
   11450:	4b0e      	ldr	r3, [pc, #56]	; (1148c <MQTTDeserialize_connack+0x48>)
   11452:	4798      	blx	r3
   11454:	23f0      	movs	r3, #240	; 0xf0
   11456:	4003      	ands	r3, r0
   11458:	2000      	movs	r0, #0
   1145a:	2b20      	cmp	r3, #32
   1145c:	d001      	beq.n	11462 <MQTTDeserialize_connack+0x1e>
   1145e:	b002      	add	sp, #8
   11460:	bd70      	pop	{r4, r5, r6, pc}
   11462:	4669      	mov	r1, sp
   11464:	9801      	ldr	r0, [sp, #4]
   11466:	4b0a      	ldr	r3, [pc, #40]	; (11490 <MQTTDeserialize_connack+0x4c>)
   11468:	4798      	blx	r3
   1146a:	9b01      	ldr	r3, [sp, #4]
   1146c:	181b      	adds	r3, r3, r0
   1146e:	9301      	str	r3, [sp, #4]
   11470:	9b00      	ldr	r3, [sp, #0]
   11472:	2b01      	cmp	r3, #1
   11474:	ddf3      	ble.n	1145e <MQTTDeserialize_connack+0x1a>
   11476:	a801      	add	r0, sp, #4
   11478:	4e04      	ldr	r6, [pc, #16]	; (1148c <MQTTDeserialize_connack+0x48>)
   1147a:	47b0      	blx	r6
   1147c:	0600      	lsls	r0, r0, #24
   1147e:	0fc0      	lsrs	r0, r0, #31
   11480:	7028      	strb	r0, [r5, #0]
   11482:	a801      	add	r0, sp, #4
   11484:	47b0      	blx	r6
   11486:	7020      	strb	r0, [r4, #0]
   11488:	2001      	movs	r0, #1
   1148a:	e7e8      	b.n	1145e <MQTTDeserialize_connack+0x1a>
   1148c:	000116d7 	.word	0x000116d7
   11490:	000116a9 	.word	0x000116a9

00011494 <MQTTSerialize_zero>:
   11494:	b510      	push	{r4, lr}
   11496:	b082      	sub	sp, #8
   11498:	0004      	movs	r4, r0
   1149a:	9001      	str	r0, [sp, #4]
   1149c:	2901      	cmp	r1, #1
   1149e:	dd0f      	ble.n	114c0 <MQTTSerialize_zero+0x2c>
   114a0:	210f      	movs	r1, #15
   114a2:	4011      	ands	r1, r2
   114a4:	0109      	lsls	r1, r1, #4
   114a6:	a801      	add	r0, sp, #4
   114a8:	4b07      	ldr	r3, [pc, #28]	; (114c8 <MQTTSerialize_zero+0x34>)
   114aa:	4798      	blx	r3
   114ac:	2100      	movs	r1, #0
   114ae:	9801      	ldr	r0, [sp, #4]
   114b0:	4b06      	ldr	r3, [pc, #24]	; (114cc <MQTTSerialize_zero+0x38>)
   114b2:	4798      	blx	r3
   114b4:	9b01      	ldr	r3, [sp, #4]
   114b6:	469c      	mov	ip, r3
   114b8:	4460      	add	r0, ip
   114ba:	1b00      	subs	r0, r0, r4
   114bc:	b002      	add	sp, #8
   114be:	bd10      	pop	{r4, pc}
   114c0:	2002      	movs	r0, #2
   114c2:	4240      	negs	r0, r0
   114c4:	e7fa      	b.n	114bc <MQTTSerialize_zero+0x28>
   114c6:	46c0      	nop			; (mov r8, r8)
   114c8:	000116e3 	.word	0x000116e3
   114cc:	000115f9 	.word	0x000115f9

000114d0 <MQTTSerialize_disconnect>:
   114d0:	b510      	push	{r4, lr}
   114d2:	220e      	movs	r2, #14
   114d4:	4b01      	ldr	r3, [pc, #4]	; (114dc <MQTTSerialize_disconnect+0xc>)
   114d6:	4798      	blx	r3
   114d8:	bd10      	pop	{r4, pc}
   114da:	46c0      	nop			; (mov r8, r8)
   114dc:	00011495 	.word	0x00011495

000114e0 <MQTTSerialize_pingreq>:
   114e0:	b510      	push	{r4, lr}
   114e2:	220c      	movs	r2, #12
   114e4:	4b01      	ldr	r3, [pc, #4]	; (114ec <MQTTSerialize_pingreq+0xc>)
   114e6:	4798      	blx	r3
   114e8:	bd10      	pop	{r4, pc}
   114ea:	46c0      	nop			; (mov r8, r8)
   114ec:	00011495 	.word	0x00011495

000114f0 <MQTTDeserialize_publish>:
   114f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   114f2:	b085      	sub	sp, #20
   114f4:	0005      	movs	r5, r0
   114f6:	000e      	movs	r6, r1
   114f8:	0014      	movs	r4, r2
   114fa:	9301      	str	r3, [sp, #4]
   114fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   114fe:	9303      	str	r3, [sp, #12]
   11500:	2300      	movs	r3, #0
   11502:	9302      	str	r3, [sp, #8]
   11504:	a803      	add	r0, sp, #12
   11506:	4b1c      	ldr	r3, [pc, #112]	; (11578 <MQTTDeserialize_publish+0x88>)
   11508:	4798      	blx	r3
   1150a:	0003      	movs	r3, r0
   1150c:	22f0      	movs	r2, #240	; 0xf0
   1150e:	4010      	ands	r0, r2
   11510:	2700      	movs	r7, #0
   11512:	2830      	cmp	r0, #48	; 0x30
   11514:	d002      	beq.n	1151c <MQTTDeserialize_publish+0x2c>
   11516:	0038      	movs	r0, r7
   11518:	b005      	add	sp, #20
   1151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1151c:	071a      	lsls	r2, r3, #28
   1151e:	0fd2      	lsrs	r2, r2, #31
   11520:	702a      	strb	r2, [r5, #0]
   11522:	075a      	lsls	r2, r3, #29
   11524:	0f92      	lsrs	r2, r2, #30
   11526:	6032      	str	r2, [r6, #0]
   11528:	07db      	lsls	r3, r3, #31
   1152a:	0fdb      	lsrs	r3, r3, #31
   1152c:	7023      	strb	r3, [r4, #0]
   1152e:	a902      	add	r1, sp, #8
   11530:	9803      	ldr	r0, [sp, #12]
   11532:	4b12      	ldr	r3, [pc, #72]	; (1157c <MQTTDeserialize_publish+0x8c>)
   11534:	4798      	blx	r3
   11536:	0007      	movs	r7, r0
   11538:	9b03      	ldr	r3, [sp, #12]
   1153a:	181c      	adds	r4, r3, r0
   1153c:	9403      	str	r4, [sp, #12]
   1153e:	9b02      	ldr	r3, [sp, #8]
   11540:	469c      	mov	ip, r3
   11542:	4464      	add	r4, ip
   11544:	0022      	movs	r2, r4
   11546:	a903      	add	r1, sp, #12
   11548:	980a      	ldr	r0, [sp, #40]	; 0x28
   1154a:	4b0d      	ldr	r3, [pc, #52]	; (11580 <MQTTDeserialize_publish+0x90>)
   1154c:	4798      	blx	r3
   1154e:	2800      	cmp	r0, #0
   11550:	d0e1      	beq.n	11516 <MQTTDeserialize_publish+0x26>
   11552:	9b03      	ldr	r3, [sp, #12]
   11554:	1ae3      	subs	r3, r4, r3
   11556:	d4de      	bmi.n	11516 <MQTTDeserialize_publish+0x26>
   11558:	6833      	ldr	r3, [r6, #0]
   1155a:	2b00      	cmp	r3, #0
   1155c:	dd04      	ble.n	11568 <MQTTDeserialize_publish+0x78>
   1155e:	a803      	add	r0, sp, #12
   11560:	4b08      	ldr	r3, [pc, #32]	; (11584 <MQTTDeserialize_publish+0x94>)
   11562:	4798      	blx	r3
   11564:	9b01      	ldr	r3, [sp, #4]
   11566:	8018      	strh	r0, [r3, #0]
   11568:	9b03      	ldr	r3, [sp, #12]
   1156a:	1ae4      	subs	r4, r4, r3
   1156c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1156e:	6014      	str	r4, [r2, #0]
   11570:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11572:	6013      	str	r3, [r2, #0]
   11574:	2701      	movs	r7, #1
   11576:	e7ce      	b.n	11516 <MQTTDeserialize_publish+0x26>
   11578:	000116d7 	.word	0x000116d7
   1157c:	000116a9 	.word	0x000116a9
   11580:	0001179d 	.word	0x0001179d
   11584:	000116c5 	.word	0x000116c5

00011588 <MQTTDeserialize_ack>:
   11588:	b570      	push	{r4, r5, r6, lr}
   1158a:	b082      	sub	sp, #8
   1158c:	0005      	movs	r5, r0
   1158e:	000e      	movs	r6, r1
   11590:	0014      	movs	r4, r2
   11592:	9301      	str	r3, [sp, #4]
   11594:	a801      	add	r0, sp, #4
   11596:	4b0c      	ldr	r3, [pc, #48]	; (115c8 <MQTTDeserialize_ack+0x40>)
   11598:	4798      	blx	r3
   1159a:	0703      	lsls	r3, r0, #28
   1159c:	0fdb      	lsrs	r3, r3, #31
   1159e:	7033      	strb	r3, [r6, #0]
   115a0:	0600      	lsls	r0, r0, #24
   115a2:	0f00      	lsrs	r0, r0, #28
   115a4:	7028      	strb	r0, [r5, #0]
   115a6:	4669      	mov	r1, sp
   115a8:	9801      	ldr	r0, [sp, #4]
   115aa:	4b08      	ldr	r3, [pc, #32]	; (115cc <MQTTDeserialize_ack+0x44>)
   115ac:	4798      	blx	r3
   115ae:	9b01      	ldr	r3, [sp, #4]
   115b0:	181b      	adds	r3, r3, r0
   115b2:	9301      	str	r3, [sp, #4]
   115b4:	9b00      	ldr	r3, [sp, #0]
   115b6:	2b01      	cmp	r3, #1
   115b8:	dd04      	ble.n	115c4 <MQTTDeserialize_ack+0x3c>
   115ba:	a801      	add	r0, sp, #4
   115bc:	4b04      	ldr	r3, [pc, #16]	; (115d0 <MQTTDeserialize_ack+0x48>)
   115be:	4798      	blx	r3
   115c0:	8020      	strh	r0, [r4, #0]
   115c2:	2001      	movs	r0, #1
   115c4:	b002      	add	sp, #8
   115c6:	bd70      	pop	{r4, r5, r6, pc}
   115c8:	000116d7 	.word	0x000116d7
   115cc:	000116a9 	.word	0x000116a9
   115d0:	000116c5 	.word	0x000116c5

000115d4 <bufchar>:
   115d4:	b530      	push	{r4, r5, lr}
   115d6:	2900      	cmp	r1, #0
   115d8:	dd0a      	ble.n	115f0 <bufchar+0x1c>
   115da:	4b06      	ldr	r3, [pc, #24]	; (115f4 <bufchar+0x20>)
   115dc:	681b      	ldr	r3, [r3, #0]
   115de:	185d      	adds	r5, r3, r1
   115e0:	002c      	movs	r4, r5
   115e2:	781a      	ldrb	r2, [r3, #0]
   115e4:	7002      	strb	r2, [r0, #0]
   115e6:	3301      	adds	r3, #1
   115e8:	42a3      	cmp	r3, r4
   115ea:	d1fa      	bne.n	115e2 <bufchar+0xe>
   115ec:	4b01      	ldr	r3, [pc, #4]	; (115f4 <bufchar+0x20>)
   115ee:	601d      	str	r5, [r3, #0]
   115f0:	0008      	movs	r0, r1
   115f2:	bd30      	pop	{r4, r5, pc}
   115f4:	200042f4 	.word	0x200042f4

000115f8 <MQTTPacket_encode>:
   115f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   115fa:	b083      	sub	sp, #12
   115fc:	2500      	movs	r5, #0
   115fe:	267f      	movs	r6, #127	; 0x7f
   11600:	2780      	movs	r7, #128	; 0x80
   11602:	427f      	negs	r7, r7
   11604:	9501      	str	r5, [sp, #4]
   11606:	17ca      	asrs	r2, r1, #31
   11608:	0e54      	lsrs	r4, r2, #25
   1160a:	190b      	adds	r3, r1, r4
   1160c:	4033      	ands	r3, r6
   1160e:	1b1b      	subs	r3, r3, r4
   11610:	b2db      	uxtb	r3, r3
   11612:	4032      	ands	r2, r6
   11614:	1851      	adds	r1, r2, r1
   11616:	11c9      	asrs	r1, r1, #7
   11618:	2900      	cmp	r1, #0
   1161a:	dd03      	ble.n	11624 <MQTTPacket_encode+0x2c>
   1161c:	433b      	orrs	r3, r7
   1161e:	5543      	strb	r3, [r0, r5]
   11620:	3501      	adds	r5, #1
   11622:	e7ef      	b.n	11604 <MQTTPacket_encode+0xc>
   11624:	5543      	strb	r3, [r0, r5]
   11626:	9801      	ldr	r0, [sp, #4]
   11628:	3001      	adds	r0, #1
   1162a:	b003      	add	sp, #12
   1162c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001162e <MQTTPacket_decode>:
   1162e:	b5f0      	push	{r4, r5, r6, r7, lr}
   11630:	46ce      	mov	lr, r9
   11632:	4647      	mov	r7, r8
   11634:	b580      	push	{r7, lr}
   11636:	b083      	sub	sp, #12
   11638:	4680      	mov	r8, r0
   1163a:	000f      	movs	r7, r1
   1163c:	2300      	movs	r3, #0
   1163e:	600b      	str	r3, [r1, #0]
   11640:	2401      	movs	r4, #1
   11642:	2601      	movs	r6, #1
   11644:	466b      	mov	r3, sp
   11646:	1ddd      	adds	r5, r3, #7
   11648:	237f      	movs	r3, #127	; 0x7f
   1164a:	4699      	mov	r9, r3
   1164c:	2101      	movs	r1, #1
   1164e:	0028      	movs	r0, r5
   11650:	47c0      	blx	r8
   11652:	2801      	cmp	r0, #1
   11654:	d10e      	bne.n	11674 <MQTTPacket_decode+0x46>
   11656:	782b      	ldrb	r3, [r5, #0]
   11658:	464a      	mov	r2, r9
   1165a:	401a      	ands	r2, r3
   1165c:	4372      	muls	r2, r6
   1165e:	6839      	ldr	r1, [r7, #0]
   11660:	468c      	mov	ip, r1
   11662:	4462      	add	r2, ip
   11664:	603a      	str	r2, [r7, #0]
   11666:	01f6      	lsls	r6, r6, #7
   11668:	b25b      	sxtb	r3, r3
   1166a:	2b00      	cmp	r3, #0
   1166c:	da02      	bge.n	11674 <MQTTPacket_decode+0x46>
   1166e:	3401      	adds	r4, #1
   11670:	2c05      	cmp	r4, #5
   11672:	d1eb      	bne.n	1164c <MQTTPacket_decode+0x1e>
   11674:	0020      	movs	r0, r4
   11676:	b003      	add	sp, #12
   11678:	bc0c      	pop	{r2, r3}
   1167a:	4690      	mov	r8, r2
   1167c:	4699      	mov	r9, r3
   1167e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011680 <MQTTPacket_len>:
   11680:	0003      	movs	r3, r0
   11682:	1c42      	adds	r2, r0, #1
   11684:	3002      	adds	r0, #2
   11686:	2a7f      	cmp	r2, #127	; 0x7f
   11688:	dd07      	ble.n	1169a <MQTTPacket_len+0x1a>
   1168a:	4905      	ldr	r1, [pc, #20]	; (116a0 <MQTTPacket_len+0x20>)
   1168c:	1cd8      	adds	r0, r3, #3
   1168e:	428a      	cmp	r2, r1
   11690:	dd03      	ble.n	1169a <MQTTPacket_len+0x1a>
   11692:	4904      	ldr	r1, [pc, #16]	; (116a4 <MQTTPacket_len+0x24>)
   11694:	1d58      	adds	r0, r3, #5
   11696:	428a      	cmp	r2, r1
   11698:	dd00      	ble.n	1169c <MQTTPacket_len+0x1c>
   1169a:	4770      	bx	lr
   1169c:	1d18      	adds	r0, r3, #4
   1169e:	e7fc      	b.n	1169a <MQTTPacket_len+0x1a>
   116a0:	00003fff 	.word	0x00003fff
   116a4:	001ffffe 	.word	0x001ffffe

000116a8 <MQTTPacket_decodeBuf>:
   116a8:	b510      	push	{r4, lr}
   116aa:	4b03      	ldr	r3, [pc, #12]	; (116b8 <MQTTPacket_decodeBuf+0x10>)
   116ac:	6018      	str	r0, [r3, #0]
   116ae:	4803      	ldr	r0, [pc, #12]	; (116bc <MQTTPacket_decodeBuf+0x14>)
   116b0:	4b03      	ldr	r3, [pc, #12]	; (116c0 <MQTTPacket_decodeBuf+0x18>)
   116b2:	4798      	blx	r3
   116b4:	bd10      	pop	{r4, pc}
   116b6:	46c0      	nop			; (mov r8, r8)
   116b8:	200042f4 	.word	0x200042f4
   116bc:	000115d5 	.word	0x000115d5
   116c0:	0001162f 	.word	0x0001162f

000116c4 <readInt>:
   116c4:	0001      	movs	r1, r0
   116c6:	6802      	ldr	r2, [r0, #0]
   116c8:	7813      	ldrb	r3, [r2, #0]
   116ca:	021b      	lsls	r3, r3, #8
   116cc:	7850      	ldrb	r0, [r2, #1]
   116ce:	1818      	adds	r0, r3, r0
   116d0:	3202      	adds	r2, #2
   116d2:	600a      	str	r2, [r1, #0]
   116d4:	4770      	bx	lr

000116d6 <readChar>:
   116d6:	0002      	movs	r2, r0
   116d8:	6803      	ldr	r3, [r0, #0]
   116da:	7818      	ldrb	r0, [r3, #0]
   116dc:	3301      	adds	r3, #1
   116de:	6013      	str	r3, [r2, #0]
   116e0:	4770      	bx	lr

000116e2 <writeChar>:
   116e2:	6803      	ldr	r3, [r0, #0]
   116e4:	7019      	strb	r1, [r3, #0]
   116e6:	6803      	ldr	r3, [r0, #0]
   116e8:	3301      	adds	r3, #1
   116ea:	6003      	str	r3, [r0, #0]
   116ec:	4770      	bx	lr

000116ee <writeInt>:
   116ee:	b530      	push	{r4, r5, lr}
   116f0:	17ca      	asrs	r2, r1, #31
   116f2:	23ff      	movs	r3, #255	; 0xff
   116f4:	001c      	movs	r4, r3
   116f6:	4014      	ands	r4, r2
   116f8:	1864      	adds	r4, r4, r1
   116fa:	1224      	asrs	r4, r4, #8
   116fc:	6805      	ldr	r5, [r0, #0]
   116fe:	702c      	strb	r4, [r5, #0]
   11700:	6804      	ldr	r4, [r0, #0]
   11702:	1c65      	adds	r5, r4, #1
   11704:	6005      	str	r5, [r0, #0]
   11706:	0e12      	lsrs	r2, r2, #24
   11708:	1889      	adds	r1, r1, r2
   1170a:	400b      	ands	r3, r1
   1170c:	1a9b      	subs	r3, r3, r2
   1170e:	7063      	strb	r3, [r4, #1]
   11710:	6803      	ldr	r3, [r0, #0]
   11712:	3301      	adds	r3, #1
   11714:	6003      	str	r3, [r0, #0]
   11716:	bd30      	pop	{r4, r5, pc}

00011718 <writeCString>:
   11718:	b570      	push	{r4, r5, r6, lr}
   1171a:	0004      	movs	r4, r0
   1171c:	000e      	movs	r6, r1
   1171e:	0008      	movs	r0, r1
   11720:	4b08      	ldr	r3, [pc, #32]	; (11744 <writeCString+0x2c>)
   11722:	4798      	blx	r3
   11724:	0005      	movs	r5, r0
   11726:	0001      	movs	r1, r0
   11728:	0020      	movs	r0, r4
   1172a:	4b07      	ldr	r3, [pc, #28]	; (11748 <writeCString+0x30>)
   1172c:	4798      	blx	r3
   1172e:	002a      	movs	r2, r5
   11730:	0031      	movs	r1, r6
   11732:	6820      	ldr	r0, [r4, #0]
   11734:	4b05      	ldr	r3, [pc, #20]	; (1174c <writeCString+0x34>)
   11736:	4798      	blx	r3
   11738:	6823      	ldr	r3, [r4, #0]
   1173a:	469c      	mov	ip, r3
   1173c:	4465      	add	r5, ip
   1173e:	6025      	str	r5, [r4, #0]
   11740:	bd70      	pop	{r4, r5, r6, pc}
   11742:	46c0      	nop			; (mov r8, r8)
   11744:	00014633 	.word	0x00014633
   11748:	000116ef 	.word	0x000116ef
   1174c:	00014245 	.word	0x00014245

00011750 <writeMQTTString>:
   11750:	b530      	push	{r4, r5, lr}
   11752:	b085      	sub	sp, #20
   11754:	0005      	movs	r5, r0
   11756:	9101      	str	r1, [sp, #4]
   11758:	9303      	str	r3, [sp, #12]
   1175a:	1e14      	subs	r4, r2, #0
   1175c:	dc06      	bgt.n	1176c <writeMQTTString+0x1c>
   1175e:	9901      	ldr	r1, [sp, #4]
   11760:	2900      	cmp	r1, #0
   11762:	d010      	beq.n	11786 <writeMQTTString+0x36>
   11764:	4b0a      	ldr	r3, [pc, #40]	; (11790 <writeMQTTString+0x40>)
   11766:	4798      	blx	r3
   11768:	b005      	add	sp, #20
   1176a:	bd30      	pop	{r4, r5, pc}
   1176c:	0011      	movs	r1, r2
   1176e:	4b09      	ldr	r3, [pc, #36]	; (11794 <writeMQTTString+0x44>)
   11770:	4798      	blx	r3
   11772:	0022      	movs	r2, r4
   11774:	9903      	ldr	r1, [sp, #12]
   11776:	6828      	ldr	r0, [r5, #0]
   11778:	4b07      	ldr	r3, [pc, #28]	; (11798 <writeMQTTString+0x48>)
   1177a:	4798      	blx	r3
   1177c:	682b      	ldr	r3, [r5, #0]
   1177e:	469c      	mov	ip, r3
   11780:	4464      	add	r4, ip
   11782:	602c      	str	r4, [r5, #0]
   11784:	e7f0      	b.n	11768 <writeMQTTString+0x18>
   11786:	2100      	movs	r1, #0
   11788:	4b02      	ldr	r3, [pc, #8]	; (11794 <writeMQTTString+0x44>)
   1178a:	4798      	blx	r3
   1178c:	e7ec      	b.n	11768 <writeMQTTString+0x18>
   1178e:	46c0      	nop			; (mov r8, r8)
   11790:	00011719 	.word	0x00011719
   11794:	000116ef 	.word	0x000116ef
   11798:	00014245 	.word	0x00014245

0001179c <readMQTTLenString>:
   1179c:	b570      	push	{r4, r5, r6, lr}
   1179e:	0005      	movs	r5, r0
   117a0:	000c      	movs	r4, r1
   117a2:	0016      	movs	r6, r2
   117a4:	680b      	ldr	r3, [r1, #0]
   117a6:	1ad3      	subs	r3, r2, r3
   117a8:	2b01      	cmp	r3, #1
   117aa:	dd12      	ble.n	117d2 <readMQTTLenString+0x36>
   117ac:	0008      	movs	r0, r1
   117ae:	4b0a      	ldr	r3, [pc, #40]	; (117d8 <readMQTTLenString+0x3c>)
   117b0:	4798      	blx	r3
   117b2:	6068      	str	r0, [r5, #4]
   117b4:	6822      	ldr	r2, [r4, #0]
   117b6:	1811      	adds	r1, r2, r0
   117b8:	2300      	movs	r3, #0
   117ba:	428e      	cmp	r6, r1
   117bc:	d305      	bcc.n	117ca <readMQTTLenString+0x2e>
   117be:	60aa      	str	r2, [r5, #8]
   117c0:	6823      	ldr	r3, [r4, #0]
   117c2:	469c      	mov	ip, r3
   117c4:	4460      	add	r0, ip
   117c6:	6020      	str	r0, [r4, #0]
   117c8:	2301      	movs	r3, #1
   117ca:	2200      	movs	r2, #0
   117cc:	602a      	str	r2, [r5, #0]
   117ce:	0018      	movs	r0, r3
   117d0:	bd70      	pop	{r4, r5, r6, pc}
   117d2:	2300      	movs	r3, #0
   117d4:	e7f9      	b.n	117ca <readMQTTLenString+0x2e>
   117d6:	46c0      	nop			; (mov r8, r8)
   117d8:	000116c5 	.word	0x000116c5

000117dc <MQTTstrlen>:
   117dc:	b500      	push	{lr}
   117de:	b085      	sub	sp, #20
   117e0:	9102      	str	r1, [sp, #8]
   117e2:	2800      	cmp	r0, #0
   117e4:	d003      	beq.n	117ee <MQTTstrlen+0x12>
   117e6:	4b03      	ldr	r3, [pc, #12]	; (117f4 <MQTTstrlen+0x18>)
   117e8:	4798      	blx	r3
   117ea:	b005      	add	sp, #20
   117ec:	bd00      	pop	{pc}
   117ee:	9802      	ldr	r0, [sp, #8]
   117f0:	e7fb      	b.n	117ea <MQTTstrlen+0xe>
   117f2:	46c0      	nop			; (mov r8, r8)
   117f4:	00014633 	.word	0x00014633

000117f8 <MQTTPacket_equals>:
   117f8:	b570      	push	{r4, r5, r6, lr}
   117fa:	000d      	movs	r5, r1
   117fc:	6806      	ldr	r6, [r0, #0]
   117fe:	2e00      	cmp	r6, #0
   11800:	d00b      	beq.n	1181a <MQTTPacket_equals+0x22>
   11802:	0030      	movs	r0, r6
   11804:	4b0b      	ldr	r3, [pc, #44]	; (11834 <MQTTPacket_equals+0x3c>)
   11806:	4798      	blx	r3
   11808:	0004      	movs	r4, r0
   1180a:	0028      	movs	r0, r5
   1180c:	4b09      	ldr	r3, [pc, #36]	; (11834 <MQTTPacket_equals+0x3c>)
   1180e:	4798      	blx	r3
   11810:	2300      	movs	r3, #0
   11812:	4284      	cmp	r4, r0
   11814:	d004      	beq.n	11820 <MQTTPacket_equals+0x28>
   11816:	0018      	movs	r0, r3
   11818:	bd70      	pop	{r4, r5, r6, pc}
   1181a:	6886      	ldr	r6, [r0, #8]
   1181c:	6844      	ldr	r4, [r0, #4]
   1181e:	e7f4      	b.n	1180a <MQTTPacket_equals+0x12>
   11820:	0022      	movs	r2, r4
   11822:	0029      	movs	r1, r5
   11824:	0030      	movs	r0, r6
   11826:	4b04      	ldr	r3, [pc, #16]	; (11838 <MQTTPacket_equals+0x40>)
   11828:	4798      	blx	r3
   1182a:	4243      	negs	r3, r0
   1182c:	4143      	adcs	r3, r0
   1182e:	b2db      	uxtb	r3, r3
   11830:	e7f1      	b.n	11816 <MQTTPacket_equals+0x1e>
   11832:	46c0      	nop			; (mov r8, r8)
   11834:	00014633 	.word	0x00014633
   11838:	00014641 	.word	0x00014641

0001183c <MQTTSerialize_publishLength>:
   1183c:	b510      	push	{r4, lr}
   1183e:	b084      	sub	sp, #16
   11840:	0004      	movs	r4, r0
   11842:	0008      	movs	r0, r1
   11844:	0011      	movs	r1, r2
   11846:	001a      	movs	r2, r3
   11848:	4b05      	ldr	r3, [pc, #20]	; (11860 <MQTTSerialize_publishLength+0x24>)
   1184a:	4798      	blx	r3
   1184c:	3002      	adds	r0, #2
   1184e:	9b06      	ldr	r3, [sp, #24]
   11850:	469c      	mov	ip, r3
   11852:	4460      	add	r0, ip
   11854:	2c00      	cmp	r4, #0
   11856:	dd00      	ble.n	1185a <MQTTSerialize_publishLength+0x1e>
   11858:	3002      	adds	r0, #2
   1185a:	b004      	add	sp, #16
   1185c:	bd10      	pop	{r4, pc}
   1185e:	46c0      	nop			; (mov r8, r8)
   11860:	000117dd 	.word	0x000117dd

00011864 <MQTTSerialize_publish>:
   11864:	b5f0      	push	{r4, r5, r6, r7, lr}
   11866:	46de      	mov	lr, fp
   11868:	4657      	mov	r7, sl
   1186a:	464e      	mov	r6, r9
   1186c:	b5c0      	push	{r6, r7, lr}
   1186e:	b084      	sub	sp, #16
   11870:	0007      	movs	r7, r0
   11872:	468b      	mov	fp, r1
   11874:	4692      	mov	sl, r2
   11876:	001e      	movs	r6, r3
   11878:	ab0c      	add	r3, sp, #48	; 0x30
   1187a:	781b      	ldrb	r3, [r3, #0]
   1187c:	4699      	mov	r9, r3
   1187e:	ab0d      	add	r3, sp, #52	; 0x34
   11880:	881c      	ldrh	r4, [r3, #0]
   11882:	9003      	str	r0, [sp, #12]
   11884:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11886:	9300      	str	r3, [sp, #0]
   11888:	990e      	ldr	r1, [sp, #56]	; 0x38
   1188a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1188c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1188e:	0030      	movs	r0, r6
   11890:	4d1f      	ldr	r5, [pc, #124]	; (11910 <MQTTSerialize_publish+0xac>)
   11892:	47a8      	blx	r5
   11894:	0005      	movs	r5, r0
   11896:	4b1f      	ldr	r3, [pc, #124]	; (11914 <MQTTSerialize_publish+0xb0>)
   11898:	4798      	blx	r3
   1189a:	4558      	cmp	r0, fp
   1189c:	dc34      	bgt.n	11908 <MQTTSerialize_publish+0xa4>
   1189e:	2201      	movs	r2, #1
   118a0:	4653      	mov	r3, sl
   118a2:	4013      	ands	r3, r2
   118a4:	00db      	lsls	r3, r3, #3
   118a6:	2103      	movs	r1, #3
   118a8:	4031      	ands	r1, r6
   118aa:	0048      	lsls	r0, r1, #1
   118ac:	2130      	movs	r1, #48	; 0x30
   118ae:	4319      	orrs	r1, r3
   118b0:	4301      	orrs	r1, r0
   118b2:	464b      	mov	r3, r9
   118b4:	4013      	ands	r3, r2
   118b6:	4391      	bics	r1, r2
   118b8:	4319      	orrs	r1, r3
   118ba:	a803      	add	r0, sp, #12
   118bc:	4b16      	ldr	r3, [pc, #88]	; (11918 <MQTTSerialize_publish+0xb4>)
   118be:	4798      	blx	r3
   118c0:	0029      	movs	r1, r5
   118c2:	9803      	ldr	r0, [sp, #12]
   118c4:	4b15      	ldr	r3, [pc, #84]	; (1191c <MQTTSerialize_publish+0xb8>)
   118c6:	4798      	blx	r3
   118c8:	9b03      	ldr	r3, [sp, #12]
   118ca:	469c      	mov	ip, r3
   118cc:	4460      	add	r0, ip
   118ce:	9003      	str	r0, [sp, #12]
   118d0:	990e      	ldr	r1, [sp, #56]	; 0x38
   118d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   118d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   118d6:	a803      	add	r0, sp, #12
   118d8:	4d11      	ldr	r5, [pc, #68]	; (11920 <MQTTSerialize_publish+0xbc>)
   118da:	47a8      	blx	r5
   118dc:	2e00      	cmp	r6, #0
   118de:	dd03      	ble.n	118e8 <MQTTSerialize_publish+0x84>
   118e0:	0021      	movs	r1, r4
   118e2:	a803      	add	r0, sp, #12
   118e4:	4b0f      	ldr	r3, [pc, #60]	; (11924 <MQTTSerialize_publish+0xc0>)
   118e6:	4798      	blx	r3
   118e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   118ea:	9911      	ldr	r1, [sp, #68]	; 0x44
   118ec:	9803      	ldr	r0, [sp, #12]
   118ee:	4b0e      	ldr	r3, [pc, #56]	; (11928 <MQTTSerialize_publish+0xc4>)
   118f0:	4798      	blx	r3
   118f2:	9b03      	ldr	r3, [sp, #12]
   118f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   118f6:	4694      	mov	ip, r2
   118f8:	4463      	add	r3, ip
   118fa:	1bd8      	subs	r0, r3, r7
   118fc:	b004      	add	sp, #16
   118fe:	bc1c      	pop	{r2, r3, r4}
   11900:	4691      	mov	r9, r2
   11902:	469a      	mov	sl, r3
   11904:	46a3      	mov	fp, r4
   11906:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11908:	2002      	movs	r0, #2
   1190a:	4240      	negs	r0, r0
   1190c:	e7f6      	b.n	118fc <MQTTSerialize_publish+0x98>
   1190e:	46c0      	nop			; (mov r8, r8)
   11910:	0001183d 	.word	0x0001183d
   11914:	00011681 	.word	0x00011681
   11918:	000116e3 	.word	0x000116e3
   1191c:	000115f9 	.word	0x000115f9
   11920:	00011751 	.word	0x00011751
   11924:	000116ef 	.word	0x000116ef
   11928:	00014245 	.word	0x00014245

0001192c <MQTTSerialize_ack>:
   1192c:	b530      	push	{r4, r5, lr}
   1192e:	b083      	sub	sp, #12
   11930:	0004      	movs	r4, r0
   11932:	a806      	add	r0, sp, #24
   11934:	8805      	ldrh	r5, [r0, #0]
   11936:	9401      	str	r4, [sp, #4]
   11938:	2903      	cmp	r1, #3
   1193a:	dd1e      	ble.n	1197a <MQTTSerialize_ack+0x4e>
   1193c:	210f      	movs	r1, #15
   1193e:	4011      	ands	r1, r2
   11940:	2001      	movs	r0, #1
   11942:	4003      	ands	r3, r0
   11944:	00db      	lsls	r3, r3, #3
   11946:	0109      	lsls	r1, r1, #4
   11948:	3a06      	subs	r2, #6
   1194a:	4250      	negs	r0, r2
   1194c:	4142      	adcs	r2, r0
   1194e:	0052      	lsls	r2, r2, #1
   11950:	4319      	orrs	r1, r3
   11952:	4311      	orrs	r1, r2
   11954:	a801      	add	r0, sp, #4
   11956:	4b0a      	ldr	r3, [pc, #40]	; (11980 <MQTTSerialize_ack+0x54>)
   11958:	4798      	blx	r3
   1195a:	2102      	movs	r1, #2
   1195c:	9801      	ldr	r0, [sp, #4]
   1195e:	4b09      	ldr	r3, [pc, #36]	; (11984 <MQTTSerialize_ack+0x58>)
   11960:	4798      	blx	r3
   11962:	9b01      	ldr	r3, [sp, #4]
   11964:	469c      	mov	ip, r3
   11966:	4460      	add	r0, ip
   11968:	9001      	str	r0, [sp, #4]
   1196a:	0029      	movs	r1, r5
   1196c:	a801      	add	r0, sp, #4
   1196e:	4b06      	ldr	r3, [pc, #24]	; (11988 <MQTTSerialize_ack+0x5c>)
   11970:	4798      	blx	r3
   11972:	9b01      	ldr	r3, [sp, #4]
   11974:	1b18      	subs	r0, r3, r4
   11976:	b003      	add	sp, #12
   11978:	bd30      	pop	{r4, r5, pc}
   1197a:	2002      	movs	r0, #2
   1197c:	4240      	negs	r0, r0
   1197e:	e7fa      	b.n	11976 <MQTTSerialize_ack+0x4a>
   11980:	000116e3 	.word	0x000116e3
   11984:	000115f9 	.word	0x000115f9
   11988:	000116ef 	.word	0x000116ef

0001198c <MQTTSerialize_subscribeLength>:
   1198c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1198e:	46c6      	mov	lr, r8
   11990:	b500      	push	{lr}
   11992:	1e07      	subs	r7, r0, #0
   11994:	dd12      	ble.n	119bc <MQTTSerialize_subscribeLength+0x30>
   11996:	000c      	movs	r4, r1
   11998:	2602      	movs	r6, #2
   1199a:	2500      	movs	r5, #0
   1199c:	4b08      	ldr	r3, [pc, #32]	; (119c0 <MQTTSerialize_subscribeLength+0x34>)
   1199e:	4698      	mov	r8, r3
   119a0:	6820      	ldr	r0, [r4, #0]
   119a2:	6861      	ldr	r1, [r4, #4]
   119a4:	68a2      	ldr	r2, [r4, #8]
   119a6:	47c0      	blx	r8
   119a8:	3003      	adds	r0, #3
   119aa:	1836      	adds	r6, r6, r0
   119ac:	3501      	adds	r5, #1
   119ae:	340c      	adds	r4, #12
   119b0:	42af      	cmp	r7, r5
   119b2:	d1f5      	bne.n	119a0 <MQTTSerialize_subscribeLength+0x14>
   119b4:	0030      	movs	r0, r6
   119b6:	bc04      	pop	{r2}
   119b8:	4690      	mov	r8, r2
   119ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119bc:	2602      	movs	r6, #2
   119be:	e7f9      	b.n	119b4 <MQTTSerialize_subscribeLength+0x28>
   119c0:	000117dd 	.word	0x000117dd

000119c4 <MQTTSerialize_subscribe>:
   119c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   119c6:	46d6      	mov	lr, sl
   119c8:	464f      	mov	r7, r9
   119ca:	4646      	mov	r6, r8
   119cc:	b5c0      	push	{r6, r7, lr}
   119ce:	b084      	sub	sp, #16
   119d0:	4682      	mov	sl, r0
   119d2:	000e      	movs	r6, r1
   119d4:	0015      	movs	r5, r2
   119d6:	9301      	str	r3, [sp, #4]
   119d8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   119da:	9003      	str	r0, [sp, #12]
   119dc:	990d      	ldr	r1, [sp, #52]	; 0x34
   119de:	0038      	movs	r0, r7
   119e0:	4b1f      	ldr	r3, [pc, #124]	; (11a60 <MQTTSerialize_subscribe+0x9c>)
   119e2:	4798      	blx	r3
   119e4:	0004      	movs	r4, r0
   119e6:	4b1f      	ldr	r3, [pc, #124]	; (11a64 <MQTTSerialize_subscribe+0xa0>)
   119e8:	4798      	blx	r3
   119ea:	42b0      	cmp	r0, r6
   119ec:	dc34      	bgt.n	11a58 <MQTTSerialize_subscribe+0x94>
   119ee:	2101      	movs	r1, #1
   119f0:	4029      	ands	r1, r5
   119f2:	00ca      	lsls	r2, r1, #3
   119f4:	2180      	movs	r1, #128	; 0x80
   119f6:	4311      	orrs	r1, r2
   119f8:	2302      	movs	r3, #2
   119fa:	4319      	orrs	r1, r3
   119fc:	a803      	add	r0, sp, #12
   119fe:	4b1a      	ldr	r3, [pc, #104]	; (11a68 <MQTTSerialize_subscribe+0xa4>)
   11a00:	4798      	blx	r3
   11a02:	0021      	movs	r1, r4
   11a04:	9803      	ldr	r0, [sp, #12]
   11a06:	4b19      	ldr	r3, [pc, #100]	; (11a6c <MQTTSerialize_subscribe+0xa8>)
   11a08:	4798      	blx	r3
   11a0a:	9a03      	ldr	r2, [sp, #12]
   11a0c:	4694      	mov	ip, r2
   11a0e:	4460      	add	r0, ip
   11a10:	9003      	str	r0, [sp, #12]
   11a12:	9901      	ldr	r1, [sp, #4]
   11a14:	a803      	add	r0, sp, #12
   11a16:	4b16      	ldr	r3, [pc, #88]	; (11a70 <MQTTSerialize_subscribe+0xac>)
   11a18:	4798      	blx	r3
   11a1a:	2f00      	cmp	r7, #0
   11a1c:	dd13      	ble.n	11a46 <MQTTSerialize_subscribe+0x82>
   11a1e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   11a20:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   11a22:	2500      	movs	r5, #0
   11a24:	4b13      	ldr	r3, [pc, #76]	; (11a74 <MQTTSerialize_subscribe+0xb0>)
   11a26:	4699      	mov	r9, r3
   11a28:	4b0f      	ldr	r3, [pc, #60]	; (11a68 <MQTTSerialize_subscribe+0xa4>)
   11a2a:	4698      	mov	r8, r3
   11a2c:	6821      	ldr	r1, [r4, #0]
   11a2e:	6862      	ldr	r2, [r4, #4]
   11a30:	68a3      	ldr	r3, [r4, #8]
   11a32:	a803      	add	r0, sp, #12
   11a34:	47c8      	blx	r9
   11a36:	ce02      	ldmia	r6!, {r1}
   11a38:	b2c9      	uxtb	r1, r1
   11a3a:	a803      	add	r0, sp, #12
   11a3c:	47c0      	blx	r8
   11a3e:	3501      	adds	r5, #1
   11a40:	340c      	adds	r4, #12
   11a42:	42af      	cmp	r7, r5
   11a44:	d1f2      	bne.n	11a2c <MQTTSerialize_subscribe+0x68>
   11a46:	9b03      	ldr	r3, [sp, #12]
   11a48:	4652      	mov	r2, sl
   11a4a:	1a98      	subs	r0, r3, r2
   11a4c:	b004      	add	sp, #16
   11a4e:	bc1c      	pop	{r2, r3, r4}
   11a50:	4690      	mov	r8, r2
   11a52:	4699      	mov	r9, r3
   11a54:	46a2      	mov	sl, r4
   11a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a58:	2002      	movs	r0, #2
   11a5a:	4240      	negs	r0, r0
   11a5c:	e7f6      	b.n	11a4c <MQTTSerialize_subscribe+0x88>
   11a5e:	46c0      	nop			; (mov r8, r8)
   11a60:	0001198d 	.word	0x0001198d
   11a64:	00011681 	.word	0x00011681
   11a68:	000116e3 	.word	0x000116e3
   11a6c:	000115f9 	.word	0x000115f9
   11a70:	000116ef 	.word	0x000116ef
   11a74:	00011751 	.word	0x00011751

00011a78 <MQTTDeserialize_suback>:
   11a78:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a7a:	46ce      	mov	lr, r9
   11a7c:	4647      	mov	r7, r8
   11a7e:	b580      	push	{r7, lr}
   11a80:	b083      	sub	sp, #12
   11a82:	0004      	movs	r4, r0
   11a84:	000e      	movs	r6, r1
   11a86:	0015      	movs	r5, r2
   11a88:	001f      	movs	r7, r3
   11a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11a8c:	9301      	str	r3, [sp, #4]
   11a8e:	a801      	add	r0, sp, #4
   11a90:	4b1e      	ldr	r3, [pc, #120]	; (11b0c <MQTTDeserialize_suback+0x94>)
   11a92:	4798      	blx	r3
   11a94:	23f0      	movs	r3, #240	; 0xf0
   11a96:	4003      	ands	r3, r0
   11a98:	2000      	movs	r0, #0
   11a9a:	2b90      	cmp	r3, #144	; 0x90
   11a9c:	d004      	beq.n	11aa8 <MQTTDeserialize_suback+0x30>
   11a9e:	b003      	add	sp, #12
   11aa0:	bc0c      	pop	{r2, r3}
   11aa2:	4690      	mov	r8, r2
   11aa4:	4699      	mov	r9, r3
   11aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11aa8:	4669      	mov	r1, sp
   11aaa:	9801      	ldr	r0, [sp, #4]
   11aac:	4b18      	ldr	r3, [pc, #96]	; (11b10 <MQTTDeserialize_suback+0x98>)
   11aae:	4798      	blx	r3
   11ab0:	9b01      	ldr	r3, [sp, #4]
   11ab2:	181b      	adds	r3, r3, r0
   11ab4:	9301      	str	r3, [sp, #4]
   11ab6:	9a00      	ldr	r2, [sp, #0]
   11ab8:	2a01      	cmp	r2, #1
   11aba:	ddf0      	ble.n	11a9e <MQTTDeserialize_suback+0x26>
   11abc:	4698      	mov	r8, r3
   11abe:	4490      	add	r8, r2
   11ac0:	a801      	add	r0, sp, #4
   11ac2:	4b14      	ldr	r3, [pc, #80]	; (11b14 <MQTTDeserialize_suback+0x9c>)
   11ac4:	4798      	blx	r3
   11ac6:	8020      	strh	r0, [r4, #0]
   11ac8:	2300      	movs	r3, #0
   11aca:	602b      	str	r3, [r5, #0]
   11acc:	9b01      	ldr	r3, [sp, #4]
   11ace:	4598      	cmp	r8, r3
   11ad0:	d916      	bls.n	11b00 <MQTTDeserialize_suback+0x88>
   11ad2:	2e00      	cmp	r6, #0
   11ad4:	db16      	blt.n	11b04 <MQTTDeserialize_suback+0x8c>
   11ad6:	2300      	movs	r3, #0
   11ad8:	4a0c      	ldr	r2, [pc, #48]	; (11b0c <MQTTDeserialize_suback+0x94>)
   11ada:	4691      	mov	r9, r2
   11adc:	1c5a      	adds	r2, r3, #1
   11ade:	602a      	str	r2, [r5, #0]
   11ae0:	009b      	lsls	r3, r3, #2
   11ae2:	18fc      	adds	r4, r7, r3
   11ae4:	a801      	add	r0, sp, #4
   11ae6:	47c8      	blx	r9
   11ae8:	6020      	str	r0, [r4, #0]
   11aea:	9b01      	ldr	r3, [sp, #4]
   11aec:	4598      	cmp	r8, r3
   11aee:	d905      	bls.n	11afc <MQTTDeserialize_suback+0x84>
   11af0:	682b      	ldr	r3, [r5, #0]
   11af2:	42b3      	cmp	r3, r6
   11af4:	ddf2      	ble.n	11adc <MQTTDeserialize_suback+0x64>
   11af6:	2001      	movs	r0, #1
   11af8:	4240      	negs	r0, r0
   11afa:	e7d0      	b.n	11a9e <MQTTDeserialize_suback+0x26>
   11afc:	2001      	movs	r0, #1
   11afe:	e7ce      	b.n	11a9e <MQTTDeserialize_suback+0x26>
   11b00:	2001      	movs	r0, #1
   11b02:	e7cc      	b.n	11a9e <MQTTDeserialize_suback+0x26>
   11b04:	2001      	movs	r0, #1
   11b06:	4240      	negs	r0, r0
   11b08:	e7c9      	b.n	11a9e <MQTTDeserialize_suback+0x26>
   11b0a:	46c0      	nop			; (mov r8, r8)
   11b0c:	000116d7 	.word	0x000116d7
   11b10:	000116a9 	.word	0x000116a9
   11b14:	000116c5 	.word	0x000116c5

00011b18 <vDistance100MeasurementTempeartureTask>:
        vTaskDelay(pdMS_TO_TICKS(1000)); // Delay before next measurement
    }
}


static void vDistance100MeasurementTempeartureTask(void *pvParameters) {
   11b18:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b1a:	b09b      	sub	sp, #108	; 0x6c
	static uint16_t temperature;
	static float temp_celc;

	while (1) {
		// Measure distance
		error = DistanceSensorGetDistance(&distance, pdMS_TO_TICKS(1000)); // 1000 ms as max block time
   11b1c:	26fa      	movs	r6, #250	; 0xfa
   11b1e:	00b6      	lsls	r6, r6, #2
   11b20:	4f16      	ldr	r7, [pc, #88]	; (11b7c <vDistance100MeasurementTempeartureTask+0x64>)
		int foodRemaining = 0;
   11b22:	2500      	movs	r5, #0
   11b24:	e015      	b.n	11b52 <vDistance100MeasurementTempeartureTask+0x3a>

		if (error == ERROR_NONE) {
			// Calculate food remaining as a percentage
			foodRemaining = (distance > maxDistance) ? 0 : (100 - (distance * 100 / maxDistance));
			} else {
			SerialConsoleWriteString("Error reading distance\r\n");
   11b26:	4816      	ldr	r0, [pc, #88]	; (11b80 <vDistance100MeasurementTempeartureTask+0x68>)
   11b28:	4b16      	ldr	r3, [pc, #88]	; (11b84 <vDistance100MeasurementTempeartureTask+0x6c>)
   11b2a:	4798      	blx	r3
		int foodRemaining = 0;
   11b2c:	002c      	movs	r4, r5
		*/
		
		

		// Update the SSD1306 display
		i2c_clear(); // Clear the display
   11b2e:	4b16      	ldr	r3, [pc, #88]	; (11b88 <vDistance100MeasurementTempeartureTask+0x70>)
   11b30:	4798      	blx	r3
		i2c_setCursor(0, 0); // Set cursor at the top-left corner
   11b32:	0029      	movs	r1, r5
   11b34:	0028      	movs	r0, r5
   11b36:	4b15      	ldr	r3, [pc, #84]	; (11b8c <vDistance100MeasurementTempeartureTask+0x74>)
   11b38:	4798      	blx	r3
		snprintf(buffer, sizeof(buffer), "Food: %d%%", foodRemaining);
   11b3a:	0023      	movs	r3, r4
   11b3c:	4a14      	ldr	r2, [pc, #80]	; (11b90 <vDistance100MeasurementTempeartureTask+0x78>)
   11b3e:	2164      	movs	r1, #100	; 0x64
   11b40:	a801      	add	r0, sp, #4
   11b42:	4c14      	ldr	r4, [pc, #80]	; (11b94 <vDistance100MeasurementTempeartureTask+0x7c>)
   11b44:	47a0      	blx	r4
		i2c_print(buffer); // Print the food remaining
   11b46:	a801      	add	r0, sp, #4
   11b48:	4b13      	ldr	r3, [pc, #76]	; (11b98 <vDistance100MeasurementTempeartureTask+0x80>)
   11b4a:	4798      	blx	r3
		vTaskDelay(pdMS_TO_TICKS(1000)); 
   11b4c:	0030      	movs	r0, r6
   11b4e:	4b13      	ldr	r3, [pc, #76]	; (11b9c <vDistance100MeasurementTempeartureTask+0x84>)
   11b50:	4798      	blx	r3
		error = DistanceSensorGetDistance(&distance, pdMS_TO_TICKS(1000)); // 1000 ms as max block time
   11b52:	0031      	movs	r1, r6
   11b54:	466b      	mov	r3, sp
   11b56:	1c98      	adds	r0, r3, #2
   11b58:	47b8      	blx	r7
		if (error == ERROR_NONE) {
   11b5a:	2800      	cmp	r0, #0
   11b5c:	d1e3      	bne.n	11b26 <vDistance100MeasurementTempeartureTask+0xe>
			foodRemaining = (distance > maxDistance) ? 0 : (100 - (distance * 100 / maxDistance));
   11b5e:	466b      	mov	r3, sp
   11b60:	8858      	ldrh	r0, [r3, #2]
   11b62:	002c      	movs	r4, r5
   11b64:	28aa      	cmp	r0, #170	; 0xaa
   11b66:	d8e2      	bhi.n	11b2e <vDistance100MeasurementTempeartureTask+0x16>
   11b68:	2364      	movs	r3, #100	; 0x64
   11b6a:	425b      	negs	r3, r3
   11b6c:	4358      	muls	r0, r3
   11b6e:	21aa      	movs	r1, #170	; 0xaa
   11b70:	4b0b      	ldr	r3, [pc, #44]	; (11ba0 <vDistance100MeasurementTempeartureTask+0x88>)
   11b72:	4798      	blx	r3
   11b74:	3064      	adds	r0, #100	; 0x64
   11b76:	0004      	movs	r4, r0
   11b78:	e7d9      	b.n	11b2e <vDistance100MeasurementTempeartureTask+0x16>
   11b7a:	46c0      	nop			; (mov r8, r8)
   11b7c:	000036b5 	.word	0x000036b5
   11b80:	000193a0 	.word	0x000193a0
   11b84:	00007efd 	.word	0x00007efd
   11b88:	00001781 	.word	0x00001781
   11b8c:	000014b1 	.word	0x000014b1
   11b90:	000193bc 	.word	0x000193bc
   11b94:	000144d5 	.word	0x000144d5
   11b98:	00001821 	.word	0x00001821
   11b9c:	000070d9 	.word	0x000070d9
   11ba0:	00011e89 	.word	0x00011e89

00011ba4 <main>:
{
   11ba4:	b510      	push	{r4, lr}
	system_init();
   11ba6:	4b05      	ldr	r3, [pc, #20]	; (11bbc <main+0x18>)
   11ba8:	4798      	blx	r3
	InitializeSerialConsole();
   11baa:	4b05      	ldr	r3, [pc, #20]	; (11bc0 <main+0x1c>)
   11bac:	4798      	blx	r3
	 vTraceEnable(TRC_START);
   11bae:	2001      	movs	r0, #1
   11bb0:	4b04      	ldr	r3, [pc, #16]	; (11bc4 <main+0x20>)
   11bb2:	4798      	blx	r3
    vTaskStartScheduler();
   11bb4:	4b04      	ldr	r3, [pc, #16]	; (11bc8 <main+0x24>)
   11bb6:	4798      	blx	r3
}
   11bb8:	2000      	movs	r0, #0
   11bba:	bd10      	pop	{r4, pc}
   11bbc:	0000e151 	.word	0x0000e151
   11bc0:	00007dd5 	.word	0x00007dd5
   11bc4:	000044fd 	.word	0x000044fd
   11bc8:	00006d95 	.word	0x00006d95

00011bcc <vApplicationDaemonTaskStartupHook>:
{
   11bcc:	b570      	push	{r4, r5, r6, lr}
   11bce:	b082      	sub	sp, #8
SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   11bd0:	4840      	ldr	r0, [pc, #256]	; (11cd4 <vApplicationDaemonTaskStartupHook+0x108>)
   11bd2:	4c41      	ldr	r4, [pc, #260]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11bd4:	47a0      	blx	r4
SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   11bd6:	4841      	ldr	r0, [pc, #260]	; (11cdc <vApplicationDaemonTaskStartupHook+0x110>)
   11bd8:	47a0      	blx	r4
	if (I2cInitializeDriver() != STATUS_OK)
   11bda:	4b41      	ldr	r3, [pc, #260]	; (11ce0 <vApplicationDaemonTaskStartupHook+0x114>)
   11bdc:	4798      	blx	r3
   11bde:	2800      	cmp	r0, #0
   11be0:	d000      	beq.n	11be4 <vApplicationDaemonTaskStartupHook+0x18>
   11be2:	e073      	b.n	11ccc <vApplicationDaemonTaskStartupHook+0x100>
		SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   11be4:	483f      	ldr	r0, [pc, #252]	; (11ce4 <vApplicationDaemonTaskStartupHook+0x118>)
   11be6:	4b3c      	ldr	r3, [pc, #240]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11be8:	4798      	blx	r3
	   SerialConsoleWriteString("\r\nInitializing US-100 Distance Sensor...\r\n");
   11bea:	483f      	ldr	r0, [pc, #252]	; (11ce8 <vApplicationDaemonTaskStartupHook+0x11c>)
   11bec:	4c3a      	ldr	r4, [pc, #232]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11bee:	47a0      	blx	r4
	   InitializeDistanceSensor();
   11bf0:	4b3e      	ldr	r3, [pc, #248]	; (11cec <vApplicationDaemonTaskStartupHook+0x120>)
   11bf2:	4798      	blx	r3
	   	i2c_begin(); // Initialize SSD1306
   11bf4:	4b3e      	ldr	r3, [pc, #248]	; (11cf0 <vApplicationDaemonTaskStartupHook+0x124>)
   11bf6:	4798      	blx	r3
	   	SerialConsoleWriteString("SSD1306 initialized!\r\n");
   11bf8:	483e      	ldr	r0, [pc, #248]	; (11cf4 <vApplicationDaemonTaskStartupHook+0x128>)
   11bfa:	47a0      	blx	r4
snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   11bfc:	4b3e      	ldr	r3, [pc, #248]	; (11cf8 <vApplicationDaemonTaskStartupHook+0x12c>)
   11bfe:	4798      	blx	r3
   11c00:	0003      	movs	r3, r0
   11c02:	4d3e      	ldr	r5, [pc, #248]	; (11cfc <vApplicationDaemonTaskStartupHook+0x130>)
   11c04:	4a3e      	ldr	r2, [pc, #248]	; (11d00 <vApplicationDaemonTaskStartupHook+0x134>)
   11c06:	2140      	movs	r1, #64	; 0x40
   11c08:	0028      	movs	r0, r5
   11c0a:	4e3e      	ldr	r6, [pc, #248]	; (11d04 <vApplicationDaemonTaskStartupHook+0x138>)
   11c0c:	47b0      	blx	r6
SerialConsoleWriteString(bufferPrint);
   11c0e:	0028      	movs	r0, r5
   11c10:	47a0      	blx	r4
if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   11c12:	4b3d      	ldr	r3, [pc, #244]	; (11d08 <vApplicationDaemonTaskStartupHook+0x13c>)
   11c14:	9301      	str	r3, [sp, #4]
   11c16:	2304      	movs	r3, #4
   11c18:	9300      	str	r3, [sp, #0]
   11c1a:	2300      	movs	r3, #0
   11c1c:	22c8      	movs	r2, #200	; 0xc8
   11c1e:	0052      	lsls	r2, r2, #1
   11c20:	493a      	ldr	r1, [pc, #232]	; (11d0c <vApplicationDaemonTaskStartupHook+0x140>)
   11c22:	483b      	ldr	r0, [pc, #236]	; (11d10 <vApplicationDaemonTaskStartupHook+0x144>)
   11c24:	4c3b      	ldr	r4, [pc, #236]	; (11d14 <vApplicationDaemonTaskStartupHook+0x148>)
   11c26:	47a0      	blx	r4
   11c28:	2801      	cmp	r0, #1
   11c2a:	d002      	beq.n	11c32 <vApplicationDaemonTaskStartupHook+0x66>
	SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   11c2c:	483a      	ldr	r0, [pc, #232]	; (11d18 <vApplicationDaemonTaskStartupHook+0x14c>)
   11c2e:	4b2a      	ldr	r3, [pc, #168]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11c30:	4798      	blx	r3
snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   11c32:	4b31      	ldr	r3, [pc, #196]	; (11cf8 <vApplicationDaemonTaskStartupHook+0x12c>)
   11c34:	4798      	blx	r3
   11c36:	0003      	movs	r3, r0
   11c38:	4c30      	ldr	r4, [pc, #192]	; (11cfc <vApplicationDaemonTaskStartupHook+0x130>)
   11c3a:	4a38      	ldr	r2, [pc, #224]	; (11d1c <vApplicationDaemonTaskStartupHook+0x150>)
   11c3c:	2140      	movs	r1, #64	; 0x40
   11c3e:	0020      	movs	r0, r4
   11c40:	4d30      	ldr	r5, [pc, #192]	; (11d04 <vApplicationDaemonTaskStartupHook+0x138>)
   11c42:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   11c44:	0020      	movs	r0, r4
   11c46:	4b24      	ldr	r3, [pc, #144]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11c48:	4798      	blx	r3
    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   11c4a:	4b35      	ldr	r3, [pc, #212]	; (11d20 <vApplicationDaemonTaskStartupHook+0x154>)
   11c4c:	9301      	str	r3, [sp, #4]
   11c4e:	2303      	movs	r3, #3
   11c50:	9300      	str	r3, [sp, #0]
   11c52:	2300      	movs	r3, #0
   11c54:	22fa      	movs	r2, #250	; 0xfa
   11c56:	0092      	lsls	r2, r2, #2
   11c58:	4932      	ldr	r1, [pc, #200]	; (11d24 <vApplicationDaemonTaskStartupHook+0x158>)
   11c5a:	4833      	ldr	r0, [pc, #204]	; (11d28 <vApplicationDaemonTaskStartupHook+0x15c>)
   11c5c:	4c2d      	ldr	r4, [pc, #180]	; (11d14 <vApplicationDaemonTaskStartupHook+0x148>)
   11c5e:	47a0      	blx	r4
   11c60:	2801      	cmp	r0, #1
   11c62:	d002      	beq.n	11c6a <vApplicationDaemonTaskStartupHook+0x9e>
	    SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   11c64:	4831      	ldr	r0, [pc, #196]	; (11d2c <vApplicationDaemonTaskStartupHook+0x160>)
   11c66:	4b1c      	ldr	r3, [pc, #112]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11c68:	4798      	blx	r3
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   11c6a:	4b23      	ldr	r3, [pc, #140]	; (11cf8 <vApplicationDaemonTaskStartupHook+0x12c>)
   11c6c:	4798      	blx	r3
   11c6e:	0003      	movs	r3, r0
   11c70:	4c22      	ldr	r4, [pc, #136]	; (11cfc <vApplicationDaemonTaskStartupHook+0x130>)
   11c72:	4a2f      	ldr	r2, [pc, #188]	; (11d30 <vApplicationDaemonTaskStartupHook+0x164>)
   11c74:	2140      	movs	r1, #64	; 0x40
   11c76:	0020      	movs	r0, r4
   11c78:	4d22      	ldr	r5, [pc, #136]	; (11d04 <vApplicationDaemonTaskStartupHook+0x138>)
   11c7a:	47a8      	blx	r5
    SerialConsoleWriteString(bufferPrint);
   11c7c:	0020      	movs	r0, r4
   11c7e:	4c16      	ldr	r4, [pc, #88]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11c80:	47a0      	blx	r4
i2c_begin(); // Initialize SSD1306
   11c82:	4b1b      	ldr	r3, [pc, #108]	; (11cf0 <vApplicationDaemonTaskStartupHook+0x124>)
   11c84:	4798      	blx	r3
SerialConsoleWriteString("SSD1306 initialized!\r\n");
   11c86:	481b      	ldr	r0, [pc, #108]	; (11cf4 <vApplicationDaemonTaskStartupHook+0x128>)
   11c88:	47a0      	blx	r4
if (xTaskCreate(vDistance100MeasurementTempeartureTask, "Distance100MeasurementTempeartureTask", 500, NULL, 2, NULL) != pdPASS) {
   11c8a:	2300      	movs	r3, #0
   11c8c:	9301      	str	r3, [sp, #4]
   11c8e:	3302      	adds	r3, #2
   11c90:	9300      	str	r3, [sp, #0]
   11c92:	2300      	movs	r3, #0
   11c94:	22fa      	movs	r2, #250	; 0xfa
   11c96:	0052      	lsls	r2, r2, #1
   11c98:	4926      	ldr	r1, [pc, #152]	; (11d34 <vApplicationDaemonTaskStartupHook+0x168>)
   11c9a:	4827      	ldr	r0, [pc, #156]	; (11d38 <vApplicationDaemonTaskStartupHook+0x16c>)
   11c9c:	4c1d      	ldr	r4, [pc, #116]	; (11d14 <vApplicationDaemonTaskStartupHook+0x148>)
   11c9e:	47a0      	blx	r4
   11ca0:	2801      	cmp	r0, #1
   11ca2:	d002      	beq.n	11caa <vApplicationDaemonTaskStartupHook+0xde>
	SerialConsoleWriteString("Error creating Distance100MeasurementTempeartureTask!\r\n");
   11ca4:	4825      	ldr	r0, [pc, #148]	; (11d3c <vApplicationDaemonTaskStartupHook+0x170>)
   11ca6:	4b0c      	ldr	r3, [pc, #48]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11ca8:	4798      	blx	r3
snprintf(bufferPrint, 64, "Heap after starting all tasks: %d\r\n", xPortGetFreeHeapSize());
   11caa:	4b13      	ldr	r3, [pc, #76]	; (11cf8 <vApplicationDaemonTaskStartupHook+0x12c>)
   11cac:	4798      	blx	r3
   11cae:	0003      	movs	r3, r0
   11cb0:	4c12      	ldr	r4, [pc, #72]	; (11cfc <vApplicationDaemonTaskStartupHook+0x130>)
   11cb2:	4a23      	ldr	r2, [pc, #140]	; (11d40 <vApplicationDaemonTaskStartupHook+0x174>)
   11cb4:	2140      	movs	r1, #64	; 0x40
   11cb6:	0020      	movs	r0, r4
   11cb8:	4d12      	ldr	r5, [pc, #72]	; (11d04 <vApplicationDaemonTaskStartupHook+0x138>)
   11cba:	47a8      	blx	r5
SerialConsoleWriteString(bufferPrint);
   11cbc:	0020      	movs	r0, r4
   11cbe:	4b06      	ldr	r3, [pc, #24]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11cc0:	4798      	blx	r3
	vTaskSuspend(daemonTaskHandle);
   11cc2:	2000      	movs	r0, #0
   11cc4:	4b1f      	ldr	r3, [pc, #124]	; (11d44 <vApplicationDaemonTaskStartupHook+0x178>)
   11cc6:	4798      	blx	r3
}
   11cc8:	b002      	add	sp, #8
   11cca:	bd70      	pop	{r4, r5, r6, pc}
		SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   11ccc:	481e      	ldr	r0, [pc, #120]	; (11d48 <vApplicationDaemonTaskStartupHook+0x17c>)
   11cce:	4b02      	ldr	r3, [pc, #8]	; (11cd8 <vApplicationDaemonTaskStartupHook+0x10c>)
   11cd0:	4798      	blx	r3
   11cd2:	e78a      	b.n	11bea <vApplicationDaemonTaskStartupHook+0x1e>
   11cd4:	00019134 	.word	0x00019134
   11cd8:	00007efd 	.word	0x00007efd
   11cdc:	00019158 	.word	0x00019158
   11ce0:	0000384d 	.word	0x0000384d
   11ce4:	00019194 	.word	0x00019194
   11ce8:	000191b0 	.word	0x000191b0
   11cec:	00003591 	.word	0x00003591
   11cf0:	0000138d 	.word	0x0000138d
   11cf4:	000191dc 	.word	0x000191dc
   11cf8:	00005801 	.word	0x00005801
   11cfc:	20005d14 	.word	0x20005d14
   11d00:	000191f4 	.word	0x000191f4
   11d04:	000144d5 	.word	0x000144d5
   11d08:	200042f8 	.word	0x200042f8
   11d0c:	00019218 	.word	0x00019218
   11d10:	00002f4d 	.word	0x00002f4d
   11d14:	00006af1 	.word	0x00006af1
   11d18:	00019224 	.word	0x00019224
   11d1c:	00019250 	.word	0x00019250
   11d20:	200042fc 	.word	0x200042fc
   11d24:	00019270 	.word	0x00019270
   11d28:	00002249 	.word	0x00002249
   11d2c:	0001927c 	.word	0x0001927c
   11d30:	000192a8 	.word	0x000192a8
   11d34:	000192c8 	.word	0x000192c8
   11d38:	00011b19 	.word	0x00011b19
   11d3c:	000192f0 	.word	0x000192f0
   11d40:	00019328 	.word	0x00019328
   11d44:	00007279 	.word	0x00007279
   11d48:	00019170 	.word	0x00019170

00011d4c <vApplicationMallocFailedHook>:
{
   11d4c:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   11d4e:	4802      	ldr	r0, [pc, #8]	; (11d58 <vApplicationMallocFailedHook+0xc>)
   11d50:	4b02      	ldr	r3, [pc, #8]	; (11d5c <vApplicationMallocFailedHook+0x10>)
   11d52:	4798      	blx	r3
   11d54:	e7fe      	b.n	11d54 <vApplicationMallocFailedHook+0x8>
   11d56:	46c0      	nop			; (mov r8, r8)
   11d58:	0001934c 	.word	0x0001934c
   11d5c:	00007efd 	.word	0x00007efd

00011d60 <vApplicationStackOverflowHook>:
{
   11d60:	b510      	push	{r4, lr}
SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   11d62:	4802      	ldr	r0, [pc, #8]	; (11d6c <vApplicationStackOverflowHook+0xc>)
   11d64:	4b02      	ldr	r3, [pc, #8]	; (11d70 <vApplicationStackOverflowHook+0x10>)
   11d66:	4798      	blx	r3
   11d68:	e7fe      	b.n	11d68 <vApplicationStackOverflowHook+0x8>
   11d6a:	46c0      	nop			; (mov r8, r8)
   11d6c:	00019378 	.word	0x00019378
   11d70:	00007efd 	.word	0x00007efd

00011d74 <__udivsi3>:
   11d74:	2200      	movs	r2, #0
   11d76:	0843      	lsrs	r3, r0, #1
   11d78:	428b      	cmp	r3, r1
   11d7a:	d374      	bcc.n	11e66 <__udivsi3+0xf2>
   11d7c:	0903      	lsrs	r3, r0, #4
   11d7e:	428b      	cmp	r3, r1
   11d80:	d35f      	bcc.n	11e42 <__udivsi3+0xce>
   11d82:	0a03      	lsrs	r3, r0, #8
   11d84:	428b      	cmp	r3, r1
   11d86:	d344      	bcc.n	11e12 <__udivsi3+0x9e>
   11d88:	0b03      	lsrs	r3, r0, #12
   11d8a:	428b      	cmp	r3, r1
   11d8c:	d328      	bcc.n	11de0 <__udivsi3+0x6c>
   11d8e:	0c03      	lsrs	r3, r0, #16
   11d90:	428b      	cmp	r3, r1
   11d92:	d30d      	bcc.n	11db0 <__udivsi3+0x3c>
   11d94:	22ff      	movs	r2, #255	; 0xff
   11d96:	0209      	lsls	r1, r1, #8
   11d98:	ba12      	rev	r2, r2
   11d9a:	0c03      	lsrs	r3, r0, #16
   11d9c:	428b      	cmp	r3, r1
   11d9e:	d302      	bcc.n	11da6 <__udivsi3+0x32>
   11da0:	1212      	asrs	r2, r2, #8
   11da2:	0209      	lsls	r1, r1, #8
   11da4:	d065      	beq.n	11e72 <__udivsi3+0xfe>
   11da6:	0b03      	lsrs	r3, r0, #12
   11da8:	428b      	cmp	r3, r1
   11daa:	d319      	bcc.n	11de0 <__udivsi3+0x6c>
   11dac:	e000      	b.n	11db0 <__udivsi3+0x3c>
   11dae:	0a09      	lsrs	r1, r1, #8
   11db0:	0bc3      	lsrs	r3, r0, #15
   11db2:	428b      	cmp	r3, r1
   11db4:	d301      	bcc.n	11dba <__udivsi3+0x46>
   11db6:	03cb      	lsls	r3, r1, #15
   11db8:	1ac0      	subs	r0, r0, r3
   11dba:	4152      	adcs	r2, r2
   11dbc:	0b83      	lsrs	r3, r0, #14
   11dbe:	428b      	cmp	r3, r1
   11dc0:	d301      	bcc.n	11dc6 <__udivsi3+0x52>
   11dc2:	038b      	lsls	r3, r1, #14
   11dc4:	1ac0      	subs	r0, r0, r3
   11dc6:	4152      	adcs	r2, r2
   11dc8:	0b43      	lsrs	r3, r0, #13
   11dca:	428b      	cmp	r3, r1
   11dcc:	d301      	bcc.n	11dd2 <__udivsi3+0x5e>
   11dce:	034b      	lsls	r3, r1, #13
   11dd0:	1ac0      	subs	r0, r0, r3
   11dd2:	4152      	adcs	r2, r2
   11dd4:	0b03      	lsrs	r3, r0, #12
   11dd6:	428b      	cmp	r3, r1
   11dd8:	d301      	bcc.n	11dde <__udivsi3+0x6a>
   11dda:	030b      	lsls	r3, r1, #12
   11ddc:	1ac0      	subs	r0, r0, r3
   11dde:	4152      	adcs	r2, r2
   11de0:	0ac3      	lsrs	r3, r0, #11
   11de2:	428b      	cmp	r3, r1
   11de4:	d301      	bcc.n	11dea <__udivsi3+0x76>
   11de6:	02cb      	lsls	r3, r1, #11
   11de8:	1ac0      	subs	r0, r0, r3
   11dea:	4152      	adcs	r2, r2
   11dec:	0a83      	lsrs	r3, r0, #10
   11dee:	428b      	cmp	r3, r1
   11df0:	d301      	bcc.n	11df6 <__udivsi3+0x82>
   11df2:	028b      	lsls	r3, r1, #10
   11df4:	1ac0      	subs	r0, r0, r3
   11df6:	4152      	adcs	r2, r2
   11df8:	0a43      	lsrs	r3, r0, #9
   11dfa:	428b      	cmp	r3, r1
   11dfc:	d301      	bcc.n	11e02 <__udivsi3+0x8e>
   11dfe:	024b      	lsls	r3, r1, #9
   11e00:	1ac0      	subs	r0, r0, r3
   11e02:	4152      	adcs	r2, r2
   11e04:	0a03      	lsrs	r3, r0, #8
   11e06:	428b      	cmp	r3, r1
   11e08:	d301      	bcc.n	11e0e <__udivsi3+0x9a>
   11e0a:	020b      	lsls	r3, r1, #8
   11e0c:	1ac0      	subs	r0, r0, r3
   11e0e:	4152      	adcs	r2, r2
   11e10:	d2cd      	bcs.n	11dae <__udivsi3+0x3a>
   11e12:	09c3      	lsrs	r3, r0, #7
   11e14:	428b      	cmp	r3, r1
   11e16:	d301      	bcc.n	11e1c <__udivsi3+0xa8>
   11e18:	01cb      	lsls	r3, r1, #7
   11e1a:	1ac0      	subs	r0, r0, r3
   11e1c:	4152      	adcs	r2, r2
   11e1e:	0983      	lsrs	r3, r0, #6
   11e20:	428b      	cmp	r3, r1
   11e22:	d301      	bcc.n	11e28 <__udivsi3+0xb4>
   11e24:	018b      	lsls	r3, r1, #6
   11e26:	1ac0      	subs	r0, r0, r3
   11e28:	4152      	adcs	r2, r2
   11e2a:	0943      	lsrs	r3, r0, #5
   11e2c:	428b      	cmp	r3, r1
   11e2e:	d301      	bcc.n	11e34 <__udivsi3+0xc0>
   11e30:	014b      	lsls	r3, r1, #5
   11e32:	1ac0      	subs	r0, r0, r3
   11e34:	4152      	adcs	r2, r2
   11e36:	0903      	lsrs	r3, r0, #4
   11e38:	428b      	cmp	r3, r1
   11e3a:	d301      	bcc.n	11e40 <__udivsi3+0xcc>
   11e3c:	010b      	lsls	r3, r1, #4
   11e3e:	1ac0      	subs	r0, r0, r3
   11e40:	4152      	adcs	r2, r2
   11e42:	08c3      	lsrs	r3, r0, #3
   11e44:	428b      	cmp	r3, r1
   11e46:	d301      	bcc.n	11e4c <__udivsi3+0xd8>
   11e48:	00cb      	lsls	r3, r1, #3
   11e4a:	1ac0      	subs	r0, r0, r3
   11e4c:	4152      	adcs	r2, r2
   11e4e:	0883      	lsrs	r3, r0, #2
   11e50:	428b      	cmp	r3, r1
   11e52:	d301      	bcc.n	11e58 <__udivsi3+0xe4>
   11e54:	008b      	lsls	r3, r1, #2
   11e56:	1ac0      	subs	r0, r0, r3
   11e58:	4152      	adcs	r2, r2
   11e5a:	0843      	lsrs	r3, r0, #1
   11e5c:	428b      	cmp	r3, r1
   11e5e:	d301      	bcc.n	11e64 <__udivsi3+0xf0>
   11e60:	004b      	lsls	r3, r1, #1
   11e62:	1ac0      	subs	r0, r0, r3
   11e64:	4152      	adcs	r2, r2
   11e66:	1a41      	subs	r1, r0, r1
   11e68:	d200      	bcs.n	11e6c <__udivsi3+0xf8>
   11e6a:	4601      	mov	r1, r0
   11e6c:	4152      	adcs	r2, r2
   11e6e:	4610      	mov	r0, r2
   11e70:	4770      	bx	lr
   11e72:	e7ff      	b.n	11e74 <__udivsi3+0x100>
   11e74:	b501      	push	{r0, lr}
   11e76:	2000      	movs	r0, #0
   11e78:	f000 f8f0 	bl	1205c <__aeabi_idiv0>
   11e7c:	bd02      	pop	{r1, pc}
   11e7e:	46c0      	nop			; (mov r8, r8)

00011e80 <__aeabi_uidivmod>:
   11e80:	2900      	cmp	r1, #0
   11e82:	d0f7      	beq.n	11e74 <__udivsi3+0x100>
   11e84:	e776      	b.n	11d74 <__udivsi3>
   11e86:	4770      	bx	lr

00011e88 <__divsi3>:
   11e88:	4603      	mov	r3, r0
   11e8a:	430b      	orrs	r3, r1
   11e8c:	d47f      	bmi.n	11f8e <__divsi3+0x106>
   11e8e:	2200      	movs	r2, #0
   11e90:	0843      	lsrs	r3, r0, #1
   11e92:	428b      	cmp	r3, r1
   11e94:	d374      	bcc.n	11f80 <__divsi3+0xf8>
   11e96:	0903      	lsrs	r3, r0, #4
   11e98:	428b      	cmp	r3, r1
   11e9a:	d35f      	bcc.n	11f5c <__divsi3+0xd4>
   11e9c:	0a03      	lsrs	r3, r0, #8
   11e9e:	428b      	cmp	r3, r1
   11ea0:	d344      	bcc.n	11f2c <__divsi3+0xa4>
   11ea2:	0b03      	lsrs	r3, r0, #12
   11ea4:	428b      	cmp	r3, r1
   11ea6:	d328      	bcc.n	11efa <__divsi3+0x72>
   11ea8:	0c03      	lsrs	r3, r0, #16
   11eaa:	428b      	cmp	r3, r1
   11eac:	d30d      	bcc.n	11eca <__divsi3+0x42>
   11eae:	22ff      	movs	r2, #255	; 0xff
   11eb0:	0209      	lsls	r1, r1, #8
   11eb2:	ba12      	rev	r2, r2
   11eb4:	0c03      	lsrs	r3, r0, #16
   11eb6:	428b      	cmp	r3, r1
   11eb8:	d302      	bcc.n	11ec0 <__divsi3+0x38>
   11eba:	1212      	asrs	r2, r2, #8
   11ebc:	0209      	lsls	r1, r1, #8
   11ebe:	d065      	beq.n	11f8c <__divsi3+0x104>
   11ec0:	0b03      	lsrs	r3, r0, #12
   11ec2:	428b      	cmp	r3, r1
   11ec4:	d319      	bcc.n	11efa <__divsi3+0x72>
   11ec6:	e000      	b.n	11eca <__divsi3+0x42>
   11ec8:	0a09      	lsrs	r1, r1, #8
   11eca:	0bc3      	lsrs	r3, r0, #15
   11ecc:	428b      	cmp	r3, r1
   11ece:	d301      	bcc.n	11ed4 <__divsi3+0x4c>
   11ed0:	03cb      	lsls	r3, r1, #15
   11ed2:	1ac0      	subs	r0, r0, r3
   11ed4:	4152      	adcs	r2, r2
   11ed6:	0b83      	lsrs	r3, r0, #14
   11ed8:	428b      	cmp	r3, r1
   11eda:	d301      	bcc.n	11ee0 <__divsi3+0x58>
   11edc:	038b      	lsls	r3, r1, #14
   11ede:	1ac0      	subs	r0, r0, r3
   11ee0:	4152      	adcs	r2, r2
   11ee2:	0b43      	lsrs	r3, r0, #13
   11ee4:	428b      	cmp	r3, r1
   11ee6:	d301      	bcc.n	11eec <__divsi3+0x64>
   11ee8:	034b      	lsls	r3, r1, #13
   11eea:	1ac0      	subs	r0, r0, r3
   11eec:	4152      	adcs	r2, r2
   11eee:	0b03      	lsrs	r3, r0, #12
   11ef0:	428b      	cmp	r3, r1
   11ef2:	d301      	bcc.n	11ef8 <__divsi3+0x70>
   11ef4:	030b      	lsls	r3, r1, #12
   11ef6:	1ac0      	subs	r0, r0, r3
   11ef8:	4152      	adcs	r2, r2
   11efa:	0ac3      	lsrs	r3, r0, #11
   11efc:	428b      	cmp	r3, r1
   11efe:	d301      	bcc.n	11f04 <__divsi3+0x7c>
   11f00:	02cb      	lsls	r3, r1, #11
   11f02:	1ac0      	subs	r0, r0, r3
   11f04:	4152      	adcs	r2, r2
   11f06:	0a83      	lsrs	r3, r0, #10
   11f08:	428b      	cmp	r3, r1
   11f0a:	d301      	bcc.n	11f10 <__divsi3+0x88>
   11f0c:	028b      	lsls	r3, r1, #10
   11f0e:	1ac0      	subs	r0, r0, r3
   11f10:	4152      	adcs	r2, r2
   11f12:	0a43      	lsrs	r3, r0, #9
   11f14:	428b      	cmp	r3, r1
   11f16:	d301      	bcc.n	11f1c <__divsi3+0x94>
   11f18:	024b      	lsls	r3, r1, #9
   11f1a:	1ac0      	subs	r0, r0, r3
   11f1c:	4152      	adcs	r2, r2
   11f1e:	0a03      	lsrs	r3, r0, #8
   11f20:	428b      	cmp	r3, r1
   11f22:	d301      	bcc.n	11f28 <__divsi3+0xa0>
   11f24:	020b      	lsls	r3, r1, #8
   11f26:	1ac0      	subs	r0, r0, r3
   11f28:	4152      	adcs	r2, r2
   11f2a:	d2cd      	bcs.n	11ec8 <__divsi3+0x40>
   11f2c:	09c3      	lsrs	r3, r0, #7
   11f2e:	428b      	cmp	r3, r1
   11f30:	d301      	bcc.n	11f36 <__divsi3+0xae>
   11f32:	01cb      	lsls	r3, r1, #7
   11f34:	1ac0      	subs	r0, r0, r3
   11f36:	4152      	adcs	r2, r2
   11f38:	0983      	lsrs	r3, r0, #6
   11f3a:	428b      	cmp	r3, r1
   11f3c:	d301      	bcc.n	11f42 <__divsi3+0xba>
   11f3e:	018b      	lsls	r3, r1, #6
   11f40:	1ac0      	subs	r0, r0, r3
   11f42:	4152      	adcs	r2, r2
   11f44:	0943      	lsrs	r3, r0, #5
   11f46:	428b      	cmp	r3, r1
   11f48:	d301      	bcc.n	11f4e <__divsi3+0xc6>
   11f4a:	014b      	lsls	r3, r1, #5
   11f4c:	1ac0      	subs	r0, r0, r3
   11f4e:	4152      	adcs	r2, r2
   11f50:	0903      	lsrs	r3, r0, #4
   11f52:	428b      	cmp	r3, r1
   11f54:	d301      	bcc.n	11f5a <__divsi3+0xd2>
   11f56:	010b      	lsls	r3, r1, #4
   11f58:	1ac0      	subs	r0, r0, r3
   11f5a:	4152      	adcs	r2, r2
   11f5c:	08c3      	lsrs	r3, r0, #3
   11f5e:	428b      	cmp	r3, r1
   11f60:	d301      	bcc.n	11f66 <__divsi3+0xde>
   11f62:	00cb      	lsls	r3, r1, #3
   11f64:	1ac0      	subs	r0, r0, r3
   11f66:	4152      	adcs	r2, r2
   11f68:	0883      	lsrs	r3, r0, #2
   11f6a:	428b      	cmp	r3, r1
   11f6c:	d301      	bcc.n	11f72 <__divsi3+0xea>
   11f6e:	008b      	lsls	r3, r1, #2
   11f70:	1ac0      	subs	r0, r0, r3
   11f72:	4152      	adcs	r2, r2
   11f74:	0843      	lsrs	r3, r0, #1
   11f76:	428b      	cmp	r3, r1
   11f78:	d301      	bcc.n	11f7e <__divsi3+0xf6>
   11f7a:	004b      	lsls	r3, r1, #1
   11f7c:	1ac0      	subs	r0, r0, r3
   11f7e:	4152      	adcs	r2, r2
   11f80:	1a41      	subs	r1, r0, r1
   11f82:	d200      	bcs.n	11f86 <__divsi3+0xfe>
   11f84:	4601      	mov	r1, r0
   11f86:	4152      	adcs	r2, r2
   11f88:	4610      	mov	r0, r2
   11f8a:	4770      	bx	lr
   11f8c:	e05d      	b.n	1204a <__divsi3+0x1c2>
   11f8e:	0fca      	lsrs	r2, r1, #31
   11f90:	d000      	beq.n	11f94 <__divsi3+0x10c>
   11f92:	4249      	negs	r1, r1
   11f94:	1003      	asrs	r3, r0, #32
   11f96:	d300      	bcc.n	11f9a <__divsi3+0x112>
   11f98:	4240      	negs	r0, r0
   11f9a:	4053      	eors	r3, r2
   11f9c:	2200      	movs	r2, #0
   11f9e:	469c      	mov	ip, r3
   11fa0:	0903      	lsrs	r3, r0, #4
   11fa2:	428b      	cmp	r3, r1
   11fa4:	d32d      	bcc.n	12002 <__divsi3+0x17a>
   11fa6:	0a03      	lsrs	r3, r0, #8
   11fa8:	428b      	cmp	r3, r1
   11faa:	d312      	bcc.n	11fd2 <__divsi3+0x14a>
   11fac:	22fc      	movs	r2, #252	; 0xfc
   11fae:	0189      	lsls	r1, r1, #6
   11fb0:	ba12      	rev	r2, r2
   11fb2:	0a03      	lsrs	r3, r0, #8
   11fb4:	428b      	cmp	r3, r1
   11fb6:	d30c      	bcc.n	11fd2 <__divsi3+0x14a>
   11fb8:	0189      	lsls	r1, r1, #6
   11fba:	1192      	asrs	r2, r2, #6
   11fbc:	428b      	cmp	r3, r1
   11fbe:	d308      	bcc.n	11fd2 <__divsi3+0x14a>
   11fc0:	0189      	lsls	r1, r1, #6
   11fc2:	1192      	asrs	r2, r2, #6
   11fc4:	428b      	cmp	r3, r1
   11fc6:	d304      	bcc.n	11fd2 <__divsi3+0x14a>
   11fc8:	0189      	lsls	r1, r1, #6
   11fca:	d03a      	beq.n	12042 <__divsi3+0x1ba>
   11fcc:	1192      	asrs	r2, r2, #6
   11fce:	e000      	b.n	11fd2 <__divsi3+0x14a>
   11fd0:	0989      	lsrs	r1, r1, #6
   11fd2:	09c3      	lsrs	r3, r0, #7
   11fd4:	428b      	cmp	r3, r1
   11fd6:	d301      	bcc.n	11fdc <__divsi3+0x154>
   11fd8:	01cb      	lsls	r3, r1, #7
   11fda:	1ac0      	subs	r0, r0, r3
   11fdc:	4152      	adcs	r2, r2
   11fde:	0983      	lsrs	r3, r0, #6
   11fe0:	428b      	cmp	r3, r1
   11fe2:	d301      	bcc.n	11fe8 <__divsi3+0x160>
   11fe4:	018b      	lsls	r3, r1, #6
   11fe6:	1ac0      	subs	r0, r0, r3
   11fe8:	4152      	adcs	r2, r2
   11fea:	0943      	lsrs	r3, r0, #5
   11fec:	428b      	cmp	r3, r1
   11fee:	d301      	bcc.n	11ff4 <__divsi3+0x16c>
   11ff0:	014b      	lsls	r3, r1, #5
   11ff2:	1ac0      	subs	r0, r0, r3
   11ff4:	4152      	adcs	r2, r2
   11ff6:	0903      	lsrs	r3, r0, #4
   11ff8:	428b      	cmp	r3, r1
   11ffa:	d301      	bcc.n	12000 <__divsi3+0x178>
   11ffc:	010b      	lsls	r3, r1, #4
   11ffe:	1ac0      	subs	r0, r0, r3
   12000:	4152      	adcs	r2, r2
   12002:	08c3      	lsrs	r3, r0, #3
   12004:	428b      	cmp	r3, r1
   12006:	d301      	bcc.n	1200c <__divsi3+0x184>
   12008:	00cb      	lsls	r3, r1, #3
   1200a:	1ac0      	subs	r0, r0, r3
   1200c:	4152      	adcs	r2, r2
   1200e:	0883      	lsrs	r3, r0, #2
   12010:	428b      	cmp	r3, r1
   12012:	d301      	bcc.n	12018 <__divsi3+0x190>
   12014:	008b      	lsls	r3, r1, #2
   12016:	1ac0      	subs	r0, r0, r3
   12018:	4152      	adcs	r2, r2
   1201a:	d2d9      	bcs.n	11fd0 <__divsi3+0x148>
   1201c:	0843      	lsrs	r3, r0, #1
   1201e:	428b      	cmp	r3, r1
   12020:	d301      	bcc.n	12026 <__divsi3+0x19e>
   12022:	004b      	lsls	r3, r1, #1
   12024:	1ac0      	subs	r0, r0, r3
   12026:	4152      	adcs	r2, r2
   12028:	1a41      	subs	r1, r0, r1
   1202a:	d200      	bcs.n	1202e <__divsi3+0x1a6>
   1202c:	4601      	mov	r1, r0
   1202e:	4663      	mov	r3, ip
   12030:	4152      	adcs	r2, r2
   12032:	105b      	asrs	r3, r3, #1
   12034:	4610      	mov	r0, r2
   12036:	d301      	bcc.n	1203c <__divsi3+0x1b4>
   12038:	4240      	negs	r0, r0
   1203a:	2b00      	cmp	r3, #0
   1203c:	d500      	bpl.n	12040 <__divsi3+0x1b8>
   1203e:	4249      	negs	r1, r1
   12040:	4770      	bx	lr
   12042:	4663      	mov	r3, ip
   12044:	105b      	asrs	r3, r3, #1
   12046:	d300      	bcc.n	1204a <__divsi3+0x1c2>
   12048:	4240      	negs	r0, r0
   1204a:	b501      	push	{r0, lr}
   1204c:	2000      	movs	r0, #0
   1204e:	f000 f805 	bl	1205c <__aeabi_idiv0>
   12052:	bd02      	pop	{r1, pc}

00012054 <__aeabi_idivmod>:
   12054:	2900      	cmp	r1, #0
   12056:	d0f8      	beq.n	1204a <__divsi3+0x1c2>
   12058:	e716      	b.n	11e88 <__divsi3>
   1205a:	4770      	bx	lr

0001205c <__aeabi_idiv0>:
   1205c:	4770      	bx	lr
   1205e:	46c0      	nop			; (mov r8, r8)

00012060 <__aeabi_lmul>:
   12060:	b5f0      	push	{r4, r5, r6, r7, lr}
   12062:	46ce      	mov	lr, r9
   12064:	4647      	mov	r7, r8
   12066:	0415      	lsls	r5, r2, #16
   12068:	0c2d      	lsrs	r5, r5, #16
   1206a:	002e      	movs	r6, r5
   1206c:	b580      	push	{r7, lr}
   1206e:	0407      	lsls	r7, r0, #16
   12070:	0c14      	lsrs	r4, r2, #16
   12072:	0c3f      	lsrs	r7, r7, #16
   12074:	4699      	mov	r9, r3
   12076:	0c03      	lsrs	r3, r0, #16
   12078:	437e      	muls	r6, r7
   1207a:	435d      	muls	r5, r3
   1207c:	4367      	muls	r7, r4
   1207e:	4363      	muls	r3, r4
   12080:	197f      	adds	r7, r7, r5
   12082:	0c34      	lsrs	r4, r6, #16
   12084:	19e4      	adds	r4, r4, r7
   12086:	469c      	mov	ip, r3
   12088:	42a5      	cmp	r5, r4
   1208a:	d903      	bls.n	12094 <__aeabi_lmul+0x34>
   1208c:	2380      	movs	r3, #128	; 0x80
   1208e:	025b      	lsls	r3, r3, #9
   12090:	4698      	mov	r8, r3
   12092:	44c4      	add	ip, r8
   12094:	464b      	mov	r3, r9
   12096:	4351      	muls	r1, r2
   12098:	4343      	muls	r3, r0
   1209a:	0436      	lsls	r6, r6, #16
   1209c:	0c36      	lsrs	r6, r6, #16
   1209e:	0c25      	lsrs	r5, r4, #16
   120a0:	0424      	lsls	r4, r4, #16
   120a2:	4465      	add	r5, ip
   120a4:	19a4      	adds	r4, r4, r6
   120a6:	1859      	adds	r1, r3, r1
   120a8:	1949      	adds	r1, r1, r5
   120aa:	0020      	movs	r0, r4
   120ac:	bc0c      	pop	{r2, r3}
   120ae:	4690      	mov	r8, r2
   120b0:	4699      	mov	r9, r3
   120b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000120b4 <__aeabi_f2uiz>:
   120b4:	219e      	movs	r1, #158	; 0x9e
   120b6:	b510      	push	{r4, lr}
   120b8:	05c9      	lsls	r1, r1, #23
   120ba:	1c04      	adds	r4, r0, #0
   120bc:	f001 ffb4 	bl	14028 <__aeabi_fcmpge>
   120c0:	2800      	cmp	r0, #0
   120c2:	d103      	bne.n	120cc <__aeabi_f2uiz+0x18>
   120c4:	1c20      	adds	r0, r4, #0
   120c6:	f000 fac9 	bl	1265c <__aeabi_f2iz>
   120ca:	bd10      	pop	{r4, pc}
   120cc:	219e      	movs	r1, #158	; 0x9e
   120ce:	1c20      	adds	r0, r4, #0
   120d0:	05c9      	lsls	r1, r1, #23
   120d2:	f000 f927 	bl	12324 <__aeabi_fsub>
   120d6:	f000 fac1 	bl	1265c <__aeabi_f2iz>
   120da:	2380      	movs	r3, #128	; 0x80
   120dc:	061b      	lsls	r3, r3, #24
   120de:	469c      	mov	ip, r3
   120e0:	4460      	add	r0, ip
   120e2:	e7f2      	b.n	120ca <__aeabi_f2uiz+0x16>

000120e4 <__aeabi_fmul>:
   120e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   120e6:	4657      	mov	r7, sl
   120e8:	464e      	mov	r6, r9
   120ea:	4645      	mov	r5, r8
   120ec:	46de      	mov	lr, fp
   120ee:	b5e0      	push	{r5, r6, r7, lr}
   120f0:	0247      	lsls	r7, r0, #9
   120f2:	0046      	lsls	r6, r0, #1
   120f4:	4688      	mov	r8, r1
   120f6:	0a7f      	lsrs	r7, r7, #9
   120f8:	0e36      	lsrs	r6, r6, #24
   120fa:	0fc4      	lsrs	r4, r0, #31
   120fc:	2e00      	cmp	r6, #0
   120fe:	d047      	beq.n	12190 <__aeabi_fmul+0xac>
   12100:	2eff      	cmp	r6, #255	; 0xff
   12102:	d024      	beq.n	1214e <__aeabi_fmul+0x6a>
   12104:	00fb      	lsls	r3, r7, #3
   12106:	2780      	movs	r7, #128	; 0x80
   12108:	04ff      	lsls	r7, r7, #19
   1210a:	431f      	orrs	r7, r3
   1210c:	2300      	movs	r3, #0
   1210e:	4699      	mov	r9, r3
   12110:	469a      	mov	sl, r3
   12112:	3e7f      	subs	r6, #127	; 0x7f
   12114:	4643      	mov	r3, r8
   12116:	025d      	lsls	r5, r3, #9
   12118:	0058      	lsls	r0, r3, #1
   1211a:	0fdb      	lsrs	r3, r3, #31
   1211c:	0a6d      	lsrs	r5, r5, #9
   1211e:	0e00      	lsrs	r0, r0, #24
   12120:	4698      	mov	r8, r3
   12122:	d043      	beq.n	121ac <__aeabi_fmul+0xc8>
   12124:	28ff      	cmp	r0, #255	; 0xff
   12126:	d03b      	beq.n	121a0 <__aeabi_fmul+0xbc>
   12128:	00eb      	lsls	r3, r5, #3
   1212a:	2580      	movs	r5, #128	; 0x80
   1212c:	2200      	movs	r2, #0
   1212e:	04ed      	lsls	r5, r5, #19
   12130:	431d      	orrs	r5, r3
   12132:	387f      	subs	r0, #127	; 0x7f
   12134:	1836      	adds	r6, r6, r0
   12136:	1c73      	adds	r3, r6, #1
   12138:	4641      	mov	r1, r8
   1213a:	469b      	mov	fp, r3
   1213c:	464b      	mov	r3, r9
   1213e:	4061      	eors	r1, r4
   12140:	4313      	orrs	r3, r2
   12142:	2b0f      	cmp	r3, #15
   12144:	d864      	bhi.n	12210 <__aeabi_fmul+0x12c>
   12146:	4875      	ldr	r0, [pc, #468]	; (1231c <__aeabi_fmul+0x238>)
   12148:	009b      	lsls	r3, r3, #2
   1214a:	58c3      	ldr	r3, [r0, r3]
   1214c:	469f      	mov	pc, r3
   1214e:	2f00      	cmp	r7, #0
   12150:	d142      	bne.n	121d8 <__aeabi_fmul+0xf4>
   12152:	2308      	movs	r3, #8
   12154:	4699      	mov	r9, r3
   12156:	3b06      	subs	r3, #6
   12158:	26ff      	movs	r6, #255	; 0xff
   1215a:	469a      	mov	sl, r3
   1215c:	e7da      	b.n	12114 <__aeabi_fmul+0x30>
   1215e:	4641      	mov	r1, r8
   12160:	2a02      	cmp	r2, #2
   12162:	d028      	beq.n	121b6 <__aeabi_fmul+0xd2>
   12164:	2a03      	cmp	r2, #3
   12166:	d100      	bne.n	1216a <__aeabi_fmul+0x86>
   12168:	e0ce      	b.n	12308 <__aeabi_fmul+0x224>
   1216a:	2a01      	cmp	r2, #1
   1216c:	d000      	beq.n	12170 <__aeabi_fmul+0x8c>
   1216e:	e0ac      	b.n	122ca <__aeabi_fmul+0x1e6>
   12170:	4011      	ands	r1, r2
   12172:	2000      	movs	r0, #0
   12174:	2200      	movs	r2, #0
   12176:	b2cc      	uxtb	r4, r1
   12178:	0240      	lsls	r0, r0, #9
   1217a:	05d2      	lsls	r2, r2, #23
   1217c:	0a40      	lsrs	r0, r0, #9
   1217e:	07e4      	lsls	r4, r4, #31
   12180:	4310      	orrs	r0, r2
   12182:	4320      	orrs	r0, r4
   12184:	bc3c      	pop	{r2, r3, r4, r5}
   12186:	4690      	mov	r8, r2
   12188:	4699      	mov	r9, r3
   1218a:	46a2      	mov	sl, r4
   1218c:	46ab      	mov	fp, r5
   1218e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12190:	2f00      	cmp	r7, #0
   12192:	d115      	bne.n	121c0 <__aeabi_fmul+0xdc>
   12194:	2304      	movs	r3, #4
   12196:	4699      	mov	r9, r3
   12198:	3b03      	subs	r3, #3
   1219a:	2600      	movs	r6, #0
   1219c:	469a      	mov	sl, r3
   1219e:	e7b9      	b.n	12114 <__aeabi_fmul+0x30>
   121a0:	20ff      	movs	r0, #255	; 0xff
   121a2:	2202      	movs	r2, #2
   121a4:	2d00      	cmp	r5, #0
   121a6:	d0c5      	beq.n	12134 <__aeabi_fmul+0x50>
   121a8:	2203      	movs	r2, #3
   121aa:	e7c3      	b.n	12134 <__aeabi_fmul+0x50>
   121ac:	2d00      	cmp	r5, #0
   121ae:	d119      	bne.n	121e4 <__aeabi_fmul+0x100>
   121b0:	2000      	movs	r0, #0
   121b2:	2201      	movs	r2, #1
   121b4:	e7be      	b.n	12134 <__aeabi_fmul+0x50>
   121b6:	2401      	movs	r4, #1
   121b8:	22ff      	movs	r2, #255	; 0xff
   121ba:	400c      	ands	r4, r1
   121bc:	2000      	movs	r0, #0
   121be:	e7db      	b.n	12178 <__aeabi_fmul+0x94>
   121c0:	0038      	movs	r0, r7
   121c2:	f001 ff3b 	bl	1403c <__clzsi2>
   121c6:	2676      	movs	r6, #118	; 0x76
   121c8:	1f43      	subs	r3, r0, #5
   121ca:	409f      	lsls	r7, r3
   121cc:	2300      	movs	r3, #0
   121ce:	4276      	negs	r6, r6
   121d0:	1a36      	subs	r6, r6, r0
   121d2:	4699      	mov	r9, r3
   121d4:	469a      	mov	sl, r3
   121d6:	e79d      	b.n	12114 <__aeabi_fmul+0x30>
   121d8:	230c      	movs	r3, #12
   121da:	4699      	mov	r9, r3
   121dc:	3b09      	subs	r3, #9
   121de:	26ff      	movs	r6, #255	; 0xff
   121e0:	469a      	mov	sl, r3
   121e2:	e797      	b.n	12114 <__aeabi_fmul+0x30>
   121e4:	0028      	movs	r0, r5
   121e6:	f001 ff29 	bl	1403c <__clzsi2>
   121ea:	1f43      	subs	r3, r0, #5
   121ec:	409d      	lsls	r5, r3
   121ee:	2376      	movs	r3, #118	; 0x76
   121f0:	425b      	negs	r3, r3
   121f2:	1a18      	subs	r0, r3, r0
   121f4:	2200      	movs	r2, #0
   121f6:	e79d      	b.n	12134 <__aeabi_fmul+0x50>
   121f8:	2080      	movs	r0, #128	; 0x80
   121fa:	2400      	movs	r4, #0
   121fc:	03c0      	lsls	r0, r0, #15
   121fe:	22ff      	movs	r2, #255	; 0xff
   12200:	e7ba      	b.n	12178 <__aeabi_fmul+0x94>
   12202:	003d      	movs	r5, r7
   12204:	4652      	mov	r2, sl
   12206:	e7ab      	b.n	12160 <__aeabi_fmul+0x7c>
   12208:	003d      	movs	r5, r7
   1220a:	0021      	movs	r1, r4
   1220c:	4652      	mov	r2, sl
   1220e:	e7a7      	b.n	12160 <__aeabi_fmul+0x7c>
   12210:	0c3b      	lsrs	r3, r7, #16
   12212:	469c      	mov	ip, r3
   12214:	042a      	lsls	r2, r5, #16
   12216:	0c12      	lsrs	r2, r2, #16
   12218:	0c2b      	lsrs	r3, r5, #16
   1221a:	0014      	movs	r4, r2
   1221c:	4660      	mov	r0, ip
   1221e:	4665      	mov	r5, ip
   12220:	043f      	lsls	r7, r7, #16
   12222:	0c3f      	lsrs	r7, r7, #16
   12224:	437c      	muls	r4, r7
   12226:	4342      	muls	r2, r0
   12228:	435d      	muls	r5, r3
   1222a:	437b      	muls	r3, r7
   1222c:	0c27      	lsrs	r7, r4, #16
   1222e:	189b      	adds	r3, r3, r2
   12230:	18ff      	adds	r7, r7, r3
   12232:	42ba      	cmp	r2, r7
   12234:	d903      	bls.n	1223e <__aeabi_fmul+0x15a>
   12236:	2380      	movs	r3, #128	; 0x80
   12238:	025b      	lsls	r3, r3, #9
   1223a:	469c      	mov	ip, r3
   1223c:	4465      	add	r5, ip
   1223e:	0424      	lsls	r4, r4, #16
   12240:	043a      	lsls	r2, r7, #16
   12242:	0c24      	lsrs	r4, r4, #16
   12244:	1912      	adds	r2, r2, r4
   12246:	0193      	lsls	r3, r2, #6
   12248:	1e5c      	subs	r4, r3, #1
   1224a:	41a3      	sbcs	r3, r4
   1224c:	0c3f      	lsrs	r7, r7, #16
   1224e:	0e92      	lsrs	r2, r2, #26
   12250:	197d      	adds	r5, r7, r5
   12252:	431a      	orrs	r2, r3
   12254:	01ad      	lsls	r5, r5, #6
   12256:	4315      	orrs	r5, r2
   12258:	012b      	lsls	r3, r5, #4
   1225a:	d504      	bpl.n	12266 <__aeabi_fmul+0x182>
   1225c:	2301      	movs	r3, #1
   1225e:	465e      	mov	r6, fp
   12260:	086a      	lsrs	r2, r5, #1
   12262:	401d      	ands	r5, r3
   12264:	4315      	orrs	r5, r2
   12266:	0032      	movs	r2, r6
   12268:	327f      	adds	r2, #127	; 0x7f
   1226a:	2a00      	cmp	r2, #0
   1226c:	dd25      	ble.n	122ba <__aeabi_fmul+0x1d6>
   1226e:	076b      	lsls	r3, r5, #29
   12270:	d004      	beq.n	1227c <__aeabi_fmul+0x198>
   12272:	230f      	movs	r3, #15
   12274:	402b      	ands	r3, r5
   12276:	2b04      	cmp	r3, #4
   12278:	d000      	beq.n	1227c <__aeabi_fmul+0x198>
   1227a:	3504      	adds	r5, #4
   1227c:	012b      	lsls	r3, r5, #4
   1227e:	d503      	bpl.n	12288 <__aeabi_fmul+0x1a4>
   12280:	0032      	movs	r2, r6
   12282:	4b27      	ldr	r3, [pc, #156]	; (12320 <__aeabi_fmul+0x23c>)
   12284:	3280      	adds	r2, #128	; 0x80
   12286:	401d      	ands	r5, r3
   12288:	2afe      	cmp	r2, #254	; 0xfe
   1228a:	dc94      	bgt.n	121b6 <__aeabi_fmul+0xd2>
   1228c:	2401      	movs	r4, #1
   1228e:	01a8      	lsls	r0, r5, #6
   12290:	0a40      	lsrs	r0, r0, #9
   12292:	b2d2      	uxtb	r2, r2
   12294:	400c      	ands	r4, r1
   12296:	e76f      	b.n	12178 <__aeabi_fmul+0x94>
   12298:	2080      	movs	r0, #128	; 0x80
   1229a:	03c0      	lsls	r0, r0, #15
   1229c:	4207      	tst	r7, r0
   1229e:	d007      	beq.n	122b0 <__aeabi_fmul+0x1cc>
   122a0:	4205      	tst	r5, r0
   122a2:	d105      	bne.n	122b0 <__aeabi_fmul+0x1cc>
   122a4:	4328      	orrs	r0, r5
   122a6:	0240      	lsls	r0, r0, #9
   122a8:	0a40      	lsrs	r0, r0, #9
   122aa:	4644      	mov	r4, r8
   122ac:	22ff      	movs	r2, #255	; 0xff
   122ae:	e763      	b.n	12178 <__aeabi_fmul+0x94>
   122b0:	4338      	orrs	r0, r7
   122b2:	0240      	lsls	r0, r0, #9
   122b4:	0a40      	lsrs	r0, r0, #9
   122b6:	22ff      	movs	r2, #255	; 0xff
   122b8:	e75e      	b.n	12178 <__aeabi_fmul+0x94>
   122ba:	2401      	movs	r4, #1
   122bc:	1aa3      	subs	r3, r4, r2
   122be:	2b1b      	cmp	r3, #27
   122c0:	dd05      	ble.n	122ce <__aeabi_fmul+0x1ea>
   122c2:	400c      	ands	r4, r1
   122c4:	2200      	movs	r2, #0
   122c6:	2000      	movs	r0, #0
   122c8:	e756      	b.n	12178 <__aeabi_fmul+0x94>
   122ca:	465e      	mov	r6, fp
   122cc:	e7cb      	b.n	12266 <__aeabi_fmul+0x182>
   122ce:	002a      	movs	r2, r5
   122d0:	2020      	movs	r0, #32
   122d2:	40da      	lsrs	r2, r3
   122d4:	1ac3      	subs	r3, r0, r3
   122d6:	409d      	lsls	r5, r3
   122d8:	002b      	movs	r3, r5
   122da:	1e5d      	subs	r5, r3, #1
   122dc:	41ab      	sbcs	r3, r5
   122de:	4313      	orrs	r3, r2
   122e0:	075a      	lsls	r2, r3, #29
   122e2:	d004      	beq.n	122ee <__aeabi_fmul+0x20a>
   122e4:	220f      	movs	r2, #15
   122e6:	401a      	ands	r2, r3
   122e8:	2a04      	cmp	r2, #4
   122ea:	d000      	beq.n	122ee <__aeabi_fmul+0x20a>
   122ec:	3304      	adds	r3, #4
   122ee:	015a      	lsls	r2, r3, #5
   122f0:	d504      	bpl.n	122fc <__aeabi_fmul+0x218>
   122f2:	2401      	movs	r4, #1
   122f4:	2201      	movs	r2, #1
   122f6:	400c      	ands	r4, r1
   122f8:	2000      	movs	r0, #0
   122fa:	e73d      	b.n	12178 <__aeabi_fmul+0x94>
   122fc:	2401      	movs	r4, #1
   122fe:	019b      	lsls	r3, r3, #6
   12300:	0a58      	lsrs	r0, r3, #9
   12302:	400c      	ands	r4, r1
   12304:	2200      	movs	r2, #0
   12306:	e737      	b.n	12178 <__aeabi_fmul+0x94>
   12308:	2080      	movs	r0, #128	; 0x80
   1230a:	2401      	movs	r4, #1
   1230c:	03c0      	lsls	r0, r0, #15
   1230e:	4328      	orrs	r0, r5
   12310:	0240      	lsls	r0, r0, #9
   12312:	0a40      	lsrs	r0, r0, #9
   12314:	400c      	ands	r4, r1
   12316:	22ff      	movs	r2, #255	; 0xff
   12318:	e72e      	b.n	12178 <__aeabi_fmul+0x94>
   1231a:	46c0      	nop			; (mov r8, r8)
   1231c:	000193c8 	.word	0x000193c8
   12320:	f7ffffff 	.word	0xf7ffffff

00012324 <__aeabi_fsub>:
   12324:	b5f0      	push	{r4, r5, r6, r7, lr}
   12326:	464f      	mov	r7, r9
   12328:	46d6      	mov	lr, sl
   1232a:	4646      	mov	r6, r8
   1232c:	0044      	lsls	r4, r0, #1
   1232e:	b5c0      	push	{r6, r7, lr}
   12330:	0fc2      	lsrs	r2, r0, #31
   12332:	0247      	lsls	r7, r0, #9
   12334:	0248      	lsls	r0, r1, #9
   12336:	0a40      	lsrs	r0, r0, #9
   12338:	4684      	mov	ip, r0
   1233a:	4666      	mov	r6, ip
   1233c:	0a7b      	lsrs	r3, r7, #9
   1233e:	0048      	lsls	r0, r1, #1
   12340:	0fc9      	lsrs	r1, r1, #31
   12342:	469a      	mov	sl, r3
   12344:	0e24      	lsrs	r4, r4, #24
   12346:	0015      	movs	r5, r2
   12348:	00db      	lsls	r3, r3, #3
   1234a:	0e00      	lsrs	r0, r0, #24
   1234c:	4689      	mov	r9, r1
   1234e:	00f6      	lsls	r6, r6, #3
   12350:	28ff      	cmp	r0, #255	; 0xff
   12352:	d100      	bne.n	12356 <__aeabi_fsub+0x32>
   12354:	e08f      	b.n	12476 <__aeabi_fsub+0x152>
   12356:	2101      	movs	r1, #1
   12358:	464f      	mov	r7, r9
   1235a:	404f      	eors	r7, r1
   1235c:	0039      	movs	r1, r7
   1235e:	4291      	cmp	r1, r2
   12360:	d066      	beq.n	12430 <__aeabi_fsub+0x10c>
   12362:	1a22      	subs	r2, r4, r0
   12364:	2a00      	cmp	r2, #0
   12366:	dc00      	bgt.n	1236a <__aeabi_fsub+0x46>
   12368:	e09d      	b.n	124a6 <__aeabi_fsub+0x182>
   1236a:	2800      	cmp	r0, #0
   1236c:	d13d      	bne.n	123ea <__aeabi_fsub+0xc6>
   1236e:	2e00      	cmp	r6, #0
   12370:	d100      	bne.n	12374 <__aeabi_fsub+0x50>
   12372:	e08b      	b.n	1248c <__aeabi_fsub+0x168>
   12374:	1e51      	subs	r1, r2, #1
   12376:	2900      	cmp	r1, #0
   12378:	d000      	beq.n	1237c <__aeabi_fsub+0x58>
   1237a:	e0b5      	b.n	124e8 <__aeabi_fsub+0x1c4>
   1237c:	2401      	movs	r4, #1
   1237e:	1b9b      	subs	r3, r3, r6
   12380:	015a      	lsls	r2, r3, #5
   12382:	d544      	bpl.n	1240e <__aeabi_fsub+0xea>
   12384:	019b      	lsls	r3, r3, #6
   12386:	099f      	lsrs	r7, r3, #6
   12388:	0038      	movs	r0, r7
   1238a:	f001 fe57 	bl	1403c <__clzsi2>
   1238e:	3805      	subs	r0, #5
   12390:	4087      	lsls	r7, r0
   12392:	4284      	cmp	r4, r0
   12394:	dd00      	ble.n	12398 <__aeabi_fsub+0x74>
   12396:	e096      	b.n	124c6 <__aeabi_fsub+0x1a2>
   12398:	1b04      	subs	r4, r0, r4
   1239a:	003a      	movs	r2, r7
   1239c:	2020      	movs	r0, #32
   1239e:	3401      	adds	r4, #1
   123a0:	40e2      	lsrs	r2, r4
   123a2:	1b04      	subs	r4, r0, r4
   123a4:	40a7      	lsls	r7, r4
   123a6:	003b      	movs	r3, r7
   123a8:	1e5f      	subs	r7, r3, #1
   123aa:	41bb      	sbcs	r3, r7
   123ac:	2400      	movs	r4, #0
   123ae:	4313      	orrs	r3, r2
   123b0:	075a      	lsls	r2, r3, #29
   123b2:	d004      	beq.n	123be <__aeabi_fsub+0x9a>
   123b4:	220f      	movs	r2, #15
   123b6:	401a      	ands	r2, r3
   123b8:	2a04      	cmp	r2, #4
   123ba:	d000      	beq.n	123be <__aeabi_fsub+0x9a>
   123bc:	3304      	adds	r3, #4
   123be:	015a      	lsls	r2, r3, #5
   123c0:	d527      	bpl.n	12412 <__aeabi_fsub+0xee>
   123c2:	3401      	adds	r4, #1
   123c4:	2cff      	cmp	r4, #255	; 0xff
   123c6:	d100      	bne.n	123ca <__aeabi_fsub+0xa6>
   123c8:	e079      	b.n	124be <__aeabi_fsub+0x19a>
   123ca:	2201      	movs	r2, #1
   123cc:	019b      	lsls	r3, r3, #6
   123ce:	0a5b      	lsrs	r3, r3, #9
   123d0:	b2e4      	uxtb	r4, r4
   123d2:	402a      	ands	r2, r5
   123d4:	025b      	lsls	r3, r3, #9
   123d6:	05e4      	lsls	r4, r4, #23
   123d8:	0a58      	lsrs	r0, r3, #9
   123da:	07d2      	lsls	r2, r2, #31
   123dc:	4320      	orrs	r0, r4
   123de:	4310      	orrs	r0, r2
   123e0:	bc1c      	pop	{r2, r3, r4}
   123e2:	4690      	mov	r8, r2
   123e4:	4699      	mov	r9, r3
   123e6:	46a2      	mov	sl, r4
   123e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123ea:	2cff      	cmp	r4, #255	; 0xff
   123ec:	d0e0      	beq.n	123b0 <__aeabi_fsub+0x8c>
   123ee:	2180      	movs	r1, #128	; 0x80
   123f0:	04c9      	lsls	r1, r1, #19
   123f2:	430e      	orrs	r6, r1
   123f4:	2a1b      	cmp	r2, #27
   123f6:	dc7b      	bgt.n	124f0 <__aeabi_fsub+0x1cc>
   123f8:	0031      	movs	r1, r6
   123fa:	2020      	movs	r0, #32
   123fc:	40d1      	lsrs	r1, r2
   123fe:	1a82      	subs	r2, r0, r2
   12400:	4096      	lsls	r6, r2
   12402:	1e72      	subs	r2, r6, #1
   12404:	4196      	sbcs	r6, r2
   12406:	430e      	orrs	r6, r1
   12408:	1b9b      	subs	r3, r3, r6
   1240a:	015a      	lsls	r2, r3, #5
   1240c:	d4ba      	bmi.n	12384 <__aeabi_fsub+0x60>
   1240e:	075a      	lsls	r2, r3, #29
   12410:	d1d0      	bne.n	123b4 <__aeabi_fsub+0x90>
   12412:	2201      	movs	r2, #1
   12414:	08df      	lsrs	r7, r3, #3
   12416:	402a      	ands	r2, r5
   12418:	2cff      	cmp	r4, #255	; 0xff
   1241a:	d133      	bne.n	12484 <__aeabi_fsub+0x160>
   1241c:	2f00      	cmp	r7, #0
   1241e:	d100      	bne.n	12422 <__aeabi_fsub+0xfe>
   12420:	e0a8      	b.n	12574 <__aeabi_fsub+0x250>
   12422:	2380      	movs	r3, #128	; 0x80
   12424:	03db      	lsls	r3, r3, #15
   12426:	433b      	orrs	r3, r7
   12428:	025b      	lsls	r3, r3, #9
   1242a:	0a5b      	lsrs	r3, r3, #9
   1242c:	24ff      	movs	r4, #255	; 0xff
   1242e:	e7d1      	b.n	123d4 <__aeabi_fsub+0xb0>
   12430:	1a21      	subs	r1, r4, r0
   12432:	2900      	cmp	r1, #0
   12434:	dd4c      	ble.n	124d0 <__aeabi_fsub+0x1ac>
   12436:	2800      	cmp	r0, #0
   12438:	d02a      	beq.n	12490 <__aeabi_fsub+0x16c>
   1243a:	2cff      	cmp	r4, #255	; 0xff
   1243c:	d0b8      	beq.n	123b0 <__aeabi_fsub+0x8c>
   1243e:	2080      	movs	r0, #128	; 0x80
   12440:	04c0      	lsls	r0, r0, #19
   12442:	4306      	orrs	r6, r0
   12444:	291b      	cmp	r1, #27
   12446:	dd00      	ble.n	1244a <__aeabi_fsub+0x126>
   12448:	e0af      	b.n	125aa <__aeabi_fsub+0x286>
   1244a:	0030      	movs	r0, r6
   1244c:	2720      	movs	r7, #32
   1244e:	40c8      	lsrs	r0, r1
   12450:	1a79      	subs	r1, r7, r1
   12452:	408e      	lsls	r6, r1
   12454:	1e71      	subs	r1, r6, #1
   12456:	418e      	sbcs	r6, r1
   12458:	4306      	orrs	r6, r0
   1245a:	199b      	adds	r3, r3, r6
   1245c:	0159      	lsls	r1, r3, #5
   1245e:	d5d6      	bpl.n	1240e <__aeabi_fsub+0xea>
   12460:	3401      	adds	r4, #1
   12462:	2cff      	cmp	r4, #255	; 0xff
   12464:	d100      	bne.n	12468 <__aeabi_fsub+0x144>
   12466:	e085      	b.n	12574 <__aeabi_fsub+0x250>
   12468:	2201      	movs	r2, #1
   1246a:	497a      	ldr	r1, [pc, #488]	; (12654 <__aeabi_fsub+0x330>)
   1246c:	401a      	ands	r2, r3
   1246e:	085b      	lsrs	r3, r3, #1
   12470:	400b      	ands	r3, r1
   12472:	4313      	orrs	r3, r2
   12474:	e79c      	b.n	123b0 <__aeabi_fsub+0x8c>
   12476:	2e00      	cmp	r6, #0
   12478:	d000      	beq.n	1247c <__aeabi_fsub+0x158>
   1247a:	e770      	b.n	1235e <__aeabi_fsub+0x3a>
   1247c:	e76b      	b.n	12356 <__aeabi_fsub+0x32>
   1247e:	1e3b      	subs	r3, r7, #0
   12480:	d1c5      	bne.n	1240e <__aeabi_fsub+0xea>
   12482:	2200      	movs	r2, #0
   12484:	027b      	lsls	r3, r7, #9
   12486:	0a5b      	lsrs	r3, r3, #9
   12488:	b2e4      	uxtb	r4, r4
   1248a:	e7a3      	b.n	123d4 <__aeabi_fsub+0xb0>
   1248c:	0014      	movs	r4, r2
   1248e:	e78f      	b.n	123b0 <__aeabi_fsub+0x8c>
   12490:	2e00      	cmp	r6, #0
   12492:	d04d      	beq.n	12530 <__aeabi_fsub+0x20c>
   12494:	1e48      	subs	r0, r1, #1
   12496:	2800      	cmp	r0, #0
   12498:	d157      	bne.n	1254a <__aeabi_fsub+0x226>
   1249a:	199b      	adds	r3, r3, r6
   1249c:	2401      	movs	r4, #1
   1249e:	015a      	lsls	r2, r3, #5
   124a0:	d5b5      	bpl.n	1240e <__aeabi_fsub+0xea>
   124a2:	2402      	movs	r4, #2
   124a4:	e7e0      	b.n	12468 <__aeabi_fsub+0x144>
   124a6:	2a00      	cmp	r2, #0
   124a8:	d125      	bne.n	124f6 <__aeabi_fsub+0x1d2>
   124aa:	1c62      	adds	r2, r4, #1
   124ac:	b2d2      	uxtb	r2, r2
   124ae:	2a01      	cmp	r2, #1
   124b0:	dd72      	ble.n	12598 <__aeabi_fsub+0x274>
   124b2:	1b9f      	subs	r7, r3, r6
   124b4:	017a      	lsls	r2, r7, #5
   124b6:	d535      	bpl.n	12524 <__aeabi_fsub+0x200>
   124b8:	1af7      	subs	r7, r6, r3
   124ba:	000d      	movs	r5, r1
   124bc:	e764      	b.n	12388 <__aeabi_fsub+0x64>
   124be:	2201      	movs	r2, #1
   124c0:	2300      	movs	r3, #0
   124c2:	402a      	ands	r2, r5
   124c4:	e786      	b.n	123d4 <__aeabi_fsub+0xb0>
   124c6:	003b      	movs	r3, r7
   124c8:	4a63      	ldr	r2, [pc, #396]	; (12658 <__aeabi_fsub+0x334>)
   124ca:	1a24      	subs	r4, r4, r0
   124cc:	4013      	ands	r3, r2
   124ce:	e76f      	b.n	123b0 <__aeabi_fsub+0x8c>
   124d0:	2900      	cmp	r1, #0
   124d2:	d16c      	bne.n	125ae <__aeabi_fsub+0x28a>
   124d4:	1c61      	adds	r1, r4, #1
   124d6:	b2c8      	uxtb	r0, r1
   124d8:	2801      	cmp	r0, #1
   124da:	dd4e      	ble.n	1257a <__aeabi_fsub+0x256>
   124dc:	29ff      	cmp	r1, #255	; 0xff
   124de:	d049      	beq.n	12574 <__aeabi_fsub+0x250>
   124e0:	199b      	adds	r3, r3, r6
   124e2:	085b      	lsrs	r3, r3, #1
   124e4:	000c      	movs	r4, r1
   124e6:	e763      	b.n	123b0 <__aeabi_fsub+0x8c>
   124e8:	2aff      	cmp	r2, #255	; 0xff
   124ea:	d041      	beq.n	12570 <__aeabi_fsub+0x24c>
   124ec:	000a      	movs	r2, r1
   124ee:	e781      	b.n	123f4 <__aeabi_fsub+0xd0>
   124f0:	2601      	movs	r6, #1
   124f2:	1b9b      	subs	r3, r3, r6
   124f4:	e789      	b.n	1240a <__aeabi_fsub+0xe6>
   124f6:	2c00      	cmp	r4, #0
   124f8:	d01c      	beq.n	12534 <__aeabi_fsub+0x210>
   124fa:	28ff      	cmp	r0, #255	; 0xff
   124fc:	d021      	beq.n	12542 <__aeabi_fsub+0x21e>
   124fe:	2480      	movs	r4, #128	; 0x80
   12500:	04e4      	lsls	r4, r4, #19
   12502:	4252      	negs	r2, r2
   12504:	4323      	orrs	r3, r4
   12506:	2a1b      	cmp	r2, #27
   12508:	dd00      	ble.n	1250c <__aeabi_fsub+0x1e8>
   1250a:	e096      	b.n	1263a <__aeabi_fsub+0x316>
   1250c:	001c      	movs	r4, r3
   1250e:	2520      	movs	r5, #32
   12510:	40d4      	lsrs	r4, r2
   12512:	1aaa      	subs	r2, r5, r2
   12514:	4093      	lsls	r3, r2
   12516:	1e5a      	subs	r2, r3, #1
   12518:	4193      	sbcs	r3, r2
   1251a:	4323      	orrs	r3, r4
   1251c:	1af3      	subs	r3, r6, r3
   1251e:	0004      	movs	r4, r0
   12520:	000d      	movs	r5, r1
   12522:	e72d      	b.n	12380 <__aeabi_fsub+0x5c>
   12524:	2f00      	cmp	r7, #0
   12526:	d000      	beq.n	1252a <__aeabi_fsub+0x206>
   12528:	e72e      	b.n	12388 <__aeabi_fsub+0x64>
   1252a:	2200      	movs	r2, #0
   1252c:	2400      	movs	r4, #0
   1252e:	e7a9      	b.n	12484 <__aeabi_fsub+0x160>
   12530:	000c      	movs	r4, r1
   12532:	e73d      	b.n	123b0 <__aeabi_fsub+0x8c>
   12534:	2b00      	cmp	r3, #0
   12536:	d058      	beq.n	125ea <__aeabi_fsub+0x2c6>
   12538:	43d2      	mvns	r2, r2
   1253a:	2a00      	cmp	r2, #0
   1253c:	d0ee      	beq.n	1251c <__aeabi_fsub+0x1f8>
   1253e:	28ff      	cmp	r0, #255	; 0xff
   12540:	d1e1      	bne.n	12506 <__aeabi_fsub+0x1e2>
   12542:	0033      	movs	r3, r6
   12544:	24ff      	movs	r4, #255	; 0xff
   12546:	000d      	movs	r5, r1
   12548:	e732      	b.n	123b0 <__aeabi_fsub+0x8c>
   1254a:	29ff      	cmp	r1, #255	; 0xff
   1254c:	d010      	beq.n	12570 <__aeabi_fsub+0x24c>
   1254e:	0001      	movs	r1, r0
   12550:	e778      	b.n	12444 <__aeabi_fsub+0x120>
   12552:	2b00      	cmp	r3, #0
   12554:	d06e      	beq.n	12634 <__aeabi_fsub+0x310>
   12556:	24ff      	movs	r4, #255	; 0xff
   12558:	2e00      	cmp	r6, #0
   1255a:	d100      	bne.n	1255e <__aeabi_fsub+0x23a>
   1255c:	e728      	b.n	123b0 <__aeabi_fsub+0x8c>
   1255e:	2280      	movs	r2, #128	; 0x80
   12560:	4651      	mov	r1, sl
   12562:	03d2      	lsls	r2, r2, #15
   12564:	4211      	tst	r1, r2
   12566:	d003      	beq.n	12570 <__aeabi_fsub+0x24c>
   12568:	4661      	mov	r1, ip
   1256a:	4211      	tst	r1, r2
   1256c:	d100      	bne.n	12570 <__aeabi_fsub+0x24c>
   1256e:	0033      	movs	r3, r6
   12570:	24ff      	movs	r4, #255	; 0xff
   12572:	e71d      	b.n	123b0 <__aeabi_fsub+0x8c>
   12574:	24ff      	movs	r4, #255	; 0xff
   12576:	2300      	movs	r3, #0
   12578:	e72c      	b.n	123d4 <__aeabi_fsub+0xb0>
   1257a:	2c00      	cmp	r4, #0
   1257c:	d1e9      	bne.n	12552 <__aeabi_fsub+0x22e>
   1257e:	2b00      	cmp	r3, #0
   12580:	d063      	beq.n	1264a <__aeabi_fsub+0x326>
   12582:	2e00      	cmp	r6, #0
   12584:	d100      	bne.n	12588 <__aeabi_fsub+0x264>
   12586:	e713      	b.n	123b0 <__aeabi_fsub+0x8c>
   12588:	199b      	adds	r3, r3, r6
   1258a:	015a      	lsls	r2, r3, #5
   1258c:	d400      	bmi.n	12590 <__aeabi_fsub+0x26c>
   1258e:	e73e      	b.n	1240e <__aeabi_fsub+0xea>
   12590:	4a31      	ldr	r2, [pc, #196]	; (12658 <__aeabi_fsub+0x334>)
   12592:	000c      	movs	r4, r1
   12594:	4013      	ands	r3, r2
   12596:	e70b      	b.n	123b0 <__aeabi_fsub+0x8c>
   12598:	2c00      	cmp	r4, #0
   1259a:	d11e      	bne.n	125da <__aeabi_fsub+0x2b6>
   1259c:	2b00      	cmp	r3, #0
   1259e:	d12f      	bne.n	12600 <__aeabi_fsub+0x2dc>
   125a0:	2e00      	cmp	r6, #0
   125a2:	d04f      	beq.n	12644 <__aeabi_fsub+0x320>
   125a4:	0033      	movs	r3, r6
   125a6:	000d      	movs	r5, r1
   125a8:	e702      	b.n	123b0 <__aeabi_fsub+0x8c>
   125aa:	2601      	movs	r6, #1
   125ac:	e755      	b.n	1245a <__aeabi_fsub+0x136>
   125ae:	2c00      	cmp	r4, #0
   125b0:	d11f      	bne.n	125f2 <__aeabi_fsub+0x2ce>
   125b2:	2b00      	cmp	r3, #0
   125b4:	d043      	beq.n	1263e <__aeabi_fsub+0x31a>
   125b6:	43c9      	mvns	r1, r1
   125b8:	2900      	cmp	r1, #0
   125ba:	d00b      	beq.n	125d4 <__aeabi_fsub+0x2b0>
   125bc:	28ff      	cmp	r0, #255	; 0xff
   125be:	d039      	beq.n	12634 <__aeabi_fsub+0x310>
   125c0:	291b      	cmp	r1, #27
   125c2:	dc44      	bgt.n	1264e <__aeabi_fsub+0x32a>
   125c4:	001c      	movs	r4, r3
   125c6:	2720      	movs	r7, #32
   125c8:	40cc      	lsrs	r4, r1
   125ca:	1a79      	subs	r1, r7, r1
   125cc:	408b      	lsls	r3, r1
   125ce:	1e59      	subs	r1, r3, #1
   125d0:	418b      	sbcs	r3, r1
   125d2:	4323      	orrs	r3, r4
   125d4:	199b      	adds	r3, r3, r6
   125d6:	0004      	movs	r4, r0
   125d8:	e740      	b.n	1245c <__aeabi_fsub+0x138>
   125da:	2b00      	cmp	r3, #0
   125dc:	d11a      	bne.n	12614 <__aeabi_fsub+0x2f0>
   125de:	2e00      	cmp	r6, #0
   125e0:	d124      	bne.n	1262c <__aeabi_fsub+0x308>
   125e2:	2780      	movs	r7, #128	; 0x80
   125e4:	2200      	movs	r2, #0
   125e6:	03ff      	lsls	r7, r7, #15
   125e8:	e71b      	b.n	12422 <__aeabi_fsub+0xfe>
   125ea:	0033      	movs	r3, r6
   125ec:	0004      	movs	r4, r0
   125ee:	000d      	movs	r5, r1
   125f0:	e6de      	b.n	123b0 <__aeabi_fsub+0x8c>
   125f2:	28ff      	cmp	r0, #255	; 0xff
   125f4:	d01e      	beq.n	12634 <__aeabi_fsub+0x310>
   125f6:	2480      	movs	r4, #128	; 0x80
   125f8:	04e4      	lsls	r4, r4, #19
   125fa:	4249      	negs	r1, r1
   125fc:	4323      	orrs	r3, r4
   125fe:	e7df      	b.n	125c0 <__aeabi_fsub+0x29c>
   12600:	2e00      	cmp	r6, #0
   12602:	d100      	bne.n	12606 <__aeabi_fsub+0x2e2>
   12604:	e6d4      	b.n	123b0 <__aeabi_fsub+0x8c>
   12606:	1b9f      	subs	r7, r3, r6
   12608:	017a      	lsls	r2, r7, #5
   1260a:	d400      	bmi.n	1260e <__aeabi_fsub+0x2ea>
   1260c:	e737      	b.n	1247e <__aeabi_fsub+0x15a>
   1260e:	1af3      	subs	r3, r6, r3
   12610:	000d      	movs	r5, r1
   12612:	e6cd      	b.n	123b0 <__aeabi_fsub+0x8c>
   12614:	24ff      	movs	r4, #255	; 0xff
   12616:	2e00      	cmp	r6, #0
   12618:	d100      	bne.n	1261c <__aeabi_fsub+0x2f8>
   1261a:	e6c9      	b.n	123b0 <__aeabi_fsub+0x8c>
   1261c:	2280      	movs	r2, #128	; 0x80
   1261e:	4650      	mov	r0, sl
   12620:	03d2      	lsls	r2, r2, #15
   12622:	4210      	tst	r0, r2
   12624:	d0a4      	beq.n	12570 <__aeabi_fsub+0x24c>
   12626:	4660      	mov	r0, ip
   12628:	4210      	tst	r0, r2
   1262a:	d1a1      	bne.n	12570 <__aeabi_fsub+0x24c>
   1262c:	0033      	movs	r3, r6
   1262e:	000d      	movs	r5, r1
   12630:	24ff      	movs	r4, #255	; 0xff
   12632:	e6bd      	b.n	123b0 <__aeabi_fsub+0x8c>
   12634:	0033      	movs	r3, r6
   12636:	24ff      	movs	r4, #255	; 0xff
   12638:	e6ba      	b.n	123b0 <__aeabi_fsub+0x8c>
   1263a:	2301      	movs	r3, #1
   1263c:	e76e      	b.n	1251c <__aeabi_fsub+0x1f8>
   1263e:	0033      	movs	r3, r6
   12640:	0004      	movs	r4, r0
   12642:	e6b5      	b.n	123b0 <__aeabi_fsub+0x8c>
   12644:	2700      	movs	r7, #0
   12646:	2200      	movs	r2, #0
   12648:	e71c      	b.n	12484 <__aeabi_fsub+0x160>
   1264a:	0033      	movs	r3, r6
   1264c:	e6b0      	b.n	123b0 <__aeabi_fsub+0x8c>
   1264e:	2301      	movs	r3, #1
   12650:	e7c0      	b.n	125d4 <__aeabi_fsub+0x2b0>
   12652:	46c0      	nop			; (mov r8, r8)
   12654:	7dffffff 	.word	0x7dffffff
   12658:	fbffffff 	.word	0xfbffffff

0001265c <__aeabi_f2iz>:
   1265c:	0241      	lsls	r1, r0, #9
   1265e:	0043      	lsls	r3, r0, #1
   12660:	0fc2      	lsrs	r2, r0, #31
   12662:	0a49      	lsrs	r1, r1, #9
   12664:	0e1b      	lsrs	r3, r3, #24
   12666:	2000      	movs	r0, #0
   12668:	2b7e      	cmp	r3, #126	; 0x7e
   1266a:	dd0d      	ble.n	12688 <__aeabi_f2iz+0x2c>
   1266c:	2b9d      	cmp	r3, #157	; 0x9d
   1266e:	dc0c      	bgt.n	1268a <__aeabi_f2iz+0x2e>
   12670:	2080      	movs	r0, #128	; 0x80
   12672:	0400      	lsls	r0, r0, #16
   12674:	4301      	orrs	r1, r0
   12676:	2b95      	cmp	r3, #149	; 0x95
   12678:	dc0a      	bgt.n	12690 <__aeabi_f2iz+0x34>
   1267a:	2096      	movs	r0, #150	; 0x96
   1267c:	1ac3      	subs	r3, r0, r3
   1267e:	40d9      	lsrs	r1, r3
   12680:	4248      	negs	r0, r1
   12682:	2a00      	cmp	r2, #0
   12684:	d100      	bne.n	12688 <__aeabi_f2iz+0x2c>
   12686:	0008      	movs	r0, r1
   12688:	4770      	bx	lr
   1268a:	4b03      	ldr	r3, [pc, #12]	; (12698 <__aeabi_f2iz+0x3c>)
   1268c:	18d0      	adds	r0, r2, r3
   1268e:	e7fb      	b.n	12688 <__aeabi_f2iz+0x2c>
   12690:	3b96      	subs	r3, #150	; 0x96
   12692:	4099      	lsls	r1, r3
   12694:	e7f4      	b.n	12680 <__aeabi_f2iz+0x24>
   12696:	46c0      	nop			; (mov r8, r8)
   12698:	7fffffff 	.word	0x7fffffff

0001269c <__aeabi_i2f>:
   1269c:	b570      	push	{r4, r5, r6, lr}
   1269e:	2800      	cmp	r0, #0
   126a0:	d030      	beq.n	12704 <__aeabi_i2f+0x68>
   126a2:	17c3      	asrs	r3, r0, #31
   126a4:	18c4      	adds	r4, r0, r3
   126a6:	405c      	eors	r4, r3
   126a8:	0fc5      	lsrs	r5, r0, #31
   126aa:	0020      	movs	r0, r4
   126ac:	f001 fcc6 	bl	1403c <__clzsi2>
   126b0:	239e      	movs	r3, #158	; 0x9e
   126b2:	1a1b      	subs	r3, r3, r0
   126b4:	2b96      	cmp	r3, #150	; 0x96
   126b6:	dc0d      	bgt.n	126d4 <__aeabi_i2f+0x38>
   126b8:	2296      	movs	r2, #150	; 0x96
   126ba:	1ad2      	subs	r2, r2, r3
   126bc:	4094      	lsls	r4, r2
   126be:	002a      	movs	r2, r5
   126c0:	0264      	lsls	r4, r4, #9
   126c2:	0a64      	lsrs	r4, r4, #9
   126c4:	b2db      	uxtb	r3, r3
   126c6:	0264      	lsls	r4, r4, #9
   126c8:	05db      	lsls	r3, r3, #23
   126ca:	0a60      	lsrs	r0, r4, #9
   126cc:	07d2      	lsls	r2, r2, #31
   126ce:	4318      	orrs	r0, r3
   126d0:	4310      	orrs	r0, r2
   126d2:	bd70      	pop	{r4, r5, r6, pc}
   126d4:	2b99      	cmp	r3, #153	; 0x99
   126d6:	dc19      	bgt.n	1270c <__aeabi_i2f+0x70>
   126d8:	2299      	movs	r2, #153	; 0x99
   126da:	1ad2      	subs	r2, r2, r3
   126dc:	2a00      	cmp	r2, #0
   126de:	dd29      	ble.n	12734 <__aeabi_i2f+0x98>
   126e0:	4094      	lsls	r4, r2
   126e2:	0022      	movs	r2, r4
   126e4:	4c14      	ldr	r4, [pc, #80]	; (12738 <__aeabi_i2f+0x9c>)
   126e6:	4014      	ands	r4, r2
   126e8:	0751      	lsls	r1, r2, #29
   126ea:	d004      	beq.n	126f6 <__aeabi_i2f+0x5a>
   126ec:	210f      	movs	r1, #15
   126ee:	400a      	ands	r2, r1
   126f0:	2a04      	cmp	r2, #4
   126f2:	d000      	beq.n	126f6 <__aeabi_i2f+0x5a>
   126f4:	3404      	adds	r4, #4
   126f6:	0162      	lsls	r2, r4, #5
   126f8:	d413      	bmi.n	12722 <__aeabi_i2f+0x86>
   126fa:	01a4      	lsls	r4, r4, #6
   126fc:	0a64      	lsrs	r4, r4, #9
   126fe:	b2db      	uxtb	r3, r3
   12700:	002a      	movs	r2, r5
   12702:	e7e0      	b.n	126c6 <__aeabi_i2f+0x2a>
   12704:	2200      	movs	r2, #0
   12706:	2300      	movs	r3, #0
   12708:	2400      	movs	r4, #0
   1270a:	e7dc      	b.n	126c6 <__aeabi_i2f+0x2a>
   1270c:	2205      	movs	r2, #5
   1270e:	0021      	movs	r1, r4
   12710:	1a12      	subs	r2, r2, r0
   12712:	40d1      	lsrs	r1, r2
   12714:	22b9      	movs	r2, #185	; 0xb9
   12716:	1ad2      	subs	r2, r2, r3
   12718:	4094      	lsls	r4, r2
   1271a:	1e62      	subs	r2, r4, #1
   1271c:	4194      	sbcs	r4, r2
   1271e:	430c      	orrs	r4, r1
   12720:	e7da      	b.n	126d8 <__aeabi_i2f+0x3c>
   12722:	4b05      	ldr	r3, [pc, #20]	; (12738 <__aeabi_i2f+0x9c>)
   12724:	002a      	movs	r2, r5
   12726:	401c      	ands	r4, r3
   12728:	239f      	movs	r3, #159	; 0x9f
   1272a:	01a4      	lsls	r4, r4, #6
   1272c:	1a1b      	subs	r3, r3, r0
   1272e:	0a64      	lsrs	r4, r4, #9
   12730:	b2db      	uxtb	r3, r3
   12732:	e7c8      	b.n	126c6 <__aeabi_i2f+0x2a>
   12734:	0022      	movs	r2, r4
   12736:	e7d5      	b.n	126e4 <__aeabi_i2f+0x48>
   12738:	fbffffff 	.word	0xfbffffff

0001273c <__aeabi_dadd>:
   1273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1273e:	4645      	mov	r5, r8
   12740:	46de      	mov	lr, fp
   12742:	4657      	mov	r7, sl
   12744:	464e      	mov	r6, r9
   12746:	030c      	lsls	r4, r1, #12
   12748:	b5e0      	push	{r5, r6, r7, lr}
   1274a:	004e      	lsls	r6, r1, #1
   1274c:	0fc9      	lsrs	r1, r1, #31
   1274e:	4688      	mov	r8, r1
   12750:	000d      	movs	r5, r1
   12752:	0a61      	lsrs	r1, r4, #9
   12754:	0f44      	lsrs	r4, r0, #29
   12756:	430c      	orrs	r4, r1
   12758:	00c7      	lsls	r7, r0, #3
   1275a:	0319      	lsls	r1, r3, #12
   1275c:	0058      	lsls	r0, r3, #1
   1275e:	0fdb      	lsrs	r3, r3, #31
   12760:	469b      	mov	fp, r3
   12762:	0a4b      	lsrs	r3, r1, #9
   12764:	0f51      	lsrs	r1, r2, #29
   12766:	430b      	orrs	r3, r1
   12768:	0d76      	lsrs	r6, r6, #21
   1276a:	0d40      	lsrs	r0, r0, #21
   1276c:	0019      	movs	r1, r3
   1276e:	00d2      	lsls	r2, r2, #3
   12770:	45d8      	cmp	r8, fp
   12772:	d100      	bne.n	12776 <__aeabi_dadd+0x3a>
   12774:	e0ae      	b.n	128d4 <__aeabi_dadd+0x198>
   12776:	1a35      	subs	r5, r6, r0
   12778:	2d00      	cmp	r5, #0
   1277a:	dc00      	bgt.n	1277e <__aeabi_dadd+0x42>
   1277c:	e0f6      	b.n	1296c <__aeabi_dadd+0x230>
   1277e:	2800      	cmp	r0, #0
   12780:	d10f      	bne.n	127a2 <__aeabi_dadd+0x66>
   12782:	4313      	orrs	r3, r2
   12784:	d100      	bne.n	12788 <__aeabi_dadd+0x4c>
   12786:	e0db      	b.n	12940 <__aeabi_dadd+0x204>
   12788:	1e6b      	subs	r3, r5, #1
   1278a:	2b00      	cmp	r3, #0
   1278c:	d000      	beq.n	12790 <__aeabi_dadd+0x54>
   1278e:	e137      	b.n	12a00 <__aeabi_dadd+0x2c4>
   12790:	1aba      	subs	r2, r7, r2
   12792:	4297      	cmp	r7, r2
   12794:	41bf      	sbcs	r7, r7
   12796:	1a64      	subs	r4, r4, r1
   12798:	427f      	negs	r7, r7
   1279a:	1be4      	subs	r4, r4, r7
   1279c:	2601      	movs	r6, #1
   1279e:	0017      	movs	r7, r2
   127a0:	e024      	b.n	127ec <__aeabi_dadd+0xb0>
   127a2:	4bc6      	ldr	r3, [pc, #792]	; (12abc <__aeabi_dadd+0x380>)
   127a4:	429e      	cmp	r6, r3
   127a6:	d04d      	beq.n	12844 <__aeabi_dadd+0x108>
   127a8:	2380      	movs	r3, #128	; 0x80
   127aa:	041b      	lsls	r3, r3, #16
   127ac:	4319      	orrs	r1, r3
   127ae:	2d38      	cmp	r5, #56	; 0x38
   127b0:	dd00      	ble.n	127b4 <__aeabi_dadd+0x78>
   127b2:	e107      	b.n	129c4 <__aeabi_dadd+0x288>
   127b4:	2d1f      	cmp	r5, #31
   127b6:	dd00      	ble.n	127ba <__aeabi_dadd+0x7e>
   127b8:	e138      	b.n	12a2c <__aeabi_dadd+0x2f0>
   127ba:	2020      	movs	r0, #32
   127bc:	1b43      	subs	r3, r0, r5
   127be:	469a      	mov	sl, r3
   127c0:	000b      	movs	r3, r1
   127c2:	4650      	mov	r0, sl
   127c4:	4083      	lsls	r3, r0
   127c6:	4699      	mov	r9, r3
   127c8:	0013      	movs	r3, r2
   127ca:	4648      	mov	r0, r9
   127cc:	40eb      	lsrs	r3, r5
   127ce:	4318      	orrs	r0, r3
   127d0:	0003      	movs	r3, r0
   127d2:	4650      	mov	r0, sl
   127d4:	4082      	lsls	r2, r0
   127d6:	1e50      	subs	r0, r2, #1
   127d8:	4182      	sbcs	r2, r0
   127da:	40e9      	lsrs	r1, r5
   127dc:	431a      	orrs	r2, r3
   127de:	1aba      	subs	r2, r7, r2
   127e0:	1a61      	subs	r1, r4, r1
   127e2:	4297      	cmp	r7, r2
   127e4:	41a4      	sbcs	r4, r4
   127e6:	0017      	movs	r7, r2
   127e8:	4264      	negs	r4, r4
   127ea:	1b0c      	subs	r4, r1, r4
   127ec:	0223      	lsls	r3, r4, #8
   127ee:	d562      	bpl.n	128b6 <__aeabi_dadd+0x17a>
   127f0:	0264      	lsls	r4, r4, #9
   127f2:	0a65      	lsrs	r5, r4, #9
   127f4:	2d00      	cmp	r5, #0
   127f6:	d100      	bne.n	127fa <__aeabi_dadd+0xbe>
   127f8:	e0df      	b.n	129ba <__aeabi_dadd+0x27e>
   127fa:	0028      	movs	r0, r5
   127fc:	f001 fc1e 	bl	1403c <__clzsi2>
   12800:	0003      	movs	r3, r0
   12802:	3b08      	subs	r3, #8
   12804:	2b1f      	cmp	r3, #31
   12806:	dd00      	ble.n	1280a <__aeabi_dadd+0xce>
   12808:	e0d2      	b.n	129b0 <__aeabi_dadd+0x274>
   1280a:	2220      	movs	r2, #32
   1280c:	003c      	movs	r4, r7
   1280e:	1ad2      	subs	r2, r2, r3
   12810:	409d      	lsls	r5, r3
   12812:	40d4      	lsrs	r4, r2
   12814:	409f      	lsls	r7, r3
   12816:	4325      	orrs	r5, r4
   12818:	429e      	cmp	r6, r3
   1281a:	dd00      	ble.n	1281e <__aeabi_dadd+0xe2>
   1281c:	e0c4      	b.n	129a8 <__aeabi_dadd+0x26c>
   1281e:	1b9e      	subs	r6, r3, r6
   12820:	1c73      	adds	r3, r6, #1
   12822:	2b1f      	cmp	r3, #31
   12824:	dd00      	ble.n	12828 <__aeabi_dadd+0xec>
   12826:	e0f1      	b.n	12a0c <__aeabi_dadd+0x2d0>
   12828:	2220      	movs	r2, #32
   1282a:	0038      	movs	r0, r7
   1282c:	0029      	movs	r1, r5
   1282e:	1ad2      	subs	r2, r2, r3
   12830:	40d8      	lsrs	r0, r3
   12832:	4091      	lsls	r1, r2
   12834:	4097      	lsls	r7, r2
   12836:	002c      	movs	r4, r5
   12838:	4301      	orrs	r1, r0
   1283a:	1e78      	subs	r0, r7, #1
   1283c:	4187      	sbcs	r7, r0
   1283e:	40dc      	lsrs	r4, r3
   12840:	2600      	movs	r6, #0
   12842:	430f      	orrs	r7, r1
   12844:	077b      	lsls	r3, r7, #29
   12846:	d009      	beq.n	1285c <__aeabi_dadd+0x120>
   12848:	230f      	movs	r3, #15
   1284a:	403b      	ands	r3, r7
   1284c:	2b04      	cmp	r3, #4
   1284e:	d005      	beq.n	1285c <__aeabi_dadd+0x120>
   12850:	1d3b      	adds	r3, r7, #4
   12852:	42bb      	cmp	r3, r7
   12854:	41bf      	sbcs	r7, r7
   12856:	427f      	negs	r7, r7
   12858:	19e4      	adds	r4, r4, r7
   1285a:	001f      	movs	r7, r3
   1285c:	0223      	lsls	r3, r4, #8
   1285e:	d52c      	bpl.n	128ba <__aeabi_dadd+0x17e>
   12860:	4b96      	ldr	r3, [pc, #600]	; (12abc <__aeabi_dadd+0x380>)
   12862:	3601      	adds	r6, #1
   12864:	429e      	cmp	r6, r3
   12866:	d100      	bne.n	1286a <__aeabi_dadd+0x12e>
   12868:	e09a      	b.n	129a0 <__aeabi_dadd+0x264>
   1286a:	4645      	mov	r5, r8
   1286c:	4b94      	ldr	r3, [pc, #592]	; (12ac0 <__aeabi_dadd+0x384>)
   1286e:	08ff      	lsrs	r7, r7, #3
   12870:	401c      	ands	r4, r3
   12872:	0760      	lsls	r0, r4, #29
   12874:	0576      	lsls	r6, r6, #21
   12876:	0264      	lsls	r4, r4, #9
   12878:	4307      	orrs	r7, r0
   1287a:	0b24      	lsrs	r4, r4, #12
   1287c:	0d76      	lsrs	r6, r6, #21
   1287e:	2100      	movs	r1, #0
   12880:	0324      	lsls	r4, r4, #12
   12882:	0b23      	lsrs	r3, r4, #12
   12884:	0d0c      	lsrs	r4, r1, #20
   12886:	4a8f      	ldr	r2, [pc, #572]	; (12ac4 <__aeabi_dadd+0x388>)
   12888:	0524      	lsls	r4, r4, #20
   1288a:	431c      	orrs	r4, r3
   1288c:	4014      	ands	r4, r2
   1288e:	0533      	lsls	r3, r6, #20
   12890:	4323      	orrs	r3, r4
   12892:	005b      	lsls	r3, r3, #1
   12894:	07ed      	lsls	r5, r5, #31
   12896:	085b      	lsrs	r3, r3, #1
   12898:	432b      	orrs	r3, r5
   1289a:	0038      	movs	r0, r7
   1289c:	0019      	movs	r1, r3
   1289e:	bc3c      	pop	{r2, r3, r4, r5}
   128a0:	4690      	mov	r8, r2
   128a2:	4699      	mov	r9, r3
   128a4:	46a2      	mov	sl, r4
   128a6:	46ab      	mov	fp, r5
   128a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   128aa:	4664      	mov	r4, ip
   128ac:	4304      	orrs	r4, r0
   128ae:	d100      	bne.n	128b2 <__aeabi_dadd+0x176>
   128b0:	e211      	b.n	12cd6 <__aeabi_dadd+0x59a>
   128b2:	0004      	movs	r4, r0
   128b4:	4667      	mov	r7, ip
   128b6:	077b      	lsls	r3, r7, #29
   128b8:	d1c6      	bne.n	12848 <__aeabi_dadd+0x10c>
   128ba:	4645      	mov	r5, r8
   128bc:	0760      	lsls	r0, r4, #29
   128be:	08ff      	lsrs	r7, r7, #3
   128c0:	4307      	orrs	r7, r0
   128c2:	08e4      	lsrs	r4, r4, #3
   128c4:	4b7d      	ldr	r3, [pc, #500]	; (12abc <__aeabi_dadd+0x380>)
   128c6:	429e      	cmp	r6, r3
   128c8:	d030      	beq.n	1292c <__aeabi_dadd+0x1f0>
   128ca:	0324      	lsls	r4, r4, #12
   128cc:	0576      	lsls	r6, r6, #21
   128ce:	0b24      	lsrs	r4, r4, #12
   128d0:	0d76      	lsrs	r6, r6, #21
   128d2:	e7d4      	b.n	1287e <__aeabi_dadd+0x142>
   128d4:	1a33      	subs	r3, r6, r0
   128d6:	469a      	mov	sl, r3
   128d8:	2b00      	cmp	r3, #0
   128da:	dd78      	ble.n	129ce <__aeabi_dadd+0x292>
   128dc:	2800      	cmp	r0, #0
   128de:	d031      	beq.n	12944 <__aeabi_dadd+0x208>
   128e0:	4876      	ldr	r0, [pc, #472]	; (12abc <__aeabi_dadd+0x380>)
   128e2:	4286      	cmp	r6, r0
   128e4:	d0ae      	beq.n	12844 <__aeabi_dadd+0x108>
   128e6:	2080      	movs	r0, #128	; 0x80
   128e8:	0400      	lsls	r0, r0, #16
   128ea:	4301      	orrs	r1, r0
   128ec:	4653      	mov	r3, sl
   128ee:	2b38      	cmp	r3, #56	; 0x38
   128f0:	dc00      	bgt.n	128f4 <__aeabi_dadd+0x1b8>
   128f2:	e0e9      	b.n	12ac8 <__aeabi_dadd+0x38c>
   128f4:	430a      	orrs	r2, r1
   128f6:	1e51      	subs	r1, r2, #1
   128f8:	418a      	sbcs	r2, r1
   128fa:	2100      	movs	r1, #0
   128fc:	19d2      	adds	r2, r2, r7
   128fe:	42ba      	cmp	r2, r7
   12900:	41bf      	sbcs	r7, r7
   12902:	1909      	adds	r1, r1, r4
   12904:	427c      	negs	r4, r7
   12906:	0017      	movs	r7, r2
   12908:	190c      	adds	r4, r1, r4
   1290a:	0223      	lsls	r3, r4, #8
   1290c:	d5d3      	bpl.n	128b6 <__aeabi_dadd+0x17a>
   1290e:	4b6b      	ldr	r3, [pc, #428]	; (12abc <__aeabi_dadd+0x380>)
   12910:	3601      	adds	r6, #1
   12912:	429e      	cmp	r6, r3
   12914:	d100      	bne.n	12918 <__aeabi_dadd+0x1dc>
   12916:	e13a      	b.n	12b8e <__aeabi_dadd+0x452>
   12918:	2001      	movs	r0, #1
   1291a:	4b69      	ldr	r3, [pc, #420]	; (12ac0 <__aeabi_dadd+0x384>)
   1291c:	401c      	ands	r4, r3
   1291e:	087b      	lsrs	r3, r7, #1
   12920:	4007      	ands	r7, r0
   12922:	431f      	orrs	r7, r3
   12924:	07e0      	lsls	r0, r4, #31
   12926:	4307      	orrs	r7, r0
   12928:	0864      	lsrs	r4, r4, #1
   1292a:	e78b      	b.n	12844 <__aeabi_dadd+0x108>
   1292c:	0023      	movs	r3, r4
   1292e:	433b      	orrs	r3, r7
   12930:	d100      	bne.n	12934 <__aeabi_dadd+0x1f8>
   12932:	e1cb      	b.n	12ccc <__aeabi_dadd+0x590>
   12934:	2280      	movs	r2, #128	; 0x80
   12936:	0312      	lsls	r2, r2, #12
   12938:	4314      	orrs	r4, r2
   1293a:	0324      	lsls	r4, r4, #12
   1293c:	0b24      	lsrs	r4, r4, #12
   1293e:	e79e      	b.n	1287e <__aeabi_dadd+0x142>
   12940:	002e      	movs	r6, r5
   12942:	e77f      	b.n	12844 <__aeabi_dadd+0x108>
   12944:	0008      	movs	r0, r1
   12946:	4310      	orrs	r0, r2
   12948:	d100      	bne.n	1294c <__aeabi_dadd+0x210>
   1294a:	e0b4      	b.n	12ab6 <__aeabi_dadd+0x37a>
   1294c:	1e58      	subs	r0, r3, #1
   1294e:	2800      	cmp	r0, #0
   12950:	d000      	beq.n	12954 <__aeabi_dadd+0x218>
   12952:	e0de      	b.n	12b12 <__aeabi_dadd+0x3d6>
   12954:	18ba      	adds	r2, r7, r2
   12956:	42ba      	cmp	r2, r7
   12958:	419b      	sbcs	r3, r3
   1295a:	1864      	adds	r4, r4, r1
   1295c:	425b      	negs	r3, r3
   1295e:	18e4      	adds	r4, r4, r3
   12960:	0017      	movs	r7, r2
   12962:	2601      	movs	r6, #1
   12964:	0223      	lsls	r3, r4, #8
   12966:	d5a6      	bpl.n	128b6 <__aeabi_dadd+0x17a>
   12968:	2602      	movs	r6, #2
   1296a:	e7d5      	b.n	12918 <__aeabi_dadd+0x1dc>
   1296c:	2d00      	cmp	r5, #0
   1296e:	d16e      	bne.n	12a4e <__aeabi_dadd+0x312>
   12970:	1c70      	adds	r0, r6, #1
   12972:	0540      	lsls	r0, r0, #21
   12974:	0d40      	lsrs	r0, r0, #21
   12976:	2801      	cmp	r0, #1
   12978:	dc00      	bgt.n	1297c <__aeabi_dadd+0x240>
   1297a:	e0f9      	b.n	12b70 <__aeabi_dadd+0x434>
   1297c:	1ab8      	subs	r0, r7, r2
   1297e:	4684      	mov	ip, r0
   12980:	4287      	cmp	r7, r0
   12982:	4180      	sbcs	r0, r0
   12984:	1ae5      	subs	r5, r4, r3
   12986:	4240      	negs	r0, r0
   12988:	1a2d      	subs	r5, r5, r0
   1298a:	0228      	lsls	r0, r5, #8
   1298c:	d400      	bmi.n	12990 <__aeabi_dadd+0x254>
   1298e:	e089      	b.n	12aa4 <__aeabi_dadd+0x368>
   12990:	1bd7      	subs	r7, r2, r7
   12992:	42ba      	cmp	r2, r7
   12994:	4192      	sbcs	r2, r2
   12996:	1b1c      	subs	r4, r3, r4
   12998:	4252      	negs	r2, r2
   1299a:	1aa5      	subs	r5, r4, r2
   1299c:	46d8      	mov	r8, fp
   1299e:	e729      	b.n	127f4 <__aeabi_dadd+0xb8>
   129a0:	4645      	mov	r5, r8
   129a2:	2400      	movs	r4, #0
   129a4:	2700      	movs	r7, #0
   129a6:	e76a      	b.n	1287e <__aeabi_dadd+0x142>
   129a8:	4c45      	ldr	r4, [pc, #276]	; (12ac0 <__aeabi_dadd+0x384>)
   129aa:	1af6      	subs	r6, r6, r3
   129ac:	402c      	ands	r4, r5
   129ae:	e749      	b.n	12844 <__aeabi_dadd+0x108>
   129b0:	003d      	movs	r5, r7
   129b2:	3828      	subs	r0, #40	; 0x28
   129b4:	4085      	lsls	r5, r0
   129b6:	2700      	movs	r7, #0
   129b8:	e72e      	b.n	12818 <__aeabi_dadd+0xdc>
   129ba:	0038      	movs	r0, r7
   129bc:	f001 fb3e 	bl	1403c <__clzsi2>
   129c0:	3020      	adds	r0, #32
   129c2:	e71d      	b.n	12800 <__aeabi_dadd+0xc4>
   129c4:	430a      	orrs	r2, r1
   129c6:	1e51      	subs	r1, r2, #1
   129c8:	418a      	sbcs	r2, r1
   129ca:	2100      	movs	r1, #0
   129cc:	e707      	b.n	127de <__aeabi_dadd+0xa2>
   129ce:	2b00      	cmp	r3, #0
   129d0:	d000      	beq.n	129d4 <__aeabi_dadd+0x298>
   129d2:	e0f3      	b.n	12bbc <__aeabi_dadd+0x480>
   129d4:	1c70      	adds	r0, r6, #1
   129d6:	0543      	lsls	r3, r0, #21
   129d8:	0d5b      	lsrs	r3, r3, #21
   129da:	2b01      	cmp	r3, #1
   129dc:	dc00      	bgt.n	129e0 <__aeabi_dadd+0x2a4>
   129de:	e0ad      	b.n	12b3c <__aeabi_dadd+0x400>
   129e0:	4b36      	ldr	r3, [pc, #216]	; (12abc <__aeabi_dadd+0x380>)
   129e2:	4298      	cmp	r0, r3
   129e4:	d100      	bne.n	129e8 <__aeabi_dadd+0x2ac>
   129e6:	e0d1      	b.n	12b8c <__aeabi_dadd+0x450>
   129e8:	18ba      	adds	r2, r7, r2
   129ea:	42ba      	cmp	r2, r7
   129ec:	41bf      	sbcs	r7, r7
   129ee:	1864      	adds	r4, r4, r1
   129f0:	427f      	negs	r7, r7
   129f2:	19e4      	adds	r4, r4, r7
   129f4:	07e7      	lsls	r7, r4, #31
   129f6:	0852      	lsrs	r2, r2, #1
   129f8:	4317      	orrs	r7, r2
   129fa:	0864      	lsrs	r4, r4, #1
   129fc:	0006      	movs	r6, r0
   129fe:	e721      	b.n	12844 <__aeabi_dadd+0x108>
   12a00:	482e      	ldr	r0, [pc, #184]	; (12abc <__aeabi_dadd+0x380>)
   12a02:	4285      	cmp	r5, r0
   12a04:	d100      	bne.n	12a08 <__aeabi_dadd+0x2cc>
   12a06:	e093      	b.n	12b30 <__aeabi_dadd+0x3f4>
   12a08:	001d      	movs	r5, r3
   12a0a:	e6d0      	b.n	127ae <__aeabi_dadd+0x72>
   12a0c:	0029      	movs	r1, r5
   12a0e:	3e1f      	subs	r6, #31
   12a10:	40f1      	lsrs	r1, r6
   12a12:	2b20      	cmp	r3, #32
   12a14:	d100      	bne.n	12a18 <__aeabi_dadd+0x2dc>
   12a16:	e08d      	b.n	12b34 <__aeabi_dadd+0x3f8>
   12a18:	2240      	movs	r2, #64	; 0x40
   12a1a:	1ad3      	subs	r3, r2, r3
   12a1c:	409d      	lsls	r5, r3
   12a1e:	432f      	orrs	r7, r5
   12a20:	1e7d      	subs	r5, r7, #1
   12a22:	41af      	sbcs	r7, r5
   12a24:	2400      	movs	r4, #0
   12a26:	430f      	orrs	r7, r1
   12a28:	2600      	movs	r6, #0
   12a2a:	e744      	b.n	128b6 <__aeabi_dadd+0x17a>
   12a2c:	002b      	movs	r3, r5
   12a2e:	0008      	movs	r0, r1
   12a30:	3b20      	subs	r3, #32
   12a32:	40d8      	lsrs	r0, r3
   12a34:	0003      	movs	r3, r0
   12a36:	2d20      	cmp	r5, #32
   12a38:	d100      	bne.n	12a3c <__aeabi_dadd+0x300>
   12a3a:	e07d      	b.n	12b38 <__aeabi_dadd+0x3fc>
   12a3c:	2040      	movs	r0, #64	; 0x40
   12a3e:	1b45      	subs	r5, r0, r5
   12a40:	40a9      	lsls	r1, r5
   12a42:	430a      	orrs	r2, r1
   12a44:	1e51      	subs	r1, r2, #1
   12a46:	418a      	sbcs	r2, r1
   12a48:	2100      	movs	r1, #0
   12a4a:	431a      	orrs	r2, r3
   12a4c:	e6c7      	b.n	127de <__aeabi_dadd+0xa2>
   12a4e:	2e00      	cmp	r6, #0
   12a50:	d050      	beq.n	12af4 <__aeabi_dadd+0x3b8>
   12a52:	4e1a      	ldr	r6, [pc, #104]	; (12abc <__aeabi_dadd+0x380>)
   12a54:	42b0      	cmp	r0, r6
   12a56:	d057      	beq.n	12b08 <__aeabi_dadd+0x3cc>
   12a58:	2680      	movs	r6, #128	; 0x80
   12a5a:	426b      	negs	r3, r5
   12a5c:	4699      	mov	r9, r3
   12a5e:	0436      	lsls	r6, r6, #16
   12a60:	4334      	orrs	r4, r6
   12a62:	464b      	mov	r3, r9
   12a64:	2b38      	cmp	r3, #56	; 0x38
   12a66:	dd00      	ble.n	12a6a <__aeabi_dadd+0x32e>
   12a68:	e0d6      	b.n	12c18 <__aeabi_dadd+0x4dc>
   12a6a:	2b1f      	cmp	r3, #31
   12a6c:	dd00      	ble.n	12a70 <__aeabi_dadd+0x334>
   12a6e:	e135      	b.n	12cdc <__aeabi_dadd+0x5a0>
   12a70:	2620      	movs	r6, #32
   12a72:	1af5      	subs	r5, r6, r3
   12a74:	0026      	movs	r6, r4
   12a76:	40ae      	lsls	r6, r5
   12a78:	46b2      	mov	sl, r6
   12a7a:	003e      	movs	r6, r7
   12a7c:	40de      	lsrs	r6, r3
   12a7e:	46ac      	mov	ip, r5
   12a80:	0035      	movs	r5, r6
   12a82:	4656      	mov	r6, sl
   12a84:	432e      	orrs	r6, r5
   12a86:	4665      	mov	r5, ip
   12a88:	40af      	lsls	r7, r5
   12a8a:	1e7d      	subs	r5, r7, #1
   12a8c:	41af      	sbcs	r7, r5
   12a8e:	40dc      	lsrs	r4, r3
   12a90:	4337      	orrs	r7, r6
   12a92:	1bd7      	subs	r7, r2, r7
   12a94:	42ba      	cmp	r2, r7
   12a96:	4192      	sbcs	r2, r2
   12a98:	1b0c      	subs	r4, r1, r4
   12a9a:	4252      	negs	r2, r2
   12a9c:	1aa4      	subs	r4, r4, r2
   12a9e:	0006      	movs	r6, r0
   12aa0:	46d8      	mov	r8, fp
   12aa2:	e6a3      	b.n	127ec <__aeabi_dadd+0xb0>
   12aa4:	4664      	mov	r4, ip
   12aa6:	4667      	mov	r7, ip
   12aa8:	432c      	orrs	r4, r5
   12aaa:	d000      	beq.n	12aae <__aeabi_dadd+0x372>
   12aac:	e6a2      	b.n	127f4 <__aeabi_dadd+0xb8>
   12aae:	2500      	movs	r5, #0
   12ab0:	2600      	movs	r6, #0
   12ab2:	2700      	movs	r7, #0
   12ab4:	e706      	b.n	128c4 <__aeabi_dadd+0x188>
   12ab6:	001e      	movs	r6, r3
   12ab8:	e6c4      	b.n	12844 <__aeabi_dadd+0x108>
   12aba:	46c0      	nop			; (mov r8, r8)
   12abc:	000007ff 	.word	0x000007ff
   12ac0:	ff7fffff 	.word	0xff7fffff
   12ac4:	800fffff 	.word	0x800fffff
   12ac8:	2b1f      	cmp	r3, #31
   12aca:	dc63      	bgt.n	12b94 <__aeabi_dadd+0x458>
   12acc:	2020      	movs	r0, #32
   12ace:	1ac3      	subs	r3, r0, r3
   12ad0:	0008      	movs	r0, r1
   12ad2:	4098      	lsls	r0, r3
   12ad4:	469c      	mov	ip, r3
   12ad6:	4683      	mov	fp, r0
   12ad8:	4653      	mov	r3, sl
   12ada:	0010      	movs	r0, r2
   12adc:	40d8      	lsrs	r0, r3
   12ade:	0003      	movs	r3, r0
   12ae0:	4658      	mov	r0, fp
   12ae2:	4318      	orrs	r0, r3
   12ae4:	4663      	mov	r3, ip
   12ae6:	409a      	lsls	r2, r3
   12ae8:	1e53      	subs	r3, r2, #1
   12aea:	419a      	sbcs	r2, r3
   12aec:	4653      	mov	r3, sl
   12aee:	4302      	orrs	r2, r0
   12af0:	40d9      	lsrs	r1, r3
   12af2:	e703      	b.n	128fc <__aeabi_dadd+0x1c0>
   12af4:	0026      	movs	r6, r4
   12af6:	433e      	orrs	r6, r7
   12af8:	d006      	beq.n	12b08 <__aeabi_dadd+0x3cc>
   12afa:	43eb      	mvns	r3, r5
   12afc:	4699      	mov	r9, r3
   12afe:	2b00      	cmp	r3, #0
   12b00:	d0c7      	beq.n	12a92 <__aeabi_dadd+0x356>
   12b02:	4e94      	ldr	r6, [pc, #592]	; (12d54 <__aeabi_dadd+0x618>)
   12b04:	42b0      	cmp	r0, r6
   12b06:	d1ac      	bne.n	12a62 <__aeabi_dadd+0x326>
   12b08:	000c      	movs	r4, r1
   12b0a:	0017      	movs	r7, r2
   12b0c:	0006      	movs	r6, r0
   12b0e:	46d8      	mov	r8, fp
   12b10:	e698      	b.n	12844 <__aeabi_dadd+0x108>
   12b12:	4b90      	ldr	r3, [pc, #576]	; (12d54 <__aeabi_dadd+0x618>)
   12b14:	459a      	cmp	sl, r3
   12b16:	d00b      	beq.n	12b30 <__aeabi_dadd+0x3f4>
   12b18:	4682      	mov	sl, r0
   12b1a:	e6e7      	b.n	128ec <__aeabi_dadd+0x1b0>
   12b1c:	2800      	cmp	r0, #0
   12b1e:	d000      	beq.n	12b22 <__aeabi_dadd+0x3e6>
   12b20:	e09e      	b.n	12c60 <__aeabi_dadd+0x524>
   12b22:	0018      	movs	r0, r3
   12b24:	4310      	orrs	r0, r2
   12b26:	d100      	bne.n	12b2a <__aeabi_dadd+0x3ee>
   12b28:	e0e9      	b.n	12cfe <__aeabi_dadd+0x5c2>
   12b2a:	001c      	movs	r4, r3
   12b2c:	0017      	movs	r7, r2
   12b2e:	46d8      	mov	r8, fp
   12b30:	4e88      	ldr	r6, [pc, #544]	; (12d54 <__aeabi_dadd+0x618>)
   12b32:	e687      	b.n	12844 <__aeabi_dadd+0x108>
   12b34:	2500      	movs	r5, #0
   12b36:	e772      	b.n	12a1e <__aeabi_dadd+0x2e2>
   12b38:	2100      	movs	r1, #0
   12b3a:	e782      	b.n	12a42 <__aeabi_dadd+0x306>
   12b3c:	0023      	movs	r3, r4
   12b3e:	433b      	orrs	r3, r7
   12b40:	2e00      	cmp	r6, #0
   12b42:	d000      	beq.n	12b46 <__aeabi_dadd+0x40a>
   12b44:	e0ab      	b.n	12c9e <__aeabi_dadd+0x562>
   12b46:	2b00      	cmp	r3, #0
   12b48:	d100      	bne.n	12b4c <__aeabi_dadd+0x410>
   12b4a:	e0e7      	b.n	12d1c <__aeabi_dadd+0x5e0>
   12b4c:	000b      	movs	r3, r1
   12b4e:	4313      	orrs	r3, r2
   12b50:	d100      	bne.n	12b54 <__aeabi_dadd+0x418>
   12b52:	e677      	b.n	12844 <__aeabi_dadd+0x108>
   12b54:	18ba      	adds	r2, r7, r2
   12b56:	42ba      	cmp	r2, r7
   12b58:	41bf      	sbcs	r7, r7
   12b5a:	1864      	adds	r4, r4, r1
   12b5c:	427f      	negs	r7, r7
   12b5e:	19e4      	adds	r4, r4, r7
   12b60:	0223      	lsls	r3, r4, #8
   12b62:	d400      	bmi.n	12b66 <__aeabi_dadd+0x42a>
   12b64:	e0f2      	b.n	12d4c <__aeabi_dadd+0x610>
   12b66:	4b7c      	ldr	r3, [pc, #496]	; (12d58 <__aeabi_dadd+0x61c>)
   12b68:	0017      	movs	r7, r2
   12b6a:	401c      	ands	r4, r3
   12b6c:	0006      	movs	r6, r0
   12b6e:	e669      	b.n	12844 <__aeabi_dadd+0x108>
   12b70:	0020      	movs	r0, r4
   12b72:	4338      	orrs	r0, r7
   12b74:	2e00      	cmp	r6, #0
   12b76:	d1d1      	bne.n	12b1c <__aeabi_dadd+0x3e0>
   12b78:	2800      	cmp	r0, #0
   12b7a:	d15b      	bne.n	12c34 <__aeabi_dadd+0x4f8>
   12b7c:	001c      	movs	r4, r3
   12b7e:	4314      	orrs	r4, r2
   12b80:	d100      	bne.n	12b84 <__aeabi_dadd+0x448>
   12b82:	e0a8      	b.n	12cd6 <__aeabi_dadd+0x59a>
   12b84:	001c      	movs	r4, r3
   12b86:	0017      	movs	r7, r2
   12b88:	46d8      	mov	r8, fp
   12b8a:	e65b      	b.n	12844 <__aeabi_dadd+0x108>
   12b8c:	0006      	movs	r6, r0
   12b8e:	2400      	movs	r4, #0
   12b90:	2700      	movs	r7, #0
   12b92:	e697      	b.n	128c4 <__aeabi_dadd+0x188>
   12b94:	4650      	mov	r0, sl
   12b96:	000b      	movs	r3, r1
   12b98:	3820      	subs	r0, #32
   12b9a:	40c3      	lsrs	r3, r0
   12b9c:	4699      	mov	r9, r3
   12b9e:	4653      	mov	r3, sl
   12ba0:	2b20      	cmp	r3, #32
   12ba2:	d100      	bne.n	12ba6 <__aeabi_dadd+0x46a>
   12ba4:	e095      	b.n	12cd2 <__aeabi_dadd+0x596>
   12ba6:	2340      	movs	r3, #64	; 0x40
   12ba8:	4650      	mov	r0, sl
   12baa:	1a1b      	subs	r3, r3, r0
   12bac:	4099      	lsls	r1, r3
   12bae:	430a      	orrs	r2, r1
   12bb0:	1e51      	subs	r1, r2, #1
   12bb2:	418a      	sbcs	r2, r1
   12bb4:	464b      	mov	r3, r9
   12bb6:	2100      	movs	r1, #0
   12bb8:	431a      	orrs	r2, r3
   12bba:	e69f      	b.n	128fc <__aeabi_dadd+0x1c0>
   12bbc:	2e00      	cmp	r6, #0
   12bbe:	d130      	bne.n	12c22 <__aeabi_dadd+0x4e6>
   12bc0:	0026      	movs	r6, r4
   12bc2:	433e      	orrs	r6, r7
   12bc4:	d067      	beq.n	12c96 <__aeabi_dadd+0x55a>
   12bc6:	43db      	mvns	r3, r3
   12bc8:	469a      	mov	sl, r3
   12bca:	2b00      	cmp	r3, #0
   12bcc:	d01c      	beq.n	12c08 <__aeabi_dadd+0x4cc>
   12bce:	4e61      	ldr	r6, [pc, #388]	; (12d54 <__aeabi_dadd+0x618>)
   12bd0:	42b0      	cmp	r0, r6
   12bd2:	d060      	beq.n	12c96 <__aeabi_dadd+0x55a>
   12bd4:	4653      	mov	r3, sl
   12bd6:	2b38      	cmp	r3, #56	; 0x38
   12bd8:	dd00      	ble.n	12bdc <__aeabi_dadd+0x4a0>
   12bda:	e096      	b.n	12d0a <__aeabi_dadd+0x5ce>
   12bdc:	2b1f      	cmp	r3, #31
   12bde:	dd00      	ble.n	12be2 <__aeabi_dadd+0x4a6>
   12be0:	e09f      	b.n	12d22 <__aeabi_dadd+0x5e6>
   12be2:	2620      	movs	r6, #32
   12be4:	1af3      	subs	r3, r6, r3
   12be6:	0026      	movs	r6, r4
   12be8:	409e      	lsls	r6, r3
   12bea:	469c      	mov	ip, r3
   12bec:	46b3      	mov	fp, r6
   12bee:	4653      	mov	r3, sl
   12bf0:	003e      	movs	r6, r7
   12bf2:	40de      	lsrs	r6, r3
   12bf4:	0033      	movs	r3, r6
   12bf6:	465e      	mov	r6, fp
   12bf8:	431e      	orrs	r6, r3
   12bfa:	4663      	mov	r3, ip
   12bfc:	409f      	lsls	r7, r3
   12bfe:	1e7b      	subs	r3, r7, #1
   12c00:	419f      	sbcs	r7, r3
   12c02:	4653      	mov	r3, sl
   12c04:	40dc      	lsrs	r4, r3
   12c06:	4337      	orrs	r7, r6
   12c08:	18bf      	adds	r7, r7, r2
   12c0a:	4297      	cmp	r7, r2
   12c0c:	4192      	sbcs	r2, r2
   12c0e:	1864      	adds	r4, r4, r1
   12c10:	4252      	negs	r2, r2
   12c12:	18a4      	adds	r4, r4, r2
   12c14:	0006      	movs	r6, r0
   12c16:	e678      	b.n	1290a <__aeabi_dadd+0x1ce>
   12c18:	4327      	orrs	r7, r4
   12c1a:	1e7c      	subs	r4, r7, #1
   12c1c:	41a7      	sbcs	r7, r4
   12c1e:	2400      	movs	r4, #0
   12c20:	e737      	b.n	12a92 <__aeabi_dadd+0x356>
   12c22:	4e4c      	ldr	r6, [pc, #304]	; (12d54 <__aeabi_dadd+0x618>)
   12c24:	42b0      	cmp	r0, r6
   12c26:	d036      	beq.n	12c96 <__aeabi_dadd+0x55a>
   12c28:	2680      	movs	r6, #128	; 0x80
   12c2a:	425b      	negs	r3, r3
   12c2c:	0436      	lsls	r6, r6, #16
   12c2e:	469a      	mov	sl, r3
   12c30:	4334      	orrs	r4, r6
   12c32:	e7cf      	b.n	12bd4 <__aeabi_dadd+0x498>
   12c34:	0018      	movs	r0, r3
   12c36:	4310      	orrs	r0, r2
   12c38:	d100      	bne.n	12c3c <__aeabi_dadd+0x500>
   12c3a:	e603      	b.n	12844 <__aeabi_dadd+0x108>
   12c3c:	1ab8      	subs	r0, r7, r2
   12c3e:	4684      	mov	ip, r0
   12c40:	4567      	cmp	r7, ip
   12c42:	41ad      	sbcs	r5, r5
   12c44:	1ae0      	subs	r0, r4, r3
   12c46:	426d      	negs	r5, r5
   12c48:	1b40      	subs	r0, r0, r5
   12c4a:	0205      	lsls	r5, r0, #8
   12c4c:	d400      	bmi.n	12c50 <__aeabi_dadd+0x514>
   12c4e:	e62c      	b.n	128aa <__aeabi_dadd+0x16e>
   12c50:	1bd7      	subs	r7, r2, r7
   12c52:	42ba      	cmp	r2, r7
   12c54:	4192      	sbcs	r2, r2
   12c56:	1b1c      	subs	r4, r3, r4
   12c58:	4252      	negs	r2, r2
   12c5a:	1aa4      	subs	r4, r4, r2
   12c5c:	46d8      	mov	r8, fp
   12c5e:	e5f1      	b.n	12844 <__aeabi_dadd+0x108>
   12c60:	0018      	movs	r0, r3
   12c62:	4310      	orrs	r0, r2
   12c64:	d100      	bne.n	12c68 <__aeabi_dadd+0x52c>
   12c66:	e763      	b.n	12b30 <__aeabi_dadd+0x3f4>
   12c68:	08f8      	lsrs	r0, r7, #3
   12c6a:	0767      	lsls	r7, r4, #29
   12c6c:	4307      	orrs	r7, r0
   12c6e:	2080      	movs	r0, #128	; 0x80
   12c70:	08e4      	lsrs	r4, r4, #3
   12c72:	0300      	lsls	r0, r0, #12
   12c74:	4204      	tst	r4, r0
   12c76:	d008      	beq.n	12c8a <__aeabi_dadd+0x54e>
   12c78:	08dd      	lsrs	r5, r3, #3
   12c7a:	4205      	tst	r5, r0
   12c7c:	d105      	bne.n	12c8a <__aeabi_dadd+0x54e>
   12c7e:	08d2      	lsrs	r2, r2, #3
   12c80:	0759      	lsls	r1, r3, #29
   12c82:	4311      	orrs	r1, r2
   12c84:	000f      	movs	r7, r1
   12c86:	002c      	movs	r4, r5
   12c88:	46d8      	mov	r8, fp
   12c8a:	0f7b      	lsrs	r3, r7, #29
   12c8c:	00e4      	lsls	r4, r4, #3
   12c8e:	431c      	orrs	r4, r3
   12c90:	00ff      	lsls	r7, r7, #3
   12c92:	4e30      	ldr	r6, [pc, #192]	; (12d54 <__aeabi_dadd+0x618>)
   12c94:	e5d6      	b.n	12844 <__aeabi_dadd+0x108>
   12c96:	000c      	movs	r4, r1
   12c98:	0017      	movs	r7, r2
   12c9a:	0006      	movs	r6, r0
   12c9c:	e5d2      	b.n	12844 <__aeabi_dadd+0x108>
   12c9e:	2b00      	cmp	r3, #0
   12ca0:	d038      	beq.n	12d14 <__aeabi_dadd+0x5d8>
   12ca2:	000b      	movs	r3, r1
   12ca4:	4313      	orrs	r3, r2
   12ca6:	d100      	bne.n	12caa <__aeabi_dadd+0x56e>
   12ca8:	e742      	b.n	12b30 <__aeabi_dadd+0x3f4>
   12caa:	08f8      	lsrs	r0, r7, #3
   12cac:	0767      	lsls	r7, r4, #29
   12cae:	4307      	orrs	r7, r0
   12cb0:	2080      	movs	r0, #128	; 0x80
   12cb2:	08e4      	lsrs	r4, r4, #3
   12cb4:	0300      	lsls	r0, r0, #12
   12cb6:	4204      	tst	r4, r0
   12cb8:	d0e7      	beq.n	12c8a <__aeabi_dadd+0x54e>
   12cba:	08cb      	lsrs	r3, r1, #3
   12cbc:	4203      	tst	r3, r0
   12cbe:	d1e4      	bne.n	12c8a <__aeabi_dadd+0x54e>
   12cc0:	08d2      	lsrs	r2, r2, #3
   12cc2:	0749      	lsls	r1, r1, #29
   12cc4:	4311      	orrs	r1, r2
   12cc6:	000f      	movs	r7, r1
   12cc8:	001c      	movs	r4, r3
   12cca:	e7de      	b.n	12c8a <__aeabi_dadd+0x54e>
   12ccc:	2700      	movs	r7, #0
   12cce:	2400      	movs	r4, #0
   12cd0:	e5d5      	b.n	1287e <__aeabi_dadd+0x142>
   12cd2:	2100      	movs	r1, #0
   12cd4:	e76b      	b.n	12bae <__aeabi_dadd+0x472>
   12cd6:	2500      	movs	r5, #0
   12cd8:	2700      	movs	r7, #0
   12cda:	e5f3      	b.n	128c4 <__aeabi_dadd+0x188>
   12cdc:	464e      	mov	r6, r9
   12cde:	0025      	movs	r5, r4
   12ce0:	3e20      	subs	r6, #32
   12ce2:	40f5      	lsrs	r5, r6
   12ce4:	464b      	mov	r3, r9
   12ce6:	002e      	movs	r6, r5
   12ce8:	2b20      	cmp	r3, #32
   12cea:	d02d      	beq.n	12d48 <__aeabi_dadd+0x60c>
   12cec:	2540      	movs	r5, #64	; 0x40
   12cee:	1aed      	subs	r5, r5, r3
   12cf0:	40ac      	lsls	r4, r5
   12cf2:	4327      	orrs	r7, r4
   12cf4:	1e7c      	subs	r4, r7, #1
   12cf6:	41a7      	sbcs	r7, r4
   12cf8:	2400      	movs	r4, #0
   12cfa:	4337      	orrs	r7, r6
   12cfc:	e6c9      	b.n	12a92 <__aeabi_dadd+0x356>
   12cfe:	2480      	movs	r4, #128	; 0x80
   12d00:	2500      	movs	r5, #0
   12d02:	0324      	lsls	r4, r4, #12
   12d04:	4e13      	ldr	r6, [pc, #76]	; (12d54 <__aeabi_dadd+0x618>)
   12d06:	2700      	movs	r7, #0
   12d08:	e5dc      	b.n	128c4 <__aeabi_dadd+0x188>
   12d0a:	4327      	orrs	r7, r4
   12d0c:	1e7c      	subs	r4, r7, #1
   12d0e:	41a7      	sbcs	r7, r4
   12d10:	2400      	movs	r4, #0
   12d12:	e779      	b.n	12c08 <__aeabi_dadd+0x4cc>
   12d14:	000c      	movs	r4, r1
   12d16:	0017      	movs	r7, r2
   12d18:	4e0e      	ldr	r6, [pc, #56]	; (12d54 <__aeabi_dadd+0x618>)
   12d1a:	e593      	b.n	12844 <__aeabi_dadd+0x108>
   12d1c:	000c      	movs	r4, r1
   12d1e:	0017      	movs	r7, r2
   12d20:	e590      	b.n	12844 <__aeabi_dadd+0x108>
   12d22:	4656      	mov	r6, sl
   12d24:	0023      	movs	r3, r4
   12d26:	3e20      	subs	r6, #32
   12d28:	40f3      	lsrs	r3, r6
   12d2a:	4699      	mov	r9, r3
   12d2c:	4653      	mov	r3, sl
   12d2e:	2b20      	cmp	r3, #32
   12d30:	d00e      	beq.n	12d50 <__aeabi_dadd+0x614>
   12d32:	2340      	movs	r3, #64	; 0x40
   12d34:	4656      	mov	r6, sl
   12d36:	1b9b      	subs	r3, r3, r6
   12d38:	409c      	lsls	r4, r3
   12d3a:	4327      	orrs	r7, r4
   12d3c:	1e7c      	subs	r4, r7, #1
   12d3e:	41a7      	sbcs	r7, r4
   12d40:	464b      	mov	r3, r9
   12d42:	2400      	movs	r4, #0
   12d44:	431f      	orrs	r7, r3
   12d46:	e75f      	b.n	12c08 <__aeabi_dadd+0x4cc>
   12d48:	2400      	movs	r4, #0
   12d4a:	e7d2      	b.n	12cf2 <__aeabi_dadd+0x5b6>
   12d4c:	0017      	movs	r7, r2
   12d4e:	e5b2      	b.n	128b6 <__aeabi_dadd+0x17a>
   12d50:	2400      	movs	r4, #0
   12d52:	e7f2      	b.n	12d3a <__aeabi_dadd+0x5fe>
   12d54:	000007ff 	.word	0x000007ff
   12d58:	ff7fffff 	.word	0xff7fffff

00012d5c <__aeabi_ddiv>:
   12d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d5e:	4657      	mov	r7, sl
   12d60:	4645      	mov	r5, r8
   12d62:	46de      	mov	lr, fp
   12d64:	464e      	mov	r6, r9
   12d66:	b5e0      	push	{r5, r6, r7, lr}
   12d68:	004c      	lsls	r4, r1, #1
   12d6a:	030e      	lsls	r6, r1, #12
   12d6c:	b087      	sub	sp, #28
   12d6e:	4683      	mov	fp, r0
   12d70:	4692      	mov	sl, r2
   12d72:	001d      	movs	r5, r3
   12d74:	4680      	mov	r8, r0
   12d76:	0b36      	lsrs	r6, r6, #12
   12d78:	0d64      	lsrs	r4, r4, #21
   12d7a:	0fcf      	lsrs	r7, r1, #31
   12d7c:	2c00      	cmp	r4, #0
   12d7e:	d04f      	beq.n	12e20 <__aeabi_ddiv+0xc4>
   12d80:	4b6f      	ldr	r3, [pc, #444]	; (12f40 <__aeabi_ddiv+0x1e4>)
   12d82:	429c      	cmp	r4, r3
   12d84:	d035      	beq.n	12df2 <__aeabi_ddiv+0x96>
   12d86:	2380      	movs	r3, #128	; 0x80
   12d88:	0f42      	lsrs	r2, r0, #29
   12d8a:	041b      	lsls	r3, r3, #16
   12d8c:	00f6      	lsls	r6, r6, #3
   12d8e:	4313      	orrs	r3, r2
   12d90:	4333      	orrs	r3, r6
   12d92:	4699      	mov	r9, r3
   12d94:	00c3      	lsls	r3, r0, #3
   12d96:	4698      	mov	r8, r3
   12d98:	4b6a      	ldr	r3, [pc, #424]	; (12f44 <__aeabi_ddiv+0x1e8>)
   12d9a:	2600      	movs	r6, #0
   12d9c:	469c      	mov	ip, r3
   12d9e:	2300      	movs	r3, #0
   12da0:	4464      	add	r4, ip
   12da2:	9303      	str	r3, [sp, #12]
   12da4:	032b      	lsls	r3, r5, #12
   12da6:	0b1b      	lsrs	r3, r3, #12
   12da8:	469b      	mov	fp, r3
   12daa:	006b      	lsls	r3, r5, #1
   12dac:	0fed      	lsrs	r5, r5, #31
   12dae:	4650      	mov	r0, sl
   12db0:	0d5b      	lsrs	r3, r3, #21
   12db2:	9501      	str	r5, [sp, #4]
   12db4:	d05e      	beq.n	12e74 <__aeabi_ddiv+0x118>
   12db6:	4a62      	ldr	r2, [pc, #392]	; (12f40 <__aeabi_ddiv+0x1e4>)
   12db8:	4293      	cmp	r3, r2
   12dba:	d053      	beq.n	12e64 <__aeabi_ddiv+0x108>
   12dbc:	465a      	mov	r2, fp
   12dbe:	00d1      	lsls	r1, r2, #3
   12dc0:	2280      	movs	r2, #128	; 0x80
   12dc2:	0f40      	lsrs	r0, r0, #29
   12dc4:	0412      	lsls	r2, r2, #16
   12dc6:	4302      	orrs	r2, r0
   12dc8:	430a      	orrs	r2, r1
   12dca:	4693      	mov	fp, r2
   12dcc:	4652      	mov	r2, sl
   12dce:	00d1      	lsls	r1, r2, #3
   12dd0:	4a5c      	ldr	r2, [pc, #368]	; (12f44 <__aeabi_ddiv+0x1e8>)
   12dd2:	4694      	mov	ip, r2
   12dd4:	2200      	movs	r2, #0
   12dd6:	4463      	add	r3, ip
   12dd8:	0038      	movs	r0, r7
   12dda:	4068      	eors	r0, r5
   12ddc:	4684      	mov	ip, r0
   12dde:	9002      	str	r0, [sp, #8]
   12de0:	1ae4      	subs	r4, r4, r3
   12de2:	4316      	orrs	r6, r2
   12de4:	2e0f      	cmp	r6, #15
   12de6:	d900      	bls.n	12dea <__aeabi_ddiv+0x8e>
   12de8:	e0b4      	b.n	12f54 <__aeabi_ddiv+0x1f8>
   12dea:	4b57      	ldr	r3, [pc, #348]	; (12f48 <__aeabi_ddiv+0x1ec>)
   12dec:	00b6      	lsls	r6, r6, #2
   12dee:	599b      	ldr	r3, [r3, r6]
   12df0:	469f      	mov	pc, r3
   12df2:	0003      	movs	r3, r0
   12df4:	4333      	orrs	r3, r6
   12df6:	4699      	mov	r9, r3
   12df8:	d16c      	bne.n	12ed4 <__aeabi_ddiv+0x178>
   12dfa:	2300      	movs	r3, #0
   12dfc:	4698      	mov	r8, r3
   12dfe:	3302      	adds	r3, #2
   12e00:	2608      	movs	r6, #8
   12e02:	9303      	str	r3, [sp, #12]
   12e04:	e7ce      	b.n	12da4 <__aeabi_ddiv+0x48>
   12e06:	46cb      	mov	fp, r9
   12e08:	4641      	mov	r1, r8
   12e0a:	9a03      	ldr	r2, [sp, #12]
   12e0c:	9701      	str	r7, [sp, #4]
   12e0e:	2a02      	cmp	r2, #2
   12e10:	d165      	bne.n	12ede <__aeabi_ddiv+0x182>
   12e12:	9b01      	ldr	r3, [sp, #4]
   12e14:	4c4a      	ldr	r4, [pc, #296]	; (12f40 <__aeabi_ddiv+0x1e4>)
   12e16:	469c      	mov	ip, r3
   12e18:	2300      	movs	r3, #0
   12e1a:	2200      	movs	r2, #0
   12e1c:	4698      	mov	r8, r3
   12e1e:	e06b      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   12e20:	0003      	movs	r3, r0
   12e22:	4333      	orrs	r3, r6
   12e24:	4699      	mov	r9, r3
   12e26:	d04e      	beq.n	12ec6 <__aeabi_ddiv+0x16a>
   12e28:	2e00      	cmp	r6, #0
   12e2a:	d100      	bne.n	12e2e <__aeabi_ddiv+0xd2>
   12e2c:	e1bc      	b.n	131a8 <__aeabi_ddiv+0x44c>
   12e2e:	0030      	movs	r0, r6
   12e30:	f001 f904 	bl	1403c <__clzsi2>
   12e34:	0003      	movs	r3, r0
   12e36:	3b0b      	subs	r3, #11
   12e38:	2b1c      	cmp	r3, #28
   12e3a:	dd00      	ble.n	12e3e <__aeabi_ddiv+0xe2>
   12e3c:	e1ac      	b.n	13198 <__aeabi_ddiv+0x43c>
   12e3e:	221d      	movs	r2, #29
   12e40:	1ad3      	subs	r3, r2, r3
   12e42:	465a      	mov	r2, fp
   12e44:	0001      	movs	r1, r0
   12e46:	40da      	lsrs	r2, r3
   12e48:	3908      	subs	r1, #8
   12e4a:	408e      	lsls	r6, r1
   12e4c:	0013      	movs	r3, r2
   12e4e:	4333      	orrs	r3, r6
   12e50:	4699      	mov	r9, r3
   12e52:	465b      	mov	r3, fp
   12e54:	408b      	lsls	r3, r1
   12e56:	4698      	mov	r8, r3
   12e58:	2300      	movs	r3, #0
   12e5a:	4c3c      	ldr	r4, [pc, #240]	; (12f4c <__aeabi_ddiv+0x1f0>)
   12e5c:	2600      	movs	r6, #0
   12e5e:	1a24      	subs	r4, r4, r0
   12e60:	9303      	str	r3, [sp, #12]
   12e62:	e79f      	b.n	12da4 <__aeabi_ddiv+0x48>
   12e64:	4651      	mov	r1, sl
   12e66:	465a      	mov	r2, fp
   12e68:	4311      	orrs	r1, r2
   12e6a:	d129      	bne.n	12ec0 <__aeabi_ddiv+0x164>
   12e6c:	2200      	movs	r2, #0
   12e6e:	4693      	mov	fp, r2
   12e70:	3202      	adds	r2, #2
   12e72:	e7b1      	b.n	12dd8 <__aeabi_ddiv+0x7c>
   12e74:	4659      	mov	r1, fp
   12e76:	4301      	orrs	r1, r0
   12e78:	d01e      	beq.n	12eb8 <__aeabi_ddiv+0x15c>
   12e7a:	465b      	mov	r3, fp
   12e7c:	2b00      	cmp	r3, #0
   12e7e:	d100      	bne.n	12e82 <__aeabi_ddiv+0x126>
   12e80:	e19e      	b.n	131c0 <__aeabi_ddiv+0x464>
   12e82:	4658      	mov	r0, fp
   12e84:	f001 f8da 	bl	1403c <__clzsi2>
   12e88:	0003      	movs	r3, r0
   12e8a:	3b0b      	subs	r3, #11
   12e8c:	2b1c      	cmp	r3, #28
   12e8e:	dd00      	ble.n	12e92 <__aeabi_ddiv+0x136>
   12e90:	e18f      	b.n	131b2 <__aeabi_ddiv+0x456>
   12e92:	0002      	movs	r2, r0
   12e94:	4659      	mov	r1, fp
   12e96:	3a08      	subs	r2, #8
   12e98:	4091      	lsls	r1, r2
   12e9a:	468b      	mov	fp, r1
   12e9c:	211d      	movs	r1, #29
   12e9e:	1acb      	subs	r3, r1, r3
   12ea0:	4651      	mov	r1, sl
   12ea2:	40d9      	lsrs	r1, r3
   12ea4:	000b      	movs	r3, r1
   12ea6:	4659      	mov	r1, fp
   12ea8:	430b      	orrs	r3, r1
   12eaa:	4651      	mov	r1, sl
   12eac:	469b      	mov	fp, r3
   12eae:	4091      	lsls	r1, r2
   12eb0:	4b26      	ldr	r3, [pc, #152]	; (12f4c <__aeabi_ddiv+0x1f0>)
   12eb2:	2200      	movs	r2, #0
   12eb4:	1a1b      	subs	r3, r3, r0
   12eb6:	e78f      	b.n	12dd8 <__aeabi_ddiv+0x7c>
   12eb8:	2300      	movs	r3, #0
   12eba:	2201      	movs	r2, #1
   12ebc:	469b      	mov	fp, r3
   12ebe:	e78b      	b.n	12dd8 <__aeabi_ddiv+0x7c>
   12ec0:	4651      	mov	r1, sl
   12ec2:	2203      	movs	r2, #3
   12ec4:	e788      	b.n	12dd8 <__aeabi_ddiv+0x7c>
   12ec6:	2300      	movs	r3, #0
   12ec8:	4698      	mov	r8, r3
   12eca:	3301      	adds	r3, #1
   12ecc:	2604      	movs	r6, #4
   12ece:	2400      	movs	r4, #0
   12ed0:	9303      	str	r3, [sp, #12]
   12ed2:	e767      	b.n	12da4 <__aeabi_ddiv+0x48>
   12ed4:	2303      	movs	r3, #3
   12ed6:	46b1      	mov	r9, r6
   12ed8:	9303      	str	r3, [sp, #12]
   12eda:	260c      	movs	r6, #12
   12edc:	e762      	b.n	12da4 <__aeabi_ddiv+0x48>
   12ede:	2a03      	cmp	r2, #3
   12ee0:	d100      	bne.n	12ee4 <__aeabi_ddiv+0x188>
   12ee2:	e25c      	b.n	1339e <__aeabi_ddiv+0x642>
   12ee4:	9b01      	ldr	r3, [sp, #4]
   12ee6:	2a01      	cmp	r2, #1
   12ee8:	d000      	beq.n	12eec <__aeabi_ddiv+0x190>
   12eea:	e1e4      	b.n	132b6 <__aeabi_ddiv+0x55a>
   12eec:	4013      	ands	r3, r2
   12eee:	469c      	mov	ip, r3
   12ef0:	2300      	movs	r3, #0
   12ef2:	2400      	movs	r4, #0
   12ef4:	2200      	movs	r2, #0
   12ef6:	4698      	mov	r8, r3
   12ef8:	2100      	movs	r1, #0
   12efa:	0312      	lsls	r2, r2, #12
   12efc:	0b13      	lsrs	r3, r2, #12
   12efe:	0d0a      	lsrs	r2, r1, #20
   12f00:	0512      	lsls	r2, r2, #20
   12f02:	431a      	orrs	r2, r3
   12f04:	0523      	lsls	r3, r4, #20
   12f06:	4c12      	ldr	r4, [pc, #72]	; (12f50 <__aeabi_ddiv+0x1f4>)
   12f08:	4640      	mov	r0, r8
   12f0a:	4022      	ands	r2, r4
   12f0c:	4313      	orrs	r3, r2
   12f0e:	4662      	mov	r2, ip
   12f10:	005b      	lsls	r3, r3, #1
   12f12:	07d2      	lsls	r2, r2, #31
   12f14:	085b      	lsrs	r3, r3, #1
   12f16:	4313      	orrs	r3, r2
   12f18:	0019      	movs	r1, r3
   12f1a:	b007      	add	sp, #28
   12f1c:	bc3c      	pop	{r2, r3, r4, r5}
   12f1e:	4690      	mov	r8, r2
   12f20:	4699      	mov	r9, r3
   12f22:	46a2      	mov	sl, r4
   12f24:	46ab      	mov	fp, r5
   12f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f28:	2300      	movs	r3, #0
   12f2a:	2280      	movs	r2, #128	; 0x80
   12f2c:	469c      	mov	ip, r3
   12f2e:	0312      	lsls	r2, r2, #12
   12f30:	4698      	mov	r8, r3
   12f32:	4c03      	ldr	r4, [pc, #12]	; (12f40 <__aeabi_ddiv+0x1e4>)
   12f34:	e7e0      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   12f36:	2300      	movs	r3, #0
   12f38:	4c01      	ldr	r4, [pc, #4]	; (12f40 <__aeabi_ddiv+0x1e4>)
   12f3a:	2200      	movs	r2, #0
   12f3c:	4698      	mov	r8, r3
   12f3e:	e7db      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   12f40:	000007ff 	.word	0x000007ff
   12f44:	fffffc01 	.word	0xfffffc01
   12f48:	00019408 	.word	0x00019408
   12f4c:	fffffc0d 	.word	0xfffffc0d
   12f50:	800fffff 	.word	0x800fffff
   12f54:	45d9      	cmp	r9, fp
   12f56:	d900      	bls.n	12f5a <__aeabi_ddiv+0x1fe>
   12f58:	e139      	b.n	131ce <__aeabi_ddiv+0x472>
   12f5a:	d100      	bne.n	12f5e <__aeabi_ddiv+0x202>
   12f5c:	e134      	b.n	131c8 <__aeabi_ddiv+0x46c>
   12f5e:	2300      	movs	r3, #0
   12f60:	4646      	mov	r6, r8
   12f62:	464d      	mov	r5, r9
   12f64:	469a      	mov	sl, r3
   12f66:	3c01      	subs	r4, #1
   12f68:	465b      	mov	r3, fp
   12f6a:	0e0a      	lsrs	r2, r1, #24
   12f6c:	021b      	lsls	r3, r3, #8
   12f6e:	431a      	orrs	r2, r3
   12f70:	020b      	lsls	r3, r1, #8
   12f72:	0c17      	lsrs	r7, r2, #16
   12f74:	9303      	str	r3, [sp, #12]
   12f76:	0413      	lsls	r3, r2, #16
   12f78:	0c1b      	lsrs	r3, r3, #16
   12f7a:	0039      	movs	r1, r7
   12f7c:	0028      	movs	r0, r5
   12f7e:	4690      	mov	r8, r2
   12f80:	9301      	str	r3, [sp, #4]
   12f82:	f7fe fef7 	bl	11d74 <__udivsi3>
   12f86:	0002      	movs	r2, r0
   12f88:	9b01      	ldr	r3, [sp, #4]
   12f8a:	4683      	mov	fp, r0
   12f8c:	435a      	muls	r2, r3
   12f8e:	0028      	movs	r0, r5
   12f90:	0039      	movs	r1, r7
   12f92:	4691      	mov	r9, r2
   12f94:	f7fe ff74 	bl	11e80 <__aeabi_uidivmod>
   12f98:	0c35      	lsrs	r5, r6, #16
   12f9a:	0409      	lsls	r1, r1, #16
   12f9c:	430d      	orrs	r5, r1
   12f9e:	45a9      	cmp	r9, r5
   12fa0:	d90d      	bls.n	12fbe <__aeabi_ddiv+0x262>
   12fa2:	465b      	mov	r3, fp
   12fa4:	4445      	add	r5, r8
   12fa6:	3b01      	subs	r3, #1
   12fa8:	45a8      	cmp	r8, r5
   12faa:	d900      	bls.n	12fae <__aeabi_ddiv+0x252>
   12fac:	e13a      	b.n	13224 <__aeabi_ddiv+0x4c8>
   12fae:	45a9      	cmp	r9, r5
   12fb0:	d800      	bhi.n	12fb4 <__aeabi_ddiv+0x258>
   12fb2:	e137      	b.n	13224 <__aeabi_ddiv+0x4c8>
   12fb4:	2302      	movs	r3, #2
   12fb6:	425b      	negs	r3, r3
   12fb8:	469c      	mov	ip, r3
   12fba:	4445      	add	r5, r8
   12fbc:	44e3      	add	fp, ip
   12fbe:	464b      	mov	r3, r9
   12fc0:	1aeb      	subs	r3, r5, r3
   12fc2:	0039      	movs	r1, r7
   12fc4:	0018      	movs	r0, r3
   12fc6:	9304      	str	r3, [sp, #16]
   12fc8:	f7fe fed4 	bl	11d74 <__udivsi3>
   12fcc:	9b01      	ldr	r3, [sp, #4]
   12fce:	0005      	movs	r5, r0
   12fd0:	4343      	muls	r3, r0
   12fd2:	0039      	movs	r1, r7
   12fd4:	9804      	ldr	r0, [sp, #16]
   12fd6:	4699      	mov	r9, r3
   12fd8:	f7fe ff52 	bl	11e80 <__aeabi_uidivmod>
   12fdc:	0433      	lsls	r3, r6, #16
   12fde:	0409      	lsls	r1, r1, #16
   12fe0:	0c1b      	lsrs	r3, r3, #16
   12fe2:	430b      	orrs	r3, r1
   12fe4:	4599      	cmp	r9, r3
   12fe6:	d909      	bls.n	12ffc <__aeabi_ddiv+0x2a0>
   12fe8:	4443      	add	r3, r8
   12fea:	1e6a      	subs	r2, r5, #1
   12fec:	4598      	cmp	r8, r3
   12fee:	d900      	bls.n	12ff2 <__aeabi_ddiv+0x296>
   12ff0:	e11a      	b.n	13228 <__aeabi_ddiv+0x4cc>
   12ff2:	4599      	cmp	r9, r3
   12ff4:	d800      	bhi.n	12ff8 <__aeabi_ddiv+0x29c>
   12ff6:	e117      	b.n	13228 <__aeabi_ddiv+0x4cc>
   12ff8:	3d02      	subs	r5, #2
   12ffa:	4443      	add	r3, r8
   12ffc:	464a      	mov	r2, r9
   12ffe:	1a9b      	subs	r3, r3, r2
   13000:	465a      	mov	r2, fp
   13002:	0412      	lsls	r2, r2, #16
   13004:	432a      	orrs	r2, r5
   13006:	9903      	ldr	r1, [sp, #12]
   13008:	4693      	mov	fp, r2
   1300a:	0c10      	lsrs	r0, r2, #16
   1300c:	0c0a      	lsrs	r2, r1, #16
   1300e:	4691      	mov	r9, r2
   13010:	0409      	lsls	r1, r1, #16
   13012:	465a      	mov	r2, fp
   13014:	0c09      	lsrs	r1, r1, #16
   13016:	464e      	mov	r6, r9
   13018:	000d      	movs	r5, r1
   1301a:	0412      	lsls	r2, r2, #16
   1301c:	0c12      	lsrs	r2, r2, #16
   1301e:	4345      	muls	r5, r0
   13020:	9105      	str	r1, [sp, #20]
   13022:	4351      	muls	r1, r2
   13024:	4372      	muls	r2, r6
   13026:	4370      	muls	r0, r6
   13028:	1952      	adds	r2, r2, r5
   1302a:	0c0e      	lsrs	r6, r1, #16
   1302c:	18b2      	adds	r2, r6, r2
   1302e:	4295      	cmp	r5, r2
   13030:	d903      	bls.n	1303a <__aeabi_ddiv+0x2de>
   13032:	2580      	movs	r5, #128	; 0x80
   13034:	026d      	lsls	r5, r5, #9
   13036:	46ac      	mov	ip, r5
   13038:	4460      	add	r0, ip
   1303a:	0c15      	lsrs	r5, r2, #16
   1303c:	0409      	lsls	r1, r1, #16
   1303e:	0412      	lsls	r2, r2, #16
   13040:	0c09      	lsrs	r1, r1, #16
   13042:	1828      	adds	r0, r5, r0
   13044:	1852      	adds	r2, r2, r1
   13046:	4283      	cmp	r3, r0
   13048:	d200      	bcs.n	1304c <__aeabi_ddiv+0x2f0>
   1304a:	e0ce      	b.n	131ea <__aeabi_ddiv+0x48e>
   1304c:	d100      	bne.n	13050 <__aeabi_ddiv+0x2f4>
   1304e:	e0c8      	b.n	131e2 <__aeabi_ddiv+0x486>
   13050:	1a1d      	subs	r5, r3, r0
   13052:	4653      	mov	r3, sl
   13054:	1a9e      	subs	r6, r3, r2
   13056:	45b2      	cmp	sl, r6
   13058:	4192      	sbcs	r2, r2
   1305a:	4252      	negs	r2, r2
   1305c:	1aab      	subs	r3, r5, r2
   1305e:	469a      	mov	sl, r3
   13060:	4598      	cmp	r8, r3
   13062:	d100      	bne.n	13066 <__aeabi_ddiv+0x30a>
   13064:	e117      	b.n	13296 <__aeabi_ddiv+0x53a>
   13066:	0039      	movs	r1, r7
   13068:	0018      	movs	r0, r3
   1306a:	f7fe fe83 	bl	11d74 <__udivsi3>
   1306e:	9b01      	ldr	r3, [sp, #4]
   13070:	0005      	movs	r5, r0
   13072:	4343      	muls	r3, r0
   13074:	0039      	movs	r1, r7
   13076:	4650      	mov	r0, sl
   13078:	9304      	str	r3, [sp, #16]
   1307a:	f7fe ff01 	bl	11e80 <__aeabi_uidivmod>
   1307e:	9804      	ldr	r0, [sp, #16]
   13080:	040b      	lsls	r3, r1, #16
   13082:	0c31      	lsrs	r1, r6, #16
   13084:	4319      	orrs	r1, r3
   13086:	4288      	cmp	r0, r1
   13088:	d909      	bls.n	1309e <__aeabi_ddiv+0x342>
   1308a:	4441      	add	r1, r8
   1308c:	1e6b      	subs	r3, r5, #1
   1308e:	4588      	cmp	r8, r1
   13090:	d900      	bls.n	13094 <__aeabi_ddiv+0x338>
   13092:	e107      	b.n	132a4 <__aeabi_ddiv+0x548>
   13094:	4288      	cmp	r0, r1
   13096:	d800      	bhi.n	1309a <__aeabi_ddiv+0x33e>
   13098:	e104      	b.n	132a4 <__aeabi_ddiv+0x548>
   1309a:	3d02      	subs	r5, #2
   1309c:	4441      	add	r1, r8
   1309e:	9b04      	ldr	r3, [sp, #16]
   130a0:	1acb      	subs	r3, r1, r3
   130a2:	0018      	movs	r0, r3
   130a4:	0039      	movs	r1, r7
   130a6:	9304      	str	r3, [sp, #16]
   130a8:	f7fe fe64 	bl	11d74 <__udivsi3>
   130ac:	9b01      	ldr	r3, [sp, #4]
   130ae:	4682      	mov	sl, r0
   130b0:	4343      	muls	r3, r0
   130b2:	0039      	movs	r1, r7
   130b4:	9804      	ldr	r0, [sp, #16]
   130b6:	9301      	str	r3, [sp, #4]
   130b8:	f7fe fee2 	bl	11e80 <__aeabi_uidivmod>
   130bc:	9801      	ldr	r0, [sp, #4]
   130be:	040b      	lsls	r3, r1, #16
   130c0:	0431      	lsls	r1, r6, #16
   130c2:	0c09      	lsrs	r1, r1, #16
   130c4:	4319      	orrs	r1, r3
   130c6:	4288      	cmp	r0, r1
   130c8:	d90d      	bls.n	130e6 <__aeabi_ddiv+0x38a>
   130ca:	4653      	mov	r3, sl
   130cc:	4441      	add	r1, r8
   130ce:	3b01      	subs	r3, #1
   130d0:	4588      	cmp	r8, r1
   130d2:	d900      	bls.n	130d6 <__aeabi_ddiv+0x37a>
   130d4:	e0e8      	b.n	132a8 <__aeabi_ddiv+0x54c>
   130d6:	4288      	cmp	r0, r1
   130d8:	d800      	bhi.n	130dc <__aeabi_ddiv+0x380>
   130da:	e0e5      	b.n	132a8 <__aeabi_ddiv+0x54c>
   130dc:	2302      	movs	r3, #2
   130de:	425b      	negs	r3, r3
   130e0:	469c      	mov	ip, r3
   130e2:	4441      	add	r1, r8
   130e4:	44e2      	add	sl, ip
   130e6:	9b01      	ldr	r3, [sp, #4]
   130e8:	042d      	lsls	r5, r5, #16
   130ea:	1ace      	subs	r6, r1, r3
   130ec:	4651      	mov	r1, sl
   130ee:	4329      	orrs	r1, r5
   130f0:	9d05      	ldr	r5, [sp, #20]
   130f2:	464f      	mov	r7, r9
   130f4:	002a      	movs	r2, r5
   130f6:	040b      	lsls	r3, r1, #16
   130f8:	0c08      	lsrs	r0, r1, #16
   130fa:	0c1b      	lsrs	r3, r3, #16
   130fc:	435a      	muls	r2, r3
   130fe:	4345      	muls	r5, r0
   13100:	437b      	muls	r3, r7
   13102:	4378      	muls	r0, r7
   13104:	195b      	adds	r3, r3, r5
   13106:	0c17      	lsrs	r7, r2, #16
   13108:	18fb      	adds	r3, r7, r3
   1310a:	429d      	cmp	r5, r3
   1310c:	d903      	bls.n	13116 <__aeabi_ddiv+0x3ba>
   1310e:	2580      	movs	r5, #128	; 0x80
   13110:	026d      	lsls	r5, r5, #9
   13112:	46ac      	mov	ip, r5
   13114:	4460      	add	r0, ip
   13116:	0c1d      	lsrs	r5, r3, #16
   13118:	0412      	lsls	r2, r2, #16
   1311a:	041b      	lsls	r3, r3, #16
   1311c:	0c12      	lsrs	r2, r2, #16
   1311e:	1828      	adds	r0, r5, r0
   13120:	189b      	adds	r3, r3, r2
   13122:	4286      	cmp	r6, r0
   13124:	d200      	bcs.n	13128 <__aeabi_ddiv+0x3cc>
   13126:	e093      	b.n	13250 <__aeabi_ddiv+0x4f4>
   13128:	d100      	bne.n	1312c <__aeabi_ddiv+0x3d0>
   1312a:	e08e      	b.n	1324a <__aeabi_ddiv+0x4ee>
   1312c:	2301      	movs	r3, #1
   1312e:	4319      	orrs	r1, r3
   13130:	4ba0      	ldr	r3, [pc, #640]	; (133b4 <__aeabi_ddiv+0x658>)
   13132:	18e3      	adds	r3, r4, r3
   13134:	2b00      	cmp	r3, #0
   13136:	dc00      	bgt.n	1313a <__aeabi_ddiv+0x3de>
   13138:	e099      	b.n	1326e <__aeabi_ddiv+0x512>
   1313a:	074a      	lsls	r2, r1, #29
   1313c:	d000      	beq.n	13140 <__aeabi_ddiv+0x3e4>
   1313e:	e09e      	b.n	1327e <__aeabi_ddiv+0x522>
   13140:	465a      	mov	r2, fp
   13142:	01d2      	lsls	r2, r2, #7
   13144:	d506      	bpl.n	13154 <__aeabi_ddiv+0x3f8>
   13146:	465a      	mov	r2, fp
   13148:	4b9b      	ldr	r3, [pc, #620]	; (133b8 <__aeabi_ddiv+0x65c>)
   1314a:	401a      	ands	r2, r3
   1314c:	2380      	movs	r3, #128	; 0x80
   1314e:	4693      	mov	fp, r2
   13150:	00db      	lsls	r3, r3, #3
   13152:	18e3      	adds	r3, r4, r3
   13154:	4a99      	ldr	r2, [pc, #612]	; (133bc <__aeabi_ddiv+0x660>)
   13156:	4293      	cmp	r3, r2
   13158:	dd68      	ble.n	1322c <__aeabi_ddiv+0x4d0>
   1315a:	2301      	movs	r3, #1
   1315c:	9a02      	ldr	r2, [sp, #8]
   1315e:	4c98      	ldr	r4, [pc, #608]	; (133c0 <__aeabi_ddiv+0x664>)
   13160:	401a      	ands	r2, r3
   13162:	2300      	movs	r3, #0
   13164:	4694      	mov	ip, r2
   13166:	4698      	mov	r8, r3
   13168:	2200      	movs	r2, #0
   1316a:	e6c5      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   1316c:	2280      	movs	r2, #128	; 0x80
   1316e:	464b      	mov	r3, r9
   13170:	0312      	lsls	r2, r2, #12
   13172:	4213      	tst	r3, r2
   13174:	d00a      	beq.n	1318c <__aeabi_ddiv+0x430>
   13176:	465b      	mov	r3, fp
   13178:	4213      	tst	r3, r2
   1317a:	d106      	bne.n	1318a <__aeabi_ddiv+0x42e>
   1317c:	431a      	orrs	r2, r3
   1317e:	0312      	lsls	r2, r2, #12
   13180:	0b12      	lsrs	r2, r2, #12
   13182:	46ac      	mov	ip, r5
   13184:	4688      	mov	r8, r1
   13186:	4c8e      	ldr	r4, [pc, #568]	; (133c0 <__aeabi_ddiv+0x664>)
   13188:	e6b6      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   1318a:	464b      	mov	r3, r9
   1318c:	431a      	orrs	r2, r3
   1318e:	0312      	lsls	r2, r2, #12
   13190:	0b12      	lsrs	r2, r2, #12
   13192:	46bc      	mov	ip, r7
   13194:	4c8a      	ldr	r4, [pc, #552]	; (133c0 <__aeabi_ddiv+0x664>)
   13196:	e6af      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   13198:	0003      	movs	r3, r0
   1319a:	465a      	mov	r2, fp
   1319c:	3b28      	subs	r3, #40	; 0x28
   1319e:	409a      	lsls	r2, r3
   131a0:	2300      	movs	r3, #0
   131a2:	4691      	mov	r9, r2
   131a4:	4698      	mov	r8, r3
   131a6:	e657      	b.n	12e58 <__aeabi_ddiv+0xfc>
   131a8:	4658      	mov	r0, fp
   131aa:	f000 ff47 	bl	1403c <__clzsi2>
   131ae:	3020      	adds	r0, #32
   131b0:	e640      	b.n	12e34 <__aeabi_ddiv+0xd8>
   131b2:	0003      	movs	r3, r0
   131b4:	4652      	mov	r2, sl
   131b6:	3b28      	subs	r3, #40	; 0x28
   131b8:	409a      	lsls	r2, r3
   131ba:	2100      	movs	r1, #0
   131bc:	4693      	mov	fp, r2
   131be:	e677      	b.n	12eb0 <__aeabi_ddiv+0x154>
   131c0:	f000 ff3c 	bl	1403c <__clzsi2>
   131c4:	3020      	adds	r0, #32
   131c6:	e65f      	b.n	12e88 <__aeabi_ddiv+0x12c>
   131c8:	4588      	cmp	r8, r1
   131ca:	d200      	bcs.n	131ce <__aeabi_ddiv+0x472>
   131cc:	e6c7      	b.n	12f5e <__aeabi_ddiv+0x202>
   131ce:	464b      	mov	r3, r9
   131d0:	07de      	lsls	r6, r3, #31
   131d2:	085d      	lsrs	r5, r3, #1
   131d4:	4643      	mov	r3, r8
   131d6:	085b      	lsrs	r3, r3, #1
   131d8:	431e      	orrs	r6, r3
   131da:	4643      	mov	r3, r8
   131dc:	07db      	lsls	r3, r3, #31
   131de:	469a      	mov	sl, r3
   131e0:	e6c2      	b.n	12f68 <__aeabi_ddiv+0x20c>
   131e2:	2500      	movs	r5, #0
   131e4:	4592      	cmp	sl, r2
   131e6:	d300      	bcc.n	131ea <__aeabi_ddiv+0x48e>
   131e8:	e733      	b.n	13052 <__aeabi_ddiv+0x2f6>
   131ea:	9e03      	ldr	r6, [sp, #12]
   131ec:	4659      	mov	r1, fp
   131ee:	46b4      	mov	ip, r6
   131f0:	44e2      	add	sl, ip
   131f2:	45b2      	cmp	sl, r6
   131f4:	41ad      	sbcs	r5, r5
   131f6:	426d      	negs	r5, r5
   131f8:	4445      	add	r5, r8
   131fa:	18eb      	adds	r3, r5, r3
   131fc:	3901      	subs	r1, #1
   131fe:	4598      	cmp	r8, r3
   13200:	d207      	bcs.n	13212 <__aeabi_ddiv+0x4b6>
   13202:	4298      	cmp	r0, r3
   13204:	d900      	bls.n	13208 <__aeabi_ddiv+0x4ac>
   13206:	e07f      	b.n	13308 <__aeabi_ddiv+0x5ac>
   13208:	d100      	bne.n	1320c <__aeabi_ddiv+0x4b0>
   1320a:	e0bc      	b.n	13386 <__aeabi_ddiv+0x62a>
   1320c:	1a1d      	subs	r5, r3, r0
   1320e:	468b      	mov	fp, r1
   13210:	e71f      	b.n	13052 <__aeabi_ddiv+0x2f6>
   13212:	4598      	cmp	r8, r3
   13214:	d1fa      	bne.n	1320c <__aeabi_ddiv+0x4b0>
   13216:	9d03      	ldr	r5, [sp, #12]
   13218:	4555      	cmp	r5, sl
   1321a:	d9f2      	bls.n	13202 <__aeabi_ddiv+0x4a6>
   1321c:	4643      	mov	r3, r8
   1321e:	468b      	mov	fp, r1
   13220:	1a1d      	subs	r5, r3, r0
   13222:	e716      	b.n	13052 <__aeabi_ddiv+0x2f6>
   13224:	469b      	mov	fp, r3
   13226:	e6ca      	b.n	12fbe <__aeabi_ddiv+0x262>
   13228:	0015      	movs	r5, r2
   1322a:	e6e7      	b.n	12ffc <__aeabi_ddiv+0x2a0>
   1322c:	465a      	mov	r2, fp
   1322e:	08c9      	lsrs	r1, r1, #3
   13230:	0752      	lsls	r2, r2, #29
   13232:	430a      	orrs	r2, r1
   13234:	055b      	lsls	r3, r3, #21
   13236:	4690      	mov	r8, r2
   13238:	0d5c      	lsrs	r4, r3, #21
   1323a:	465a      	mov	r2, fp
   1323c:	2301      	movs	r3, #1
   1323e:	9902      	ldr	r1, [sp, #8]
   13240:	0252      	lsls	r2, r2, #9
   13242:	4019      	ands	r1, r3
   13244:	0b12      	lsrs	r2, r2, #12
   13246:	468c      	mov	ip, r1
   13248:	e656      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   1324a:	2b00      	cmp	r3, #0
   1324c:	d100      	bne.n	13250 <__aeabi_ddiv+0x4f4>
   1324e:	e76f      	b.n	13130 <__aeabi_ddiv+0x3d4>
   13250:	4446      	add	r6, r8
   13252:	1e4a      	subs	r2, r1, #1
   13254:	45b0      	cmp	r8, r6
   13256:	d929      	bls.n	132ac <__aeabi_ddiv+0x550>
   13258:	0011      	movs	r1, r2
   1325a:	4286      	cmp	r6, r0
   1325c:	d000      	beq.n	13260 <__aeabi_ddiv+0x504>
   1325e:	e765      	b.n	1312c <__aeabi_ddiv+0x3d0>
   13260:	9a03      	ldr	r2, [sp, #12]
   13262:	4293      	cmp	r3, r2
   13264:	d000      	beq.n	13268 <__aeabi_ddiv+0x50c>
   13266:	e761      	b.n	1312c <__aeabi_ddiv+0x3d0>
   13268:	e762      	b.n	13130 <__aeabi_ddiv+0x3d4>
   1326a:	2101      	movs	r1, #1
   1326c:	4249      	negs	r1, r1
   1326e:	2001      	movs	r0, #1
   13270:	1ac2      	subs	r2, r0, r3
   13272:	2a38      	cmp	r2, #56	; 0x38
   13274:	dd21      	ble.n	132ba <__aeabi_ddiv+0x55e>
   13276:	9b02      	ldr	r3, [sp, #8]
   13278:	4003      	ands	r3, r0
   1327a:	469c      	mov	ip, r3
   1327c:	e638      	b.n	12ef0 <__aeabi_ddiv+0x194>
   1327e:	220f      	movs	r2, #15
   13280:	400a      	ands	r2, r1
   13282:	2a04      	cmp	r2, #4
   13284:	d100      	bne.n	13288 <__aeabi_ddiv+0x52c>
   13286:	e75b      	b.n	13140 <__aeabi_ddiv+0x3e4>
   13288:	000a      	movs	r2, r1
   1328a:	1d11      	adds	r1, r2, #4
   1328c:	4291      	cmp	r1, r2
   1328e:	4192      	sbcs	r2, r2
   13290:	4252      	negs	r2, r2
   13292:	4493      	add	fp, r2
   13294:	e754      	b.n	13140 <__aeabi_ddiv+0x3e4>
   13296:	4b47      	ldr	r3, [pc, #284]	; (133b4 <__aeabi_ddiv+0x658>)
   13298:	18e3      	adds	r3, r4, r3
   1329a:	2b00      	cmp	r3, #0
   1329c:	dde5      	ble.n	1326a <__aeabi_ddiv+0x50e>
   1329e:	2201      	movs	r2, #1
   132a0:	4252      	negs	r2, r2
   132a2:	e7f2      	b.n	1328a <__aeabi_ddiv+0x52e>
   132a4:	001d      	movs	r5, r3
   132a6:	e6fa      	b.n	1309e <__aeabi_ddiv+0x342>
   132a8:	469a      	mov	sl, r3
   132aa:	e71c      	b.n	130e6 <__aeabi_ddiv+0x38a>
   132ac:	42b0      	cmp	r0, r6
   132ae:	d839      	bhi.n	13324 <__aeabi_ddiv+0x5c8>
   132b0:	d06e      	beq.n	13390 <__aeabi_ddiv+0x634>
   132b2:	0011      	movs	r1, r2
   132b4:	e73a      	b.n	1312c <__aeabi_ddiv+0x3d0>
   132b6:	9302      	str	r3, [sp, #8]
   132b8:	e73a      	b.n	13130 <__aeabi_ddiv+0x3d4>
   132ba:	2a1f      	cmp	r2, #31
   132bc:	dc3c      	bgt.n	13338 <__aeabi_ddiv+0x5dc>
   132be:	2320      	movs	r3, #32
   132c0:	1a9b      	subs	r3, r3, r2
   132c2:	000c      	movs	r4, r1
   132c4:	4658      	mov	r0, fp
   132c6:	4099      	lsls	r1, r3
   132c8:	4098      	lsls	r0, r3
   132ca:	1e4b      	subs	r3, r1, #1
   132cc:	4199      	sbcs	r1, r3
   132ce:	465b      	mov	r3, fp
   132d0:	40d4      	lsrs	r4, r2
   132d2:	40d3      	lsrs	r3, r2
   132d4:	4320      	orrs	r0, r4
   132d6:	4308      	orrs	r0, r1
   132d8:	001a      	movs	r2, r3
   132da:	0743      	lsls	r3, r0, #29
   132dc:	d009      	beq.n	132f2 <__aeabi_ddiv+0x596>
   132de:	230f      	movs	r3, #15
   132e0:	4003      	ands	r3, r0
   132e2:	2b04      	cmp	r3, #4
   132e4:	d005      	beq.n	132f2 <__aeabi_ddiv+0x596>
   132e6:	0001      	movs	r1, r0
   132e8:	1d08      	adds	r0, r1, #4
   132ea:	4288      	cmp	r0, r1
   132ec:	419b      	sbcs	r3, r3
   132ee:	425b      	negs	r3, r3
   132f0:	18d2      	adds	r2, r2, r3
   132f2:	0213      	lsls	r3, r2, #8
   132f4:	d53a      	bpl.n	1336c <__aeabi_ddiv+0x610>
   132f6:	2301      	movs	r3, #1
   132f8:	9a02      	ldr	r2, [sp, #8]
   132fa:	2401      	movs	r4, #1
   132fc:	401a      	ands	r2, r3
   132fe:	2300      	movs	r3, #0
   13300:	4694      	mov	ip, r2
   13302:	4698      	mov	r8, r3
   13304:	2200      	movs	r2, #0
   13306:	e5f7      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   13308:	2102      	movs	r1, #2
   1330a:	4249      	negs	r1, r1
   1330c:	468c      	mov	ip, r1
   1330e:	9d03      	ldr	r5, [sp, #12]
   13310:	44e3      	add	fp, ip
   13312:	46ac      	mov	ip, r5
   13314:	44e2      	add	sl, ip
   13316:	45aa      	cmp	sl, r5
   13318:	41ad      	sbcs	r5, r5
   1331a:	426d      	negs	r5, r5
   1331c:	4445      	add	r5, r8
   1331e:	18ed      	adds	r5, r5, r3
   13320:	1a2d      	subs	r5, r5, r0
   13322:	e696      	b.n	13052 <__aeabi_ddiv+0x2f6>
   13324:	1e8a      	subs	r2, r1, #2
   13326:	9903      	ldr	r1, [sp, #12]
   13328:	004d      	lsls	r5, r1, #1
   1332a:	428d      	cmp	r5, r1
   1332c:	4189      	sbcs	r1, r1
   1332e:	4249      	negs	r1, r1
   13330:	4441      	add	r1, r8
   13332:	1876      	adds	r6, r6, r1
   13334:	9503      	str	r5, [sp, #12]
   13336:	e78f      	b.n	13258 <__aeabi_ddiv+0x4fc>
   13338:	201f      	movs	r0, #31
   1333a:	4240      	negs	r0, r0
   1333c:	1ac3      	subs	r3, r0, r3
   1333e:	4658      	mov	r0, fp
   13340:	40d8      	lsrs	r0, r3
   13342:	0003      	movs	r3, r0
   13344:	2a20      	cmp	r2, #32
   13346:	d028      	beq.n	1339a <__aeabi_ddiv+0x63e>
   13348:	2040      	movs	r0, #64	; 0x40
   1334a:	465d      	mov	r5, fp
   1334c:	1a82      	subs	r2, r0, r2
   1334e:	4095      	lsls	r5, r2
   13350:	4329      	orrs	r1, r5
   13352:	1e4a      	subs	r2, r1, #1
   13354:	4191      	sbcs	r1, r2
   13356:	4319      	orrs	r1, r3
   13358:	2307      	movs	r3, #7
   1335a:	2200      	movs	r2, #0
   1335c:	400b      	ands	r3, r1
   1335e:	d009      	beq.n	13374 <__aeabi_ddiv+0x618>
   13360:	230f      	movs	r3, #15
   13362:	2200      	movs	r2, #0
   13364:	400b      	ands	r3, r1
   13366:	0008      	movs	r0, r1
   13368:	2b04      	cmp	r3, #4
   1336a:	d1bd      	bne.n	132e8 <__aeabi_ddiv+0x58c>
   1336c:	0001      	movs	r1, r0
   1336e:	0753      	lsls	r3, r2, #29
   13370:	0252      	lsls	r2, r2, #9
   13372:	0b12      	lsrs	r2, r2, #12
   13374:	08c9      	lsrs	r1, r1, #3
   13376:	4319      	orrs	r1, r3
   13378:	2301      	movs	r3, #1
   1337a:	4688      	mov	r8, r1
   1337c:	9902      	ldr	r1, [sp, #8]
   1337e:	2400      	movs	r4, #0
   13380:	4019      	ands	r1, r3
   13382:	468c      	mov	ip, r1
   13384:	e5b8      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   13386:	4552      	cmp	r2, sl
   13388:	d8be      	bhi.n	13308 <__aeabi_ddiv+0x5ac>
   1338a:	468b      	mov	fp, r1
   1338c:	2500      	movs	r5, #0
   1338e:	e660      	b.n	13052 <__aeabi_ddiv+0x2f6>
   13390:	9d03      	ldr	r5, [sp, #12]
   13392:	429d      	cmp	r5, r3
   13394:	d3c6      	bcc.n	13324 <__aeabi_ddiv+0x5c8>
   13396:	0011      	movs	r1, r2
   13398:	e762      	b.n	13260 <__aeabi_ddiv+0x504>
   1339a:	2500      	movs	r5, #0
   1339c:	e7d8      	b.n	13350 <__aeabi_ddiv+0x5f4>
   1339e:	2280      	movs	r2, #128	; 0x80
   133a0:	465b      	mov	r3, fp
   133a2:	0312      	lsls	r2, r2, #12
   133a4:	431a      	orrs	r2, r3
   133a6:	9b01      	ldr	r3, [sp, #4]
   133a8:	0312      	lsls	r2, r2, #12
   133aa:	0b12      	lsrs	r2, r2, #12
   133ac:	469c      	mov	ip, r3
   133ae:	4688      	mov	r8, r1
   133b0:	4c03      	ldr	r4, [pc, #12]	; (133c0 <__aeabi_ddiv+0x664>)
   133b2:	e5a1      	b.n	12ef8 <__aeabi_ddiv+0x19c>
   133b4:	000003ff 	.word	0x000003ff
   133b8:	feffffff 	.word	0xfeffffff
   133bc:	000007fe 	.word	0x000007fe
   133c0:	000007ff 	.word	0x000007ff

000133c4 <__aeabi_dmul>:
   133c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   133c6:	4657      	mov	r7, sl
   133c8:	4645      	mov	r5, r8
   133ca:	46de      	mov	lr, fp
   133cc:	464e      	mov	r6, r9
   133ce:	b5e0      	push	{r5, r6, r7, lr}
   133d0:	030c      	lsls	r4, r1, #12
   133d2:	4698      	mov	r8, r3
   133d4:	004e      	lsls	r6, r1, #1
   133d6:	0b23      	lsrs	r3, r4, #12
   133d8:	b087      	sub	sp, #28
   133da:	0007      	movs	r7, r0
   133dc:	4692      	mov	sl, r2
   133de:	469b      	mov	fp, r3
   133e0:	0d76      	lsrs	r6, r6, #21
   133e2:	0fcd      	lsrs	r5, r1, #31
   133e4:	2e00      	cmp	r6, #0
   133e6:	d06b      	beq.n	134c0 <__aeabi_dmul+0xfc>
   133e8:	4b6d      	ldr	r3, [pc, #436]	; (135a0 <__aeabi_dmul+0x1dc>)
   133ea:	429e      	cmp	r6, r3
   133ec:	d035      	beq.n	1345a <__aeabi_dmul+0x96>
   133ee:	2480      	movs	r4, #128	; 0x80
   133f0:	465b      	mov	r3, fp
   133f2:	0f42      	lsrs	r2, r0, #29
   133f4:	0424      	lsls	r4, r4, #16
   133f6:	00db      	lsls	r3, r3, #3
   133f8:	4314      	orrs	r4, r2
   133fa:	431c      	orrs	r4, r3
   133fc:	00c3      	lsls	r3, r0, #3
   133fe:	4699      	mov	r9, r3
   13400:	4b68      	ldr	r3, [pc, #416]	; (135a4 <__aeabi_dmul+0x1e0>)
   13402:	46a3      	mov	fp, r4
   13404:	469c      	mov	ip, r3
   13406:	2300      	movs	r3, #0
   13408:	2700      	movs	r7, #0
   1340a:	4466      	add	r6, ip
   1340c:	9302      	str	r3, [sp, #8]
   1340e:	4643      	mov	r3, r8
   13410:	031c      	lsls	r4, r3, #12
   13412:	005a      	lsls	r2, r3, #1
   13414:	0fdb      	lsrs	r3, r3, #31
   13416:	4650      	mov	r0, sl
   13418:	0b24      	lsrs	r4, r4, #12
   1341a:	0d52      	lsrs	r2, r2, #21
   1341c:	4698      	mov	r8, r3
   1341e:	d100      	bne.n	13422 <__aeabi_dmul+0x5e>
   13420:	e076      	b.n	13510 <__aeabi_dmul+0x14c>
   13422:	4b5f      	ldr	r3, [pc, #380]	; (135a0 <__aeabi_dmul+0x1dc>)
   13424:	429a      	cmp	r2, r3
   13426:	d06d      	beq.n	13504 <__aeabi_dmul+0x140>
   13428:	2380      	movs	r3, #128	; 0x80
   1342a:	0f41      	lsrs	r1, r0, #29
   1342c:	041b      	lsls	r3, r3, #16
   1342e:	430b      	orrs	r3, r1
   13430:	495c      	ldr	r1, [pc, #368]	; (135a4 <__aeabi_dmul+0x1e0>)
   13432:	00e4      	lsls	r4, r4, #3
   13434:	468c      	mov	ip, r1
   13436:	431c      	orrs	r4, r3
   13438:	00c3      	lsls	r3, r0, #3
   1343a:	2000      	movs	r0, #0
   1343c:	4462      	add	r2, ip
   1343e:	4641      	mov	r1, r8
   13440:	18b6      	adds	r6, r6, r2
   13442:	4069      	eors	r1, r5
   13444:	1c72      	adds	r2, r6, #1
   13446:	9101      	str	r1, [sp, #4]
   13448:	4694      	mov	ip, r2
   1344a:	4307      	orrs	r7, r0
   1344c:	2f0f      	cmp	r7, #15
   1344e:	d900      	bls.n	13452 <__aeabi_dmul+0x8e>
   13450:	e0b0      	b.n	135b4 <__aeabi_dmul+0x1f0>
   13452:	4a55      	ldr	r2, [pc, #340]	; (135a8 <__aeabi_dmul+0x1e4>)
   13454:	00bf      	lsls	r7, r7, #2
   13456:	59d2      	ldr	r2, [r2, r7]
   13458:	4697      	mov	pc, r2
   1345a:	465b      	mov	r3, fp
   1345c:	4303      	orrs	r3, r0
   1345e:	4699      	mov	r9, r3
   13460:	d000      	beq.n	13464 <__aeabi_dmul+0xa0>
   13462:	e087      	b.n	13574 <__aeabi_dmul+0x1b0>
   13464:	2300      	movs	r3, #0
   13466:	469b      	mov	fp, r3
   13468:	3302      	adds	r3, #2
   1346a:	2708      	movs	r7, #8
   1346c:	9302      	str	r3, [sp, #8]
   1346e:	e7ce      	b.n	1340e <__aeabi_dmul+0x4a>
   13470:	4642      	mov	r2, r8
   13472:	9201      	str	r2, [sp, #4]
   13474:	2802      	cmp	r0, #2
   13476:	d067      	beq.n	13548 <__aeabi_dmul+0x184>
   13478:	2803      	cmp	r0, #3
   1347a:	d100      	bne.n	1347e <__aeabi_dmul+0xba>
   1347c:	e20e      	b.n	1389c <__aeabi_dmul+0x4d8>
   1347e:	2801      	cmp	r0, #1
   13480:	d000      	beq.n	13484 <__aeabi_dmul+0xc0>
   13482:	e162      	b.n	1374a <__aeabi_dmul+0x386>
   13484:	2300      	movs	r3, #0
   13486:	2400      	movs	r4, #0
   13488:	2200      	movs	r2, #0
   1348a:	4699      	mov	r9, r3
   1348c:	9901      	ldr	r1, [sp, #4]
   1348e:	4001      	ands	r1, r0
   13490:	b2cd      	uxtb	r5, r1
   13492:	2100      	movs	r1, #0
   13494:	0312      	lsls	r2, r2, #12
   13496:	0d0b      	lsrs	r3, r1, #20
   13498:	0b12      	lsrs	r2, r2, #12
   1349a:	051b      	lsls	r3, r3, #20
   1349c:	4313      	orrs	r3, r2
   1349e:	4a43      	ldr	r2, [pc, #268]	; (135ac <__aeabi_dmul+0x1e8>)
   134a0:	0524      	lsls	r4, r4, #20
   134a2:	4013      	ands	r3, r2
   134a4:	431c      	orrs	r4, r3
   134a6:	0064      	lsls	r4, r4, #1
   134a8:	07ed      	lsls	r5, r5, #31
   134aa:	0864      	lsrs	r4, r4, #1
   134ac:	432c      	orrs	r4, r5
   134ae:	4648      	mov	r0, r9
   134b0:	0021      	movs	r1, r4
   134b2:	b007      	add	sp, #28
   134b4:	bc3c      	pop	{r2, r3, r4, r5}
   134b6:	4690      	mov	r8, r2
   134b8:	4699      	mov	r9, r3
   134ba:	46a2      	mov	sl, r4
   134bc:	46ab      	mov	fp, r5
   134be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   134c0:	4303      	orrs	r3, r0
   134c2:	4699      	mov	r9, r3
   134c4:	d04f      	beq.n	13566 <__aeabi_dmul+0x1a2>
   134c6:	465b      	mov	r3, fp
   134c8:	2b00      	cmp	r3, #0
   134ca:	d100      	bne.n	134ce <__aeabi_dmul+0x10a>
   134cc:	e189      	b.n	137e2 <__aeabi_dmul+0x41e>
   134ce:	4658      	mov	r0, fp
   134d0:	f000 fdb4 	bl	1403c <__clzsi2>
   134d4:	0003      	movs	r3, r0
   134d6:	3b0b      	subs	r3, #11
   134d8:	2b1c      	cmp	r3, #28
   134da:	dd00      	ble.n	134de <__aeabi_dmul+0x11a>
   134dc:	e17a      	b.n	137d4 <__aeabi_dmul+0x410>
   134de:	221d      	movs	r2, #29
   134e0:	1ad3      	subs	r3, r2, r3
   134e2:	003a      	movs	r2, r7
   134e4:	0001      	movs	r1, r0
   134e6:	465c      	mov	r4, fp
   134e8:	40da      	lsrs	r2, r3
   134ea:	3908      	subs	r1, #8
   134ec:	408c      	lsls	r4, r1
   134ee:	0013      	movs	r3, r2
   134f0:	408f      	lsls	r7, r1
   134f2:	4323      	orrs	r3, r4
   134f4:	469b      	mov	fp, r3
   134f6:	46b9      	mov	r9, r7
   134f8:	2300      	movs	r3, #0
   134fa:	4e2d      	ldr	r6, [pc, #180]	; (135b0 <__aeabi_dmul+0x1ec>)
   134fc:	2700      	movs	r7, #0
   134fe:	1a36      	subs	r6, r6, r0
   13500:	9302      	str	r3, [sp, #8]
   13502:	e784      	b.n	1340e <__aeabi_dmul+0x4a>
   13504:	4653      	mov	r3, sl
   13506:	4323      	orrs	r3, r4
   13508:	d12a      	bne.n	13560 <__aeabi_dmul+0x19c>
   1350a:	2400      	movs	r4, #0
   1350c:	2002      	movs	r0, #2
   1350e:	e796      	b.n	1343e <__aeabi_dmul+0x7a>
   13510:	4653      	mov	r3, sl
   13512:	4323      	orrs	r3, r4
   13514:	d020      	beq.n	13558 <__aeabi_dmul+0x194>
   13516:	2c00      	cmp	r4, #0
   13518:	d100      	bne.n	1351c <__aeabi_dmul+0x158>
   1351a:	e157      	b.n	137cc <__aeabi_dmul+0x408>
   1351c:	0020      	movs	r0, r4
   1351e:	f000 fd8d 	bl	1403c <__clzsi2>
   13522:	0003      	movs	r3, r0
   13524:	3b0b      	subs	r3, #11
   13526:	2b1c      	cmp	r3, #28
   13528:	dd00      	ble.n	1352c <__aeabi_dmul+0x168>
   1352a:	e149      	b.n	137c0 <__aeabi_dmul+0x3fc>
   1352c:	211d      	movs	r1, #29
   1352e:	1acb      	subs	r3, r1, r3
   13530:	4651      	mov	r1, sl
   13532:	0002      	movs	r2, r0
   13534:	40d9      	lsrs	r1, r3
   13536:	4653      	mov	r3, sl
   13538:	3a08      	subs	r2, #8
   1353a:	4094      	lsls	r4, r2
   1353c:	4093      	lsls	r3, r2
   1353e:	430c      	orrs	r4, r1
   13540:	4a1b      	ldr	r2, [pc, #108]	; (135b0 <__aeabi_dmul+0x1ec>)
   13542:	1a12      	subs	r2, r2, r0
   13544:	2000      	movs	r0, #0
   13546:	e77a      	b.n	1343e <__aeabi_dmul+0x7a>
   13548:	2501      	movs	r5, #1
   1354a:	9b01      	ldr	r3, [sp, #4]
   1354c:	4c14      	ldr	r4, [pc, #80]	; (135a0 <__aeabi_dmul+0x1dc>)
   1354e:	401d      	ands	r5, r3
   13550:	2300      	movs	r3, #0
   13552:	2200      	movs	r2, #0
   13554:	4699      	mov	r9, r3
   13556:	e79c      	b.n	13492 <__aeabi_dmul+0xce>
   13558:	2400      	movs	r4, #0
   1355a:	2200      	movs	r2, #0
   1355c:	2001      	movs	r0, #1
   1355e:	e76e      	b.n	1343e <__aeabi_dmul+0x7a>
   13560:	4653      	mov	r3, sl
   13562:	2003      	movs	r0, #3
   13564:	e76b      	b.n	1343e <__aeabi_dmul+0x7a>
   13566:	2300      	movs	r3, #0
   13568:	469b      	mov	fp, r3
   1356a:	3301      	adds	r3, #1
   1356c:	2704      	movs	r7, #4
   1356e:	2600      	movs	r6, #0
   13570:	9302      	str	r3, [sp, #8]
   13572:	e74c      	b.n	1340e <__aeabi_dmul+0x4a>
   13574:	2303      	movs	r3, #3
   13576:	4681      	mov	r9, r0
   13578:	270c      	movs	r7, #12
   1357a:	9302      	str	r3, [sp, #8]
   1357c:	e747      	b.n	1340e <__aeabi_dmul+0x4a>
   1357e:	2280      	movs	r2, #128	; 0x80
   13580:	2300      	movs	r3, #0
   13582:	2500      	movs	r5, #0
   13584:	0312      	lsls	r2, r2, #12
   13586:	4699      	mov	r9, r3
   13588:	4c05      	ldr	r4, [pc, #20]	; (135a0 <__aeabi_dmul+0x1dc>)
   1358a:	e782      	b.n	13492 <__aeabi_dmul+0xce>
   1358c:	465c      	mov	r4, fp
   1358e:	464b      	mov	r3, r9
   13590:	9802      	ldr	r0, [sp, #8]
   13592:	e76f      	b.n	13474 <__aeabi_dmul+0xb0>
   13594:	465c      	mov	r4, fp
   13596:	464b      	mov	r3, r9
   13598:	9501      	str	r5, [sp, #4]
   1359a:	9802      	ldr	r0, [sp, #8]
   1359c:	e76a      	b.n	13474 <__aeabi_dmul+0xb0>
   1359e:	46c0      	nop			; (mov r8, r8)
   135a0:	000007ff 	.word	0x000007ff
   135a4:	fffffc01 	.word	0xfffffc01
   135a8:	00019448 	.word	0x00019448
   135ac:	800fffff 	.word	0x800fffff
   135b0:	fffffc0d 	.word	0xfffffc0d
   135b4:	464a      	mov	r2, r9
   135b6:	4649      	mov	r1, r9
   135b8:	0c17      	lsrs	r7, r2, #16
   135ba:	0c1a      	lsrs	r2, r3, #16
   135bc:	041b      	lsls	r3, r3, #16
   135be:	0c1b      	lsrs	r3, r3, #16
   135c0:	0408      	lsls	r0, r1, #16
   135c2:	0019      	movs	r1, r3
   135c4:	0c00      	lsrs	r0, r0, #16
   135c6:	4341      	muls	r1, r0
   135c8:	0015      	movs	r5, r2
   135ca:	4688      	mov	r8, r1
   135cc:	0019      	movs	r1, r3
   135ce:	437d      	muls	r5, r7
   135d0:	4379      	muls	r1, r7
   135d2:	9503      	str	r5, [sp, #12]
   135d4:	4689      	mov	r9, r1
   135d6:	0029      	movs	r1, r5
   135d8:	0015      	movs	r5, r2
   135da:	4345      	muls	r5, r0
   135dc:	444d      	add	r5, r9
   135de:	9502      	str	r5, [sp, #8]
   135e0:	4645      	mov	r5, r8
   135e2:	0c2d      	lsrs	r5, r5, #16
   135e4:	46aa      	mov	sl, r5
   135e6:	9d02      	ldr	r5, [sp, #8]
   135e8:	4455      	add	r5, sl
   135ea:	45a9      	cmp	r9, r5
   135ec:	d906      	bls.n	135fc <__aeabi_dmul+0x238>
   135ee:	468a      	mov	sl, r1
   135f0:	2180      	movs	r1, #128	; 0x80
   135f2:	0249      	lsls	r1, r1, #9
   135f4:	4689      	mov	r9, r1
   135f6:	44ca      	add	sl, r9
   135f8:	4651      	mov	r1, sl
   135fa:	9103      	str	r1, [sp, #12]
   135fc:	0c29      	lsrs	r1, r5, #16
   135fe:	9104      	str	r1, [sp, #16]
   13600:	4641      	mov	r1, r8
   13602:	0409      	lsls	r1, r1, #16
   13604:	042d      	lsls	r5, r5, #16
   13606:	0c09      	lsrs	r1, r1, #16
   13608:	4688      	mov	r8, r1
   1360a:	0029      	movs	r1, r5
   1360c:	0c25      	lsrs	r5, r4, #16
   1360e:	0424      	lsls	r4, r4, #16
   13610:	4441      	add	r1, r8
   13612:	0c24      	lsrs	r4, r4, #16
   13614:	9105      	str	r1, [sp, #20]
   13616:	0021      	movs	r1, r4
   13618:	4341      	muls	r1, r0
   1361a:	4688      	mov	r8, r1
   1361c:	0021      	movs	r1, r4
   1361e:	4379      	muls	r1, r7
   13620:	468a      	mov	sl, r1
   13622:	4368      	muls	r0, r5
   13624:	4641      	mov	r1, r8
   13626:	4450      	add	r0, sl
   13628:	4681      	mov	r9, r0
   1362a:	0c08      	lsrs	r0, r1, #16
   1362c:	4448      	add	r0, r9
   1362e:	436f      	muls	r7, r5
   13630:	4582      	cmp	sl, r0
   13632:	d903      	bls.n	1363c <__aeabi_dmul+0x278>
   13634:	2180      	movs	r1, #128	; 0x80
   13636:	0249      	lsls	r1, r1, #9
   13638:	4689      	mov	r9, r1
   1363a:	444f      	add	r7, r9
   1363c:	0c01      	lsrs	r1, r0, #16
   1363e:	4689      	mov	r9, r1
   13640:	0039      	movs	r1, r7
   13642:	4449      	add	r1, r9
   13644:	9102      	str	r1, [sp, #8]
   13646:	4641      	mov	r1, r8
   13648:	040f      	lsls	r7, r1, #16
   1364a:	9904      	ldr	r1, [sp, #16]
   1364c:	0c3f      	lsrs	r7, r7, #16
   1364e:	4688      	mov	r8, r1
   13650:	0400      	lsls	r0, r0, #16
   13652:	19c0      	adds	r0, r0, r7
   13654:	4480      	add	r8, r0
   13656:	4641      	mov	r1, r8
   13658:	9104      	str	r1, [sp, #16]
   1365a:	4659      	mov	r1, fp
   1365c:	0c0f      	lsrs	r7, r1, #16
   1365e:	0409      	lsls	r1, r1, #16
   13660:	0c09      	lsrs	r1, r1, #16
   13662:	4688      	mov	r8, r1
   13664:	4359      	muls	r1, r3
   13666:	468a      	mov	sl, r1
   13668:	0039      	movs	r1, r7
   1366a:	4351      	muls	r1, r2
   1366c:	4689      	mov	r9, r1
   1366e:	4641      	mov	r1, r8
   13670:	434a      	muls	r2, r1
   13672:	4651      	mov	r1, sl
   13674:	0c09      	lsrs	r1, r1, #16
   13676:	468b      	mov	fp, r1
   13678:	437b      	muls	r3, r7
   1367a:	18d2      	adds	r2, r2, r3
   1367c:	445a      	add	r2, fp
   1367e:	4293      	cmp	r3, r2
   13680:	d903      	bls.n	1368a <__aeabi_dmul+0x2c6>
   13682:	2380      	movs	r3, #128	; 0x80
   13684:	025b      	lsls	r3, r3, #9
   13686:	469b      	mov	fp, r3
   13688:	44d9      	add	r9, fp
   1368a:	4651      	mov	r1, sl
   1368c:	0409      	lsls	r1, r1, #16
   1368e:	0c09      	lsrs	r1, r1, #16
   13690:	468a      	mov	sl, r1
   13692:	4641      	mov	r1, r8
   13694:	4361      	muls	r1, r4
   13696:	437c      	muls	r4, r7
   13698:	0c13      	lsrs	r3, r2, #16
   1369a:	0412      	lsls	r2, r2, #16
   1369c:	444b      	add	r3, r9
   1369e:	4452      	add	r2, sl
   136a0:	46a1      	mov	r9, r4
   136a2:	468a      	mov	sl, r1
   136a4:	003c      	movs	r4, r7
   136a6:	4641      	mov	r1, r8
   136a8:	436c      	muls	r4, r5
   136aa:	434d      	muls	r5, r1
   136ac:	4651      	mov	r1, sl
   136ae:	444d      	add	r5, r9
   136b0:	0c0f      	lsrs	r7, r1, #16
   136b2:	197d      	adds	r5, r7, r5
   136b4:	45a9      	cmp	r9, r5
   136b6:	d903      	bls.n	136c0 <__aeabi_dmul+0x2fc>
   136b8:	2180      	movs	r1, #128	; 0x80
   136ba:	0249      	lsls	r1, r1, #9
   136bc:	4688      	mov	r8, r1
   136be:	4444      	add	r4, r8
   136c0:	9f04      	ldr	r7, [sp, #16]
   136c2:	9903      	ldr	r1, [sp, #12]
   136c4:	46b8      	mov	r8, r7
   136c6:	4441      	add	r1, r8
   136c8:	468b      	mov	fp, r1
   136ca:	4583      	cmp	fp, r0
   136cc:	4180      	sbcs	r0, r0
   136ce:	4241      	negs	r1, r0
   136d0:	4688      	mov	r8, r1
   136d2:	4651      	mov	r1, sl
   136d4:	0408      	lsls	r0, r1, #16
   136d6:	042f      	lsls	r7, r5, #16
   136d8:	0c00      	lsrs	r0, r0, #16
   136da:	183f      	adds	r7, r7, r0
   136dc:	4658      	mov	r0, fp
   136de:	9902      	ldr	r1, [sp, #8]
   136e0:	1810      	adds	r0, r2, r0
   136e2:	4689      	mov	r9, r1
   136e4:	4290      	cmp	r0, r2
   136e6:	4192      	sbcs	r2, r2
   136e8:	444f      	add	r7, r9
   136ea:	46ba      	mov	sl, r7
   136ec:	4252      	negs	r2, r2
   136ee:	4699      	mov	r9, r3
   136f0:	4693      	mov	fp, r2
   136f2:	44c2      	add	sl, r8
   136f4:	44d1      	add	r9, sl
   136f6:	44cb      	add	fp, r9
   136f8:	428f      	cmp	r7, r1
   136fa:	41bf      	sbcs	r7, r7
   136fc:	45c2      	cmp	sl, r8
   136fe:	4189      	sbcs	r1, r1
   13700:	4599      	cmp	r9, r3
   13702:	419b      	sbcs	r3, r3
   13704:	4593      	cmp	fp, r2
   13706:	4192      	sbcs	r2, r2
   13708:	427f      	negs	r7, r7
   1370a:	4249      	negs	r1, r1
   1370c:	0c2d      	lsrs	r5, r5, #16
   1370e:	4252      	negs	r2, r2
   13710:	430f      	orrs	r7, r1
   13712:	425b      	negs	r3, r3
   13714:	4313      	orrs	r3, r2
   13716:	197f      	adds	r7, r7, r5
   13718:	18ff      	adds	r7, r7, r3
   1371a:	465b      	mov	r3, fp
   1371c:	193c      	adds	r4, r7, r4
   1371e:	0ddb      	lsrs	r3, r3, #23
   13720:	9a05      	ldr	r2, [sp, #20]
   13722:	0264      	lsls	r4, r4, #9
   13724:	431c      	orrs	r4, r3
   13726:	0243      	lsls	r3, r0, #9
   13728:	4313      	orrs	r3, r2
   1372a:	1e5d      	subs	r5, r3, #1
   1372c:	41ab      	sbcs	r3, r5
   1372e:	465a      	mov	r2, fp
   13730:	0dc0      	lsrs	r0, r0, #23
   13732:	4303      	orrs	r3, r0
   13734:	0252      	lsls	r2, r2, #9
   13736:	4313      	orrs	r3, r2
   13738:	01e2      	lsls	r2, r4, #7
   1373a:	d556      	bpl.n	137ea <__aeabi_dmul+0x426>
   1373c:	2001      	movs	r0, #1
   1373e:	085a      	lsrs	r2, r3, #1
   13740:	4003      	ands	r3, r0
   13742:	4313      	orrs	r3, r2
   13744:	07e2      	lsls	r2, r4, #31
   13746:	4313      	orrs	r3, r2
   13748:	0864      	lsrs	r4, r4, #1
   1374a:	485a      	ldr	r0, [pc, #360]	; (138b4 <__aeabi_dmul+0x4f0>)
   1374c:	4460      	add	r0, ip
   1374e:	2800      	cmp	r0, #0
   13750:	dd4d      	ble.n	137ee <__aeabi_dmul+0x42a>
   13752:	075a      	lsls	r2, r3, #29
   13754:	d009      	beq.n	1376a <__aeabi_dmul+0x3a6>
   13756:	220f      	movs	r2, #15
   13758:	401a      	ands	r2, r3
   1375a:	2a04      	cmp	r2, #4
   1375c:	d005      	beq.n	1376a <__aeabi_dmul+0x3a6>
   1375e:	1d1a      	adds	r2, r3, #4
   13760:	429a      	cmp	r2, r3
   13762:	419b      	sbcs	r3, r3
   13764:	425b      	negs	r3, r3
   13766:	18e4      	adds	r4, r4, r3
   13768:	0013      	movs	r3, r2
   1376a:	01e2      	lsls	r2, r4, #7
   1376c:	d504      	bpl.n	13778 <__aeabi_dmul+0x3b4>
   1376e:	2080      	movs	r0, #128	; 0x80
   13770:	4a51      	ldr	r2, [pc, #324]	; (138b8 <__aeabi_dmul+0x4f4>)
   13772:	00c0      	lsls	r0, r0, #3
   13774:	4014      	ands	r4, r2
   13776:	4460      	add	r0, ip
   13778:	4a50      	ldr	r2, [pc, #320]	; (138bc <__aeabi_dmul+0x4f8>)
   1377a:	4290      	cmp	r0, r2
   1377c:	dd00      	ble.n	13780 <__aeabi_dmul+0x3bc>
   1377e:	e6e3      	b.n	13548 <__aeabi_dmul+0x184>
   13780:	2501      	movs	r5, #1
   13782:	08db      	lsrs	r3, r3, #3
   13784:	0762      	lsls	r2, r4, #29
   13786:	431a      	orrs	r2, r3
   13788:	0264      	lsls	r4, r4, #9
   1378a:	9b01      	ldr	r3, [sp, #4]
   1378c:	4691      	mov	r9, r2
   1378e:	0b22      	lsrs	r2, r4, #12
   13790:	0544      	lsls	r4, r0, #21
   13792:	0d64      	lsrs	r4, r4, #21
   13794:	401d      	ands	r5, r3
   13796:	e67c      	b.n	13492 <__aeabi_dmul+0xce>
   13798:	2280      	movs	r2, #128	; 0x80
   1379a:	4659      	mov	r1, fp
   1379c:	0312      	lsls	r2, r2, #12
   1379e:	4211      	tst	r1, r2
   137a0:	d008      	beq.n	137b4 <__aeabi_dmul+0x3f0>
   137a2:	4214      	tst	r4, r2
   137a4:	d106      	bne.n	137b4 <__aeabi_dmul+0x3f0>
   137a6:	4322      	orrs	r2, r4
   137a8:	0312      	lsls	r2, r2, #12
   137aa:	0b12      	lsrs	r2, r2, #12
   137ac:	4645      	mov	r5, r8
   137ae:	4699      	mov	r9, r3
   137b0:	4c43      	ldr	r4, [pc, #268]	; (138c0 <__aeabi_dmul+0x4fc>)
   137b2:	e66e      	b.n	13492 <__aeabi_dmul+0xce>
   137b4:	465b      	mov	r3, fp
   137b6:	431a      	orrs	r2, r3
   137b8:	0312      	lsls	r2, r2, #12
   137ba:	0b12      	lsrs	r2, r2, #12
   137bc:	4c40      	ldr	r4, [pc, #256]	; (138c0 <__aeabi_dmul+0x4fc>)
   137be:	e668      	b.n	13492 <__aeabi_dmul+0xce>
   137c0:	0003      	movs	r3, r0
   137c2:	4654      	mov	r4, sl
   137c4:	3b28      	subs	r3, #40	; 0x28
   137c6:	409c      	lsls	r4, r3
   137c8:	2300      	movs	r3, #0
   137ca:	e6b9      	b.n	13540 <__aeabi_dmul+0x17c>
   137cc:	f000 fc36 	bl	1403c <__clzsi2>
   137d0:	3020      	adds	r0, #32
   137d2:	e6a6      	b.n	13522 <__aeabi_dmul+0x15e>
   137d4:	0003      	movs	r3, r0
   137d6:	3b28      	subs	r3, #40	; 0x28
   137d8:	409f      	lsls	r7, r3
   137da:	2300      	movs	r3, #0
   137dc:	46bb      	mov	fp, r7
   137de:	4699      	mov	r9, r3
   137e0:	e68a      	b.n	134f8 <__aeabi_dmul+0x134>
   137e2:	f000 fc2b 	bl	1403c <__clzsi2>
   137e6:	3020      	adds	r0, #32
   137e8:	e674      	b.n	134d4 <__aeabi_dmul+0x110>
   137ea:	46b4      	mov	ip, r6
   137ec:	e7ad      	b.n	1374a <__aeabi_dmul+0x386>
   137ee:	2501      	movs	r5, #1
   137f0:	1a2a      	subs	r2, r5, r0
   137f2:	2a38      	cmp	r2, #56	; 0x38
   137f4:	dd06      	ble.n	13804 <__aeabi_dmul+0x440>
   137f6:	9b01      	ldr	r3, [sp, #4]
   137f8:	2400      	movs	r4, #0
   137fa:	401d      	ands	r5, r3
   137fc:	2300      	movs	r3, #0
   137fe:	2200      	movs	r2, #0
   13800:	4699      	mov	r9, r3
   13802:	e646      	b.n	13492 <__aeabi_dmul+0xce>
   13804:	2a1f      	cmp	r2, #31
   13806:	dc21      	bgt.n	1384c <__aeabi_dmul+0x488>
   13808:	2520      	movs	r5, #32
   1380a:	0020      	movs	r0, r4
   1380c:	1aad      	subs	r5, r5, r2
   1380e:	001e      	movs	r6, r3
   13810:	40ab      	lsls	r3, r5
   13812:	40a8      	lsls	r0, r5
   13814:	40d6      	lsrs	r6, r2
   13816:	1e5d      	subs	r5, r3, #1
   13818:	41ab      	sbcs	r3, r5
   1381a:	4330      	orrs	r0, r6
   1381c:	4318      	orrs	r0, r3
   1381e:	40d4      	lsrs	r4, r2
   13820:	0743      	lsls	r3, r0, #29
   13822:	d009      	beq.n	13838 <__aeabi_dmul+0x474>
   13824:	230f      	movs	r3, #15
   13826:	4003      	ands	r3, r0
   13828:	2b04      	cmp	r3, #4
   1382a:	d005      	beq.n	13838 <__aeabi_dmul+0x474>
   1382c:	0003      	movs	r3, r0
   1382e:	1d18      	adds	r0, r3, #4
   13830:	4298      	cmp	r0, r3
   13832:	419b      	sbcs	r3, r3
   13834:	425b      	negs	r3, r3
   13836:	18e4      	adds	r4, r4, r3
   13838:	0223      	lsls	r3, r4, #8
   1383a:	d521      	bpl.n	13880 <__aeabi_dmul+0x4bc>
   1383c:	2501      	movs	r5, #1
   1383e:	9b01      	ldr	r3, [sp, #4]
   13840:	2401      	movs	r4, #1
   13842:	401d      	ands	r5, r3
   13844:	2300      	movs	r3, #0
   13846:	2200      	movs	r2, #0
   13848:	4699      	mov	r9, r3
   1384a:	e622      	b.n	13492 <__aeabi_dmul+0xce>
   1384c:	251f      	movs	r5, #31
   1384e:	0021      	movs	r1, r4
   13850:	426d      	negs	r5, r5
   13852:	1a28      	subs	r0, r5, r0
   13854:	40c1      	lsrs	r1, r0
   13856:	0008      	movs	r0, r1
   13858:	2a20      	cmp	r2, #32
   1385a:	d01d      	beq.n	13898 <__aeabi_dmul+0x4d4>
   1385c:	355f      	adds	r5, #95	; 0x5f
   1385e:	1aaa      	subs	r2, r5, r2
   13860:	4094      	lsls	r4, r2
   13862:	4323      	orrs	r3, r4
   13864:	1e5c      	subs	r4, r3, #1
   13866:	41a3      	sbcs	r3, r4
   13868:	2507      	movs	r5, #7
   1386a:	4303      	orrs	r3, r0
   1386c:	401d      	ands	r5, r3
   1386e:	2200      	movs	r2, #0
   13870:	2d00      	cmp	r5, #0
   13872:	d009      	beq.n	13888 <__aeabi_dmul+0x4c4>
   13874:	220f      	movs	r2, #15
   13876:	2400      	movs	r4, #0
   13878:	401a      	ands	r2, r3
   1387a:	0018      	movs	r0, r3
   1387c:	2a04      	cmp	r2, #4
   1387e:	d1d6      	bne.n	1382e <__aeabi_dmul+0x46a>
   13880:	0003      	movs	r3, r0
   13882:	0765      	lsls	r5, r4, #29
   13884:	0264      	lsls	r4, r4, #9
   13886:	0b22      	lsrs	r2, r4, #12
   13888:	08db      	lsrs	r3, r3, #3
   1388a:	432b      	orrs	r3, r5
   1388c:	2501      	movs	r5, #1
   1388e:	4699      	mov	r9, r3
   13890:	9b01      	ldr	r3, [sp, #4]
   13892:	2400      	movs	r4, #0
   13894:	401d      	ands	r5, r3
   13896:	e5fc      	b.n	13492 <__aeabi_dmul+0xce>
   13898:	2400      	movs	r4, #0
   1389a:	e7e2      	b.n	13862 <__aeabi_dmul+0x49e>
   1389c:	2280      	movs	r2, #128	; 0x80
   1389e:	2501      	movs	r5, #1
   138a0:	0312      	lsls	r2, r2, #12
   138a2:	4322      	orrs	r2, r4
   138a4:	9901      	ldr	r1, [sp, #4]
   138a6:	0312      	lsls	r2, r2, #12
   138a8:	0b12      	lsrs	r2, r2, #12
   138aa:	400d      	ands	r5, r1
   138ac:	4699      	mov	r9, r3
   138ae:	4c04      	ldr	r4, [pc, #16]	; (138c0 <__aeabi_dmul+0x4fc>)
   138b0:	e5ef      	b.n	13492 <__aeabi_dmul+0xce>
   138b2:	46c0      	nop			; (mov r8, r8)
   138b4:	000003ff 	.word	0x000003ff
   138b8:	feffffff 	.word	0xfeffffff
   138bc:	000007fe 	.word	0x000007fe
   138c0:	000007ff 	.word	0x000007ff

000138c4 <__aeabi_dsub>:
   138c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   138c6:	4646      	mov	r6, r8
   138c8:	46d6      	mov	lr, sl
   138ca:	464f      	mov	r7, r9
   138cc:	030c      	lsls	r4, r1, #12
   138ce:	b5c0      	push	{r6, r7, lr}
   138d0:	0fcd      	lsrs	r5, r1, #31
   138d2:	004e      	lsls	r6, r1, #1
   138d4:	0a61      	lsrs	r1, r4, #9
   138d6:	0f44      	lsrs	r4, r0, #29
   138d8:	430c      	orrs	r4, r1
   138da:	00c1      	lsls	r1, r0, #3
   138dc:	0058      	lsls	r0, r3, #1
   138de:	0d40      	lsrs	r0, r0, #21
   138e0:	4684      	mov	ip, r0
   138e2:	468a      	mov	sl, r1
   138e4:	000f      	movs	r7, r1
   138e6:	0319      	lsls	r1, r3, #12
   138e8:	0f50      	lsrs	r0, r2, #29
   138ea:	0a49      	lsrs	r1, r1, #9
   138ec:	4301      	orrs	r1, r0
   138ee:	48c6      	ldr	r0, [pc, #792]	; (13c08 <__aeabi_dsub+0x344>)
   138f0:	0d76      	lsrs	r6, r6, #21
   138f2:	46a8      	mov	r8, r5
   138f4:	0fdb      	lsrs	r3, r3, #31
   138f6:	00d2      	lsls	r2, r2, #3
   138f8:	4584      	cmp	ip, r0
   138fa:	d100      	bne.n	138fe <__aeabi_dsub+0x3a>
   138fc:	e0d8      	b.n	13ab0 <__aeabi_dsub+0x1ec>
   138fe:	2001      	movs	r0, #1
   13900:	4043      	eors	r3, r0
   13902:	42ab      	cmp	r3, r5
   13904:	d100      	bne.n	13908 <__aeabi_dsub+0x44>
   13906:	e0a6      	b.n	13a56 <__aeabi_dsub+0x192>
   13908:	4660      	mov	r0, ip
   1390a:	1a35      	subs	r5, r6, r0
   1390c:	2d00      	cmp	r5, #0
   1390e:	dc00      	bgt.n	13912 <__aeabi_dsub+0x4e>
   13910:	e105      	b.n	13b1e <__aeabi_dsub+0x25a>
   13912:	2800      	cmp	r0, #0
   13914:	d110      	bne.n	13938 <__aeabi_dsub+0x74>
   13916:	000b      	movs	r3, r1
   13918:	4313      	orrs	r3, r2
   1391a:	d100      	bne.n	1391e <__aeabi_dsub+0x5a>
   1391c:	e0d7      	b.n	13ace <__aeabi_dsub+0x20a>
   1391e:	1e6b      	subs	r3, r5, #1
   13920:	2b00      	cmp	r3, #0
   13922:	d000      	beq.n	13926 <__aeabi_dsub+0x62>
   13924:	e14b      	b.n	13bbe <__aeabi_dsub+0x2fa>
   13926:	4653      	mov	r3, sl
   13928:	1a9f      	subs	r7, r3, r2
   1392a:	45ba      	cmp	sl, r7
   1392c:	4180      	sbcs	r0, r0
   1392e:	1a64      	subs	r4, r4, r1
   13930:	4240      	negs	r0, r0
   13932:	1a24      	subs	r4, r4, r0
   13934:	2601      	movs	r6, #1
   13936:	e01e      	b.n	13976 <__aeabi_dsub+0xb2>
   13938:	4bb3      	ldr	r3, [pc, #716]	; (13c08 <__aeabi_dsub+0x344>)
   1393a:	429e      	cmp	r6, r3
   1393c:	d048      	beq.n	139d0 <__aeabi_dsub+0x10c>
   1393e:	2380      	movs	r3, #128	; 0x80
   13940:	041b      	lsls	r3, r3, #16
   13942:	4319      	orrs	r1, r3
   13944:	2d38      	cmp	r5, #56	; 0x38
   13946:	dd00      	ble.n	1394a <__aeabi_dsub+0x86>
   13948:	e119      	b.n	13b7e <__aeabi_dsub+0x2ba>
   1394a:	2d1f      	cmp	r5, #31
   1394c:	dd00      	ble.n	13950 <__aeabi_dsub+0x8c>
   1394e:	e14c      	b.n	13bea <__aeabi_dsub+0x326>
   13950:	2320      	movs	r3, #32
   13952:	000f      	movs	r7, r1
   13954:	1b5b      	subs	r3, r3, r5
   13956:	0010      	movs	r0, r2
   13958:	409a      	lsls	r2, r3
   1395a:	409f      	lsls	r7, r3
   1395c:	40e8      	lsrs	r0, r5
   1395e:	1e53      	subs	r3, r2, #1
   13960:	419a      	sbcs	r2, r3
   13962:	40e9      	lsrs	r1, r5
   13964:	4307      	orrs	r7, r0
   13966:	4317      	orrs	r7, r2
   13968:	4653      	mov	r3, sl
   1396a:	1bdf      	subs	r7, r3, r7
   1396c:	1a61      	subs	r1, r4, r1
   1396e:	45ba      	cmp	sl, r7
   13970:	41a4      	sbcs	r4, r4
   13972:	4264      	negs	r4, r4
   13974:	1b0c      	subs	r4, r1, r4
   13976:	0223      	lsls	r3, r4, #8
   13978:	d400      	bmi.n	1397c <__aeabi_dsub+0xb8>
   1397a:	e0c5      	b.n	13b08 <__aeabi_dsub+0x244>
   1397c:	0264      	lsls	r4, r4, #9
   1397e:	0a65      	lsrs	r5, r4, #9
   13980:	2d00      	cmp	r5, #0
   13982:	d100      	bne.n	13986 <__aeabi_dsub+0xc2>
   13984:	e0f6      	b.n	13b74 <__aeabi_dsub+0x2b0>
   13986:	0028      	movs	r0, r5
   13988:	f000 fb58 	bl	1403c <__clzsi2>
   1398c:	0003      	movs	r3, r0
   1398e:	3b08      	subs	r3, #8
   13990:	2b1f      	cmp	r3, #31
   13992:	dd00      	ble.n	13996 <__aeabi_dsub+0xd2>
   13994:	e0e9      	b.n	13b6a <__aeabi_dsub+0x2a6>
   13996:	2220      	movs	r2, #32
   13998:	003c      	movs	r4, r7
   1399a:	1ad2      	subs	r2, r2, r3
   1399c:	409d      	lsls	r5, r3
   1399e:	40d4      	lsrs	r4, r2
   139a0:	409f      	lsls	r7, r3
   139a2:	4325      	orrs	r5, r4
   139a4:	429e      	cmp	r6, r3
   139a6:	dd00      	ble.n	139aa <__aeabi_dsub+0xe6>
   139a8:	e0db      	b.n	13b62 <__aeabi_dsub+0x29e>
   139aa:	1b9e      	subs	r6, r3, r6
   139ac:	1c73      	adds	r3, r6, #1
   139ae:	2b1f      	cmp	r3, #31
   139b0:	dd00      	ble.n	139b4 <__aeabi_dsub+0xf0>
   139b2:	e10a      	b.n	13bca <__aeabi_dsub+0x306>
   139b4:	2220      	movs	r2, #32
   139b6:	0038      	movs	r0, r7
   139b8:	1ad2      	subs	r2, r2, r3
   139ba:	0029      	movs	r1, r5
   139bc:	4097      	lsls	r7, r2
   139be:	002c      	movs	r4, r5
   139c0:	4091      	lsls	r1, r2
   139c2:	40d8      	lsrs	r0, r3
   139c4:	1e7a      	subs	r2, r7, #1
   139c6:	4197      	sbcs	r7, r2
   139c8:	40dc      	lsrs	r4, r3
   139ca:	2600      	movs	r6, #0
   139cc:	4301      	orrs	r1, r0
   139ce:	430f      	orrs	r7, r1
   139d0:	077b      	lsls	r3, r7, #29
   139d2:	d009      	beq.n	139e8 <__aeabi_dsub+0x124>
   139d4:	230f      	movs	r3, #15
   139d6:	403b      	ands	r3, r7
   139d8:	2b04      	cmp	r3, #4
   139da:	d005      	beq.n	139e8 <__aeabi_dsub+0x124>
   139dc:	1d3b      	adds	r3, r7, #4
   139de:	42bb      	cmp	r3, r7
   139e0:	41bf      	sbcs	r7, r7
   139e2:	427f      	negs	r7, r7
   139e4:	19e4      	adds	r4, r4, r7
   139e6:	001f      	movs	r7, r3
   139e8:	0223      	lsls	r3, r4, #8
   139ea:	d525      	bpl.n	13a38 <__aeabi_dsub+0x174>
   139ec:	4b86      	ldr	r3, [pc, #536]	; (13c08 <__aeabi_dsub+0x344>)
   139ee:	3601      	adds	r6, #1
   139f0:	429e      	cmp	r6, r3
   139f2:	d100      	bne.n	139f6 <__aeabi_dsub+0x132>
   139f4:	e0af      	b.n	13b56 <__aeabi_dsub+0x292>
   139f6:	4b85      	ldr	r3, [pc, #532]	; (13c0c <__aeabi_dsub+0x348>)
   139f8:	2501      	movs	r5, #1
   139fa:	401c      	ands	r4, r3
   139fc:	4643      	mov	r3, r8
   139fe:	0762      	lsls	r2, r4, #29
   13a00:	08ff      	lsrs	r7, r7, #3
   13a02:	0264      	lsls	r4, r4, #9
   13a04:	0576      	lsls	r6, r6, #21
   13a06:	4317      	orrs	r7, r2
   13a08:	0b24      	lsrs	r4, r4, #12
   13a0a:	0d76      	lsrs	r6, r6, #21
   13a0c:	401d      	ands	r5, r3
   13a0e:	2100      	movs	r1, #0
   13a10:	0324      	lsls	r4, r4, #12
   13a12:	0b23      	lsrs	r3, r4, #12
   13a14:	0d0c      	lsrs	r4, r1, #20
   13a16:	4a7e      	ldr	r2, [pc, #504]	; (13c10 <__aeabi_dsub+0x34c>)
   13a18:	0524      	lsls	r4, r4, #20
   13a1a:	431c      	orrs	r4, r3
   13a1c:	4014      	ands	r4, r2
   13a1e:	0533      	lsls	r3, r6, #20
   13a20:	4323      	orrs	r3, r4
   13a22:	005b      	lsls	r3, r3, #1
   13a24:	07ed      	lsls	r5, r5, #31
   13a26:	085b      	lsrs	r3, r3, #1
   13a28:	432b      	orrs	r3, r5
   13a2a:	0038      	movs	r0, r7
   13a2c:	0019      	movs	r1, r3
   13a2e:	bc1c      	pop	{r2, r3, r4}
   13a30:	4690      	mov	r8, r2
   13a32:	4699      	mov	r9, r3
   13a34:	46a2      	mov	sl, r4
   13a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13a38:	2501      	movs	r5, #1
   13a3a:	4643      	mov	r3, r8
   13a3c:	0762      	lsls	r2, r4, #29
   13a3e:	08ff      	lsrs	r7, r7, #3
   13a40:	4317      	orrs	r7, r2
   13a42:	08e4      	lsrs	r4, r4, #3
   13a44:	401d      	ands	r5, r3
   13a46:	4b70      	ldr	r3, [pc, #448]	; (13c08 <__aeabi_dsub+0x344>)
   13a48:	429e      	cmp	r6, r3
   13a4a:	d036      	beq.n	13aba <__aeabi_dsub+0x1f6>
   13a4c:	0324      	lsls	r4, r4, #12
   13a4e:	0576      	lsls	r6, r6, #21
   13a50:	0b24      	lsrs	r4, r4, #12
   13a52:	0d76      	lsrs	r6, r6, #21
   13a54:	e7db      	b.n	13a0e <__aeabi_dsub+0x14a>
   13a56:	4663      	mov	r3, ip
   13a58:	1af3      	subs	r3, r6, r3
   13a5a:	2b00      	cmp	r3, #0
   13a5c:	dc00      	bgt.n	13a60 <__aeabi_dsub+0x19c>
   13a5e:	e094      	b.n	13b8a <__aeabi_dsub+0x2c6>
   13a60:	4660      	mov	r0, ip
   13a62:	2800      	cmp	r0, #0
   13a64:	d035      	beq.n	13ad2 <__aeabi_dsub+0x20e>
   13a66:	4868      	ldr	r0, [pc, #416]	; (13c08 <__aeabi_dsub+0x344>)
   13a68:	4286      	cmp	r6, r0
   13a6a:	d0b1      	beq.n	139d0 <__aeabi_dsub+0x10c>
   13a6c:	2780      	movs	r7, #128	; 0x80
   13a6e:	043f      	lsls	r7, r7, #16
   13a70:	4339      	orrs	r1, r7
   13a72:	2b38      	cmp	r3, #56	; 0x38
   13a74:	dc00      	bgt.n	13a78 <__aeabi_dsub+0x1b4>
   13a76:	e0fd      	b.n	13c74 <__aeabi_dsub+0x3b0>
   13a78:	430a      	orrs	r2, r1
   13a7a:	0017      	movs	r7, r2
   13a7c:	2100      	movs	r1, #0
   13a7e:	1e7a      	subs	r2, r7, #1
   13a80:	4197      	sbcs	r7, r2
   13a82:	4457      	add	r7, sl
   13a84:	4557      	cmp	r7, sl
   13a86:	4180      	sbcs	r0, r0
   13a88:	1909      	adds	r1, r1, r4
   13a8a:	4244      	negs	r4, r0
   13a8c:	190c      	adds	r4, r1, r4
   13a8e:	0223      	lsls	r3, r4, #8
   13a90:	d53a      	bpl.n	13b08 <__aeabi_dsub+0x244>
   13a92:	4b5d      	ldr	r3, [pc, #372]	; (13c08 <__aeabi_dsub+0x344>)
   13a94:	3601      	adds	r6, #1
   13a96:	429e      	cmp	r6, r3
   13a98:	d100      	bne.n	13a9c <__aeabi_dsub+0x1d8>
   13a9a:	e14b      	b.n	13d34 <__aeabi_dsub+0x470>
   13a9c:	2201      	movs	r2, #1
   13a9e:	4b5b      	ldr	r3, [pc, #364]	; (13c0c <__aeabi_dsub+0x348>)
   13aa0:	401c      	ands	r4, r3
   13aa2:	087b      	lsrs	r3, r7, #1
   13aa4:	4017      	ands	r7, r2
   13aa6:	431f      	orrs	r7, r3
   13aa8:	07e2      	lsls	r2, r4, #31
   13aaa:	4317      	orrs	r7, r2
   13aac:	0864      	lsrs	r4, r4, #1
   13aae:	e78f      	b.n	139d0 <__aeabi_dsub+0x10c>
   13ab0:	0008      	movs	r0, r1
   13ab2:	4310      	orrs	r0, r2
   13ab4:	d000      	beq.n	13ab8 <__aeabi_dsub+0x1f4>
   13ab6:	e724      	b.n	13902 <__aeabi_dsub+0x3e>
   13ab8:	e721      	b.n	138fe <__aeabi_dsub+0x3a>
   13aba:	0023      	movs	r3, r4
   13abc:	433b      	orrs	r3, r7
   13abe:	d100      	bne.n	13ac2 <__aeabi_dsub+0x1fe>
   13ac0:	e1b9      	b.n	13e36 <__aeabi_dsub+0x572>
   13ac2:	2280      	movs	r2, #128	; 0x80
   13ac4:	0312      	lsls	r2, r2, #12
   13ac6:	4314      	orrs	r4, r2
   13ac8:	0324      	lsls	r4, r4, #12
   13aca:	0b24      	lsrs	r4, r4, #12
   13acc:	e79f      	b.n	13a0e <__aeabi_dsub+0x14a>
   13ace:	002e      	movs	r6, r5
   13ad0:	e77e      	b.n	139d0 <__aeabi_dsub+0x10c>
   13ad2:	0008      	movs	r0, r1
   13ad4:	4310      	orrs	r0, r2
   13ad6:	d100      	bne.n	13ada <__aeabi_dsub+0x216>
   13ad8:	e0ca      	b.n	13c70 <__aeabi_dsub+0x3ac>
   13ada:	1e58      	subs	r0, r3, #1
   13adc:	4684      	mov	ip, r0
   13ade:	2800      	cmp	r0, #0
   13ae0:	d000      	beq.n	13ae4 <__aeabi_dsub+0x220>
   13ae2:	e0e7      	b.n	13cb4 <__aeabi_dsub+0x3f0>
   13ae4:	4452      	add	r2, sl
   13ae6:	4552      	cmp	r2, sl
   13ae8:	4180      	sbcs	r0, r0
   13aea:	1864      	adds	r4, r4, r1
   13aec:	4240      	negs	r0, r0
   13aee:	1824      	adds	r4, r4, r0
   13af0:	0017      	movs	r7, r2
   13af2:	2601      	movs	r6, #1
   13af4:	0223      	lsls	r3, r4, #8
   13af6:	d507      	bpl.n	13b08 <__aeabi_dsub+0x244>
   13af8:	2602      	movs	r6, #2
   13afa:	e7cf      	b.n	13a9c <__aeabi_dsub+0x1d8>
   13afc:	4664      	mov	r4, ip
   13afe:	432c      	orrs	r4, r5
   13b00:	d100      	bne.n	13b04 <__aeabi_dsub+0x240>
   13b02:	e1b3      	b.n	13e6c <__aeabi_dsub+0x5a8>
   13b04:	002c      	movs	r4, r5
   13b06:	4667      	mov	r7, ip
   13b08:	077b      	lsls	r3, r7, #29
   13b0a:	d000      	beq.n	13b0e <__aeabi_dsub+0x24a>
   13b0c:	e762      	b.n	139d4 <__aeabi_dsub+0x110>
   13b0e:	0763      	lsls	r3, r4, #29
   13b10:	08ff      	lsrs	r7, r7, #3
   13b12:	431f      	orrs	r7, r3
   13b14:	2501      	movs	r5, #1
   13b16:	4643      	mov	r3, r8
   13b18:	08e4      	lsrs	r4, r4, #3
   13b1a:	401d      	ands	r5, r3
   13b1c:	e793      	b.n	13a46 <__aeabi_dsub+0x182>
   13b1e:	2d00      	cmp	r5, #0
   13b20:	d178      	bne.n	13c14 <__aeabi_dsub+0x350>
   13b22:	1c75      	adds	r5, r6, #1
   13b24:	056d      	lsls	r5, r5, #21
   13b26:	0d6d      	lsrs	r5, r5, #21
   13b28:	2d01      	cmp	r5, #1
   13b2a:	dc00      	bgt.n	13b2e <__aeabi_dsub+0x26a>
   13b2c:	e0f2      	b.n	13d14 <__aeabi_dsub+0x450>
   13b2e:	4650      	mov	r0, sl
   13b30:	1a80      	subs	r0, r0, r2
   13b32:	4582      	cmp	sl, r0
   13b34:	41bf      	sbcs	r7, r7
   13b36:	1a65      	subs	r5, r4, r1
   13b38:	427f      	negs	r7, r7
   13b3a:	1bed      	subs	r5, r5, r7
   13b3c:	4684      	mov	ip, r0
   13b3e:	0228      	lsls	r0, r5, #8
   13b40:	d400      	bmi.n	13b44 <__aeabi_dsub+0x280>
   13b42:	e08c      	b.n	13c5e <__aeabi_dsub+0x39a>
   13b44:	4650      	mov	r0, sl
   13b46:	1a17      	subs	r7, r2, r0
   13b48:	42ba      	cmp	r2, r7
   13b4a:	4192      	sbcs	r2, r2
   13b4c:	1b0c      	subs	r4, r1, r4
   13b4e:	4255      	negs	r5, r2
   13b50:	1b65      	subs	r5, r4, r5
   13b52:	4698      	mov	r8, r3
   13b54:	e714      	b.n	13980 <__aeabi_dsub+0xbc>
   13b56:	2501      	movs	r5, #1
   13b58:	4643      	mov	r3, r8
   13b5a:	2400      	movs	r4, #0
   13b5c:	401d      	ands	r5, r3
   13b5e:	2700      	movs	r7, #0
   13b60:	e755      	b.n	13a0e <__aeabi_dsub+0x14a>
   13b62:	4c2a      	ldr	r4, [pc, #168]	; (13c0c <__aeabi_dsub+0x348>)
   13b64:	1af6      	subs	r6, r6, r3
   13b66:	402c      	ands	r4, r5
   13b68:	e732      	b.n	139d0 <__aeabi_dsub+0x10c>
   13b6a:	003d      	movs	r5, r7
   13b6c:	3828      	subs	r0, #40	; 0x28
   13b6e:	4085      	lsls	r5, r0
   13b70:	2700      	movs	r7, #0
   13b72:	e717      	b.n	139a4 <__aeabi_dsub+0xe0>
   13b74:	0038      	movs	r0, r7
   13b76:	f000 fa61 	bl	1403c <__clzsi2>
   13b7a:	3020      	adds	r0, #32
   13b7c:	e706      	b.n	1398c <__aeabi_dsub+0xc8>
   13b7e:	430a      	orrs	r2, r1
   13b80:	0017      	movs	r7, r2
   13b82:	2100      	movs	r1, #0
   13b84:	1e7a      	subs	r2, r7, #1
   13b86:	4197      	sbcs	r7, r2
   13b88:	e6ee      	b.n	13968 <__aeabi_dsub+0xa4>
   13b8a:	2b00      	cmp	r3, #0
   13b8c:	d000      	beq.n	13b90 <__aeabi_dsub+0x2cc>
   13b8e:	e0e5      	b.n	13d5c <__aeabi_dsub+0x498>
   13b90:	1c73      	adds	r3, r6, #1
   13b92:	469c      	mov	ip, r3
   13b94:	055b      	lsls	r3, r3, #21
   13b96:	0d5b      	lsrs	r3, r3, #21
   13b98:	2b01      	cmp	r3, #1
   13b9a:	dc00      	bgt.n	13b9e <__aeabi_dsub+0x2da>
   13b9c:	e09f      	b.n	13cde <__aeabi_dsub+0x41a>
   13b9e:	4b1a      	ldr	r3, [pc, #104]	; (13c08 <__aeabi_dsub+0x344>)
   13ba0:	459c      	cmp	ip, r3
   13ba2:	d100      	bne.n	13ba6 <__aeabi_dsub+0x2e2>
   13ba4:	e0c5      	b.n	13d32 <__aeabi_dsub+0x46e>
   13ba6:	4452      	add	r2, sl
   13ba8:	4552      	cmp	r2, sl
   13baa:	4180      	sbcs	r0, r0
   13bac:	1864      	adds	r4, r4, r1
   13bae:	4240      	negs	r0, r0
   13bb0:	1824      	adds	r4, r4, r0
   13bb2:	07e7      	lsls	r7, r4, #31
   13bb4:	0852      	lsrs	r2, r2, #1
   13bb6:	4317      	orrs	r7, r2
   13bb8:	0864      	lsrs	r4, r4, #1
   13bba:	4666      	mov	r6, ip
   13bbc:	e708      	b.n	139d0 <__aeabi_dsub+0x10c>
   13bbe:	4812      	ldr	r0, [pc, #72]	; (13c08 <__aeabi_dsub+0x344>)
   13bc0:	4285      	cmp	r5, r0
   13bc2:	d100      	bne.n	13bc6 <__aeabi_dsub+0x302>
   13bc4:	e085      	b.n	13cd2 <__aeabi_dsub+0x40e>
   13bc6:	001d      	movs	r5, r3
   13bc8:	e6bc      	b.n	13944 <__aeabi_dsub+0x80>
   13bca:	0029      	movs	r1, r5
   13bcc:	3e1f      	subs	r6, #31
   13bce:	40f1      	lsrs	r1, r6
   13bd0:	2b20      	cmp	r3, #32
   13bd2:	d100      	bne.n	13bd6 <__aeabi_dsub+0x312>
   13bd4:	e07f      	b.n	13cd6 <__aeabi_dsub+0x412>
   13bd6:	2240      	movs	r2, #64	; 0x40
   13bd8:	1ad3      	subs	r3, r2, r3
   13bda:	409d      	lsls	r5, r3
   13bdc:	432f      	orrs	r7, r5
   13bde:	1e7d      	subs	r5, r7, #1
   13be0:	41af      	sbcs	r7, r5
   13be2:	2400      	movs	r4, #0
   13be4:	430f      	orrs	r7, r1
   13be6:	2600      	movs	r6, #0
   13be8:	e78e      	b.n	13b08 <__aeabi_dsub+0x244>
   13bea:	002b      	movs	r3, r5
   13bec:	000f      	movs	r7, r1
   13bee:	3b20      	subs	r3, #32
   13bf0:	40df      	lsrs	r7, r3
   13bf2:	2d20      	cmp	r5, #32
   13bf4:	d071      	beq.n	13cda <__aeabi_dsub+0x416>
   13bf6:	2340      	movs	r3, #64	; 0x40
   13bf8:	1b5d      	subs	r5, r3, r5
   13bfa:	40a9      	lsls	r1, r5
   13bfc:	430a      	orrs	r2, r1
   13bfe:	1e51      	subs	r1, r2, #1
   13c00:	418a      	sbcs	r2, r1
   13c02:	2100      	movs	r1, #0
   13c04:	4317      	orrs	r7, r2
   13c06:	e6af      	b.n	13968 <__aeabi_dsub+0xa4>
   13c08:	000007ff 	.word	0x000007ff
   13c0c:	ff7fffff 	.word	0xff7fffff
   13c10:	800fffff 	.word	0x800fffff
   13c14:	2e00      	cmp	r6, #0
   13c16:	d03e      	beq.n	13c96 <__aeabi_dsub+0x3d2>
   13c18:	4eb3      	ldr	r6, [pc, #716]	; (13ee8 <__aeabi_dsub+0x624>)
   13c1a:	45b4      	cmp	ip, r6
   13c1c:	d045      	beq.n	13caa <__aeabi_dsub+0x3e6>
   13c1e:	2680      	movs	r6, #128	; 0x80
   13c20:	0436      	lsls	r6, r6, #16
   13c22:	426d      	negs	r5, r5
   13c24:	4334      	orrs	r4, r6
   13c26:	2d38      	cmp	r5, #56	; 0x38
   13c28:	dd00      	ble.n	13c2c <__aeabi_dsub+0x368>
   13c2a:	e0a8      	b.n	13d7e <__aeabi_dsub+0x4ba>
   13c2c:	2d1f      	cmp	r5, #31
   13c2e:	dd00      	ble.n	13c32 <__aeabi_dsub+0x36e>
   13c30:	e11f      	b.n	13e72 <__aeabi_dsub+0x5ae>
   13c32:	2620      	movs	r6, #32
   13c34:	0027      	movs	r7, r4
   13c36:	4650      	mov	r0, sl
   13c38:	1b76      	subs	r6, r6, r5
   13c3a:	40b7      	lsls	r7, r6
   13c3c:	40e8      	lsrs	r0, r5
   13c3e:	4307      	orrs	r7, r0
   13c40:	4650      	mov	r0, sl
   13c42:	40b0      	lsls	r0, r6
   13c44:	1e46      	subs	r6, r0, #1
   13c46:	41b0      	sbcs	r0, r6
   13c48:	40ec      	lsrs	r4, r5
   13c4a:	4338      	orrs	r0, r7
   13c4c:	1a17      	subs	r7, r2, r0
   13c4e:	42ba      	cmp	r2, r7
   13c50:	4192      	sbcs	r2, r2
   13c52:	1b0c      	subs	r4, r1, r4
   13c54:	4252      	negs	r2, r2
   13c56:	1aa4      	subs	r4, r4, r2
   13c58:	4666      	mov	r6, ip
   13c5a:	4698      	mov	r8, r3
   13c5c:	e68b      	b.n	13976 <__aeabi_dsub+0xb2>
   13c5e:	4664      	mov	r4, ip
   13c60:	4667      	mov	r7, ip
   13c62:	432c      	orrs	r4, r5
   13c64:	d000      	beq.n	13c68 <__aeabi_dsub+0x3a4>
   13c66:	e68b      	b.n	13980 <__aeabi_dsub+0xbc>
   13c68:	2500      	movs	r5, #0
   13c6a:	2600      	movs	r6, #0
   13c6c:	2700      	movs	r7, #0
   13c6e:	e6ea      	b.n	13a46 <__aeabi_dsub+0x182>
   13c70:	001e      	movs	r6, r3
   13c72:	e6ad      	b.n	139d0 <__aeabi_dsub+0x10c>
   13c74:	2b1f      	cmp	r3, #31
   13c76:	dc60      	bgt.n	13d3a <__aeabi_dsub+0x476>
   13c78:	2720      	movs	r7, #32
   13c7a:	1af8      	subs	r0, r7, r3
   13c7c:	000f      	movs	r7, r1
   13c7e:	4684      	mov	ip, r0
   13c80:	4087      	lsls	r7, r0
   13c82:	0010      	movs	r0, r2
   13c84:	40d8      	lsrs	r0, r3
   13c86:	4307      	orrs	r7, r0
   13c88:	4660      	mov	r0, ip
   13c8a:	4082      	lsls	r2, r0
   13c8c:	1e50      	subs	r0, r2, #1
   13c8e:	4182      	sbcs	r2, r0
   13c90:	40d9      	lsrs	r1, r3
   13c92:	4317      	orrs	r7, r2
   13c94:	e6f5      	b.n	13a82 <__aeabi_dsub+0x1be>
   13c96:	0026      	movs	r6, r4
   13c98:	4650      	mov	r0, sl
   13c9a:	4306      	orrs	r6, r0
   13c9c:	d005      	beq.n	13caa <__aeabi_dsub+0x3e6>
   13c9e:	43ed      	mvns	r5, r5
   13ca0:	2d00      	cmp	r5, #0
   13ca2:	d0d3      	beq.n	13c4c <__aeabi_dsub+0x388>
   13ca4:	4e90      	ldr	r6, [pc, #576]	; (13ee8 <__aeabi_dsub+0x624>)
   13ca6:	45b4      	cmp	ip, r6
   13ca8:	d1bd      	bne.n	13c26 <__aeabi_dsub+0x362>
   13caa:	000c      	movs	r4, r1
   13cac:	0017      	movs	r7, r2
   13cae:	4666      	mov	r6, ip
   13cb0:	4698      	mov	r8, r3
   13cb2:	e68d      	b.n	139d0 <__aeabi_dsub+0x10c>
   13cb4:	488c      	ldr	r0, [pc, #560]	; (13ee8 <__aeabi_dsub+0x624>)
   13cb6:	4283      	cmp	r3, r0
   13cb8:	d00b      	beq.n	13cd2 <__aeabi_dsub+0x40e>
   13cba:	4663      	mov	r3, ip
   13cbc:	e6d9      	b.n	13a72 <__aeabi_dsub+0x1ae>
   13cbe:	2d00      	cmp	r5, #0
   13cc0:	d000      	beq.n	13cc4 <__aeabi_dsub+0x400>
   13cc2:	e096      	b.n	13df2 <__aeabi_dsub+0x52e>
   13cc4:	0008      	movs	r0, r1
   13cc6:	4310      	orrs	r0, r2
   13cc8:	d100      	bne.n	13ccc <__aeabi_dsub+0x408>
   13cca:	e0e2      	b.n	13e92 <__aeabi_dsub+0x5ce>
   13ccc:	000c      	movs	r4, r1
   13cce:	0017      	movs	r7, r2
   13cd0:	4698      	mov	r8, r3
   13cd2:	4e85      	ldr	r6, [pc, #532]	; (13ee8 <__aeabi_dsub+0x624>)
   13cd4:	e67c      	b.n	139d0 <__aeabi_dsub+0x10c>
   13cd6:	2500      	movs	r5, #0
   13cd8:	e780      	b.n	13bdc <__aeabi_dsub+0x318>
   13cda:	2100      	movs	r1, #0
   13cdc:	e78e      	b.n	13bfc <__aeabi_dsub+0x338>
   13cde:	0023      	movs	r3, r4
   13ce0:	4650      	mov	r0, sl
   13ce2:	4303      	orrs	r3, r0
   13ce4:	2e00      	cmp	r6, #0
   13ce6:	d000      	beq.n	13cea <__aeabi_dsub+0x426>
   13ce8:	e0a8      	b.n	13e3c <__aeabi_dsub+0x578>
   13cea:	2b00      	cmp	r3, #0
   13cec:	d100      	bne.n	13cf0 <__aeabi_dsub+0x42c>
   13cee:	e0de      	b.n	13eae <__aeabi_dsub+0x5ea>
   13cf0:	000b      	movs	r3, r1
   13cf2:	4313      	orrs	r3, r2
   13cf4:	d100      	bne.n	13cf8 <__aeabi_dsub+0x434>
   13cf6:	e66b      	b.n	139d0 <__aeabi_dsub+0x10c>
   13cf8:	4452      	add	r2, sl
   13cfa:	4552      	cmp	r2, sl
   13cfc:	4180      	sbcs	r0, r0
   13cfe:	1864      	adds	r4, r4, r1
   13d00:	4240      	negs	r0, r0
   13d02:	1824      	adds	r4, r4, r0
   13d04:	0017      	movs	r7, r2
   13d06:	0223      	lsls	r3, r4, #8
   13d08:	d400      	bmi.n	13d0c <__aeabi_dsub+0x448>
   13d0a:	e6fd      	b.n	13b08 <__aeabi_dsub+0x244>
   13d0c:	4b77      	ldr	r3, [pc, #476]	; (13eec <__aeabi_dsub+0x628>)
   13d0e:	4666      	mov	r6, ip
   13d10:	401c      	ands	r4, r3
   13d12:	e65d      	b.n	139d0 <__aeabi_dsub+0x10c>
   13d14:	0025      	movs	r5, r4
   13d16:	4650      	mov	r0, sl
   13d18:	4305      	orrs	r5, r0
   13d1a:	2e00      	cmp	r6, #0
   13d1c:	d1cf      	bne.n	13cbe <__aeabi_dsub+0x3fa>
   13d1e:	2d00      	cmp	r5, #0
   13d20:	d14f      	bne.n	13dc2 <__aeabi_dsub+0x4fe>
   13d22:	000c      	movs	r4, r1
   13d24:	4314      	orrs	r4, r2
   13d26:	d100      	bne.n	13d2a <__aeabi_dsub+0x466>
   13d28:	e0a0      	b.n	13e6c <__aeabi_dsub+0x5a8>
   13d2a:	000c      	movs	r4, r1
   13d2c:	0017      	movs	r7, r2
   13d2e:	4698      	mov	r8, r3
   13d30:	e64e      	b.n	139d0 <__aeabi_dsub+0x10c>
   13d32:	4666      	mov	r6, ip
   13d34:	2400      	movs	r4, #0
   13d36:	2700      	movs	r7, #0
   13d38:	e685      	b.n	13a46 <__aeabi_dsub+0x182>
   13d3a:	001f      	movs	r7, r3
   13d3c:	0008      	movs	r0, r1
   13d3e:	3f20      	subs	r7, #32
   13d40:	40f8      	lsrs	r0, r7
   13d42:	0007      	movs	r7, r0
   13d44:	2b20      	cmp	r3, #32
   13d46:	d100      	bne.n	13d4a <__aeabi_dsub+0x486>
   13d48:	e08e      	b.n	13e68 <__aeabi_dsub+0x5a4>
   13d4a:	2040      	movs	r0, #64	; 0x40
   13d4c:	1ac3      	subs	r3, r0, r3
   13d4e:	4099      	lsls	r1, r3
   13d50:	430a      	orrs	r2, r1
   13d52:	1e51      	subs	r1, r2, #1
   13d54:	418a      	sbcs	r2, r1
   13d56:	2100      	movs	r1, #0
   13d58:	4317      	orrs	r7, r2
   13d5a:	e692      	b.n	13a82 <__aeabi_dsub+0x1be>
   13d5c:	2e00      	cmp	r6, #0
   13d5e:	d114      	bne.n	13d8a <__aeabi_dsub+0x4c6>
   13d60:	0026      	movs	r6, r4
   13d62:	4650      	mov	r0, sl
   13d64:	4306      	orrs	r6, r0
   13d66:	d062      	beq.n	13e2e <__aeabi_dsub+0x56a>
   13d68:	43db      	mvns	r3, r3
   13d6a:	2b00      	cmp	r3, #0
   13d6c:	d15c      	bne.n	13e28 <__aeabi_dsub+0x564>
   13d6e:	1887      	adds	r7, r0, r2
   13d70:	4297      	cmp	r7, r2
   13d72:	4192      	sbcs	r2, r2
   13d74:	1864      	adds	r4, r4, r1
   13d76:	4252      	negs	r2, r2
   13d78:	18a4      	adds	r4, r4, r2
   13d7a:	4666      	mov	r6, ip
   13d7c:	e687      	b.n	13a8e <__aeabi_dsub+0x1ca>
   13d7e:	4650      	mov	r0, sl
   13d80:	4320      	orrs	r0, r4
   13d82:	1e44      	subs	r4, r0, #1
   13d84:	41a0      	sbcs	r0, r4
   13d86:	2400      	movs	r4, #0
   13d88:	e760      	b.n	13c4c <__aeabi_dsub+0x388>
   13d8a:	4e57      	ldr	r6, [pc, #348]	; (13ee8 <__aeabi_dsub+0x624>)
   13d8c:	45b4      	cmp	ip, r6
   13d8e:	d04e      	beq.n	13e2e <__aeabi_dsub+0x56a>
   13d90:	2680      	movs	r6, #128	; 0x80
   13d92:	0436      	lsls	r6, r6, #16
   13d94:	425b      	negs	r3, r3
   13d96:	4334      	orrs	r4, r6
   13d98:	2b38      	cmp	r3, #56	; 0x38
   13d9a:	dd00      	ble.n	13d9e <__aeabi_dsub+0x4da>
   13d9c:	e07f      	b.n	13e9e <__aeabi_dsub+0x5da>
   13d9e:	2b1f      	cmp	r3, #31
   13da0:	dd00      	ble.n	13da4 <__aeabi_dsub+0x4e0>
   13da2:	e08b      	b.n	13ebc <__aeabi_dsub+0x5f8>
   13da4:	2620      	movs	r6, #32
   13da6:	0027      	movs	r7, r4
   13da8:	4650      	mov	r0, sl
   13daa:	1af6      	subs	r6, r6, r3
   13dac:	40b7      	lsls	r7, r6
   13dae:	40d8      	lsrs	r0, r3
   13db0:	4307      	orrs	r7, r0
   13db2:	4650      	mov	r0, sl
   13db4:	40b0      	lsls	r0, r6
   13db6:	1e46      	subs	r6, r0, #1
   13db8:	41b0      	sbcs	r0, r6
   13dba:	4307      	orrs	r7, r0
   13dbc:	40dc      	lsrs	r4, r3
   13dbe:	18bf      	adds	r7, r7, r2
   13dc0:	e7d6      	b.n	13d70 <__aeabi_dsub+0x4ac>
   13dc2:	000d      	movs	r5, r1
   13dc4:	4315      	orrs	r5, r2
   13dc6:	d100      	bne.n	13dca <__aeabi_dsub+0x506>
   13dc8:	e602      	b.n	139d0 <__aeabi_dsub+0x10c>
   13dca:	4650      	mov	r0, sl
   13dcc:	1a80      	subs	r0, r0, r2
   13dce:	4582      	cmp	sl, r0
   13dd0:	41bf      	sbcs	r7, r7
   13dd2:	1a65      	subs	r5, r4, r1
   13dd4:	427f      	negs	r7, r7
   13dd6:	1bed      	subs	r5, r5, r7
   13dd8:	4684      	mov	ip, r0
   13dda:	0228      	lsls	r0, r5, #8
   13ddc:	d400      	bmi.n	13de0 <__aeabi_dsub+0x51c>
   13dde:	e68d      	b.n	13afc <__aeabi_dsub+0x238>
   13de0:	4650      	mov	r0, sl
   13de2:	1a17      	subs	r7, r2, r0
   13de4:	42ba      	cmp	r2, r7
   13de6:	4192      	sbcs	r2, r2
   13de8:	1b0c      	subs	r4, r1, r4
   13dea:	4252      	negs	r2, r2
   13dec:	1aa4      	subs	r4, r4, r2
   13dee:	4698      	mov	r8, r3
   13df0:	e5ee      	b.n	139d0 <__aeabi_dsub+0x10c>
   13df2:	000d      	movs	r5, r1
   13df4:	4315      	orrs	r5, r2
   13df6:	d100      	bne.n	13dfa <__aeabi_dsub+0x536>
   13df8:	e76b      	b.n	13cd2 <__aeabi_dsub+0x40e>
   13dfa:	4650      	mov	r0, sl
   13dfc:	0767      	lsls	r7, r4, #29
   13dfe:	08c0      	lsrs	r0, r0, #3
   13e00:	4307      	orrs	r7, r0
   13e02:	2080      	movs	r0, #128	; 0x80
   13e04:	08e4      	lsrs	r4, r4, #3
   13e06:	0300      	lsls	r0, r0, #12
   13e08:	4204      	tst	r4, r0
   13e0a:	d007      	beq.n	13e1c <__aeabi_dsub+0x558>
   13e0c:	08cd      	lsrs	r5, r1, #3
   13e0e:	4205      	tst	r5, r0
   13e10:	d104      	bne.n	13e1c <__aeabi_dsub+0x558>
   13e12:	002c      	movs	r4, r5
   13e14:	4698      	mov	r8, r3
   13e16:	08d7      	lsrs	r7, r2, #3
   13e18:	0749      	lsls	r1, r1, #29
   13e1a:	430f      	orrs	r7, r1
   13e1c:	0f7b      	lsrs	r3, r7, #29
   13e1e:	00e4      	lsls	r4, r4, #3
   13e20:	431c      	orrs	r4, r3
   13e22:	00ff      	lsls	r7, r7, #3
   13e24:	4e30      	ldr	r6, [pc, #192]	; (13ee8 <__aeabi_dsub+0x624>)
   13e26:	e5d3      	b.n	139d0 <__aeabi_dsub+0x10c>
   13e28:	4e2f      	ldr	r6, [pc, #188]	; (13ee8 <__aeabi_dsub+0x624>)
   13e2a:	45b4      	cmp	ip, r6
   13e2c:	d1b4      	bne.n	13d98 <__aeabi_dsub+0x4d4>
   13e2e:	000c      	movs	r4, r1
   13e30:	0017      	movs	r7, r2
   13e32:	4666      	mov	r6, ip
   13e34:	e5cc      	b.n	139d0 <__aeabi_dsub+0x10c>
   13e36:	2700      	movs	r7, #0
   13e38:	2400      	movs	r4, #0
   13e3a:	e5e8      	b.n	13a0e <__aeabi_dsub+0x14a>
   13e3c:	2b00      	cmp	r3, #0
   13e3e:	d039      	beq.n	13eb4 <__aeabi_dsub+0x5f0>
   13e40:	000b      	movs	r3, r1
   13e42:	4313      	orrs	r3, r2
   13e44:	d100      	bne.n	13e48 <__aeabi_dsub+0x584>
   13e46:	e744      	b.n	13cd2 <__aeabi_dsub+0x40e>
   13e48:	08c0      	lsrs	r0, r0, #3
   13e4a:	0767      	lsls	r7, r4, #29
   13e4c:	4307      	orrs	r7, r0
   13e4e:	2080      	movs	r0, #128	; 0x80
   13e50:	08e4      	lsrs	r4, r4, #3
   13e52:	0300      	lsls	r0, r0, #12
   13e54:	4204      	tst	r4, r0
   13e56:	d0e1      	beq.n	13e1c <__aeabi_dsub+0x558>
   13e58:	08cb      	lsrs	r3, r1, #3
   13e5a:	4203      	tst	r3, r0
   13e5c:	d1de      	bne.n	13e1c <__aeabi_dsub+0x558>
   13e5e:	08d7      	lsrs	r7, r2, #3
   13e60:	0749      	lsls	r1, r1, #29
   13e62:	430f      	orrs	r7, r1
   13e64:	001c      	movs	r4, r3
   13e66:	e7d9      	b.n	13e1c <__aeabi_dsub+0x558>
   13e68:	2100      	movs	r1, #0
   13e6a:	e771      	b.n	13d50 <__aeabi_dsub+0x48c>
   13e6c:	2500      	movs	r5, #0
   13e6e:	2700      	movs	r7, #0
   13e70:	e5e9      	b.n	13a46 <__aeabi_dsub+0x182>
   13e72:	002e      	movs	r6, r5
   13e74:	0027      	movs	r7, r4
   13e76:	3e20      	subs	r6, #32
   13e78:	40f7      	lsrs	r7, r6
   13e7a:	2d20      	cmp	r5, #32
   13e7c:	d02f      	beq.n	13ede <__aeabi_dsub+0x61a>
   13e7e:	2640      	movs	r6, #64	; 0x40
   13e80:	1b75      	subs	r5, r6, r5
   13e82:	40ac      	lsls	r4, r5
   13e84:	4650      	mov	r0, sl
   13e86:	4320      	orrs	r0, r4
   13e88:	1e44      	subs	r4, r0, #1
   13e8a:	41a0      	sbcs	r0, r4
   13e8c:	2400      	movs	r4, #0
   13e8e:	4338      	orrs	r0, r7
   13e90:	e6dc      	b.n	13c4c <__aeabi_dsub+0x388>
   13e92:	2480      	movs	r4, #128	; 0x80
   13e94:	2500      	movs	r5, #0
   13e96:	0324      	lsls	r4, r4, #12
   13e98:	4e13      	ldr	r6, [pc, #76]	; (13ee8 <__aeabi_dsub+0x624>)
   13e9a:	2700      	movs	r7, #0
   13e9c:	e5d3      	b.n	13a46 <__aeabi_dsub+0x182>
   13e9e:	4650      	mov	r0, sl
   13ea0:	4320      	orrs	r0, r4
   13ea2:	0007      	movs	r7, r0
   13ea4:	1e78      	subs	r0, r7, #1
   13ea6:	4187      	sbcs	r7, r0
   13ea8:	2400      	movs	r4, #0
   13eaa:	18bf      	adds	r7, r7, r2
   13eac:	e760      	b.n	13d70 <__aeabi_dsub+0x4ac>
   13eae:	000c      	movs	r4, r1
   13eb0:	0017      	movs	r7, r2
   13eb2:	e58d      	b.n	139d0 <__aeabi_dsub+0x10c>
   13eb4:	000c      	movs	r4, r1
   13eb6:	0017      	movs	r7, r2
   13eb8:	4e0b      	ldr	r6, [pc, #44]	; (13ee8 <__aeabi_dsub+0x624>)
   13eba:	e589      	b.n	139d0 <__aeabi_dsub+0x10c>
   13ebc:	001e      	movs	r6, r3
   13ebe:	0027      	movs	r7, r4
   13ec0:	3e20      	subs	r6, #32
   13ec2:	40f7      	lsrs	r7, r6
   13ec4:	2b20      	cmp	r3, #32
   13ec6:	d00c      	beq.n	13ee2 <__aeabi_dsub+0x61e>
   13ec8:	2640      	movs	r6, #64	; 0x40
   13eca:	1af3      	subs	r3, r6, r3
   13ecc:	409c      	lsls	r4, r3
   13ece:	4650      	mov	r0, sl
   13ed0:	4320      	orrs	r0, r4
   13ed2:	1e44      	subs	r4, r0, #1
   13ed4:	41a0      	sbcs	r0, r4
   13ed6:	4307      	orrs	r7, r0
   13ed8:	2400      	movs	r4, #0
   13eda:	18bf      	adds	r7, r7, r2
   13edc:	e748      	b.n	13d70 <__aeabi_dsub+0x4ac>
   13ede:	2400      	movs	r4, #0
   13ee0:	e7d0      	b.n	13e84 <__aeabi_dsub+0x5c0>
   13ee2:	2400      	movs	r4, #0
   13ee4:	e7f3      	b.n	13ece <__aeabi_dsub+0x60a>
   13ee6:	46c0      	nop			; (mov r8, r8)
   13ee8:	000007ff 	.word	0x000007ff
   13eec:	ff7fffff 	.word	0xff7fffff

00013ef0 <__aeabi_d2iz>:
   13ef0:	b530      	push	{r4, r5, lr}
   13ef2:	4d13      	ldr	r5, [pc, #76]	; (13f40 <__aeabi_d2iz+0x50>)
   13ef4:	030a      	lsls	r2, r1, #12
   13ef6:	004b      	lsls	r3, r1, #1
   13ef8:	0b12      	lsrs	r2, r2, #12
   13efa:	0d5b      	lsrs	r3, r3, #21
   13efc:	0fc9      	lsrs	r1, r1, #31
   13efe:	2400      	movs	r4, #0
   13f00:	42ab      	cmp	r3, r5
   13f02:	dd10      	ble.n	13f26 <__aeabi_d2iz+0x36>
   13f04:	4c0f      	ldr	r4, [pc, #60]	; (13f44 <__aeabi_d2iz+0x54>)
   13f06:	42a3      	cmp	r3, r4
   13f08:	dc0f      	bgt.n	13f2a <__aeabi_d2iz+0x3a>
   13f0a:	2480      	movs	r4, #128	; 0x80
   13f0c:	4d0e      	ldr	r5, [pc, #56]	; (13f48 <__aeabi_d2iz+0x58>)
   13f0e:	0364      	lsls	r4, r4, #13
   13f10:	4322      	orrs	r2, r4
   13f12:	1aed      	subs	r5, r5, r3
   13f14:	2d1f      	cmp	r5, #31
   13f16:	dd0b      	ble.n	13f30 <__aeabi_d2iz+0x40>
   13f18:	480c      	ldr	r0, [pc, #48]	; (13f4c <__aeabi_d2iz+0x5c>)
   13f1a:	1ac3      	subs	r3, r0, r3
   13f1c:	40da      	lsrs	r2, r3
   13f1e:	4254      	negs	r4, r2
   13f20:	2900      	cmp	r1, #0
   13f22:	d100      	bne.n	13f26 <__aeabi_d2iz+0x36>
   13f24:	0014      	movs	r4, r2
   13f26:	0020      	movs	r0, r4
   13f28:	bd30      	pop	{r4, r5, pc}
   13f2a:	4b09      	ldr	r3, [pc, #36]	; (13f50 <__aeabi_d2iz+0x60>)
   13f2c:	18cc      	adds	r4, r1, r3
   13f2e:	e7fa      	b.n	13f26 <__aeabi_d2iz+0x36>
   13f30:	4c08      	ldr	r4, [pc, #32]	; (13f54 <__aeabi_d2iz+0x64>)
   13f32:	40e8      	lsrs	r0, r5
   13f34:	46a4      	mov	ip, r4
   13f36:	4463      	add	r3, ip
   13f38:	409a      	lsls	r2, r3
   13f3a:	4302      	orrs	r2, r0
   13f3c:	e7ef      	b.n	13f1e <__aeabi_d2iz+0x2e>
   13f3e:	46c0      	nop			; (mov r8, r8)
   13f40:	000003fe 	.word	0x000003fe
   13f44:	0000041d 	.word	0x0000041d
   13f48:	00000433 	.word	0x00000433
   13f4c:	00000413 	.word	0x00000413
   13f50:	7fffffff 	.word	0x7fffffff
   13f54:	fffffbed 	.word	0xfffffbed

00013f58 <__aeabi_ui2d>:
   13f58:	b510      	push	{r4, lr}
   13f5a:	1e04      	subs	r4, r0, #0
   13f5c:	d028      	beq.n	13fb0 <__aeabi_ui2d+0x58>
   13f5e:	f000 f86d 	bl	1403c <__clzsi2>
   13f62:	4b15      	ldr	r3, [pc, #84]	; (13fb8 <__aeabi_ui2d+0x60>)
   13f64:	4a15      	ldr	r2, [pc, #84]	; (13fbc <__aeabi_ui2d+0x64>)
   13f66:	1a1b      	subs	r3, r3, r0
   13f68:	1ad2      	subs	r2, r2, r3
   13f6a:	2a1f      	cmp	r2, #31
   13f6c:	dd15      	ble.n	13f9a <__aeabi_ui2d+0x42>
   13f6e:	4a14      	ldr	r2, [pc, #80]	; (13fc0 <__aeabi_ui2d+0x68>)
   13f70:	1ad2      	subs	r2, r2, r3
   13f72:	4094      	lsls	r4, r2
   13f74:	2200      	movs	r2, #0
   13f76:	0324      	lsls	r4, r4, #12
   13f78:	055b      	lsls	r3, r3, #21
   13f7a:	0b24      	lsrs	r4, r4, #12
   13f7c:	0d5b      	lsrs	r3, r3, #21
   13f7e:	2100      	movs	r1, #0
   13f80:	0010      	movs	r0, r2
   13f82:	0324      	lsls	r4, r4, #12
   13f84:	0d0a      	lsrs	r2, r1, #20
   13f86:	0b24      	lsrs	r4, r4, #12
   13f88:	0512      	lsls	r2, r2, #20
   13f8a:	4322      	orrs	r2, r4
   13f8c:	4c0d      	ldr	r4, [pc, #52]	; (13fc4 <__aeabi_ui2d+0x6c>)
   13f8e:	051b      	lsls	r3, r3, #20
   13f90:	4022      	ands	r2, r4
   13f92:	4313      	orrs	r3, r2
   13f94:	005b      	lsls	r3, r3, #1
   13f96:	0859      	lsrs	r1, r3, #1
   13f98:	bd10      	pop	{r4, pc}
   13f9a:	0021      	movs	r1, r4
   13f9c:	4091      	lsls	r1, r2
   13f9e:	000a      	movs	r2, r1
   13fa0:	210b      	movs	r1, #11
   13fa2:	1a08      	subs	r0, r1, r0
   13fa4:	40c4      	lsrs	r4, r0
   13fa6:	055b      	lsls	r3, r3, #21
   13fa8:	0324      	lsls	r4, r4, #12
   13faa:	0b24      	lsrs	r4, r4, #12
   13fac:	0d5b      	lsrs	r3, r3, #21
   13fae:	e7e6      	b.n	13f7e <__aeabi_ui2d+0x26>
   13fb0:	2300      	movs	r3, #0
   13fb2:	2400      	movs	r4, #0
   13fb4:	2200      	movs	r2, #0
   13fb6:	e7e2      	b.n	13f7e <__aeabi_ui2d+0x26>
   13fb8:	0000041e 	.word	0x0000041e
   13fbc:	00000433 	.word	0x00000433
   13fc0:	00000413 	.word	0x00000413
   13fc4:	800fffff 	.word	0x800fffff

00013fc8 <__aeabi_cfrcmple>:
   13fc8:	4684      	mov	ip, r0
   13fca:	1c08      	adds	r0, r1, #0
   13fcc:	4661      	mov	r1, ip
   13fce:	e7ff      	b.n	13fd0 <__aeabi_cfcmpeq>

00013fd0 <__aeabi_cfcmpeq>:
   13fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13fd2:	f000 f8b7 	bl	14144 <__lesf2>
   13fd6:	2800      	cmp	r0, #0
   13fd8:	d401      	bmi.n	13fde <__aeabi_cfcmpeq+0xe>
   13fda:	2100      	movs	r1, #0
   13fdc:	42c8      	cmn	r0, r1
   13fde:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013fe0 <__aeabi_fcmpeq>:
   13fe0:	b510      	push	{r4, lr}
   13fe2:	f000 f849 	bl	14078 <__eqsf2>
   13fe6:	4240      	negs	r0, r0
   13fe8:	3001      	adds	r0, #1
   13fea:	bd10      	pop	{r4, pc}

00013fec <__aeabi_fcmplt>:
   13fec:	b510      	push	{r4, lr}
   13fee:	f000 f8a9 	bl	14144 <__lesf2>
   13ff2:	2800      	cmp	r0, #0
   13ff4:	db01      	blt.n	13ffa <__aeabi_fcmplt+0xe>
   13ff6:	2000      	movs	r0, #0
   13ff8:	bd10      	pop	{r4, pc}
   13ffa:	2001      	movs	r0, #1
   13ffc:	bd10      	pop	{r4, pc}
   13ffe:	46c0      	nop			; (mov r8, r8)

00014000 <__aeabi_fcmple>:
   14000:	b510      	push	{r4, lr}
   14002:	f000 f89f 	bl	14144 <__lesf2>
   14006:	2800      	cmp	r0, #0
   14008:	dd01      	ble.n	1400e <__aeabi_fcmple+0xe>
   1400a:	2000      	movs	r0, #0
   1400c:	bd10      	pop	{r4, pc}
   1400e:	2001      	movs	r0, #1
   14010:	bd10      	pop	{r4, pc}
   14012:	46c0      	nop			; (mov r8, r8)

00014014 <__aeabi_fcmpgt>:
   14014:	b510      	push	{r4, lr}
   14016:	f000 f855 	bl	140c4 <__gesf2>
   1401a:	2800      	cmp	r0, #0
   1401c:	dc01      	bgt.n	14022 <__aeabi_fcmpgt+0xe>
   1401e:	2000      	movs	r0, #0
   14020:	bd10      	pop	{r4, pc}
   14022:	2001      	movs	r0, #1
   14024:	bd10      	pop	{r4, pc}
   14026:	46c0      	nop			; (mov r8, r8)

00014028 <__aeabi_fcmpge>:
   14028:	b510      	push	{r4, lr}
   1402a:	f000 f84b 	bl	140c4 <__gesf2>
   1402e:	2800      	cmp	r0, #0
   14030:	da01      	bge.n	14036 <__aeabi_fcmpge+0xe>
   14032:	2000      	movs	r0, #0
   14034:	bd10      	pop	{r4, pc}
   14036:	2001      	movs	r0, #1
   14038:	bd10      	pop	{r4, pc}
   1403a:	46c0      	nop			; (mov r8, r8)

0001403c <__clzsi2>:
   1403c:	211c      	movs	r1, #28
   1403e:	2301      	movs	r3, #1
   14040:	041b      	lsls	r3, r3, #16
   14042:	4298      	cmp	r0, r3
   14044:	d301      	bcc.n	1404a <__clzsi2+0xe>
   14046:	0c00      	lsrs	r0, r0, #16
   14048:	3910      	subs	r1, #16
   1404a:	0a1b      	lsrs	r3, r3, #8
   1404c:	4298      	cmp	r0, r3
   1404e:	d301      	bcc.n	14054 <__clzsi2+0x18>
   14050:	0a00      	lsrs	r0, r0, #8
   14052:	3908      	subs	r1, #8
   14054:	091b      	lsrs	r3, r3, #4
   14056:	4298      	cmp	r0, r3
   14058:	d301      	bcc.n	1405e <__clzsi2+0x22>
   1405a:	0900      	lsrs	r0, r0, #4
   1405c:	3904      	subs	r1, #4
   1405e:	a202      	add	r2, pc, #8	; (adr r2, 14068 <__clzsi2+0x2c>)
   14060:	5c10      	ldrb	r0, [r2, r0]
   14062:	1840      	adds	r0, r0, r1
   14064:	4770      	bx	lr
   14066:	46c0      	nop			; (mov r8, r8)
   14068:	02020304 	.word	0x02020304
   1406c:	01010101 	.word	0x01010101
	...

00014078 <__eqsf2>:
   14078:	b570      	push	{r4, r5, r6, lr}
   1407a:	0042      	lsls	r2, r0, #1
   1407c:	0245      	lsls	r5, r0, #9
   1407e:	024e      	lsls	r6, r1, #9
   14080:	004c      	lsls	r4, r1, #1
   14082:	0fc3      	lsrs	r3, r0, #31
   14084:	0a6d      	lsrs	r5, r5, #9
   14086:	0e12      	lsrs	r2, r2, #24
   14088:	0a76      	lsrs	r6, r6, #9
   1408a:	0e24      	lsrs	r4, r4, #24
   1408c:	0fc9      	lsrs	r1, r1, #31
   1408e:	2001      	movs	r0, #1
   14090:	2aff      	cmp	r2, #255	; 0xff
   14092:	d006      	beq.n	140a2 <__eqsf2+0x2a>
   14094:	2cff      	cmp	r4, #255	; 0xff
   14096:	d003      	beq.n	140a0 <__eqsf2+0x28>
   14098:	42a2      	cmp	r2, r4
   1409a:	d101      	bne.n	140a0 <__eqsf2+0x28>
   1409c:	42b5      	cmp	r5, r6
   1409e:	d006      	beq.n	140ae <__eqsf2+0x36>
   140a0:	bd70      	pop	{r4, r5, r6, pc}
   140a2:	2d00      	cmp	r5, #0
   140a4:	d1fc      	bne.n	140a0 <__eqsf2+0x28>
   140a6:	2cff      	cmp	r4, #255	; 0xff
   140a8:	d1fa      	bne.n	140a0 <__eqsf2+0x28>
   140aa:	2e00      	cmp	r6, #0
   140ac:	d1f8      	bne.n	140a0 <__eqsf2+0x28>
   140ae:	428b      	cmp	r3, r1
   140b0:	d006      	beq.n	140c0 <__eqsf2+0x48>
   140b2:	2001      	movs	r0, #1
   140b4:	2a00      	cmp	r2, #0
   140b6:	d1f3      	bne.n	140a0 <__eqsf2+0x28>
   140b8:	0028      	movs	r0, r5
   140ba:	1e45      	subs	r5, r0, #1
   140bc:	41a8      	sbcs	r0, r5
   140be:	e7ef      	b.n	140a0 <__eqsf2+0x28>
   140c0:	2000      	movs	r0, #0
   140c2:	e7ed      	b.n	140a0 <__eqsf2+0x28>

000140c4 <__gesf2>:
   140c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   140c6:	0042      	lsls	r2, r0, #1
   140c8:	0245      	lsls	r5, r0, #9
   140ca:	024c      	lsls	r4, r1, #9
   140cc:	0fc3      	lsrs	r3, r0, #31
   140ce:	0048      	lsls	r0, r1, #1
   140d0:	0a6d      	lsrs	r5, r5, #9
   140d2:	0e12      	lsrs	r2, r2, #24
   140d4:	0a64      	lsrs	r4, r4, #9
   140d6:	0e00      	lsrs	r0, r0, #24
   140d8:	0fc9      	lsrs	r1, r1, #31
   140da:	2aff      	cmp	r2, #255	; 0xff
   140dc:	d01e      	beq.n	1411c <__gesf2+0x58>
   140de:	28ff      	cmp	r0, #255	; 0xff
   140e0:	d021      	beq.n	14126 <__gesf2+0x62>
   140e2:	2a00      	cmp	r2, #0
   140e4:	d10a      	bne.n	140fc <__gesf2+0x38>
   140e6:	426e      	negs	r6, r5
   140e8:	416e      	adcs	r6, r5
   140ea:	b2f6      	uxtb	r6, r6
   140ec:	2800      	cmp	r0, #0
   140ee:	d10f      	bne.n	14110 <__gesf2+0x4c>
   140f0:	2c00      	cmp	r4, #0
   140f2:	d10d      	bne.n	14110 <__gesf2+0x4c>
   140f4:	2000      	movs	r0, #0
   140f6:	2d00      	cmp	r5, #0
   140f8:	d009      	beq.n	1410e <__gesf2+0x4a>
   140fa:	e005      	b.n	14108 <__gesf2+0x44>
   140fc:	2800      	cmp	r0, #0
   140fe:	d101      	bne.n	14104 <__gesf2+0x40>
   14100:	2c00      	cmp	r4, #0
   14102:	d001      	beq.n	14108 <__gesf2+0x44>
   14104:	428b      	cmp	r3, r1
   14106:	d011      	beq.n	1412c <__gesf2+0x68>
   14108:	2101      	movs	r1, #1
   1410a:	4258      	negs	r0, r3
   1410c:	4308      	orrs	r0, r1
   1410e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14110:	2e00      	cmp	r6, #0
   14112:	d0f7      	beq.n	14104 <__gesf2+0x40>
   14114:	2001      	movs	r0, #1
   14116:	3901      	subs	r1, #1
   14118:	4308      	orrs	r0, r1
   1411a:	e7f8      	b.n	1410e <__gesf2+0x4a>
   1411c:	2d00      	cmp	r5, #0
   1411e:	d0de      	beq.n	140de <__gesf2+0x1a>
   14120:	2002      	movs	r0, #2
   14122:	4240      	negs	r0, r0
   14124:	e7f3      	b.n	1410e <__gesf2+0x4a>
   14126:	2c00      	cmp	r4, #0
   14128:	d0db      	beq.n	140e2 <__gesf2+0x1e>
   1412a:	e7f9      	b.n	14120 <__gesf2+0x5c>
   1412c:	4282      	cmp	r2, r0
   1412e:	dceb      	bgt.n	14108 <__gesf2+0x44>
   14130:	db04      	blt.n	1413c <__gesf2+0x78>
   14132:	42a5      	cmp	r5, r4
   14134:	d8e8      	bhi.n	14108 <__gesf2+0x44>
   14136:	2000      	movs	r0, #0
   14138:	42a5      	cmp	r5, r4
   1413a:	d2e8      	bcs.n	1410e <__gesf2+0x4a>
   1413c:	2101      	movs	r1, #1
   1413e:	1e58      	subs	r0, r3, #1
   14140:	4308      	orrs	r0, r1
   14142:	e7e4      	b.n	1410e <__gesf2+0x4a>

00014144 <__lesf2>:
   14144:	b5f0      	push	{r4, r5, r6, r7, lr}
   14146:	0042      	lsls	r2, r0, #1
   14148:	024d      	lsls	r5, r1, #9
   1414a:	004c      	lsls	r4, r1, #1
   1414c:	0246      	lsls	r6, r0, #9
   1414e:	0a76      	lsrs	r6, r6, #9
   14150:	0e12      	lsrs	r2, r2, #24
   14152:	0fc3      	lsrs	r3, r0, #31
   14154:	0a6d      	lsrs	r5, r5, #9
   14156:	0e24      	lsrs	r4, r4, #24
   14158:	0fc9      	lsrs	r1, r1, #31
   1415a:	2aff      	cmp	r2, #255	; 0xff
   1415c:	d016      	beq.n	1418c <__lesf2+0x48>
   1415e:	2cff      	cmp	r4, #255	; 0xff
   14160:	d018      	beq.n	14194 <__lesf2+0x50>
   14162:	2a00      	cmp	r2, #0
   14164:	d10a      	bne.n	1417c <__lesf2+0x38>
   14166:	4270      	negs	r0, r6
   14168:	4170      	adcs	r0, r6
   1416a:	b2c0      	uxtb	r0, r0
   1416c:	2c00      	cmp	r4, #0
   1416e:	d015      	beq.n	1419c <__lesf2+0x58>
   14170:	2800      	cmp	r0, #0
   14172:	d005      	beq.n	14180 <__lesf2+0x3c>
   14174:	2001      	movs	r0, #1
   14176:	3901      	subs	r1, #1
   14178:	4308      	orrs	r0, r1
   1417a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1417c:	2c00      	cmp	r4, #0
   1417e:	d013      	beq.n	141a8 <__lesf2+0x64>
   14180:	4299      	cmp	r1, r3
   14182:	d014      	beq.n	141ae <__lesf2+0x6a>
   14184:	2001      	movs	r0, #1
   14186:	425b      	negs	r3, r3
   14188:	4318      	orrs	r0, r3
   1418a:	e7f6      	b.n	1417a <__lesf2+0x36>
   1418c:	2002      	movs	r0, #2
   1418e:	2e00      	cmp	r6, #0
   14190:	d1f3      	bne.n	1417a <__lesf2+0x36>
   14192:	e7e4      	b.n	1415e <__lesf2+0x1a>
   14194:	2002      	movs	r0, #2
   14196:	2d00      	cmp	r5, #0
   14198:	d1ef      	bne.n	1417a <__lesf2+0x36>
   1419a:	e7e2      	b.n	14162 <__lesf2+0x1e>
   1419c:	2d00      	cmp	r5, #0
   1419e:	d1e7      	bne.n	14170 <__lesf2+0x2c>
   141a0:	2000      	movs	r0, #0
   141a2:	2e00      	cmp	r6, #0
   141a4:	d0e9      	beq.n	1417a <__lesf2+0x36>
   141a6:	e7ed      	b.n	14184 <__lesf2+0x40>
   141a8:	2d00      	cmp	r5, #0
   141aa:	d1e9      	bne.n	14180 <__lesf2+0x3c>
   141ac:	e7ea      	b.n	14184 <__lesf2+0x40>
   141ae:	42a2      	cmp	r2, r4
   141b0:	dc06      	bgt.n	141c0 <__lesf2+0x7c>
   141b2:	dbdf      	blt.n	14174 <__lesf2+0x30>
   141b4:	42ae      	cmp	r6, r5
   141b6:	d803      	bhi.n	141c0 <__lesf2+0x7c>
   141b8:	2000      	movs	r0, #0
   141ba:	42ae      	cmp	r6, r5
   141bc:	d3da      	bcc.n	14174 <__lesf2+0x30>
   141be:	e7dc      	b.n	1417a <__lesf2+0x36>
   141c0:	2001      	movs	r0, #1
   141c2:	4249      	negs	r1, r1
   141c4:	4308      	orrs	r0, r1
   141c6:	e7d8      	b.n	1417a <__lesf2+0x36>

000141c8 <atoi>:
   141c8:	b510      	push	{r4, lr}
   141ca:	220a      	movs	r2, #10
   141cc:	2100      	movs	r1, #0
   141ce:	f000 fb0d 	bl	147ec <strtol>
   141d2:	bd10      	pop	{r4, pc}

000141d4 <__libc_init_array>:
   141d4:	b570      	push	{r4, r5, r6, lr}
   141d6:	2600      	movs	r6, #0
   141d8:	4d0c      	ldr	r5, [pc, #48]	; (1420c <__libc_init_array+0x38>)
   141da:	4c0d      	ldr	r4, [pc, #52]	; (14210 <__libc_init_array+0x3c>)
   141dc:	1b64      	subs	r4, r4, r5
   141de:	10a4      	asrs	r4, r4, #2
   141e0:	42a6      	cmp	r6, r4
   141e2:	d109      	bne.n	141f8 <__libc_init_array+0x24>
   141e4:	2600      	movs	r6, #0
   141e6:	f005 fa21 	bl	1962c <_init>
   141ea:	4d0a      	ldr	r5, [pc, #40]	; (14214 <__libc_init_array+0x40>)
   141ec:	4c0a      	ldr	r4, [pc, #40]	; (14218 <__libc_init_array+0x44>)
   141ee:	1b64      	subs	r4, r4, r5
   141f0:	10a4      	asrs	r4, r4, #2
   141f2:	42a6      	cmp	r6, r4
   141f4:	d105      	bne.n	14202 <__libc_init_array+0x2e>
   141f6:	bd70      	pop	{r4, r5, r6, pc}
   141f8:	00b3      	lsls	r3, r6, #2
   141fa:	58eb      	ldr	r3, [r5, r3]
   141fc:	4798      	blx	r3
   141fe:	3601      	adds	r6, #1
   14200:	e7ee      	b.n	141e0 <__libc_init_array+0xc>
   14202:	00b3      	lsls	r3, r6, #2
   14204:	58eb      	ldr	r3, [r5, r3]
   14206:	4798      	blx	r3
   14208:	3601      	adds	r6, #1
   1420a:	e7f2      	b.n	141f2 <__libc_init_array+0x1e>
   1420c:	00019638 	.word	0x00019638
   14210:	00019638 	.word	0x00019638
   14214:	00019638 	.word	0x00019638
   14218:	0001963c 	.word	0x0001963c

0001421c <malloc>:
   1421c:	b510      	push	{r4, lr}
   1421e:	4b03      	ldr	r3, [pc, #12]	; (1422c <malloc+0x10>)
   14220:	0001      	movs	r1, r0
   14222:	6818      	ldr	r0, [r3, #0]
   14224:	f000 f87c 	bl	14320 <_malloc_r>
   14228:	bd10      	pop	{r4, pc}
   1422a:	46c0      	nop			; (mov r8, r8)
   1422c:	20000100 	.word	0x20000100

00014230 <free>:
   14230:	b510      	push	{r4, lr}
   14232:	4b03      	ldr	r3, [pc, #12]	; (14240 <free+0x10>)
   14234:	0001      	movs	r1, r0
   14236:	6818      	ldr	r0, [r3, #0]
   14238:	f000 f828 	bl	1428c <_free_r>
   1423c:	bd10      	pop	{r4, pc}
   1423e:	46c0      	nop			; (mov r8, r8)
   14240:	20000100 	.word	0x20000100

00014244 <memcpy>:
   14244:	2300      	movs	r3, #0
   14246:	b510      	push	{r4, lr}
   14248:	429a      	cmp	r2, r3
   1424a:	d100      	bne.n	1424e <memcpy+0xa>
   1424c:	bd10      	pop	{r4, pc}
   1424e:	5ccc      	ldrb	r4, [r1, r3]
   14250:	54c4      	strb	r4, [r0, r3]
   14252:	3301      	adds	r3, #1
   14254:	e7f8      	b.n	14248 <memcpy+0x4>

00014256 <memmove>:
   14256:	b510      	push	{r4, lr}
   14258:	4288      	cmp	r0, r1
   1425a:	d902      	bls.n	14262 <memmove+0xc>
   1425c:	188b      	adds	r3, r1, r2
   1425e:	4298      	cmp	r0, r3
   14260:	d308      	bcc.n	14274 <memmove+0x1e>
   14262:	2300      	movs	r3, #0
   14264:	429a      	cmp	r2, r3
   14266:	d007      	beq.n	14278 <memmove+0x22>
   14268:	5ccc      	ldrb	r4, [r1, r3]
   1426a:	54c4      	strb	r4, [r0, r3]
   1426c:	3301      	adds	r3, #1
   1426e:	e7f9      	b.n	14264 <memmove+0xe>
   14270:	5c8b      	ldrb	r3, [r1, r2]
   14272:	5483      	strb	r3, [r0, r2]
   14274:	3a01      	subs	r2, #1
   14276:	d2fb      	bcs.n	14270 <memmove+0x1a>
   14278:	bd10      	pop	{r4, pc}

0001427a <memset>:
   1427a:	0003      	movs	r3, r0
   1427c:	1882      	adds	r2, r0, r2
   1427e:	4293      	cmp	r3, r2
   14280:	d100      	bne.n	14284 <memset+0xa>
   14282:	4770      	bx	lr
   14284:	7019      	strb	r1, [r3, #0]
   14286:	3301      	adds	r3, #1
   14288:	e7f9      	b.n	1427e <memset+0x4>
	...

0001428c <_free_r>:
   1428c:	b570      	push	{r4, r5, r6, lr}
   1428e:	0005      	movs	r5, r0
   14290:	2900      	cmp	r1, #0
   14292:	d010      	beq.n	142b6 <_free_r+0x2a>
   14294:	1f0c      	subs	r4, r1, #4
   14296:	6823      	ldr	r3, [r4, #0]
   14298:	2b00      	cmp	r3, #0
   1429a:	da00      	bge.n	1429e <_free_r+0x12>
   1429c:	18e4      	adds	r4, r4, r3
   1429e:	0028      	movs	r0, r5
   142a0:	f000 fe74 	bl	14f8c <__malloc_lock>
   142a4:	4a1d      	ldr	r2, [pc, #116]	; (1431c <_free_r+0x90>)
   142a6:	6813      	ldr	r3, [r2, #0]
   142a8:	2b00      	cmp	r3, #0
   142aa:	d105      	bne.n	142b8 <_free_r+0x2c>
   142ac:	6063      	str	r3, [r4, #4]
   142ae:	6014      	str	r4, [r2, #0]
   142b0:	0028      	movs	r0, r5
   142b2:	f000 fe6c 	bl	14f8e <__malloc_unlock>
   142b6:	bd70      	pop	{r4, r5, r6, pc}
   142b8:	42a3      	cmp	r3, r4
   142ba:	d909      	bls.n	142d0 <_free_r+0x44>
   142bc:	6821      	ldr	r1, [r4, #0]
   142be:	1860      	adds	r0, r4, r1
   142c0:	4283      	cmp	r3, r0
   142c2:	d1f3      	bne.n	142ac <_free_r+0x20>
   142c4:	6818      	ldr	r0, [r3, #0]
   142c6:	685b      	ldr	r3, [r3, #4]
   142c8:	1841      	adds	r1, r0, r1
   142ca:	6021      	str	r1, [r4, #0]
   142cc:	e7ee      	b.n	142ac <_free_r+0x20>
   142ce:	0013      	movs	r3, r2
   142d0:	685a      	ldr	r2, [r3, #4]
   142d2:	2a00      	cmp	r2, #0
   142d4:	d001      	beq.n	142da <_free_r+0x4e>
   142d6:	42a2      	cmp	r2, r4
   142d8:	d9f9      	bls.n	142ce <_free_r+0x42>
   142da:	6819      	ldr	r1, [r3, #0]
   142dc:	1858      	adds	r0, r3, r1
   142de:	42a0      	cmp	r0, r4
   142e0:	d10b      	bne.n	142fa <_free_r+0x6e>
   142e2:	6820      	ldr	r0, [r4, #0]
   142e4:	1809      	adds	r1, r1, r0
   142e6:	1858      	adds	r0, r3, r1
   142e8:	6019      	str	r1, [r3, #0]
   142ea:	4282      	cmp	r2, r0
   142ec:	d1e0      	bne.n	142b0 <_free_r+0x24>
   142ee:	6810      	ldr	r0, [r2, #0]
   142f0:	6852      	ldr	r2, [r2, #4]
   142f2:	1841      	adds	r1, r0, r1
   142f4:	6019      	str	r1, [r3, #0]
   142f6:	605a      	str	r2, [r3, #4]
   142f8:	e7da      	b.n	142b0 <_free_r+0x24>
   142fa:	42a0      	cmp	r0, r4
   142fc:	d902      	bls.n	14304 <_free_r+0x78>
   142fe:	230c      	movs	r3, #12
   14300:	602b      	str	r3, [r5, #0]
   14302:	e7d5      	b.n	142b0 <_free_r+0x24>
   14304:	6821      	ldr	r1, [r4, #0]
   14306:	1860      	adds	r0, r4, r1
   14308:	4282      	cmp	r2, r0
   1430a:	d103      	bne.n	14314 <_free_r+0x88>
   1430c:	6810      	ldr	r0, [r2, #0]
   1430e:	6852      	ldr	r2, [r2, #4]
   14310:	1841      	adds	r1, r0, r1
   14312:	6021      	str	r1, [r4, #0]
   14314:	6062      	str	r2, [r4, #4]
   14316:	605c      	str	r4, [r3, #4]
   14318:	e7ca      	b.n	142b0 <_free_r+0x24>
   1431a:	46c0      	nop			; (mov r8, r8)
   1431c:	20004300 	.word	0x20004300

00014320 <_malloc_r>:
   14320:	2303      	movs	r3, #3
   14322:	b570      	push	{r4, r5, r6, lr}
   14324:	1ccd      	adds	r5, r1, #3
   14326:	439d      	bics	r5, r3
   14328:	3508      	adds	r5, #8
   1432a:	0006      	movs	r6, r0
   1432c:	2d0c      	cmp	r5, #12
   1432e:	d21e      	bcs.n	1436e <_malloc_r+0x4e>
   14330:	250c      	movs	r5, #12
   14332:	42a9      	cmp	r1, r5
   14334:	d81d      	bhi.n	14372 <_malloc_r+0x52>
   14336:	0030      	movs	r0, r6
   14338:	f000 fe28 	bl	14f8c <__malloc_lock>
   1433c:	4a25      	ldr	r2, [pc, #148]	; (143d4 <_malloc_r+0xb4>)
   1433e:	6814      	ldr	r4, [r2, #0]
   14340:	0021      	movs	r1, r4
   14342:	2900      	cmp	r1, #0
   14344:	d119      	bne.n	1437a <_malloc_r+0x5a>
   14346:	4c24      	ldr	r4, [pc, #144]	; (143d8 <_malloc_r+0xb8>)
   14348:	6823      	ldr	r3, [r4, #0]
   1434a:	2b00      	cmp	r3, #0
   1434c:	d103      	bne.n	14356 <_malloc_r+0x36>
   1434e:	0030      	movs	r0, r6
   14350:	f000 f8ae 	bl	144b0 <_sbrk_r>
   14354:	6020      	str	r0, [r4, #0]
   14356:	0029      	movs	r1, r5
   14358:	0030      	movs	r0, r6
   1435a:	f000 f8a9 	bl	144b0 <_sbrk_r>
   1435e:	1c43      	adds	r3, r0, #1
   14360:	d12c      	bne.n	143bc <_malloc_r+0x9c>
   14362:	230c      	movs	r3, #12
   14364:	0030      	movs	r0, r6
   14366:	6033      	str	r3, [r6, #0]
   14368:	f000 fe11 	bl	14f8e <__malloc_unlock>
   1436c:	e003      	b.n	14376 <_malloc_r+0x56>
   1436e:	2d00      	cmp	r5, #0
   14370:	dadf      	bge.n	14332 <_malloc_r+0x12>
   14372:	230c      	movs	r3, #12
   14374:	6033      	str	r3, [r6, #0]
   14376:	2000      	movs	r0, #0
   14378:	bd70      	pop	{r4, r5, r6, pc}
   1437a:	680b      	ldr	r3, [r1, #0]
   1437c:	1b5b      	subs	r3, r3, r5
   1437e:	d41a      	bmi.n	143b6 <_malloc_r+0x96>
   14380:	2b0b      	cmp	r3, #11
   14382:	d903      	bls.n	1438c <_malloc_r+0x6c>
   14384:	600b      	str	r3, [r1, #0]
   14386:	18cc      	adds	r4, r1, r3
   14388:	6025      	str	r5, [r4, #0]
   1438a:	e003      	b.n	14394 <_malloc_r+0x74>
   1438c:	428c      	cmp	r4, r1
   1438e:	d10e      	bne.n	143ae <_malloc_r+0x8e>
   14390:	6863      	ldr	r3, [r4, #4]
   14392:	6013      	str	r3, [r2, #0]
   14394:	0030      	movs	r0, r6
   14396:	f000 fdfa 	bl	14f8e <__malloc_unlock>
   1439a:	0020      	movs	r0, r4
   1439c:	2207      	movs	r2, #7
   1439e:	300b      	adds	r0, #11
   143a0:	1d23      	adds	r3, r4, #4
   143a2:	4390      	bics	r0, r2
   143a4:	1ac3      	subs	r3, r0, r3
   143a6:	d0e7      	beq.n	14378 <_malloc_r+0x58>
   143a8:	425a      	negs	r2, r3
   143aa:	50e2      	str	r2, [r4, r3]
   143ac:	e7e4      	b.n	14378 <_malloc_r+0x58>
   143ae:	684b      	ldr	r3, [r1, #4]
   143b0:	6063      	str	r3, [r4, #4]
   143b2:	000c      	movs	r4, r1
   143b4:	e7ee      	b.n	14394 <_malloc_r+0x74>
   143b6:	000c      	movs	r4, r1
   143b8:	6849      	ldr	r1, [r1, #4]
   143ba:	e7c2      	b.n	14342 <_malloc_r+0x22>
   143bc:	2303      	movs	r3, #3
   143be:	1cc4      	adds	r4, r0, #3
   143c0:	439c      	bics	r4, r3
   143c2:	42a0      	cmp	r0, r4
   143c4:	d0e0      	beq.n	14388 <_malloc_r+0x68>
   143c6:	1a21      	subs	r1, r4, r0
   143c8:	0030      	movs	r0, r6
   143ca:	f000 f871 	bl	144b0 <_sbrk_r>
   143ce:	1c43      	adds	r3, r0, #1
   143d0:	d1da      	bne.n	14388 <_malloc_r+0x68>
   143d2:	e7c6      	b.n	14362 <_malloc_r+0x42>
   143d4:	20004300 	.word	0x20004300
   143d8:	20004304 	.word	0x20004304

000143dc <_puts_r>:
   143dc:	b570      	push	{r4, r5, r6, lr}
   143de:	0005      	movs	r5, r0
   143e0:	000e      	movs	r6, r1
   143e2:	2800      	cmp	r0, #0
   143e4:	d004      	beq.n	143f0 <_puts_r+0x14>
   143e6:	6983      	ldr	r3, [r0, #24]
   143e8:	2b00      	cmp	r3, #0
   143ea:	d101      	bne.n	143f0 <_puts_r+0x14>
   143ec:	f000 fcaa 	bl	14d44 <__sinit>
   143f0:	69ab      	ldr	r3, [r5, #24]
   143f2:	68ac      	ldr	r4, [r5, #8]
   143f4:	2b00      	cmp	r3, #0
   143f6:	d102      	bne.n	143fe <_puts_r+0x22>
   143f8:	0028      	movs	r0, r5
   143fa:	f000 fca3 	bl	14d44 <__sinit>
   143fe:	4b24      	ldr	r3, [pc, #144]	; (14490 <_puts_r+0xb4>)
   14400:	429c      	cmp	r4, r3
   14402:	d10f      	bne.n	14424 <_puts_r+0x48>
   14404:	686c      	ldr	r4, [r5, #4]
   14406:	89a3      	ldrh	r3, [r4, #12]
   14408:	071b      	lsls	r3, r3, #28
   1440a:	d502      	bpl.n	14412 <_puts_r+0x36>
   1440c:	6923      	ldr	r3, [r4, #16]
   1440e:	2b00      	cmp	r3, #0
   14410:	d120      	bne.n	14454 <_puts_r+0x78>
   14412:	0021      	movs	r1, r4
   14414:	0028      	movs	r0, r5
   14416:	f000 fb27 	bl	14a68 <__swsetup_r>
   1441a:	2800      	cmp	r0, #0
   1441c:	d01a      	beq.n	14454 <_puts_r+0x78>
   1441e:	2001      	movs	r0, #1
   14420:	4240      	negs	r0, r0
   14422:	bd70      	pop	{r4, r5, r6, pc}
   14424:	4b1b      	ldr	r3, [pc, #108]	; (14494 <_puts_r+0xb8>)
   14426:	429c      	cmp	r4, r3
   14428:	d101      	bne.n	1442e <_puts_r+0x52>
   1442a:	68ac      	ldr	r4, [r5, #8]
   1442c:	e7eb      	b.n	14406 <_puts_r+0x2a>
   1442e:	4b1a      	ldr	r3, [pc, #104]	; (14498 <_puts_r+0xbc>)
   14430:	429c      	cmp	r4, r3
   14432:	d1e8      	bne.n	14406 <_puts_r+0x2a>
   14434:	68ec      	ldr	r4, [r5, #12]
   14436:	e7e6      	b.n	14406 <_puts_r+0x2a>
   14438:	3b01      	subs	r3, #1
   1443a:	3601      	adds	r6, #1
   1443c:	60a3      	str	r3, [r4, #8]
   1443e:	2b00      	cmp	r3, #0
   14440:	da04      	bge.n	1444c <_puts_r+0x70>
   14442:	69a2      	ldr	r2, [r4, #24]
   14444:	4293      	cmp	r3, r2
   14446:	db16      	blt.n	14476 <_puts_r+0x9a>
   14448:	290a      	cmp	r1, #10
   1444a:	d014      	beq.n	14476 <_puts_r+0x9a>
   1444c:	6823      	ldr	r3, [r4, #0]
   1444e:	1c5a      	adds	r2, r3, #1
   14450:	6022      	str	r2, [r4, #0]
   14452:	7019      	strb	r1, [r3, #0]
   14454:	7831      	ldrb	r1, [r6, #0]
   14456:	68a3      	ldr	r3, [r4, #8]
   14458:	2900      	cmp	r1, #0
   1445a:	d1ed      	bne.n	14438 <_puts_r+0x5c>
   1445c:	3b01      	subs	r3, #1
   1445e:	60a3      	str	r3, [r4, #8]
   14460:	2b00      	cmp	r3, #0
   14462:	da0f      	bge.n	14484 <_puts_r+0xa8>
   14464:	0022      	movs	r2, r4
   14466:	310a      	adds	r1, #10
   14468:	0028      	movs	r0, r5
   1446a:	f000 faa7 	bl	149bc <__swbuf_r>
   1446e:	1c43      	adds	r3, r0, #1
   14470:	d0d5      	beq.n	1441e <_puts_r+0x42>
   14472:	200a      	movs	r0, #10
   14474:	e7d5      	b.n	14422 <_puts_r+0x46>
   14476:	0022      	movs	r2, r4
   14478:	0028      	movs	r0, r5
   1447a:	f000 fa9f 	bl	149bc <__swbuf_r>
   1447e:	1c43      	adds	r3, r0, #1
   14480:	d1e8      	bne.n	14454 <_puts_r+0x78>
   14482:	e7cc      	b.n	1441e <_puts_r+0x42>
   14484:	200a      	movs	r0, #10
   14486:	6823      	ldr	r3, [r4, #0]
   14488:	1c5a      	adds	r2, r3, #1
   1448a:	6022      	str	r2, [r4, #0]
   1448c:	7018      	strb	r0, [r3, #0]
   1448e:	e7c8      	b.n	14422 <_puts_r+0x46>
   14490:	000194ac 	.word	0x000194ac
   14494:	000194cc 	.word	0x000194cc
   14498:	0001948c 	.word	0x0001948c

0001449c <puts>:
   1449c:	b510      	push	{r4, lr}
   1449e:	4b03      	ldr	r3, [pc, #12]	; (144ac <puts+0x10>)
   144a0:	0001      	movs	r1, r0
   144a2:	6818      	ldr	r0, [r3, #0]
   144a4:	f7ff ff9a 	bl	143dc <_puts_r>
   144a8:	bd10      	pop	{r4, pc}
   144aa:	46c0      	nop			; (mov r8, r8)
   144ac:	20000100 	.word	0x20000100

000144b0 <_sbrk_r>:
   144b0:	2300      	movs	r3, #0
   144b2:	b570      	push	{r4, r5, r6, lr}
   144b4:	4c06      	ldr	r4, [pc, #24]	; (144d0 <_sbrk_r+0x20>)
   144b6:	0005      	movs	r5, r0
   144b8:	0008      	movs	r0, r1
   144ba:	6023      	str	r3, [r4, #0]
   144bc:	f7fa facc 	bl	ea58 <_sbrk>
   144c0:	1c43      	adds	r3, r0, #1
   144c2:	d103      	bne.n	144cc <_sbrk_r+0x1c>
   144c4:	6823      	ldr	r3, [r4, #0]
   144c6:	2b00      	cmp	r3, #0
   144c8:	d000      	beq.n	144cc <_sbrk_r+0x1c>
   144ca:	602b      	str	r3, [r5, #0]
   144cc:	bd70      	pop	{r4, r5, r6, pc}
   144ce:	46c0      	nop			; (mov r8, r8)
   144d0:	20005d54 	.word	0x20005d54

000144d4 <sniprintf>:
   144d4:	b40c      	push	{r2, r3}
   144d6:	b530      	push	{r4, r5, lr}
   144d8:	4b16      	ldr	r3, [pc, #88]	; (14534 <sniprintf+0x60>)
   144da:	b09d      	sub	sp, #116	; 0x74
   144dc:	1e0c      	subs	r4, r1, #0
   144de:	681d      	ldr	r5, [r3, #0]
   144e0:	da08      	bge.n	144f4 <sniprintf+0x20>
   144e2:	238b      	movs	r3, #139	; 0x8b
   144e4:	2001      	movs	r0, #1
   144e6:	602b      	str	r3, [r5, #0]
   144e8:	4240      	negs	r0, r0
   144ea:	b01d      	add	sp, #116	; 0x74
   144ec:	bc30      	pop	{r4, r5}
   144ee:	bc08      	pop	{r3}
   144f0:	b002      	add	sp, #8
   144f2:	4718      	bx	r3
   144f4:	2382      	movs	r3, #130	; 0x82
   144f6:	a902      	add	r1, sp, #8
   144f8:	009b      	lsls	r3, r3, #2
   144fa:	818b      	strh	r3, [r1, #12]
   144fc:	2300      	movs	r3, #0
   144fe:	9002      	str	r0, [sp, #8]
   14500:	6108      	str	r0, [r1, #16]
   14502:	429c      	cmp	r4, r3
   14504:	d000      	beq.n	14508 <sniprintf+0x34>
   14506:	1e63      	subs	r3, r4, #1
   14508:	608b      	str	r3, [r1, #8]
   1450a:	614b      	str	r3, [r1, #20]
   1450c:	2301      	movs	r3, #1
   1450e:	425b      	negs	r3, r3
   14510:	81cb      	strh	r3, [r1, #14]
   14512:	9a20      	ldr	r2, [sp, #128]	; 0x80
   14514:	ab21      	add	r3, sp, #132	; 0x84
   14516:	0028      	movs	r0, r5
   14518:	9301      	str	r3, [sp, #4]
   1451a:	f000 fd9b 	bl	15054 <_svfiprintf_r>
   1451e:	1c43      	adds	r3, r0, #1
   14520:	da01      	bge.n	14526 <sniprintf+0x52>
   14522:	238b      	movs	r3, #139	; 0x8b
   14524:	602b      	str	r3, [r5, #0]
   14526:	2c00      	cmp	r4, #0
   14528:	d0df      	beq.n	144ea <sniprintf+0x16>
   1452a:	2300      	movs	r3, #0
   1452c:	9a02      	ldr	r2, [sp, #8]
   1452e:	7013      	strb	r3, [r2, #0]
   14530:	e7db      	b.n	144ea <sniprintf+0x16>
   14532:	46c0      	nop			; (mov r8, r8)
   14534:	20000100 	.word	0x20000100

00014538 <siprintf>:
   14538:	b40e      	push	{r1, r2, r3}
   1453a:	b510      	push	{r4, lr}
   1453c:	b09d      	sub	sp, #116	; 0x74
   1453e:	a902      	add	r1, sp, #8
   14540:	9002      	str	r0, [sp, #8]
   14542:	6108      	str	r0, [r1, #16]
   14544:	480b      	ldr	r0, [pc, #44]	; (14574 <siprintf+0x3c>)
   14546:	2482      	movs	r4, #130	; 0x82
   14548:	6088      	str	r0, [r1, #8]
   1454a:	6148      	str	r0, [r1, #20]
   1454c:	2001      	movs	r0, #1
   1454e:	4240      	negs	r0, r0
   14550:	ab1f      	add	r3, sp, #124	; 0x7c
   14552:	81c8      	strh	r0, [r1, #14]
   14554:	4808      	ldr	r0, [pc, #32]	; (14578 <siprintf+0x40>)
   14556:	cb04      	ldmia	r3!, {r2}
   14558:	00a4      	lsls	r4, r4, #2
   1455a:	6800      	ldr	r0, [r0, #0]
   1455c:	9301      	str	r3, [sp, #4]
   1455e:	818c      	strh	r4, [r1, #12]
   14560:	f000 fd78 	bl	15054 <_svfiprintf_r>
   14564:	2300      	movs	r3, #0
   14566:	9a02      	ldr	r2, [sp, #8]
   14568:	7013      	strb	r3, [r2, #0]
   1456a:	b01d      	add	sp, #116	; 0x74
   1456c:	bc10      	pop	{r4}
   1456e:	bc08      	pop	{r3}
   14570:	b003      	add	sp, #12
   14572:	4718      	bx	r3
   14574:	7fffffff 	.word	0x7fffffff
   14578:	20000100 	.word	0x20000100

0001457c <strcasecmp>:
   1457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1457e:	0007      	movs	r7, r0
   14580:	000e      	movs	r6, r1
   14582:	783c      	ldrb	r4, [r7, #0]
   14584:	f000 fc76 	bl	14e74 <__locale_ctype_ptr>
   14588:	2203      	movs	r2, #3
   1458a:	1900      	adds	r0, r0, r4
   1458c:	7843      	ldrb	r3, [r0, #1]
   1458e:	4013      	ands	r3, r2
   14590:	2b01      	cmp	r3, #1
   14592:	d100      	bne.n	14596 <strcasecmp+0x1a>
   14594:	3420      	adds	r4, #32
   14596:	7835      	ldrb	r5, [r6, #0]
   14598:	f000 fc6c 	bl	14e74 <__locale_ctype_ptr>
   1459c:	2203      	movs	r2, #3
   1459e:	1940      	adds	r0, r0, r5
   145a0:	7843      	ldrb	r3, [r0, #1]
   145a2:	4013      	ands	r3, r2
   145a4:	2b01      	cmp	r3, #1
   145a6:	d100      	bne.n	145aa <strcasecmp+0x2e>
   145a8:	3520      	adds	r5, #32
   145aa:	1b60      	subs	r0, r4, r5
   145ac:	d103      	bne.n	145b6 <strcasecmp+0x3a>
   145ae:	3701      	adds	r7, #1
   145b0:	3601      	adds	r6, #1
   145b2:	2d00      	cmp	r5, #0
   145b4:	d1e5      	bne.n	14582 <strcasecmp+0x6>
   145b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000145b8 <strcat>:
   145b8:	0002      	movs	r2, r0
   145ba:	b510      	push	{r4, lr}
   145bc:	7813      	ldrb	r3, [r2, #0]
   145be:	2b00      	cmp	r3, #0
   145c0:	d105      	bne.n	145ce <strcat+0x16>
   145c2:	5ccc      	ldrb	r4, [r1, r3]
   145c4:	54d4      	strb	r4, [r2, r3]
   145c6:	3301      	adds	r3, #1
   145c8:	2c00      	cmp	r4, #0
   145ca:	d1fa      	bne.n	145c2 <strcat+0xa>
   145cc:	bd10      	pop	{r4, pc}
   145ce:	3201      	adds	r2, #1
   145d0:	e7f4      	b.n	145bc <strcat+0x4>

000145d2 <strcmp>:
   145d2:	7802      	ldrb	r2, [r0, #0]
   145d4:	780b      	ldrb	r3, [r1, #0]
   145d6:	2a00      	cmp	r2, #0
   145d8:	d003      	beq.n	145e2 <strcmp+0x10>
   145da:	3001      	adds	r0, #1
   145dc:	3101      	adds	r1, #1
   145de:	429a      	cmp	r2, r3
   145e0:	d0f7      	beq.n	145d2 <strcmp>
   145e2:	1ad0      	subs	r0, r2, r3
   145e4:	4770      	bx	lr

000145e6 <strcpy>:
   145e6:	1c03      	adds	r3, r0, #0
   145e8:	780a      	ldrb	r2, [r1, #0]
   145ea:	3101      	adds	r1, #1
   145ec:	701a      	strb	r2, [r3, #0]
   145ee:	3301      	adds	r3, #1
   145f0:	2a00      	cmp	r2, #0
   145f2:	d1f9      	bne.n	145e8 <strcpy+0x2>
   145f4:	4770      	bx	lr
	...

000145f8 <strdup>:
   145f8:	b510      	push	{r4, lr}
   145fa:	4b03      	ldr	r3, [pc, #12]	; (14608 <strdup+0x10>)
   145fc:	0001      	movs	r1, r0
   145fe:	6818      	ldr	r0, [r3, #0]
   14600:	f000 f804 	bl	1460c <_strdup_r>
   14604:	bd10      	pop	{r4, pc}
   14606:	46c0      	nop			; (mov r8, r8)
   14608:	20000100 	.word	0x20000100

0001460c <_strdup_r>:
   1460c:	b570      	push	{r4, r5, r6, lr}
   1460e:	0005      	movs	r5, r0
   14610:	0008      	movs	r0, r1
   14612:	000e      	movs	r6, r1
   14614:	f000 f80d 	bl	14632 <strlen>
   14618:	1c44      	adds	r4, r0, #1
   1461a:	0021      	movs	r1, r4
   1461c:	0028      	movs	r0, r5
   1461e:	f7ff fe7f 	bl	14320 <_malloc_r>
   14622:	1e05      	subs	r5, r0, #0
   14624:	d003      	beq.n	1462e <_strdup_r+0x22>
   14626:	0022      	movs	r2, r4
   14628:	0031      	movs	r1, r6
   1462a:	f7ff fe0b 	bl	14244 <memcpy>
   1462e:	0028      	movs	r0, r5
   14630:	bd70      	pop	{r4, r5, r6, pc}

00014632 <strlen>:
   14632:	2300      	movs	r3, #0
   14634:	5cc2      	ldrb	r2, [r0, r3]
   14636:	3301      	adds	r3, #1
   14638:	2a00      	cmp	r2, #0
   1463a:	d1fb      	bne.n	14634 <strlen+0x2>
   1463c:	1e58      	subs	r0, r3, #1
   1463e:	4770      	bx	lr

00014640 <strncmp>:
   14640:	2300      	movs	r3, #0
   14642:	b530      	push	{r4, r5, lr}
   14644:	429a      	cmp	r2, r3
   14646:	d00a      	beq.n	1465e <strncmp+0x1e>
   14648:	3a01      	subs	r2, #1
   1464a:	5cc4      	ldrb	r4, [r0, r3]
   1464c:	5ccd      	ldrb	r5, [r1, r3]
   1464e:	42ac      	cmp	r4, r5
   14650:	d104      	bne.n	1465c <strncmp+0x1c>
   14652:	429a      	cmp	r2, r3
   14654:	d002      	beq.n	1465c <strncmp+0x1c>
   14656:	3301      	adds	r3, #1
   14658:	2c00      	cmp	r4, #0
   1465a:	d1f6      	bne.n	1464a <strncmp+0xa>
   1465c:	1b63      	subs	r3, r4, r5
   1465e:	0018      	movs	r0, r3
   14660:	bd30      	pop	{r4, r5, pc}

00014662 <strncpy>:
   14662:	b570      	push	{r4, r5, r6, lr}
   14664:	0004      	movs	r4, r0
   14666:	2a00      	cmp	r2, #0
   14668:	d100      	bne.n	1466c <strncpy+0xa>
   1466a:	bd70      	pop	{r4, r5, r6, pc}
   1466c:	780d      	ldrb	r5, [r1, #0]
   1466e:	1e56      	subs	r6, r2, #1
   14670:	1c63      	adds	r3, r4, #1
   14672:	7025      	strb	r5, [r4, #0]
   14674:	3101      	adds	r1, #1
   14676:	2d00      	cmp	r5, #0
   14678:	d105      	bne.n	14686 <strncpy+0x24>
   1467a:	18a4      	adds	r4, r4, r2
   1467c:	429c      	cmp	r4, r3
   1467e:	d0f4      	beq.n	1466a <strncpy+0x8>
   14680:	701d      	strb	r5, [r3, #0]
   14682:	3301      	adds	r3, #1
   14684:	e7fa      	b.n	1467c <strncpy+0x1a>
   14686:	001c      	movs	r4, r3
   14688:	0032      	movs	r2, r6
   1468a:	e7ec      	b.n	14666 <strncpy+0x4>

0001468c <strrchr>:
   1468c:	b570      	push	{r4, r5, r6, lr}
   1468e:	000d      	movs	r5, r1
   14690:	2400      	movs	r4, #0
   14692:	2900      	cmp	r1, #0
   14694:	d105      	bne.n	146a2 <strrchr+0x16>
   14696:	f000 ffb5 	bl	15604 <strchr>
   1469a:	0004      	movs	r4, r0
   1469c:	e006      	b.n	146ac <strrchr+0x20>
   1469e:	001c      	movs	r4, r3
   146a0:	1c58      	adds	r0, r3, #1
   146a2:	0029      	movs	r1, r5
   146a4:	f000 ffae 	bl	15604 <strchr>
   146a8:	1e03      	subs	r3, r0, #0
   146aa:	d1f8      	bne.n	1469e <strrchr+0x12>
   146ac:	0020      	movs	r0, r4
   146ae:	bd70      	pop	{r4, r5, r6, pc}

000146b0 <strstr>:
   146b0:	b510      	push	{r4, lr}
   146b2:	0002      	movs	r2, r0
   146b4:	7800      	ldrb	r0, [r0, #0]
   146b6:	2800      	cmp	r0, #0
   146b8:	d104      	bne.n	146c4 <strstr+0x14>
   146ba:	7809      	ldrb	r1, [r1, #0]
   146bc:	2900      	cmp	r1, #0
   146be:	d00d      	beq.n	146dc <strstr+0x2c>
   146c0:	bd10      	pop	{r4, pc}
   146c2:	3201      	adds	r2, #1
   146c4:	7810      	ldrb	r0, [r2, #0]
   146c6:	2800      	cmp	r0, #0
   146c8:	d0fa      	beq.n	146c0 <strstr+0x10>
   146ca:	2300      	movs	r3, #0
   146cc:	5cc8      	ldrb	r0, [r1, r3]
   146ce:	2800      	cmp	r0, #0
   146d0:	d004      	beq.n	146dc <strstr+0x2c>
   146d2:	5cd4      	ldrb	r4, [r2, r3]
   146d4:	4284      	cmp	r4, r0
   146d6:	d1f4      	bne.n	146c2 <strstr+0x12>
   146d8:	3301      	adds	r3, #1
   146da:	e7f7      	b.n	146cc <strstr+0x1c>
   146dc:	0010      	movs	r0, r2
   146de:	e7ef      	b.n	146c0 <strstr+0x10>

000146e0 <_strtol_l.isra.0>:
   146e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   146e2:	001f      	movs	r7, r3
   146e4:	000e      	movs	r6, r1
   146e6:	b087      	sub	sp, #28
   146e8:	9005      	str	r0, [sp, #20]
   146ea:	9103      	str	r1, [sp, #12]
   146ec:	9202      	str	r2, [sp, #8]
   146ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   146f0:	7834      	ldrb	r4, [r6, #0]
   146f2:	f000 fbbc 	bl	14e6e <__locale_ctype_ptr_l>
   146f6:	2208      	movs	r2, #8
   146f8:	1900      	adds	r0, r0, r4
   146fa:	7843      	ldrb	r3, [r0, #1]
   146fc:	1c75      	adds	r5, r6, #1
   146fe:	4013      	ands	r3, r2
   14700:	d10c      	bne.n	1471c <_strtol_l.isra.0+0x3c>
   14702:	2c2d      	cmp	r4, #45	; 0x2d
   14704:	d10c      	bne.n	14720 <_strtol_l.isra.0+0x40>
   14706:	3301      	adds	r3, #1
   14708:	782c      	ldrb	r4, [r5, #0]
   1470a:	9301      	str	r3, [sp, #4]
   1470c:	1cb5      	adds	r5, r6, #2
   1470e:	2f00      	cmp	r7, #0
   14710:	d00c      	beq.n	1472c <_strtol_l.isra.0+0x4c>
   14712:	2f10      	cmp	r7, #16
   14714:	d114      	bne.n	14740 <_strtol_l.isra.0+0x60>
   14716:	2c30      	cmp	r4, #48	; 0x30
   14718:	d00a      	beq.n	14730 <_strtol_l.isra.0+0x50>
   1471a:	e011      	b.n	14740 <_strtol_l.isra.0+0x60>
   1471c:	002e      	movs	r6, r5
   1471e:	e7e6      	b.n	146ee <_strtol_l.isra.0+0xe>
   14720:	9301      	str	r3, [sp, #4]
   14722:	2c2b      	cmp	r4, #43	; 0x2b
   14724:	d1f3      	bne.n	1470e <_strtol_l.isra.0+0x2e>
   14726:	782c      	ldrb	r4, [r5, #0]
   14728:	1cb5      	adds	r5, r6, #2
   1472a:	e7f0      	b.n	1470e <_strtol_l.isra.0+0x2e>
   1472c:	2c30      	cmp	r4, #48	; 0x30
   1472e:	d12f      	bne.n	14790 <_strtol_l.isra.0+0xb0>
   14730:	2220      	movs	r2, #32
   14732:	782b      	ldrb	r3, [r5, #0]
   14734:	4393      	bics	r3, r2
   14736:	2b58      	cmp	r3, #88	; 0x58
   14738:	d151      	bne.n	147de <_strtol_l.isra.0+0xfe>
   1473a:	2710      	movs	r7, #16
   1473c:	786c      	ldrb	r4, [r5, #1]
   1473e:	3502      	adds	r5, #2
   14740:	9b01      	ldr	r3, [sp, #4]
   14742:	4a29      	ldr	r2, [pc, #164]	; (147e8 <_strtol_l.isra.0+0x108>)
   14744:	0039      	movs	r1, r7
   14746:	189e      	adds	r6, r3, r2
   14748:	0030      	movs	r0, r6
   1474a:	f7fd fb99 	bl	11e80 <__aeabi_uidivmod>
   1474e:	0030      	movs	r0, r6
   14750:	9104      	str	r1, [sp, #16]
   14752:	0039      	movs	r1, r7
   14754:	f7fd fb0e 	bl	11d74 <__udivsi3>
   14758:	2101      	movs	r1, #1
   1475a:	2300      	movs	r3, #0
   1475c:	4249      	negs	r1, r1
   1475e:	0002      	movs	r2, r0
   14760:	468c      	mov	ip, r1
   14762:	0018      	movs	r0, r3
   14764:	0021      	movs	r1, r4
   14766:	3930      	subs	r1, #48	; 0x30
   14768:	2909      	cmp	r1, #9
   1476a:	d813      	bhi.n	14794 <_strtol_l.isra.0+0xb4>
   1476c:	000c      	movs	r4, r1
   1476e:	42a7      	cmp	r7, r4
   14770:	dd1c      	ble.n	147ac <_strtol_l.isra.0+0xcc>
   14772:	1c59      	adds	r1, r3, #1
   14774:	d009      	beq.n	1478a <_strtol_l.isra.0+0xaa>
   14776:	4663      	mov	r3, ip
   14778:	4282      	cmp	r2, r0
   1477a:	d306      	bcc.n	1478a <_strtol_l.isra.0+0xaa>
   1477c:	d102      	bne.n	14784 <_strtol_l.isra.0+0xa4>
   1477e:	9904      	ldr	r1, [sp, #16]
   14780:	42a1      	cmp	r1, r4
   14782:	db02      	blt.n	1478a <_strtol_l.isra.0+0xaa>
   14784:	2301      	movs	r3, #1
   14786:	4378      	muls	r0, r7
   14788:	1820      	adds	r0, r4, r0
   1478a:	782c      	ldrb	r4, [r5, #0]
   1478c:	3501      	adds	r5, #1
   1478e:	e7e9      	b.n	14764 <_strtol_l.isra.0+0x84>
   14790:	270a      	movs	r7, #10
   14792:	e7d5      	b.n	14740 <_strtol_l.isra.0+0x60>
   14794:	0021      	movs	r1, r4
   14796:	3941      	subs	r1, #65	; 0x41
   14798:	2919      	cmp	r1, #25
   1479a:	d801      	bhi.n	147a0 <_strtol_l.isra.0+0xc0>
   1479c:	3c37      	subs	r4, #55	; 0x37
   1479e:	e7e6      	b.n	1476e <_strtol_l.isra.0+0x8e>
   147a0:	0021      	movs	r1, r4
   147a2:	3961      	subs	r1, #97	; 0x61
   147a4:	2919      	cmp	r1, #25
   147a6:	d801      	bhi.n	147ac <_strtol_l.isra.0+0xcc>
   147a8:	3c57      	subs	r4, #87	; 0x57
   147aa:	e7e0      	b.n	1476e <_strtol_l.isra.0+0x8e>
   147ac:	1c5a      	adds	r2, r3, #1
   147ae:	d108      	bne.n	147c2 <_strtol_l.isra.0+0xe2>
   147b0:	9a05      	ldr	r2, [sp, #20]
   147b2:	3323      	adds	r3, #35	; 0x23
   147b4:	6013      	str	r3, [r2, #0]
   147b6:	9b02      	ldr	r3, [sp, #8]
   147b8:	0030      	movs	r0, r6
   147ba:	2b00      	cmp	r3, #0
   147bc:	d10b      	bne.n	147d6 <_strtol_l.isra.0+0xf6>
   147be:	b007      	add	sp, #28
   147c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147c2:	9a01      	ldr	r2, [sp, #4]
   147c4:	2a00      	cmp	r2, #0
   147c6:	d000      	beq.n	147ca <_strtol_l.isra.0+0xea>
   147c8:	4240      	negs	r0, r0
   147ca:	9a02      	ldr	r2, [sp, #8]
   147cc:	2a00      	cmp	r2, #0
   147ce:	d0f6      	beq.n	147be <_strtol_l.isra.0+0xde>
   147d0:	9a03      	ldr	r2, [sp, #12]
   147d2:	2b00      	cmp	r3, #0
   147d4:	d000      	beq.n	147d8 <_strtol_l.isra.0+0xf8>
   147d6:	1e6a      	subs	r2, r5, #1
   147d8:	9b02      	ldr	r3, [sp, #8]
   147da:	601a      	str	r2, [r3, #0]
   147dc:	e7ef      	b.n	147be <_strtol_l.isra.0+0xde>
   147de:	2430      	movs	r4, #48	; 0x30
   147e0:	2f00      	cmp	r7, #0
   147e2:	d1ad      	bne.n	14740 <_strtol_l.isra.0+0x60>
   147e4:	3708      	adds	r7, #8
   147e6:	e7ab      	b.n	14740 <_strtol_l.isra.0+0x60>
   147e8:	7fffffff 	.word	0x7fffffff

000147ec <strtol>:
   147ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   147ee:	0013      	movs	r3, r2
   147f0:	4a06      	ldr	r2, [pc, #24]	; (1480c <strtol+0x20>)
   147f2:	0005      	movs	r5, r0
   147f4:	6810      	ldr	r0, [r2, #0]
   147f6:	6a04      	ldr	r4, [r0, #32]
   147f8:	2c00      	cmp	r4, #0
   147fa:	d100      	bne.n	147fe <strtol+0x12>
   147fc:	4c04      	ldr	r4, [pc, #16]	; (14810 <strtol+0x24>)
   147fe:	000a      	movs	r2, r1
   14800:	9400      	str	r4, [sp, #0]
   14802:	0029      	movs	r1, r5
   14804:	f7ff ff6c 	bl	146e0 <_strtol_l.isra.0>
   14808:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1480a:	46c0      	nop			; (mov r8, r8)
   1480c:	20000100 	.word	0x20000100
   14810:	20000164 	.word	0x20000164

00014814 <_strtoul_l.isra.0>:
   14814:	b5f0      	push	{r4, r5, r6, r7, lr}
   14816:	001f      	movs	r7, r3
   14818:	000e      	movs	r6, r1
   1481a:	b087      	sub	sp, #28
   1481c:	9005      	str	r0, [sp, #20]
   1481e:	9103      	str	r1, [sp, #12]
   14820:	9201      	str	r2, [sp, #4]
   14822:	980c      	ldr	r0, [sp, #48]	; 0x30
   14824:	7834      	ldrb	r4, [r6, #0]
   14826:	f000 fb22 	bl	14e6e <__locale_ctype_ptr_l>
   1482a:	2208      	movs	r2, #8
   1482c:	1900      	adds	r0, r0, r4
   1482e:	7843      	ldrb	r3, [r0, #1]
   14830:	1c75      	adds	r5, r6, #1
   14832:	4013      	ands	r3, r2
   14834:	d10c      	bne.n	14850 <_strtoul_l.isra.0+0x3c>
   14836:	2c2d      	cmp	r4, #45	; 0x2d
   14838:	d10c      	bne.n	14854 <_strtoul_l.isra.0+0x40>
   1483a:	3301      	adds	r3, #1
   1483c:	782c      	ldrb	r4, [r5, #0]
   1483e:	9302      	str	r3, [sp, #8]
   14840:	1cb5      	adds	r5, r6, #2
   14842:	2f00      	cmp	r7, #0
   14844:	d00c      	beq.n	14860 <_strtoul_l.isra.0+0x4c>
   14846:	2f10      	cmp	r7, #16
   14848:	d114      	bne.n	14874 <_strtoul_l.isra.0+0x60>
   1484a:	2c30      	cmp	r4, #48	; 0x30
   1484c:	d00a      	beq.n	14864 <_strtoul_l.isra.0+0x50>
   1484e:	e011      	b.n	14874 <_strtoul_l.isra.0+0x60>
   14850:	002e      	movs	r6, r5
   14852:	e7e6      	b.n	14822 <_strtoul_l.isra.0+0xe>
   14854:	9302      	str	r3, [sp, #8]
   14856:	2c2b      	cmp	r4, #43	; 0x2b
   14858:	d1f3      	bne.n	14842 <_strtoul_l.isra.0+0x2e>
   1485a:	782c      	ldrb	r4, [r5, #0]
   1485c:	1cb5      	adds	r5, r6, #2
   1485e:	e7f0      	b.n	14842 <_strtoul_l.isra.0+0x2e>
   14860:	2c30      	cmp	r4, #48	; 0x30
   14862:	d12f      	bne.n	148c4 <_strtoul_l.isra.0+0xb0>
   14864:	2220      	movs	r2, #32
   14866:	782b      	ldrb	r3, [r5, #0]
   14868:	4393      	bics	r3, r2
   1486a:	2b58      	cmp	r3, #88	; 0x58
   1486c:	d154      	bne.n	14918 <_strtoul_l.isra.0+0x104>
   1486e:	2710      	movs	r7, #16
   14870:	786c      	ldrb	r4, [r5, #1]
   14872:	3502      	adds	r5, #2
   14874:	2001      	movs	r0, #1
   14876:	0039      	movs	r1, r7
   14878:	4240      	negs	r0, r0
   1487a:	f7fd fa7b 	bl	11d74 <__udivsi3>
   1487e:	0006      	movs	r6, r0
   14880:	2001      	movs	r0, #1
   14882:	0039      	movs	r1, r7
   14884:	4240      	negs	r0, r0
   14886:	f7fd fafb 	bl	11e80 <__aeabi_uidivmod>
   1488a:	2300      	movs	r3, #0
   1488c:	9104      	str	r1, [sp, #16]
   1488e:	2101      	movs	r1, #1
   14890:	2201      	movs	r2, #1
   14892:	0018      	movs	r0, r3
   14894:	468c      	mov	ip, r1
   14896:	4252      	negs	r2, r2
   14898:	0021      	movs	r1, r4
   1489a:	3930      	subs	r1, #48	; 0x30
   1489c:	2909      	cmp	r1, #9
   1489e:	d813      	bhi.n	148c8 <_strtoul_l.isra.0+0xb4>
   148a0:	000c      	movs	r4, r1
   148a2:	42a7      	cmp	r7, r4
   148a4:	dd1e      	ble.n	148e4 <_strtoul_l.isra.0+0xd0>
   148a6:	2b00      	cmp	r3, #0
   148a8:	db1a      	blt.n	148e0 <_strtoul_l.isra.0+0xcc>
   148aa:	0013      	movs	r3, r2
   148ac:	4286      	cmp	r6, r0
   148ae:	d306      	bcc.n	148be <_strtoul_l.isra.0+0xaa>
   148b0:	d102      	bne.n	148b8 <_strtoul_l.isra.0+0xa4>
   148b2:	9904      	ldr	r1, [sp, #16]
   148b4:	42a1      	cmp	r1, r4
   148b6:	db02      	blt.n	148be <_strtoul_l.isra.0+0xaa>
   148b8:	4663      	mov	r3, ip
   148ba:	4378      	muls	r0, r7
   148bc:	1820      	adds	r0, r4, r0
   148be:	782c      	ldrb	r4, [r5, #0]
   148c0:	3501      	adds	r5, #1
   148c2:	e7e9      	b.n	14898 <_strtoul_l.isra.0+0x84>
   148c4:	270a      	movs	r7, #10
   148c6:	e7d5      	b.n	14874 <_strtoul_l.isra.0+0x60>
   148c8:	0021      	movs	r1, r4
   148ca:	3941      	subs	r1, #65	; 0x41
   148cc:	2919      	cmp	r1, #25
   148ce:	d801      	bhi.n	148d4 <_strtoul_l.isra.0+0xc0>
   148d0:	3c37      	subs	r4, #55	; 0x37
   148d2:	e7e6      	b.n	148a2 <_strtoul_l.isra.0+0x8e>
   148d4:	0021      	movs	r1, r4
   148d6:	3961      	subs	r1, #97	; 0x61
   148d8:	2919      	cmp	r1, #25
   148da:	d803      	bhi.n	148e4 <_strtoul_l.isra.0+0xd0>
   148dc:	3c57      	subs	r4, #87	; 0x57
   148de:	e7e0      	b.n	148a2 <_strtoul_l.isra.0+0x8e>
   148e0:	0013      	movs	r3, r2
   148e2:	e7ec      	b.n	148be <_strtoul_l.isra.0+0xaa>
   148e4:	2b00      	cmp	r3, #0
   148e6:	da09      	bge.n	148fc <_strtoul_l.isra.0+0xe8>
   148e8:	2322      	movs	r3, #34	; 0x22
   148ea:	2001      	movs	r0, #1
   148ec:	9a05      	ldr	r2, [sp, #20]
   148ee:	4240      	negs	r0, r0
   148f0:	6013      	str	r3, [r2, #0]
   148f2:	9b01      	ldr	r3, [sp, #4]
   148f4:	2b00      	cmp	r3, #0
   148f6:	d10b      	bne.n	14910 <_strtoul_l.isra.0+0xfc>
   148f8:	b007      	add	sp, #28
   148fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148fc:	9a02      	ldr	r2, [sp, #8]
   148fe:	2a00      	cmp	r2, #0
   14900:	d000      	beq.n	14904 <_strtoul_l.isra.0+0xf0>
   14902:	4240      	negs	r0, r0
   14904:	9a01      	ldr	r2, [sp, #4]
   14906:	2a00      	cmp	r2, #0
   14908:	d0f6      	beq.n	148f8 <_strtoul_l.isra.0+0xe4>
   1490a:	9a03      	ldr	r2, [sp, #12]
   1490c:	2b00      	cmp	r3, #0
   1490e:	d000      	beq.n	14912 <_strtoul_l.isra.0+0xfe>
   14910:	1e6a      	subs	r2, r5, #1
   14912:	9b01      	ldr	r3, [sp, #4]
   14914:	601a      	str	r2, [r3, #0]
   14916:	e7ef      	b.n	148f8 <_strtoul_l.isra.0+0xe4>
   14918:	2430      	movs	r4, #48	; 0x30
   1491a:	2f00      	cmp	r7, #0
   1491c:	d1aa      	bne.n	14874 <_strtoul_l.isra.0+0x60>
   1491e:	3708      	adds	r7, #8
   14920:	e7a8      	b.n	14874 <_strtoul_l.isra.0+0x60>
	...

00014924 <strtoul>:
   14924:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14926:	0013      	movs	r3, r2
   14928:	4a06      	ldr	r2, [pc, #24]	; (14944 <strtoul+0x20>)
   1492a:	0005      	movs	r5, r0
   1492c:	6810      	ldr	r0, [r2, #0]
   1492e:	6a04      	ldr	r4, [r0, #32]
   14930:	2c00      	cmp	r4, #0
   14932:	d100      	bne.n	14936 <strtoul+0x12>
   14934:	4c04      	ldr	r4, [pc, #16]	; (14948 <strtoul+0x24>)
   14936:	000a      	movs	r2, r1
   14938:	9400      	str	r4, [sp, #0]
   1493a:	0029      	movs	r1, r5
   1493c:	f7ff ff6a 	bl	14814 <_strtoul_l.isra.0>
   14940:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   14942:	46c0      	nop			; (mov r8, r8)
   14944:	20000100 	.word	0x20000100
   14948:	20000164 	.word	0x20000164

0001494c <_vsniprintf_r>:
   1494c:	b530      	push	{r4, r5, lr}
   1494e:	0014      	movs	r4, r2
   14950:	b09b      	sub	sp, #108	; 0x6c
   14952:	0005      	movs	r5, r0
   14954:	001a      	movs	r2, r3
   14956:	2c00      	cmp	r4, #0
   14958:	da05      	bge.n	14966 <_vsniprintf_r+0x1a>
   1495a:	238b      	movs	r3, #139	; 0x8b
   1495c:	6003      	str	r3, [r0, #0]
   1495e:	2001      	movs	r0, #1
   14960:	4240      	negs	r0, r0
   14962:	b01b      	add	sp, #108	; 0x6c
   14964:	bd30      	pop	{r4, r5, pc}
   14966:	2382      	movs	r3, #130	; 0x82
   14968:	4668      	mov	r0, sp
   1496a:	009b      	lsls	r3, r3, #2
   1496c:	8183      	strh	r3, [r0, #12]
   1496e:	2300      	movs	r3, #0
   14970:	9100      	str	r1, [sp, #0]
   14972:	9104      	str	r1, [sp, #16]
   14974:	429c      	cmp	r4, r3
   14976:	d000      	beq.n	1497a <_vsniprintf_r+0x2e>
   14978:	1e63      	subs	r3, r4, #1
   1497a:	9302      	str	r3, [sp, #8]
   1497c:	9305      	str	r3, [sp, #20]
   1497e:	2301      	movs	r3, #1
   14980:	4669      	mov	r1, sp
   14982:	425b      	negs	r3, r3
   14984:	81cb      	strh	r3, [r1, #14]
   14986:	0028      	movs	r0, r5
   14988:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1498a:	f000 fb63 	bl	15054 <_svfiprintf_r>
   1498e:	1c43      	adds	r3, r0, #1
   14990:	da01      	bge.n	14996 <_vsniprintf_r+0x4a>
   14992:	238b      	movs	r3, #139	; 0x8b
   14994:	602b      	str	r3, [r5, #0]
   14996:	2c00      	cmp	r4, #0
   14998:	d0e3      	beq.n	14962 <_vsniprintf_r+0x16>
   1499a:	2300      	movs	r3, #0
   1499c:	9a00      	ldr	r2, [sp, #0]
   1499e:	7013      	strb	r3, [r2, #0]
   149a0:	e7df      	b.n	14962 <_vsniprintf_r+0x16>
	...

000149a4 <vsniprintf>:
   149a4:	b507      	push	{r0, r1, r2, lr}
   149a6:	9300      	str	r3, [sp, #0]
   149a8:	0013      	movs	r3, r2
   149aa:	000a      	movs	r2, r1
   149ac:	0001      	movs	r1, r0
   149ae:	4802      	ldr	r0, [pc, #8]	; (149b8 <vsniprintf+0x14>)
   149b0:	6800      	ldr	r0, [r0, #0]
   149b2:	f7ff ffcb 	bl	1494c <_vsniprintf_r>
   149b6:	bd0e      	pop	{r1, r2, r3, pc}
   149b8:	20000100 	.word	0x20000100

000149bc <__swbuf_r>:
   149bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149be:	0005      	movs	r5, r0
   149c0:	000e      	movs	r6, r1
   149c2:	0014      	movs	r4, r2
   149c4:	2800      	cmp	r0, #0
   149c6:	d004      	beq.n	149d2 <__swbuf_r+0x16>
   149c8:	6983      	ldr	r3, [r0, #24]
   149ca:	2b00      	cmp	r3, #0
   149cc:	d101      	bne.n	149d2 <__swbuf_r+0x16>
   149ce:	f000 f9b9 	bl	14d44 <__sinit>
   149d2:	4b22      	ldr	r3, [pc, #136]	; (14a5c <__swbuf_r+0xa0>)
   149d4:	429c      	cmp	r4, r3
   149d6:	d12d      	bne.n	14a34 <__swbuf_r+0x78>
   149d8:	686c      	ldr	r4, [r5, #4]
   149da:	69a3      	ldr	r3, [r4, #24]
   149dc:	60a3      	str	r3, [r4, #8]
   149de:	89a3      	ldrh	r3, [r4, #12]
   149e0:	071b      	lsls	r3, r3, #28
   149e2:	d531      	bpl.n	14a48 <__swbuf_r+0x8c>
   149e4:	6923      	ldr	r3, [r4, #16]
   149e6:	2b00      	cmp	r3, #0
   149e8:	d02e      	beq.n	14a48 <__swbuf_r+0x8c>
   149ea:	6823      	ldr	r3, [r4, #0]
   149ec:	6922      	ldr	r2, [r4, #16]
   149ee:	b2f7      	uxtb	r7, r6
   149f0:	1a98      	subs	r0, r3, r2
   149f2:	6963      	ldr	r3, [r4, #20]
   149f4:	b2f6      	uxtb	r6, r6
   149f6:	4298      	cmp	r0, r3
   149f8:	db05      	blt.n	14a06 <__swbuf_r+0x4a>
   149fa:	0021      	movs	r1, r4
   149fc:	0028      	movs	r0, r5
   149fe:	f000 f933 	bl	14c68 <_fflush_r>
   14a02:	2800      	cmp	r0, #0
   14a04:	d126      	bne.n	14a54 <__swbuf_r+0x98>
   14a06:	68a3      	ldr	r3, [r4, #8]
   14a08:	3001      	adds	r0, #1
   14a0a:	3b01      	subs	r3, #1
   14a0c:	60a3      	str	r3, [r4, #8]
   14a0e:	6823      	ldr	r3, [r4, #0]
   14a10:	1c5a      	adds	r2, r3, #1
   14a12:	6022      	str	r2, [r4, #0]
   14a14:	701f      	strb	r7, [r3, #0]
   14a16:	6963      	ldr	r3, [r4, #20]
   14a18:	4298      	cmp	r0, r3
   14a1a:	d004      	beq.n	14a26 <__swbuf_r+0x6a>
   14a1c:	89a3      	ldrh	r3, [r4, #12]
   14a1e:	07db      	lsls	r3, r3, #31
   14a20:	d51a      	bpl.n	14a58 <__swbuf_r+0x9c>
   14a22:	2e0a      	cmp	r6, #10
   14a24:	d118      	bne.n	14a58 <__swbuf_r+0x9c>
   14a26:	0021      	movs	r1, r4
   14a28:	0028      	movs	r0, r5
   14a2a:	f000 f91d 	bl	14c68 <_fflush_r>
   14a2e:	2800      	cmp	r0, #0
   14a30:	d012      	beq.n	14a58 <__swbuf_r+0x9c>
   14a32:	e00f      	b.n	14a54 <__swbuf_r+0x98>
   14a34:	4b0a      	ldr	r3, [pc, #40]	; (14a60 <__swbuf_r+0xa4>)
   14a36:	429c      	cmp	r4, r3
   14a38:	d101      	bne.n	14a3e <__swbuf_r+0x82>
   14a3a:	68ac      	ldr	r4, [r5, #8]
   14a3c:	e7cd      	b.n	149da <__swbuf_r+0x1e>
   14a3e:	4b09      	ldr	r3, [pc, #36]	; (14a64 <__swbuf_r+0xa8>)
   14a40:	429c      	cmp	r4, r3
   14a42:	d1ca      	bne.n	149da <__swbuf_r+0x1e>
   14a44:	68ec      	ldr	r4, [r5, #12]
   14a46:	e7c8      	b.n	149da <__swbuf_r+0x1e>
   14a48:	0021      	movs	r1, r4
   14a4a:	0028      	movs	r0, r5
   14a4c:	f000 f80c 	bl	14a68 <__swsetup_r>
   14a50:	2800      	cmp	r0, #0
   14a52:	d0ca      	beq.n	149ea <__swbuf_r+0x2e>
   14a54:	2601      	movs	r6, #1
   14a56:	4276      	negs	r6, r6
   14a58:	0030      	movs	r0, r6
   14a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a5c:	000194ac 	.word	0x000194ac
   14a60:	000194cc 	.word	0x000194cc
   14a64:	0001948c 	.word	0x0001948c

00014a68 <__swsetup_r>:
   14a68:	4b36      	ldr	r3, [pc, #216]	; (14b44 <__swsetup_r+0xdc>)
   14a6a:	b570      	push	{r4, r5, r6, lr}
   14a6c:	681d      	ldr	r5, [r3, #0]
   14a6e:	0006      	movs	r6, r0
   14a70:	000c      	movs	r4, r1
   14a72:	2d00      	cmp	r5, #0
   14a74:	d005      	beq.n	14a82 <__swsetup_r+0x1a>
   14a76:	69ab      	ldr	r3, [r5, #24]
   14a78:	2b00      	cmp	r3, #0
   14a7a:	d102      	bne.n	14a82 <__swsetup_r+0x1a>
   14a7c:	0028      	movs	r0, r5
   14a7e:	f000 f961 	bl	14d44 <__sinit>
   14a82:	4b31      	ldr	r3, [pc, #196]	; (14b48 <__swsetup_r+0xe0>)
   14a84:	429c      	cmp	r4, r3
   14a86:	d10f      	bne.n	14aa8 <__swsetup_r+0x40>
   14a88:	686c      	ldr	r4, [r5, #4]
   14a8a:	230c      	movs	r3, #12
   14a8c:	5ee2      	ldrsh	r2, [r4, r3]
   14a8e:	b293      	uxth	r3, r2
   14a90:	0719      	lsls	r1, r3, #28
   14a92:	d42d      	bmi.n	14af0 <__swsetup_r+0x88>
   14a94:	06d9      	lsls	r1, r3, #27
   14a96:	d411      	bmi.n	14abc <__swsetup_r+0x54>
   14a98:	2309      	movs	r3, #9
   14a9a:	2001      	movs	r0, #1
   14a9c:	6033      	str	r3, [r6, #0]
   14a9e:	3337      	adds	r3, #55	; 0x37
   14aa0:	4313      	orrs	r3, r2
   14aa2:	81a3      	strh	r3, [r4, #12]
   14aa4:	4240      	negs	r0, r0
   14aa6:	bd70      	pop	{r4, r5, r6, pc}
   14aa8:	4b28      	ldr	r3, [pc, #160]	; (14b4c <__swsetup_r+0xe4>)
   14aaa:	429c      	cmp	r4, r3
   14aac:	d101      	bne.n	14ab2 <__swsetup_r+0x4a>
   14aae:	68ac      	ldr	r4, [r5, #8]
   14ab0:	e7eb      	b.n	14a8a <__swsetup_r+0x22>
   14ab2:	4b27      	ldr	r3, [pc, #156]	; (14b50 <__swsetup_r+0xe8>)
   14ab4:	429c      	cmp	r4, r3
   14ab6:	d1e8      	bne.n	14a8a <__swsetup_r+0x22>
   14ab8:	68ec      	ldr	r4, [r5, #12]
   14aba:	e7e6      	b.n	14a8a <__swsetup_r+0x22>
   14abc:	075b      	lsls	r3, r3, #29
   14abe:	d513      	bpl.n	14ae8 <__swsetup_r+0x80>
   14ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14ac2:	2900      	cmp	r1, #0
   14ac4:	d008      	beq.n	14ad8 <__swsetup_r+0x70>
   14ac6:	0023      	movs	r3, r4
   14ac8:	3344      	adds	r3, #68	; 0x44
   14aca:	4299      	cmp	r1, r3
   14acc:	d002      	beq.n	14ad4 <__swsetup_r+0x6c>
   14ace:	0030      	movs	r0, r6
   14ad0:	f7ff fbdc 	bl	1428c <_free_r>
   14ad4:	2300      	movs	r3, #0
   14ad6:	6363      	str	r3, [r4, #52]	; 0x34
   14ad8:	2224      	movs	r2, #36	; 0x24
   14ada:	89a3      	ldrh	r3, [r4, #12]
   14adc:	4393      	bics	r3, r2
   14ade:	81a3      	strh	r3, [r4, #12]
   14ae0:	2300      	movs	r3, #0
   14ae2:	6063      	str	r3, [r4, #4]
   14ae4:	6923      	ldr	r3, [r4, #16]
   14ae6:	6023      	str	r3, [r4, #0]
   14ae8:	2308      	movs	r3, #8
   14aea:	89a2      	ldrh	r2, [r4, #12]
   14aec:	4313      	orrs	r3, r2
   14aee:	81a3      	strh	r3, [r4, #12]
   14af0:	6923      	ldr	r3, [r4, #16]
   14af2:	2b00      	cmp	r3, #0
   14af4:	d10b      	bne.n	14b0e <__swsetup_r+0xa6>
   14af6:	21a0      	movs	r1, #160	; 0xa0
   14af8:	2280      	movs	r2, #128	; 0x80
   14afa:	89a3      	ldrh	r3, [r4, #12]
   14afc:	0089      	lsls	r1, r1, #2
   14afe:	0092      	lsls	r2, r2, #2
   14b00:	400b      	ands	r3, r1
   14b02:	4293      	cmp	r3, r2
   14b04:	d003      	beq.n	14b0e <__swsetup_r+0xa6>
   14b06:	0021      	movs	r1, r4
   14b08:	0030      	movs	r0, r6
   14b0a:	f000 f9e9 	bl	14ee0 <__smakebuf_r>
   14b0e:	2301      	movs	r3, #1
   14b10:	89a2      	ldrh	r2, [r4, #12]
   14b12:	4013      	ands	r3, r2
   14b14:	d011      	beq.n	14b3a <__swsetup_r+0xd2>
   14b16:	2300      	movs	r3, #0
   14b18:	60a3      	str	r3, [r4, #8]
   14b1a:	6963      	ldr	r3, [r4, #20]
   14b1c:	425b      	negs	r3, r3
   14b1e:	61a3      	str	r3, [r4, #24]
   14b20:	2000      	movs	r0, #0
   14b22:	6923      	ldr	r3, [r4, #16]
   14b24:	4283      	cmp	r3, r0
   14b26:	d1be      	bne.n	14aa6 <__swsetup_r+0x3e>
   14b28:	230c      	movs	r3, #12
   14b2a:	5ee2      	ldrsh	r2, [r4, r3]
   14b2c:	0613      	lsls	r3, r2, #24
   14b2e:	d5ba      	bpl.n	14aa6 <__swsetup_r+0x3e>
   14b30:	2340      	movs	r3, #64	; 0x40
   14b32:	4313      	orrs	r3, r2
   14b34:	81a3      	strh	r3, [r4, #12]
   14b36:	3801      	subs	r0, #1
   14b38:	e7b5      	b.n	14aa6 <__swsetup_r+0x3e>
   14b3a:	0792      	lsls	r2, r2, #30
   14b3c:	d400      	bmi.n	14b40 <__swsetup_r+0xd8>
   14b3e:	6963      	ldr	r3, [r4, #20]
   14b40:	60a3      	str	r3, [r4, #8]
   14b42:	e7ed      	b.n	14b20 <__swsetup_r+0xb8>
   14b44:	20000100 	.word	0x20000100
   14b48:	000194ac 	.word	0x000194ac
   14b4c:	000194cc 	.word	0x000194cc
   14b50:	0001948c 	.word	0x0001948c

00014b54 <__sflush_r>:
   14b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14b56:	898a      	ldrh	r2, [r1, #12]
   14b58:	0005      	movs	r5, r0
   14b5a:	000c      	movs	r4, r1
   14b5c:	0713      	lsls	r3, r2, #28
   14b5e:	d460      	bmi.n	14c22 <__sflush_r+0xce>
   14b60:	684b      	ldr	r3, [r1, #4]
   14b62:	2b00      	cmp	r3, #0
   14b64:	dc04      	bgt.n	14b70 <__sflush_r+0x1c>
   14b66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   14b68:	2b00      	cmp	r3, #0
   14b6a:	dc01      	bgt.n	14b70 <__sflush_r+0x1c>
   14b6c:	2000      	movs	r0, #0
   14b6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14b70:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   14b72:	2f00      	cmp	r7, #0
   14b74:	d0fa      	beq.n	14b6c <__sflush_r+0x18>
   14b76:	2300      	movs	r3, #0
   14b78:	682e      	ldr	r6, [r5, #0]
   14b7a:	602b      	str	r3, [r5, #0]
   14b7c:	2380      	movs	r3, #128	; 0x80
   14b7e:	015b      	lsls	r3, r3, #5
   14b80:	401a      	ands	r2, r3
   14b82:	d034      	beq.n	14bee <__sflush_r+0x9a>
   14b84:	6d60      	ldr	r0, [r4, #84]	; 0x54
   14b86:	89a3      	ldrh	r3, [r4, #12]
   14b88:	075b      	lsls	r3, r3, #29
   14b8a:	d506      	bpl.n	14b9a <__sflush_r+0x46>
   14b8c:	6863      	ldr	r3, [r4, #4]
   14b8e:	1ac0      	subs	r0, r0, r3
   14b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14b92:	2b00      	cmp	r3, #0
   14b94:	d001      	beq.n	14b9a <__sflush_r+0x46>
   14b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
   14b98:	1ac0      	subs	r0, r0, r3
   14b9a:	0002      	movs	r2, r0
   14b9c:	6a21      	ldr	r1, [r4, #32]
   14b9e:	2300      	movs	r3, #0
   14ba0:	0028      	movs	r0, r5
   14ba2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   14ba4:	47b8      	blx	r7
   14ba6:	89a1      	ldrh	r1, [r4, #12]
   14ba8:	1c43      	adds	r3, r0, #1
   14baa:	d106      	bne.n	14bba <__sflush_r+0x66>
   14bac:	682b      	ldr	r3, [r5, #0]
   14bae:	2b1d      	cmp	r3, #29
   14bb0:	d831      	bhi.n	14c16 <__sflush_r+0xc2>
   14bb2:	4a2c      	ldr	r2, [pc, #176]	; (14c64 <__sflush_r+0x110>)
   14bb4:	40da      	lsrs	r2, r3
   14bb6:	07d3      	lsls	r3, r2, #31
   14bb8:	d52d      	bpl.n	14c16 <__sflush_r+0xc2>
   14bba:	2300      	movs	r3, #0
   14bbc:	6063      	str	r3, [r4, #4]
   14bbe:	6923      	ldr	r3, [r4, #16]
   14bc0:	6023      	str	r3, [r4, #0]
   14bc2:	04cb      	lsls	r3, r1, #19
   14bc4:	d505      	bpl.n	14bd2 <__sflush_r+0x7e>
   14bc6:	1c43      	adds	r3, r0, #1
   14bc8:	d102      	bne.n	14bd0 <__sflush_r+0x7c>
   14bca:	682b      	ldr	r3, [r5, #0]
   14bcc:	2b00      	cmp	r3, #0
   14bce:	d100      	bne.n	14bd2 <__sflush_r+0x7e>
   14bd0:	6560      	str	r0, [r4, #84]	; 0x54
   14bd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14bd4:	602e      	str	r6, [r5, #0]
   14bd6:	2900      	cmp	r1, #0
   14bd8:	d0c8      	beq.n	14b6c <__sflush_r+0x18>
   14bda:	0023      	movs	r3, r4
   14bdc:	3344      	adds	r3, #68	; 0x44
   14bde:	4299      	cmp	r1, r3
   14be0:	d002      	beq.n	14be8 <__sflush_r+0x94>
   14be2:	0028      	movs	r0, r5
   14be4:	f7ff fb52 	bl	1428c <_free_r>
   14be8:	2000      	movs	r0, #0
   14bea:	6360      	str	r0, [r4, #52]	; 0x34
   14bec:	e7bf      	b.n	14b6e <__sflush_r+0x1a>
   14bee:	2301      	movs	r3, #1
   14bf0:	6a21      	ldr	r1, [r4, #32]
   14bf2:	0028      	movs	r0, r5
   14bf4:	47b8      	blx	r7
   14bf6:	1c43      	adds	r3, r0, #1
   14bf8:	d1c5      	bne.n	14b86 <__sflush_r+0x32>
   14bfa:	682b      	ldr	r3, [r5, #0]
   14bfc:	2b00      	cmp	r3, #0
   14bfe:	d0c2      	beq.n	14b86 <__sflush_r+0x32>
   14c00:	2b1d      	cmp	r3, #29
   14c02:	d001      	beq.n	14c08 <__sflush_r+0xb4>
   14c04:	2b16      	cmp	r3, #22
   14c06:	d101      	bne.n	14c0c <__sflush_r+0xb8>
   14c08:	602e      	str	r6, [r5, #0]
   14c0a:	e7af      	b.n	14b6c <__sflush_r+0x18>
   14c0c:	2340      	movs	r3, #64	; 0x40
   14c0e:	89a2      	ldrh	r2, [r4, #12]
   14c10:	4313      	orrs	r3, r2
   14c12:	81a3      	strh	r3, [r4, #12]
   14c14:	e7ab      	b.n	14b6e <__sflush_r+0x1a>
   14c16:	2340      	movs	r3, #64	; 0x40
   14c18:	430b      	orrs	r3, r1
   14c1a:	2001      	movs	r0, #1
   14c1c:	81a3      	strh	r3, [r4, #12]
   14c1e:	4240      	negs	r0, r0
   14c20:	e7a5      	b.n	14b6e <__sflush_r+0x1a>
   14c22:	690f      	ldr	r7, [r1, #16]
   14c24:	2f00      	cmp	r7, #0
   14c26:	d0a1      	beq.n	14b6c <__sflush_r+0x18>
   14c28:	680b      	ldr	r3, [r1, #0]
   14c2a:	600f      	str	r7, [r1, #0]
   14c2c:	1bdb      	subs	r3, r3, r7
   14c2e:	9301      	str	r3, [sp, #4]
   14c30:	2300      	movs	r3, #0
   14c32:	0792      	lsls	r2, r2, #30
   14c34:	d100      	bne.n	14c38 <__sflush_r+0xe4>
   14c36:	694b      	ldr	r3, [r1, #20]
   14c38:	60a3      	str	r3, [r4, #8]
   14c3a:	9b01      	ldr	r3, [sp, #4]
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	dc00      	bgt.n	14c42 <__sflush_r+0xee>
   14c40:	e794      	b.n	14b6c <__sflush_r+0x18>
   14c42:	9b01      	ldr	r3, [sp, #4]
   14c44:	003a      	movs	r2, r7
   14c46:	6a21      	ldr	r1, [r4, #32]
   14c48:	0028      	movs	r0, r5
   14c4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   14c4c:	47b0      	blx	r6
   14c4e:	2800      	cmp	r0, #0
   14c50:	dc03      	bgt.n	14c5a <__sflush_r+0x106>
   14c52:	2340      	movs	r3, #64	; 0x40
   14c54:	89a2      	ldrh	r2, [r4, #12]
   14c56:	4313      	orrs	r3, r2
   14c58:	e7df      	b.n	14c1a <__sflush_r+0xc6>
   14c5a:	9b01      	ldr	r3, [sp, #4]
   14c5c:	183f      	adds	r7, r7, r0
   14c5e:	1a1b      	subs	r3, r3, r0
   14c60:	9301      	str	r3, [sp, #4]
   14c62:	e7ea      	b.n	14c3a <__sflush_r+0xe6>
   14c64:	20400001 	.word	0x20400001

00014c68 <_fflush_r>:
   14c68:	690b      	ldr	r3, [r1, #16]
   14c6a:	b570      	push	{r4, r5, r6, lr}
   14c6c:	0005      	movs	r5, r0
   14c6e:	000c      	movs	r4, r1
   14c70:	2b00      	cmp	r3, #0
   14c72:	d101      	bne.n	14c78 <_fflush_r+0x10>
   14c74:	2000      	movs	r0, #0
   14c76:	bd70      	pop	{r4, r5, r6, pc}
   14c78:	2800      	cmp	r0, #0
   14c7a:	d004      	beq.n	14c86 <_fflush_r+0x1e>
   14c7c:	6983      	ldr	r3, [r0, #24]
   14c7e:	2b00      	cmp	r3, #0
   14c80:	d101      	bne.n	14c86 <_fflush_r+0x1e>
   14c82:	f000 f85f 	bl	14d44 <__sinit>
   14c86:	4b0b      	ldr	r3, [pc, #44]	; (14cb4 <_fflush_r+0x4c>)
   14c88:	429c      	cmp	r4, r3
   14c8a:	d109      	bne.n	14ca0 <_fflush_r+0x38>
   14c8c:	686c      	ldr	r4, [r5, #4]
   14c8e:	220c      	movs	r2, #12
   14c90:	5ea3      	ldrsh	r3, [r4, r2]
   14c92:	2b00      	cmp	r3, #0
   14c94:	d0ee      	beq.n	14c74 <_fflush_r+0xc>
   14c96:	0021      	movs	r1, r4
   14c98:	0028      	movs	r0, r5
   14c9a:	f7ff ff5b 	bl	14b54 <__sflush_r>
   14c9e:	e7ea      	b.n	14c76 <_fflush_r+0xe>
   14ca0:	4b05      	ldr	r3, [pc, #20]	; (14cb8 <_fflush_r+0x50>)
   14ca2:	429c      	cmp	r4, r3
   14ca4:	d101      	bne.n	14caa <_fflush_r+0x42>
   14ca6:	68ac      	ldr	r4, [r5, #8]
   14ca8:	e7f1      	b.n	14c8e <_fflush_r+0x26>
   14caa:	4b04      	ldr	r3, [pc, #16]	; (14cbc <_fflush_r+0x54>)
   14cac:	429c      	cmp	r4, r3
   14cae:	d1ee      	bne.n	14c8e <_fflush_r+0x26>
   14cb0:	68ec      	ldr	r4, [r5, #12]
   14cb2:	e7ec      	b.n	14c8e <_fflush_r+0x26>
   14cb4:	000194ac 	.word	0x000194ac
   14cb8:	000194cc 	.word	0x000194cc
   14cbc:	0001948c 	.word	0x0001948c

00014cc0 <_cleanup_r>:
   14cc0:	b510      	push	{r4, lr}
   14cc2:	4902      	ldr	r1, [pc, #8]	; (14ccc <_cleanup_r+0xc>)
   14cc4:	f000 f8b2 	bl	14e2c <_fwalk_reent>
   14cc8:	bd10      	pop	{r4, pc}
   14cca:	46c0      	nop			; (mov r8, r8)
   14ccc:	00014c69 	.word	0x00014c69

00014cd0 <std.isra.0>:
   14cd0:	2300      	movs	r3, #0
   14cd2:	b510      	push	{r4, lr}
   14cd4:	0004      	movs	r4, r0
   14cd6:	6003      	str	r3, [r0, #0]
   14cd8:	6043      	str	r3, [r0, #4]
   14cda:	6083      	str	r3, [r0, #8]
   14cdc:	8181      	strh	r1, [r0, #12]
   14cde:	6643      	str	r3, [r0, #100]	; 0x64
   14ce0:	81c2      	strh	r2, [r0, #14]
   14ce2:	6103      	str	r3, [r0, #16]
   14ce4:	6143      	str	r3, [r0, #20]
   14ce6:	6183      	str	r3, [r0, #24]
   14ce8:	0019      	movs	r1, r3
   14cea:	2208      	movs	r2, #8
   14cec:	305c      	adds	r0, #92	; 0x5c
   14cee:	f7ff fac4 	bl	1427a <memset>
   14cf2:	4b05      	ldr	r3, [pc, #20]	; (14d08 <std.isra.0+0x38>)
   14cf4:	6224      	str	r4, [r4, #32]
   14cf6:	6263      	str	r3, [r4, #36]	; 0x24
   14cf8:	4b04      	ldr	r3, [pc, #16]	; (14d0c <std.isra.0+0x3c>)
   14cfa:	62a3      	str	r3, [r4, #40]	; 0x28
   14cfc:	4b04      	ldr	r3, [pc, #16]	; (14d10 <std.isra.0+0x40>)
   14cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
   14d00:	4b04      	ldr	r3, [pc, #16]	; (14d14 <std.isra.0+0x44>)
   14d02:	6323      	str	r3, [r4, #48]	; 0x30
   14d04:	bd10      	pop	{r4, pc}
   14d06:	46c0      	nop			; (mov r8, r8)
   14d08:	0001556d 	.word	0x0001556d
   14d0c:	00015595 	.word	0x00015595
   14d10:	000155cd 	.word	0x000155cd
   14d14:	000155f9 	.word	0x000155f9

00014d18 <__sfmoreglue>:
   14d18:	b570      	push	{r4, r5, r6, lr}
   14d1a:	2568      	movs	r5, #104	; 0x68
   14d1c:	1e4a      	subs	r2, r1, #1
   14d1e:	4355      	muls	r5, r2
   14d20:	000e      	movs	r6, r1
   14d22:	0029      	movs	r1, r5
   14d24:	3174      	adds	r1, #116	; 0x74
   14d26:	f7ff fafb 	bl	14320 <_malloc_r>
   14d2a:	1e04      	subs	r4, r0, #0
   14d2c:	d008      	beq.n	14d40 <__sfmoreglue+0x28>
   14d2e:	2100      	movs	r1, #0
   14d30:	002a      	movs	r2, r5
   14d32:	6001      	str	r1, [r0, #0]
   14d34:	6046      	str	r6, [r0, #4]
   14d36:	300c      	adds	r0, #12
   14d38:	60a0      	str	r0, [r4, #8]
   14d3a:	3268      	adds	r2, #104	; 0x68
   14d3c:	f7ff fa9d 	bl	1427a <memset>
   14d40:	0020      	movs	r0, r4
   14d42:	bd70      	pop	{r4, r5, r6, pc}

00014d44 <__sinit>:
   14d44:	6983      	ldr	r3, [r0, #24]
   14d46:	b513      	push	{r0, r1, r4, lr}
   14d48:	0004      	movs	r4, r0
   14d4a:	2b00      	cmp	r3, #0
   14d4c:	d128      	bne.n	14da0 <__sinit+0x5c>
   14d4e:	6483      	str	r3, [r0, #72]	; 0x48
   14d50:	64c3      	str	r3, [r0, #76]	; 0x4c
   14d52:	6503      	str	r3, [r0, #80]	; 0x50
   14d54:	4b13      	ldr	r3, [pc, #76]	; (14da4 <__sinit+0x60>)
   14d56:	4a14      	ldr	r2, [pc, #80]	; (14da8 <__sinit+0x64>)
   14d58:	681b      	ldr	r3, [r3, #0]
   14d5a:	6282      	str	r2, [r0, #40]	; 0x28
   14d5c:	9301      	str	r3, [sp, #4]
   14d5e:	4298      	cmp	r0, r3
   14d60:	d101      	bne.n	14d66 <__sinit+0x22>
   14d62:	2301      	movs	r3, #1
   14d64:	6183      	str	r3, [r0, #24]
   14d66:	0020      	movs	r0, r4
   14d68:	f000 f820 	bl	14dac <__sfp>
   14d6c:	6060      	str	r0, [r4, #4]
   14d6e:	0020      	movs	r0, r4
   14d70:	f000 f81c 	bl	14dac <__sfp>
   14d74:	60a0      	str	r0, [r4, #8]
   14d76:	0020      	movs	r0, r4
   14d78:	f000 f818 	bl	14dac <__sfp>
   14d7c:	2200      	movs	r2, #0
   14d7e:	60e0      	str	r0, [r4, #12]
   14d80:	2104      	movs	r1, #4
   14d82:	6860      	ldr	r0, [r4, #4]
   14d84:	f7ff ffa4 	bl	14cd0 <std.isra.0>
   14d88:	2201      	movs	r2, #1
   14d8a:	2109      	movs	r1, #9
   14d8c:	68a0      	ldr	r0, [r4, #8]
   14d8e:	f7ff ff9f 	bl	14cd0 <std.isra.0>
   14d92:	2202      	movs	r2, #2
   14d94:	2112      	movs	r1, #18
   14d96:	68e0      	ldr	r0, [r4, #12]
   14d98:	f7ff ff9a 	bl	14cd0 <std.isra.0>
   14d9c:	2301      	movs	r3, #1
   14d9e:	61a3      	str	r3, [r4, #24]
   14da0:	bd13      	pop	{r0, r1, r4, pc}
   14da2:	46c0      	nop			; (mov r8, r8)
   14da4:	00019488 	.word	0x00019488
   14da8:	00014cc1 	.word	0x00014cc1

00014dac <__sfp>:
   14dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dae:	4b1e      	ldr	r3, [pc, #120]	; (14e28 <__sfp+0x7c>)
   14db0:	0007      	movs	r7, r0
   14db2:	681e      	ldr	r6, [r3, #0]
   14db4:	69b3      	ldr	r3, [r6, #24]
   14db6:	2b00      	cmp	r3, #0
   14db8:	d102      	bne.n	14dc0 <__sfp+0x14>
   14dba:	0030      	movs	r0, r6
   14dbc:	f7ff ffc2 	bl	14d44 <__sinit>
   14dc0:	3648      	adds	r6, #72	; 0x48
   14dc2:	68b4      	ldr	r4, [r6, #8]
   14dc4:	6873      	ldr	r3, [r6, #4]
   14dc6:	3b01      	subs	r3, #1
   14dc8:	d504      	bpl.n	14dd4 <__sfp+0x28>
   14dca:	6833      	ldr	r3, [r6, #0]
   14dcc:	2b00      	cmp	r3, #0
   14dce:	d007      	beq.n	14de0 <__sfp+0x34>
   14dd0:	6836      	ldr	r6, [r6, #0]
   14dd2:	e7f6      	b.n	14dc2 <__sfp+0x16>
   14dd4:	220c      	movs	r2, #12
   14dd6:	5ea5      	ldrsh	r5, [r4, r2]
   14dd8:	2d00      	cmp	r5, #0
   14dda:	d00d      	beq.n	14df8 <__sfp+0x4c>
   14ddc:	3468      	adds	r4, #104	; 0x68
   14dde:	e7f2      	b.n	14dc6 <__sfp+0x1a>
   14de0:	2104      	movs	r1, #4
   14de2:	0038      	movs	r0, r7
   14de4:	f7ff ff98 	bl	14d18 <__sfmoreglue>
   14de8:	6030      	str	r0, [r6, #0]
   14dea:	2800      	cmp	r0, #0
   14dec:	d1f0      	bne.n	14dd0 <__sfp+0x24>
   14dee:	230c      	movs	r3, #12
   14df0:	0004      	movs	r4, r0
   14df2:	603b      	str	r3, [r7, #0]
   14df4:	0020      	movs	r0, r4
   14df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14df8:	2301      	movs	r3, #1
   14dfa:	0020      	movs	r0, r4
   14dfc:	425b      	negs	r3, r3
   14dfe:	81e3      	strh	r3, [r4, #14]
   14e00:	3302      	adds	r3, #2
   14e02:	81a3      	strh	r3, [r4, #12]
   14e04:	6665      	str	r5, [r4, #100]	; 0x64
   14e06:	6025      	str	r5, [r4, #0]
   14e08:	60a5      	str	r5, [r4, #8]
   14e0a:	6065      	str	r5, [r4, #4]
   14e0c:	6125      	str	r5, [r4, #16]
   14e0e:	6165      	str	r5, [r4, #20]
   14e10:	61a5      	str	r5, [r4, #24]
   14e12:	2208      	movs	r2, #8
   14e14:	0029      	movs	r1, r5
   14e16:	305c      	adds	r0, #92	; 0x5c
   14e18:	f7ff fa2f 	bl	1427a <memset>
   14e1c:	6365      	str	r5, [r4, #52]	; 0x34
   14e1e:	63a5      	str	r5, [r4, #56]	; 0x38
   14e20:	64a5      	str	r5, [r4, #72]	; 0x48
   14e22:	64e5      	str	r5, [r4, #76]	; 0x4c
   14e24:	e7e6      	b.n	14df4 <__sfp+0x48>
   14e26:	46c0      	nop			; (mov r8, r8)
   14e28:	00019488 	.word	0x00019488

00014e2c <_fwalk_reent>:
   14e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14e2e:	0004      	movs	r4, r0
   14e30:	0007      	movs	r7, r0
   14e32:	2600      	movs	r6, #0
   14e34:	9101      	str	r1, [sp, #4]
   14e36:	3448      	adds	r4, #72	; 0x48
   14e38:	2c00      	cmp	r4, #0
   14e3a:	d101      	bne.n	14e40 <_fwalk_reent+0x14>
   14e3c:	0030      	movs	r0, r6
   14e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14e40:	6863      	ldr	r3, [r4, #4]
   14e42:	68a5      	ldr	r5, [r4, #8]
   14e44:	9300      	str	r3, [sp, #0]
   14e46:	9b00      	ldr	r3, [sp, #0]
   14e48:	3b01      	subs	r3, #1
   14e4a:	9300      	str	r3, [sp, #0]
   14e4c:	d501      	bpl.n	14e52 <_fwalk_reent+0x26>
   14e4e:	6824      	ldr	r4, [r4, #0]
   14e50:	e7f2      	b.n	14e38 <_fwalk_reent+0xc>
   14e52:	89ab      	ldrh	r3, [r5, #12]
   14e54:	2b01      	cmp	r3, #1
   14e56:	d908      	bls.n	14e6a <_fwalk_reent+0x3e>
   14e58:	220e      	movs	r2, #14
   14e5a:	5eab      	ldrsh	r3, [r5, r2]
   14e5c:	3301      	adds	r3, #1
   14e5e:	d004      	beq.n	14e6a <_fwalk_reent+0x3e>
   14e60:	0029      	movs	r1, r5
   14e62:	0038      	movs	r0, r7
   14e64:	9b01      	ldr	r3, [sp, #4]
   14e66:	4798      	blx	r3
   14e68:	4306      	orrs	r6, r0
   14e6a:	3568      	adds	r5, #104	; 0x68
   14e6c:	e7eb      	b.n	14e46 <_fwalk_reent+0x1a>

00014e6e <__locale_ctype_ptr_l>:
   14e6e:	30ec      	adds	r0, #236	; 0xec
   14e70:	6800      	ldr	r0, [r0, #0]
   14e72:	4770      	bx	lr

00014e74 <__locale_ctype_ptr>:
   14e74:	4b04      	ldr	r3, [pc, #16]	; (14e88 <__locale_ctype_ptr+0x14>)
   14e76:	681b      	ldr	r3, [r3, #0]
   14e78:	6a1b      	ldr	r3, [r3, #32]
   14e7a:	2b00      	cmp	r3, #0
   14e7c:	d100      	bne.n	14e80 <__locale_ctype_ptr+0xc>
   14e7e:	4b03      	ldr	r3, [pc, #12]	; (14e8c <__locale_ctype_ptr+0x18>)
   14e80:	33ec      	adds	r3, #236	; 0xec
   14e82:	6818      	ldr	r0, [r3, #0]
   14e84:	4770      	bx	lr
   14e86:	46c0      	nop			; (mov r8, r8)
   14e88:	20000100 	.word	0x20000100
   14e8c:	20000164 	.word	0x20000164

00014e90 <__swhatbuf_r>:
   14e90:	b570      	push	{r4, r5, r6, lr}
   14e92:	000e      	movs	r6, r1
   14e94:	001d      	movs	r5, r3
   14e96:	230e      	movs	r3, #14
   14e98:	5ec9      	ldrsh	r1, [r1, r3]
   14e9a:	b090      	sub	sp, #64	; 0x40
   14e9c:	0014      	movs	r4, r2
   14e9e:	2900      	cmp	r1, #0
   14ea0:	da07      	bge.n	14eb2 <__swhatbuf_r+0x22>
   14ea2:	2300      	movs	r3, #0
   14ea4:	602b      	str	r3, [r5, #0]
   14ea6:	89b3      	ldrh	r3, [r6, #12]
   14ea8:	061b      	lsls	r3, r3, #24
   14eaa:	d411      	bmi.n	14ed0 <__swhatbuf_r+0x40>
   14eac:	2380      	movs	r3, #128	; 0x80
   14eae:	00db      	lsls	r3, r3, #3
   14eb0:	e00f      	b.n	14ed2 <__swhatbuf_r+0x42>
   14eb2:	aa01      	add	r2, sp, #4
   14eb4:	f000 fbe6 	bl	15684 <_fstat_r>
   14eb8:	2800      	cmp	r0, #0
   14eba:	dbf2      	blt.n	14ea2 <__swhatbuf_r+0x12>
   14ebc:	22f0      	movs	r2, #240	; 0xf0
   14ebe:	9b02      	ldr	r3, [sp, #8]
   14ec0:	0212      	lsls	r2, r2, #8
   14ec2:	4013      	ands	r3, r2
   14ec4:	4a05      	ldr	r2, [pc, #20]	; (14edc <__swhatbuf_r+0x4c>)
   14ec6:	189b      	adds	r3, r3, r2
   14ec8:	425a      	negs	r2, r3
   14eca:	4153      	adcs	r3, r2
   14ecc:	602b      	str	r3, [r5, #0]
   14ece:	e7ed      	b.n	14eac <__swhatbuf_r+0x1c>
   14ed0:	2340      	movs	r3, #64	; 0x40
   14ed2:	2000      	movs	r0, #0
   14ed4:	6023      	str	r3, [r4, #0]
   14ed6:	b010      	add	sp, #64	; 0x40
   14ed8:	bd70      	pop	{r4, r5, r6, pc}
   14eda:	46c0      	nop			; (mov r8, r8)
   14edc:	ffffe000 	.word	0xffffe000

00014ee0 <__smakebuf_r>:
   14ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14ee2:	2602      	movs	r6, #2
   14ee4:	898b      	ldrh	r3, [r1, #12]
   14ee6:	0005      	movs	r5, r0
   14ee8:	000c      	movs	r4, r1
   14eea:	4233      	tst	r3, r6
   14eec:	d006      	beq.n	14efc <__smakebuf_r+0x1c>
   14eee:	0023      	movs	r3, r4
   14ef0:	3347      	adds	r3, #71	; 0x47
   14ef2:	6023      	str	r3, [r4, #0]
   14ef4:	6123      	str	r3, [r4, #16]
   14ef6:	2301      	movs	r3, #1
   14ef8:	6163      	str	r3, [r4, #20]
   14efa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   14efc:	ab01      	add	r3, sp, #4
   14efe:	466a      	mov	r2, sp
   14f00:	f7ff ffc6 	bl	14e90 <__swhatbuf_r>
   14f04:	9900      	ldr	r1, [sp, #0]
   14f06:	0007      	movs	r7, r0
   14f08:	0028      	movs	r0, r5
   14f0a:	f7ff fa09 	bl	14320 <_malloc_r>
   14f0e:	2800      	cmp	r0, #0
   14f10:	d108      	bne.n	14f24 <__smakebuf_r+0x44>
   14f12:	220c      	movs	r2, #12
   14f14:	5ea3      	ldrsh	r3, [r4, r2]
   14f16:	059a      	lsls	r2, r3, #22
   14f18:	d4ef      	bmi.n	14efa <__smakebuf_r+0x1a>
   14f1a:	2203      	movs	r2, #3
   14f1c:	4393      	bics	r3, r2
   14f1e:	431e      	orrs	r6, r3
   14f20:	81a6      	strh	r6, [r4, #12]
   14f22:	e7e4      	b.n	14eee <__smakebuf_r+0xe>
   14f24:	4b0f      	ldr	r3, [pc, #60]	; (14f64 <__smakebuf_r+0x84>)
   14f26:	62ab      	str	r3, [r5, #40]	; 0x28
   14f28:	2380      	movs	r3, #128	; 0x80
   14f2a:	89a2      	ldrh	r2, [r4, #12]
   14f2c:	6020      	str	r0, [r4, #0]
   14f2e:	4313      	orrs	r3, r2
   14f30:	81a3      	strh	r3, [r4, #12]
   14f32:	9b00      	ldr	r3, [sp, #0]
   14f34:	6120      	str	r0, [r4, #16]
   14f36:	6163      	str	r3, [r4, #20]
   14f38:	9b01      	ldr	r3, [sp, #4]
   14f3a:	2b00      	cmp	r3, #0
   14f3c:	d00d      	beq.n	14f5a <__smakebuf_r+0x7a>
   14f3e:	230e      	movs	r3, #14
   14f40:	5ee1      	ldrsh	r1, [r4, r3]
   14f42:	0028      	movs	r0, r5
   14f44:	f000 fbb0 	bl	156a8 <_isatty_r>
   14f48:	2800      	cmp	r0, #0
   14f4a:	d006      	beq.n	14f5a <__smakebuf_r+0x7a>
   14f4c:	2203      	movs	r2, #3
   14f4e:	89a3      	ldrh	r3, [r4, #12]
   14f50:	4393      	bics	r3, r2
   14f52:	001a      	movs	r2, r3
   14f54:	2301      	movs	r3, #1
   14f56:	4313      	orrs	r3, r2
   14f58:	81a3      	strh	r3, [r4, #12]
   14f5a:	89a0      	ldrh	r0, [r4, #12]
   14f5c:	4338      	orrs	r0, r7
   14f5e:	81a0      	strh	r0, [r4, #12]
   14f60:	e7cb      	b.n	14efa <__smakebuf_r+0x1a>
   14f62:	46c0      	nop			; (mov r8, r8)
   14f64:	00014cc1 	.word	0x00014cc1

00014f68 <__ascii_mbtowc>:
   14f68:	b082      	sub	sp, #8
   14f6a:	2900      	cmp	r1, #0
   14f6c:	d100      	bne.n	14f70 <__ascii_mbtowc+0x8>
   14f6e:	a901      	add	r1, sp, #4
   14f70:	1e10      	subs	r0, r2, #0
   14f72:	d006      	beq.n	14f82 <__ascii_mbtowc+0x1a>
   14f74:	2b00      	cmp	r3, #0
   14f76:	d006      	beq.n	14f86 <__ascii_mbtowc+0x1e>
   14f78:	7813      	ldrb	r3, [r2, #0]
   14f7a:	600b      	str	r3, [r1, #0]
   14f7c:	7810      	ldrb	r0, [r2, #0]
   14f7e:	1e43      	subs	r3, r0, #1
   14f80:	4198      	sbcs	r0, r3
   14f82:	b002      	add	sp, #8
   14f84:	4770      	bx	lr
   14f86:	2002      	movs	r0, #2
   14f88:	4240      	negs	r0, r0
   14f8a:	e7fa      	b.n	14f82 <__ascii_mbtowc+0x1a>

00014f8c <__malloc_lock>:
   14f8c:	4770      	bx	lr

00014f8e <__malloc_unlock>:
   14f8e:	4770      	bx	lr

00014f90 <__ssputs_r>:
   14f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f92:	688e      	ldr	r6, [r1, #8]
   14f94:	b085      	sub	sp, #20
   14f96:	0007      	movs	r7, r0
   14f98:	000c      	movs	r4, r1
   14f9a:	9203      	str	r2, [sp, #12]
   14f9c:	9301      	str	r3, [sp, #4]
   14f9e:	429e      	cmp	r6, r3
   14fa0:	d839      	bhi.n	15016 <__ssputs_r+0x86>
   14fa2:	2390      	movs	r3, #144	; 0x90
   14fa4:	898a      	ldrh	r2, [r1, #12]
   14fa6:	00db      	lsls	r3, r3, #3
   14fa8:	421a      	tst	r2, r3
   14faa:	d034      	beq.n	15016 <__ssputs_r+0x86>
   14fac:	2503      	movs	r5, #3
   14fae:	6909      	ldr	r1, [r1, #16]
   14fb0:	6823      	ldr	r3, [r4, #0]
   14fb2:	1a5b      	subs	r3, r3, r1
   14fb4:	9302      	str	r3, [sp, #8]
   14fb6:	6963      	ldr	r3, [r4, #20]
   14fb8:	9802      	ldr	r0, [sp, #8]
   14fba:	435d      	muls	r5, r3
   14fbc:	0feb      	lsrs	r3, r5, #31
   14fbe:	195d      	adds	r5, r3, r5
   14fc0:	9b01      	ldr	r3, [sp, #4]
   14fc2:	106d      	asrs	r5, r5, #1
   14fc4:	3301      	adds	r3, #1
   14fc6:	181b      	adds	r3, r3, r0
   14fc8:	42ab      	cmp	r3, r5
   14fca:	d900      	bls.n	14fce <__ssputs_r+0x3e>
   14fcc:	001d      	movs	r5, r3
   14fce:	0553      	lsls	r3, r2, #21
   14fd0:	d532      	bpl.n	15038 <__ssputs_r+0xa8>
   14fd2:	0029      	movs	r1, r5
   14fd4:	0038      	movs	r0, r7
   14fd6:	f7ff f9a3 	bl	14320 <_malloc_r>
   14fda:	1e06      	subs	r6, r0, #0
   14fdc:	d109      	bne.n	14ff2 <__ssputs_r+0x62>
   14fde:	230c      	movs	r3, #12
   14fe0:	603b      	str	r3, [r7, #0]
   14fe2:	2340      	movs	r3, #64	; 0x40
   14fe4:	2001      	movs	r0, #1
   14fe6:	89a2      	ldrh	r2, [r4, #12]
   14fe8:	4240      	negs	r0, r0
   14fea:	4313      	orrs	r3, r2
   14fec:	81a3      	strh	r3, [r4, #12]
   14fee:	b005      	add	sp, #20
   14ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ff2:	9a02      	ldr	r2, [sp, #8]
   14ff4:	6921      	ldr	r1, [r4, #16]
   14ff6:	f7ff f925 	bl	14244 <memcpy>
   14ffa:	89a3      	ldrh	r3, [r4, #12]
   14ffc:	4a14      	ldr	r2, [pc, #80]	; (15050 <__ssputs_r+0xc0>)
   14ffe:	401a      	ands	r2, r3
   15000:	2380      	movs	r3, #128	; 0x80
   15002:	4313      	orrs	r3, r2
   15004:	81a3      	strh	r3, [r4, #12]
   15006:	9b02      	ldr	r3, [sp, #8]
   15008:	6126      	str	r6, [r4, #16]
   1500a:	18f6      	adds	r6, r6, r3
   1500c:	6026      	str	r6, [r4, #0]
   1500e:	6165      	str	r5, [r4, #20]
   15010:	9e01      	ldr	r6, [sp, #4]
   15012:	1aed      	subs	r5, r5, r3
   15014:	60a5      	str	r5, [r4, #8]
   15016:	9b01      	ldr	r3, [sp, #4]
   15018:	42b3      	cmp	r3, r6
   1501a:	d200      	bcs.n	1501e <__ssputs_r+0x8e>
   1501c:	001e      	movs	r6, r3
   1501e:	0032      	movs	r2, r6
   15020:	9903      	ldr	r1, [sp, #12]
   15022:	6820      	ldr	r0, [r4, #0]
   15024:	f7ff f917 	bl	14256 <memmove>
   15028:	68a3      	ldr	r3, [r4, #8]
   1502a:	2000      	movs	r0, #0
   1502c:	1b9b      	subs	r3, r3, r6
   1502e:	60a3      	str	r3, [r4, #8]
   15030:	6823      	ldr	r3, [r4, #0]
   15032:	199e      	adds	r6, r3, r6
   15034:	6026      	str	r6, [r4, #0]
   15036:	e7da      	b.n	14fee <__ssputs_r+0x5e>
   15038:	002a      	movs	r2, r5
   1503a:	0038      	movs	r0, r7
   1503c:	f000 fb65 	bl	1570a <_realloc_r>
   15040:	1e06      	subs	r6, r0, #0
   15042:	d1e0      	bne.n	15006 <__ssputs_r+0x76>
   15044:	6921      	ldr	r1, [r4, #16]
   15046:	0038      	movs	r0, r7
   15048:	f7ff f920 	bl	1428c <_free_r>
   1504c:	e7c7      	b.n	14fde <__ssputs_r+0x4e>
   1504e:	46c0      	nop			; (mov r8, r8)
   15050:	fffffb7f 	.word	0xfffffb7f

00015054 <_svfiprintf_r>:
   15054:	b5f0      	push	{r4, r5, r6, r7, lr}
   15056:	b09f      	sub	sp, #124	; 0x7c
   15058:	9002      	str	r0, [sp, #8]
   1505a:	9305      	str	r3, [sp, #20]
   1505c:	898b      	ldrh	r3, [r1, #12]
   1505e:	000f      	movs	r7, r1
   15060:	0016      	movs	r6, r2
   15062:	061b      	lsls	r3, r3, #24
   15064:	d511      	bpl.n	1508a <_svfiprintf_r+0x36>
   15066:	690b      	ldr	r3, [r1, #16]
   15068:	2b00      	cmp	r3, #0
   1506a:	d10e      	bne.n	1508a <_svfiprintf_r+0x36>
   1506c:	2140      	movs	r1, #64	; 0x40
   1506e:	f7ff f957 	bl	14320 <_malloc_r>
   15072:	6038      	str	r0, [r7, #0]
   15074:	6138      	str	r0, [r7, #16]
   15076:	2800      	cmp	r0, #0
   15078:	d105      	bne.n	15086 <_svfiprintf_r+0x32>
   1507a:	230c      	movs	r3, #12
   1507c:	9a02      	ldr	r2, [sp, #8]
   1507e:	3801      	subs	r0, #1
   15080:	6013      	str	r3, [r2, #0]
   15082:	b01f      	add	sp, #124	; 0x7c
   15084:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15086:	2340      	movs	r3, #64	; 0x40
   15088:	617b      	str	r3, [r7, #20]
   1508a:	2300      	movs	r3, #0
   1508c:	ad06      	add	r5, sp, #24
   1508e:	616b      	str	r3, [r5, #20]
   15090:	3320      	adds	r3, #32
   15092:	766b      	strb	r3, [r5, #25]
   15094:	3310      	adds	r3, #16
   15096:	76ab      	strb	r3, [r5, #26]
   15098:	0034      	movs	r4, r6
   1509a:	7823      	ldrb	r3, [r4, #0]
   1509c:	2b00      	cmp	r3, #0
   1509e:	d147      	bne.n	15130 <_svfiprintf_r+0xdc>
   150a0:	1ba3      	subs	r3, r4, r6
   150a2:	9304      	str	r3, [sp, #16]
   150a4:	d00d      	beq.n	150c2 <_svfiprintf_r+0x6e>
   150a6:	1ba3      	subs	r3, r4, r6
   150a8:	0032      	movs	r2, r6
   150aa:	0039      	movs	r1, r7
   150ac:	9802      	ldr	r0, [sp, #8]
   150ae:	f7ff ff6f 	bl	14f90 <__ssputs_r>
   150b2:	1c43      	adds	r3, r0, #1
   150b4:	d100      	bne.n	150b8 <_svfiprintf_r+0x64>
   150b6:	e0b5      	b.n	15224 <_svfiprintf_r+0x1d0>
   150b8:	696a      	ldr	r2, [r5, #20]
   150ba:	9b04      	ldr	r3, [sp, #16]
   150bc:	4694      	mov	ip, r2
   150be:	4463      	add	r3, ip
   150c0:	616b      	str	r3, [r5, #20]
   150c2:	7823      	ldrb	r3, [r4, #0]
   150c4:	2b00      	cmp	r3, #0
   150c6:	d100      	bne.n	150ca <_svfiprintf_r+0x76>
   150c8:	e0ac      	b.n	15224 <_svfiprintf_r+0x1d0>
   150ca:	2201      	movs	r2, #1
   150cc:	2300      	movs	r3, #0
   150ce:	4252      	negs	r2, r2
   150d0:	606a      	str	r2, [r5, #4]
   150d2:	a902      	add	r1, sp, #8
   150d4:	3254      	adds	r2, #84	; 0x54
   150d6:	1852      	adds	r2, r2, r1
   150d8:	3401      	adds	r4, #1
   150da:	602b      	str	r3, [r5, #0]
   150dc:	60eb      	str	r3, [r5, #12]
   150de:	60ab      	str	r3, [r5, #8]
   150e0:	7013      	strb	r3, [r2, #0]
   150e2:	65ab      	str	r3, [r5, #88]	; 0x58
   150e4:	4e58      	ldr	r6, [pc, #352]	; (15248 <_svfiprintf_r+0x1f4>)
   150e6:	2205      	movs	r2, #5
   150e8:	7821      	ldrb	r1, [r4, #0]
   150ea:	0030      	movs	r0, r6
   150ec:	f000 fb02 	bl	156f4 <memchr>
   150f0:	1c62      	adds	r2, r4, #1
   150f2:	2800      	cmp	r0, #0
   150f4:	d120      	bne.n	15138 <_svfiprintf_r+0xe4>
   150f6:	6829      	ldr	r1, [r5, #0]
   150f8:	06cb      	lsls	r3, r1, #27
   150fa:	d504      	bpl.n	15106 <_svfiprintf_r+0xb2>
   150fc:	2353      	movs	r3, #83	; 0x53
   150fe:	ae02      	add	r6, sp, #8
   15100:	3020      	adds	r0, #32
   15102:	199b      	adds	r3, r3, r6
   15104:	7018      	strb	r0, [r3, #0]
   15106:	070b      	lsls	r3, r1, #28
   15108:	d504      	bpl.n	15114 <_svfiprintf_r+0xc0>
   1510a:	2353      	movs	r3, #83	; 0x53
   1510c:	202b      	movs	r0, #43	; 0x2b
   1510e:	ae02      	add	r6, sp, #8
   15110:	199b      	adds	r3, r3, r6
   15112:	7018      	strb	r0, [r3, #0]
   15114:	7823      	ldrb	r3, [r4, #0]
   15116:	2b2a      	cmp	r3, #42	; 0x2a
   15118:	d016      	beq.n	15148 <_svfiprintf_r+0xf4>
   1511a:	2000      	movs	r0, #0
   1511c:	210a      	movs	r1, #10
   1511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15120:	7822      	ldrb	r2, [r4, #0]
   15122:	3a30      	subs	r2, #48	; 0x30
   15124:	2a09      	cmp	r2, #9
   15126:	d955      	bls.n	151d4 <_svfiprintf_r+0x180>
   15128:	2800      	cmp	r0, #0
   1512a:	d015      	beq.n	15158 <_svfiprintf_r+0x104>
   1512c:	9309      	str	r3, [sp, #36]	; 0x24
   1512e:	e013      	b.n	15158 <_svfiprintf_r+0x104>
   15130:	2b25      	cmp	r3, #37	; 0x25
   15132:	d0b5      	beq.n	150a0 <_svfiprintf_r+0x4c>
   15134:	3401      	adds	r4, #1
   15136:	e7b0      	b.n	1509a <_svfiprintf_r+0x46>
   15138:	2301      	movs	r3, #1
   1513a:	1b80      	subs	r0, r0, r6
   1513c:	4083      	lsls	r3, r0
   1513e:	6829      	ldr	r1, [r5, #0]
   15140:	0014      	movs	r4, r2
   15142:	430b      	orrs	r3, r1
   15144:	602b      	str	r3, [r5, #0]
   15146:	e7cd      	b.n	150e4 <_svfiprintf_r+0x90>
   15148:	9b05      	ldr	r3, [sp, #20]
   1514a:	1d18      	adds	r0, r3, #4
   1514c:	681b      	ldr	r3, [r3, #0]
   1514e:	9005      	str	r0, [sp, #20]
   15150:	2b00      	cmp	r3, #0
   15152:	db39      	blt.n	151c8 <_svfiprintf_r+0x174>
   15154:	9309      	str	r3, [sp, #36]	; 0x24
   15156:	0014      	movs	r4, r2
   15158:	7823      	ldrb	r3, [r4, #0]
   1515a:	2b2e      	cmp	r3, #46	; 0x2e
   1515c:	d10b      	bne.n	15176 <_svfiprintf_r+0x122>
   1515e:	7863      	ldrb	r3, [r4, #1]
   15160:	1c62      	adds	r2, r4, #1
   15162:	2b2a      	cmp	r3, #42	; 0x2a
   15164:	d13e      	bne.n	151e4 <_svfiprintf_r+0x190>
   15166:	9b05      	ldr	r3, [sp, #20]
   15168:	3402      	adds	r4, #2
   1516a:	1d1a      	adds	r2, r3, #4
   1516c:	681b      	ldr	r3, [r3, #0]
   1516e:	9205      	str	r2, [sp, #20]
   15170:	2b00      	cmp	r3, #0
   15172:	db34      	blt.n	151de <_svfiprintf_r+0x18a>
   15174:	9307      	str	r3, [sp, #28]
   15176:	4e35      	ldr	r6, [pc, #212]	; (1524c <_svfiprintf_r+0x1f8>)
   15178:	7821      	ldrb	r1, [r4, #0]
   1517a:	2203      	movs	r2, #3
   1517c:	0030      	movs	r0, r6
   1517e:	f000 fab9 	bl	156f4 <memchr>
   15182:	2800      	cmp	r0, #0
   15184:	d006      	beq.n	15194 <_svfiprintf_r+0x140>
   15186:	2340      	movs	r3, #64	; 0x40
   15188:	1b80      	subs	r0, r0, r6
   1518a:	4083      	lsls	r3, r0
   1518c:	682a      	ldr	r2, [r5, #0]
   1518e:	3401      	adds	r4, #1
   15190:	4313      	orrs	r3, r2
   15192:	602b      	str	r3, [r5, #0]
   15194:	7821      	ldrb	r1, [r4, #0]
   15196:	2206      	movs	r2, #6
   15198:	482d      	ldr	r0, [pc, #180]	; (15250 <_svfiprintf_r+0x1fc>)
   1519a:	1c66      	adds	r6, r4, #1
   1519c:	7629      	strb	r1, [r5, #24]
   1519e:	f000 faa9 	bl	156f4 <memchr>
   151a2:	2800      	cmp	r0, #0
   151a4:	d046      	beq.n	15234 <_svfiprintf_r+0x1e0>
   151a6:	4b2b      	ldr	r3, [pc, #172]	; (15254 <_svfiprintf_r+0x200>)
   151a8:	2b00      	cmp	r3, #0
   151aa:	d12f      	bne.n	1520c <_svfiprintf_r+0x1b8>
   151ac:	6829      	ldr	r1, [r5, #0]
   151ae:	9b05      	ldr	r3, [sp, #20]
   151b0:	2207      	movs	r2, #7
   151b2:	05c9      	lsls	r1, r1, #23
   151b4:	d528      	bpl.n	15208 <_svfiprintf_r+0x1b4>
   151b6:	189b      	adds	r3, r3, r2
   151b8:	4393      	bics	r3, r2
   151ba:	3308      	adds	r3, #8
   151bc:	9305      	str	r3, [sp, #20]
   151be:	696b      	ldr	r3, [r5, #20]
   151c0:	9a03      	ldr	r2, [sp, #12]
   151c2:	189b      	adds	r3, r3, r2
   151c4:	616b      	str	r3, [r5, #20]
   151c6:	e767      	b.n	15098 <_svfiprintf_r+0x44>
   151c8:	425b      	negs	r3, r3
   151ca:	60eb      	str	r3, [r5, #12]
   151cc:	2302      	movs	r3, #2
   151ce:	430b      	orrs	r3, r1
   151d0:	602b      	str	r3, [r5, #0]
   151d2:	e7c0      	b.n	15156 <_svfiprintf_r+0x102>
   151d4:	434b      	muls	r3, r1
   151d6:	3401      	adds	r4, #1
   151d8:	189b      	adds	r3, r3, r2
   151da:	2001      	movs	r0, #1
   151dc:	e7a0      	b.n	15120 <_svfiprintf_r+0xcc>
   151de:	2301      	movs	r3, #1
   151e0:	425b      	negs	r3, r3
   151e2:	e7c7      	b.n	15174 <_svfiprintf_r+0x120>
   151e4:	2300      	movs	r3, #0
   151e6:	0014      	movs	r4, r2
   151e8:	200a      	movs	r0, #10
   151ea:	001a      	movs	r2, r3
   151ec:	606b      	str	r3, [r5, #4]
   151ee:	7821      	ldrb	r1, [r4, #0]
   151f0:	3930      	subs	r1, #48	; 0x30
   151f2:	2909      	cmp	r1, #9
   151f4:	d903      	bls.n	151fe <_svfiprintf_r+0x1aa>
   151f6:	2b00      	cmp	r3, #0
   151f8:	d0bd      	beq.n	15176 <_svfiprintf_r+0x122>
   151fa:	9207      	str	r2, [sp, #28]
   151fc:	e7bb      	b.n	15176 <_svfiprintf_r+0x122>
   151fe:	4342      	muls	r2, r0
   15200:	3401      	adds	r4, #1
   15202:	1852      	adds	r2, r2, r1
   15204:	2301      	movs	r3, #1
   15206:	e7f2      	b.n	151ee <_svfiprintf_r+0x19a>
   15208:	3307      	adds	r3, #7
   1520a:	e7d5      	b.n	151b8 <_svfiprintf_r+0x164>
   1520c:	ab05      	add	r3, sp, #20
   1520e:	9300      	str	r3, [sp, #0]
   15210:	003a      	movs	r2, r7
   15212:	4b11      	ldr	r3, [pc, #68]	; (15258 <_svfiprintf_r+0x204>)
   15214:	0029      	movs	r1, r5
   15216:	9802      	ldr	r0, [sp, #8]
   15218:	e000      	b.n	1521c <_svfiprintf_r+0x1c8>
   1521a:	bf00      	nop
   1521c:	9003      	str	r0, [sp, #12]
   1521e:	9b03      	ldr	r3, [sp, #12]
   15220:	3301      	adds	r3, #1
   15222:	d1cc      	bne.n	151be <_svfiprintf_r+0x16a>
   15224:	89bb      	ldrh	r3, [r7, #12]
   15226:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15228:	065b      	lsls	r3, r3, #25
   1522a:	d400      	bmi.n	1522e <_svfiprintf_r+0x1da>
   1522c:	e729      	b.n	15082 <_svfiprintf_r+0x2e>
   1522e:	2001      	movs	r0, #1
   15230:	4240      	negs	r0, r0
   15232:	e726      	b.n	15082 <_svfiprintf_r+0x2e>
   15234:	ab05      	add	r3, sp, #20
   15236:	9300      	str	r3, [sp, #0]
   15238:	003a      	movs	r2, r7
   1523a:	4b07      	ldr	r3, [pc, #28]	; (15258 <_svfiprintf_r+0x204>)
   1523c:	0029      	movs	r1, r5
   1523e:	9802      	ldr	r0, [sp, #8]
   15240:	f000 f87a 	bl	15338 <_printf_i>
   15244:	e7ea      	b.n	1521c <_svfiprintf_r+0x1c8>
   15246:	46c0      	nop			; (mov r8, r8)
   15248:	000194f6 	.word	0x000194f6
   1524c:	000194fc 	.word	0x000194fc
   15250:	00019500 	.word	0x00019500
   15254:	00000000 	.word	0x00000000
   15258:	00014f91 	.word	0x00014f91

0001525c <_printf_common>:
   1525c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1525e:	0015      	movs	r5, r2
   15260:	9301      	str	r3, [sp, #4]
   15262:	688a      	ldr	r2, [r1, #8]
   15264:	690b      	ldr	r3, [r1, #16]
   15266:	9000      	str	r0, [sp, #0]
   15268:	000c      	movs	r4, r1
   1526a:	4293      	cmp	r3, r2
   1526c:	da00      	bge.n	15270 <_printf_common+0x14>
   1526e:	0013      	movs	r3, r2
   15270:	0022      	movs	r2, r4
   15272:	602b      	str	r3, [r5, #0]
   15274:	3243      	adds	r2, #67	; 0x43
   15276:	7812      	ldrb	r2, [r2, #0]
   15278:	2a00      	cmp	r2, #0
   1527a:	d001      	beq.n	15280 <_printf_common+0x24>
   1527c:	3301      	adds	r3, #1
   1527e:	602b      	str	r3, [r5, #0]
   15280:	6823      	ldr	r3, [r4, #0]
   15282:	069b      	lsls	r3, r3, #26
   15284:	d502      	bpl.n	1528c <_printf_common+0x30>
   15286:	682b      	ldr	r3, [r5, #0]
   15288:	3302      	adds	r3, #2
   1528a:	602b      	str	r3, [r5, #0]
   1528c:	2706      	movs	r7, #6
   1528e:	6823      	ldr	r3, [r4, #0]
   15290:	401f      	ands	r7, r3
   15292:	d027      	beq.n	152e4 <_printf_common+0x88>
   15294:	0023      	movs	r3, r4
   15296:	3343      	adds	r3, #67	; 0x43
   15298:	781b      	ldrb	r3, [r3, #0]
   1529a:	1e5a      	subs	r2, r3, #1
   1529c:	4193      	sbcs	r3, r2
   1529e:	6822      	ldr	r2, [r4, #0]
   152a0:	0692      	lsls	r2, r2, #26
   152a2:	d430      	bmi.n	15306 <_printf_common+0xaa>
   152a4:	0022      	movs	r2, r4
   152a6:	9901      	ldr	r1, [sp, #4]
   152a8:	3243      	adds	r2, #67	; 0x43
   152aa:	9800      	ldr	r0, [sp, #0]
   152ac:	9e08      	ldr	r6, [sp, #32]
   152ae:	47b0      	blx	r6
   152b0:	1c43      	adds	r3, r0, #1
   152b2:	d025      	beq.n	15300 <_printf_common+0xa4>
   152b4:	2306      	movs	r3, #6
   152b6:	6820      	ldr	r0, [r4, #0]
   152b8:	682a      	ldr	r2, [r5, #0]
   152ba:	68e1      	ldr	r1, [r4, #12]
   152bc:	4003      	ands	r3, r0
   152be:	2500      	movs	r5, #0
   152c0:	2b04      	cmp	r3, #4
   152c2:	d103      	bne.n	152cc <_printf_common+0x70>
   152c4:	1a8d      	subs	r5, r1, r2
   152c6:	43eb      	mvns	r3, r5
   152c8:	17db      	asrs	r3, r3, #31
   152ca:	401d      	ands	r5, r3
   152cc:	68a3      	ldr	r3, [r4, #8]
   152ce:	6922      	ldr	r2, [r4, #16]
   152d0:	4293      	cmp	r3, r2
   152d2:	dd01      	ble.n	152d8 <_printf_common+0x7c>
   152d4:	1a9b      	subs	r3, r3, r2
   152d6:	18ed      	adds	r5, r5, r3
   152d8:	2700      	movs	r7, #0
   152da:	42bd      	cmp	r5, r7
   152dc:	d120      	bne.n	15320 <_printf_common+0xc4>
   152de:	2000      	movs	r0, #0
   152e0:	e010      	b.n	15304 <_printf_common+0xa8>
   152e2:	3701      	adds	r7, #1
   152e4:	68e3      	ldr	r3, [r4, #12]
   152e6:	682a      	ldr	r2, [r5, #0]
   152e8:	1a9b      	subs	r3, r3, r2
   152ea:	429f      	cmp	r7, r3
   152ec:	dad2      	bge.n	15294 <_printf_common+0x38>
   152ee:	0022      	movs	r2, r4
   152f0:	2301      	movs	r3, #1
   152f2:	3219      	adds	r2, #25
   152f4:	9901      	ldr	r1, [sp, #4]
   152f6:	9800      	ldr	r0, [sp, #0]
   152f8:	9e08      	ldr	r6, [sp, #32]
   152fa:	47b0      	blx	r6
   152fc:	1c43      	adds	r3, r0, #1
   152fe:	d1f0      	bne.n	152e2 <_printf_common+0x86>
   15300:	2001      	movs	r0, #1
   15302:	4240      	negs	r0, r0
   15304:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   15306:	2030      	movs	r0, #48	; 0x30
   15308:	18e1      	adds	r1, r4, r3
   1530a:	3143      	adds	r1, #67	; 0x43
   1530c:	7008      	strb	r0, [r1, #0]
   1530e:	0021      	movs	r1, r4
   15310:	1c5a      	adds	r2, r3, #1
   15312:	3145      	adds	r1, #69	; 0x45
   15314:	7809      	ldrb	r1, [r1, #0]
   15316:	18a2      	adds	r2, r4, r2
   15318:	3243      	adds	r2, #67	; 0x43
   1531a:	3302      	adds	r3, #2
   1531c:	7011      	strb	r1, [r2, #0]
   1531e:	e7c1      	b.n	152a4 <_printf_common+0x48>
   15320:	0022      	movs	r2, r4
   15322:	2301      	movs	r3, #1
   15324:	321a      	adds	r2, #26
   15326:	9901      	ldr	r1, [sp, #4]
   15328:	9800      	ldr	r0, [sp, #0]
   1532a:	9e08      	ldr	r6, [sp, #32]
   1532c:	47b0      	blx	r6
   1532e:	1c43      	adds	r3, r0, #1
   15330:	d0e6      	beq.n	15300 <_printf_common+0xa4>
   15332:	3701      	adds	r7, #1
   15334:	e7d1      	b.n	152da <_printf_common+0x7e>
	...

00015338 <_printf_i>:
   15338:	b5f0      	push	{r4, r5, r6, r7, lr}
   1533a:	b08b      	sub	sp, #44	; 0x2c
   1533c:	9206      	str	r2, [sp, #24]
   1533e:	000a      	movs	r2, r1
   15340:	3243      	adds	r2, #67	; 0x43
   15342:	9307      	str	r3, [sp, #28]
   15344:	9005      	str	r0, [sp, #20]
   15346:	9204      	str	r2, [sp, #16]
   15348:	7e0a      	ldrb	r2, [r1, #24]
   1534a:	000c      	movs	r4, r1
   1534c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1534e:	2a6e      	cmp	r2, #110	; 0x6e
   15350:	d100      	bne.n	15354 <_printf_i+0x1c>
   15352:	e08f      	b.n	15474 <_printf_i+0x13c>
   15354:	d817      	bhi.n	15386 <_printf_i+0x4e>
   15356:	2a63      	cmp	r2, #99	; 0x63
   15358:	d02c      	beq.n	153b4 <_printf_i+0x7c>
   1535a:	d808      	bhi.n	1536e <_printf_i+0x36>
   1535c:	2a00      	cmp	r2, #0
   1535e:	d100      	bne.n	15362 <_printf_i+0x2a>
   15360:	e099      	b.n	15496 <_printf_i+0x15e>
   15362:	2a58      	cmp	r2, #88	; 0x58
   15364:	d054      	beq.n	15410 <_printf_i+0xd8>
   15366:	0026      	movs	r6, r4
   15368:	3642      	adds	r6, #66	; 0x42
   1536a:	7032      	strb	r2, [r6, #0]
   1536c:	e029      	b.n	153c2 <_printf_i+0x8a>
   1536e:	2a64      	cmp	r2, #100	; 0x64
   15370:	d001      	beq.n	15376 <_printf_i+0x3e>
   15372:	2a69      	cmp	r2, #105	; 0x69
   15374:	d1f7      	bne.n	15366 <_printf_i+0x2e>
   15376:	6821      	ldr	r1, [r4, #0]
   15378:	681a      	ldr	r2, [r3, #0]
   1537a:	0608      	lsls	r0, r1, #24
   1537c:	d523      	bpl.n	153c6 <_printf_i+0x8e>
   1537e:	1d11      	adds	r1, r2, #4
   15380:	6019      	str	r1, [r3, #0]
   15382:	6815      	ldr	r5, [r2, #0]
   15384:	e025      	b.n	153d2 <_printf_i+0x9a>
   15386:	2a73      	cmp	r2, #115	; 0x73
   15388:	d100      	bne.n	1538c <_printf_i+0x54>
   1538a:	e088      	b.n	1549e <_printf_i+0x166>
   1538c:	d808      	bhi.n	153a0 <_printf_i+0x68>
   1538e:	2a6f      	cmp	r2, #111	; 0x6f
   15390:	d029      	beq.n	153e6 <_printf_i+0xae>
   15392:	2a70      	cmp	r2, #112	; 0x70
   15394:	d1e7      	bne.n	15366 <_printf_i+0x2e>
   15396:	2220      	movs	r2, #32
   15398:	6809      	ldr	r1, [r1, #0]
   1539a:	430a      	orrs	r2, r1
   1539c:	6022      	str	r2, [r4, #0]
   1539e:	e003      	b.n	153a8 <_printf_i+0x70>
   153a0:	2a75      	cmp	r2, #117	; 0x75
   153a2:	d020      	beq.n	153e6 <_printf_i+0xae>
   153a4:	2a78      	cmp	r2, #120	; 0x78
   153a6:	d1de      	bne.n	15366 <_printf_i+0x2e>
   153a8:	0022      	movs	r2, r4
   153aa:	2178      	movs	r1, #120	; 0x78
   153ac:	3245      	adds	r2, #69	; 0x45
   153ae:	7011      	strb	r1, [r2, #0]
   153b0:	4a6c      	ldr	r2, [pc, #432]	; (15564 <_printf_i+0x22c>)
   153b2:	e030      	b.n	15416 <_printf_i+0xde>
   153b4:	000e      	movs	r6, r1
   153b6:	681a      	ldr	r2, [r3, #0]
   153b8:	3642      	adds	r6, #66	; 0x42
   153ba:	1d11      	adds	r1, r2, #4
   153bc:	6019      	str	r1, [r3, #0]
   153be:	6813      	ldr	r3, [r2, #0]
   153c0:	7033      	strb	r3, [r6, #0]
   153c2:	2301      	movs	r3, #1
   153c4:	e079      	b.n	154ba <_printf_i+0x182>
   153c6:	0649      	lsls	r1, r1, #25
   153c8:	d5d9      	bpl.n	1537e <_printf_i+0x46>
   153ca:	1d11      	adds	r1, r2, #4
   153cc:	6019      	str	r1, [r3, #0]
   153ce:	2300      	movs	r3, #0
   153d0:	5ed5      	ldrsh	r5, [r2, r3]
   153d2:	2d00      	cmp	r5, #0
   153d4:	da03      	bge.n	153de <_printf_i+0xa6>
   153d6:	232d      	movs	r3, #45	; 0x2d
   153d8:	9a04      	ldr	r2, [sp, #16]
   153da:	426d      	negs	r5, r5
   153dc:	7013      	strb	r3, [r2, #0]
   153de:	4b62      	ldr	r3, [pc, #392]	; (15568 <_printf_i+0x230>)
   153e0:	270a      	movs	r7, #10
   153e2:	9303      	str	r3, [sp, #12]
   153e4:	e02f      	b.n	15446 <_printf_i+0x10e>
   153e6:	6820      	ldr	r0, [r4, #0]
   153e8:	6819      	ldr	r1, [r3, #0]
   153ea:	0605      	lsls	r5, r0, #24
   153ec:	d503      	bpl.n	153f6 <_printf_i+0xbe>
   153ee:	1d08      	adds	r0, r1, #4
   153f0:	6018      	str	r0, [r3, #0]
   153f2:	680d      	ldr	r5, [r1, #0]
   153f4:	e005      	b.n	15402 <_printf_i+0xca>
   153f6:	0640      	lsls	r0, r0, #25
   153f8:	d5f9      	bpl.n	153ee <_printf_i+0xb6>
   153fa:	680d      	ldr	r5, [r1, #0]
   153fc:	1d08      	adds	r0, r1, #4
   153fe:	6018      	str	r0, [r3, #0]
   15400:	b2ad      	uxth	r5, r5
   15402:	4b59      	ldr	r3, [pc, #356]	; (15568 <_printf_i+0x230>)
   15404:	2708      	movs	r7, #8
   15406:	9303      	str	r3, [sp, #12]
   15408:	2a6f      	cmp	r2, #111	; 0x6f
   1540a:	d018      	beq.n	1543e <_printf_i+0x106>
   1540c:	270a      	movs	r7, #10
   1540e:	e016      	b.n	1543e <_printf_i+0x106>
   15410:	3145      	adds	r1, #69	; 0x45
   15412:	700a      	strb	r2, [r1, #0]
   15414:	4a54      	ldr	r2, [pc, #336]	; (15568 <_printf_i+0x230>)
   15416:	9203      	str	r2, [sp, #12]
   15418:	681a      	ldr	r2, [r3, #0]
   1541a:	6821      	ldr	r1, [r4, #0]
   1541c:	1d10      	adds	r0, r2, #4
   1541e:	6018      	str	r0, [r3, #0]
   15420:	6815      	ldr	r5, [r2, #0]
   15422:	0608      	lsls	r0, r1, #24
   15424:	d522      	bpl.n	1546c <_printf_i+0x134>
   15426:	07cb      	lsls	r3, r1, #31
   15428:	d502      	bpl.n	15430 <_printf_i+0xf8>
   1542a:	2320      	movs	r3, #32
   1542c:	4319      	orrs	r1, r3
   1542e:	6021      	str	r1, [r4, #0]
   15430:	2710      	movs	r7, #16
   15432:	2d00      	cmp	r5, #0
   15434:	d103      	bne.n	1543e <_printf_i+0x106>
   15436:	2320      	movs	r3, #32
   15438:	6822      	ldr	r2, [r4, #0]
   1543a:	439a      	bics	r2, r3
   1543c:	6022      	str	r2, [r4, #0]
   1543e:	0023      	movs	r3, r4
   15440:	2200      	movs	r2, #0
   15442:	3343      	adds	r3, #67	; 0x43
   15444:	701a      	strb	r2, [r3, #0]
   15446:	6863      	ldr	r3, [r4, #4]
   15448:	60a3      	str	r3, [r4, #8]
   1544a:	2b00      	cmp	r3, #0
   1544c:	db5c      	blt.n	15508 <_printf_i+0x1d0>
   1544e:	2204      	movs	r2, #4
   15450:	6821      	ldr	r1, [r4, #0]
   15452:	4391      	bics	r1, r2
   15454:	6021      	str	r1, [r4, #0]
   15456:	2d00      	cmp	r5, #0
   15458:	d158      	bne.n	1550c <_printf_i+0x1d4>
   1545a:	9e04      	ldr	r6, [sp, #16]
   1545c:	2b00      	cmp	r3, #0
   1545e:	d064      	beq.n	1552a <_printf_i+0x1f2>
   15460:	0026      	movs	r6, r4
   15462:	9b03      	ldr	r3, [sp, #12]
   15464:	3642      	adds	r6, #66	; 0x42
   15466:	781b      	ldrb	r3, [r3, #0]
   15468:	7033      	strb	r3, [r6, #0]
   1546a:	e05e      	b.n	1552a <_printf_i+0x1f2>
   1546c:	0648      	lsls	r0, r1, #25
   1546e:	d5da      	bpl.n	15426 <_printf_i+0xee>
   15470:	b2ad      	uxth	r5, r5
   15472:	e7d8      	b.n	15426 <_printf_i+0xee>
   15474:	6809      	ldr	r1, [r1, #0]
   15476:	681a      	ldr	r2, [r3, #0]
   15478:	0608      	lsls	r0, r1, #24
   1547a:	d505      	bpl.n	15488 <_printf_i+0x150>
   1547c:	1d11      	adds	r1, r2, #4
   1547e:	6019      	str	r1, [r3, #0]
   15480:	6813      	ldr	r3, [r2, #0]
   15482:	6962      	ldr	r2, [r4, #20]
   15484:	601a      	str	r2, [r3, #0]
   15486:	e006      	b.n	15496 <_printf_i+0x15e>
   15488:	0649      	lsls	r1, r1, #25
   1548a:	d5f7      	bpl.n	1547c <_printf_i+0x144>
   1548c:	1d11      	adds	r1, r2, #4
   1548e:	6019      	str	r1, [r3, #0]
   15490:	6813      	ldr	r3, [r2, #0]
   15492:	8aa2      	ldrh	r2, [r4, #20]
   15494:	801a      	strh	r2, [r3, #0]
   15496:	2300      	movs	r3, #0
   15498:	9e04      	ldr	r6, [sp, #16]
   1549a:	6123      	str	r3, [r4, #16]
   1549c:	e054      	b.n	15548 <_printf_i+0x210>
   1549e:	681a      	ldr	r2, [r3, #0]
   154a0:	1d11      	adds	r1, r2, #4
   154a2:	6019      	str	r1, [r3, #0]
   154a4:	6816      	ldr	r6, [r2, #0]
   154a6:	2100      	movs	r1, #0
   154a8:	6862      	ldr	r2, [r4, #4]
   154aa:	0030      	movs	r0, r6
   154ac:	f000 f922 	bl	156f4 <memchr>
   154b0:	2800      	cmp	r0, #0
   154b2:	d001      	beq.n	154b8 <_printf_i+0x180>
   154b4:	1b80      	subs	r0, r0, r6
   154b6:	6060      	str	r0, [r4, #4]
   154b8:	6863      	ldr	r3, [r4, #4]
   154ba:	6123      	str	r3, [r4, #16]
   154bc:	2300      	movs	r3, #0
   154be:	9a04      	ldr	r2, [sp, #16]
   154c0:	7013      	strb	r3, [r2, #0]
   154c2:	e041      	b.n	15548 <_printf_i+0x210>
   154c4:	6923      	ldr	r3, [r4, #16]
   154c6:	0032      	movs	r2, r6
   154c8:	9906      	ldr	r1, [sp, #24]
   154ca:	9805      	ldr	r0, [sp, #20]
   154cc:	9d07      	ldr	r5, [sp, #28]
   154ce:	47a8      	blx	r5
   154d0:	1c43      	adds	r3, r0, #1
   154d2:	d043      	beq.n	1555c <_printf_i+0x224>
   154d4:	6823      	ldr	r3, [r4, #0]
   154d6:	2500      	movs	r5, #0
   154d8:	079b      	lsls	r3, r3, #30
   154da:	d40f      	bmi.n	154fc <_printf_i+0x1c4>
   154dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   154de:	68e0      	ldr	r0, [r4, #12]
   154e0:	4298      	cmp	r0, r3
   154e2:	da3d      	bge.n	15560 <_printf_i+0x228>
   154e4:	0018      	movs	r0, r3
   154e6:	e03b      	b.n	15560 <_printf_i+0x228>
   154e8:	0022      	movs	r2, r4
   154ea:	2301      	movs	r3, #1
   154ec:	3219      	adds	r2, #25
   154ee:	9906      	ldr	r1, [sp, #24]
   154f0:	9805      	ldr	r0, [sp, #20]
   154f2:	9e07      	ldr	r6, [sp, #28]
   154f4:	47b0      	blx	r6
   154f6:	1c43      	adds	r3, r0, #1
   154f8:	d030      	beq.n	1555c <_printf_i+0x224>
   154fa:	3501      	adds	r5, #1
   154fc:	68e3      	ldr	r3, [r4, #12]
   154fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   15500:	1a9b      	subs	r3, r3, r2
   15502:	429d      	cmp	r5, r3
   15504:	dbf0      	blt.n	154e8 <_printf_i+0x1b0>
   15506:	e7e9      	b.n	154dc <_printf_i+0x1a4>
   15508:	2d00      	cmp	r5, #0
   1550a:	d0a9      	beq.n	15460 <_printf_i+0x128>
   1550c:	9e04      	ldr	r6, [sp, #16]
   1550e:	0028      	movs	r0, r5
   15510:	0039      	movs	r1, r7
   15512:	f7fc fcb5 	bl	11e80 <__aeabi_uidivmod>
   15516:	9b03      	ldr	r3, [sp, #12]
   15518:	3e01      	subs	r6, #1
   1551a:	5c5b      	ldrb	r3, [r3, r1]
   1551c:	0028      	movs	r0, r5
   1551e:	7033      	strb	r3, [r6, #0]
   15520:	0039      	movs	r1, r7
   15522:	f7fc fc27 	bl	11d74 <__udivsi3>
   15526:	1e05      	subs	r5, r0, #0
   15528:	d1f1      	bne.n	1550e <_printf_i+0x1d6>
   1552a:	2f08      	cmp	r7, #8
   1552c:	d109      	bne.n	15542 <_printf_i+0x20a>
   1552e:	6823      	ldr	r3, [r4, #0]
   15530:	07db      	lsls	r3, r3, #31
   15532:	d506      	bpl.n	15542 <_printf_i+0x20a>
   15534:	6863      	ldr	r3, [r4, #4]
   15536:	6922      	ldr	r2, [r4, #16]
   15538:	4293      	cmp	r3, r2
   1553a:	dc02      	bgt.n	15542 <_printf_i+0x20a>
   1553c:	2330      	movs	r3, #48	; 0x30
   1553e:	3e01      	subs	r6, #1
   15540:	7033      	strb	r3, [r6, #0]
   15542:	9b04      	ldr	r3, [sp, #16]
   15544:	1b9b      	subs	r3, r3, r6
   15546:	6123      	str	r3, [r4, #16]
   15548:	9b07      	ldr	r3, [sp, #28]
   1554a:	aa09      	add	r2, sp, #36	; 0x24
   1554c:	9300      	str	r3, [sp, #0]
   1554e:	0021      	movs	r1, r4
   15550:	9b06      	ldr	r3, [sp, #24]
   15552:	9805      	ldr	r0, [sp, #20]
   15554:	f7ff fe82 	bl	1525c <_printf_common>
   15558:	1c43      	adds	r3, r0, #1
   1555a:	d1b3      	bne.n	154c4 <_printf_i+0x18c>
   1555c:	2001      	movs	r0, #1
   1555e:	4240      	negs	r0, r0
   15560:	b00b      	add	sp, #44	; 0x2c
   15562:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15564:	00019518 	.word	0x00019518
   15568:	00019507 	.word	0x00019507

0001556c <__sread>:
   1556c:	b570      	push	{r4, r5, r6, lr}
   1556e:	000c      	movs	r4, r1
   15570:	250e      	movs	r5, #14
   15572:	5f49      	ldrsh	r1, [r1, r5]
   15574:	f000 f8f0 	bl	15758 <_read_r>
   15578:	2800      	cmp	r0, #0
   1557a:	db03      	blt.n	15584 <__sread+0x18>
   1557c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1557e:	181b      	adds	r3, r3, r0
   15580:	6563      	str	r3, [r4, #84]	; 0x54
   15582:	bd70      	pop	{r4, r5, r6, pc}
   15584:	89a3      	ldrh	r3, [r4, #12]
   15586:	4a02      	ldr	r2, [pc, #8]	; (15590 <__sread+0x24>)
   15588:	4013      	ands	r3, r2
   1558a:	81a3      	strh	r3, [r4, #12]
   1558c:	e7f9      	b.n	15582 <__sread+0x16>
   1558e:	46c0      	nop			; (mov r8, r8)
   15590:	ffffefff 	.word	0xffffefff

00015594 <__swrite>:
   15594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15596:	001f      	movs	r7, r3
   15598:	898b      	ldrh	r3, [r1, #12]
   1559a:	0005      	movs	r5, r0
   1559c:	000c      	movs	r4, r1
   1559e:	0016      	movs	r6, r2
   155a0:	05db      	lsls	r3, r3, #23
   155a2:	d505      	bpl.n	155b0 <__swrite+0x1c>
   155a4:	230e      	movs	r3, #14
   155a6:	5ec9      	ldrsh	r1, [r1, r3]
   155a8:	2200      	movs	r2, #0
   155aa:	2302      	movs	r3, #2
   155ac:	f000 f88e 	bl	156cc <_lseek_r>
   155b0:	89a3      	ldrh	r3, [r4, #12]
   155b2:	4a05      	ldr	r2, [pc, #20]	; (155c8 <__swrite+0x34>)
   155b4:	0028      	movs	r0, r5
   155b6:	4013      	ands	r3, r2
   155b8:	81a3      	strh	r3, [r4, #12]
   155ba:	0032      	movs	r2, r6
   155bc:	230e      	movs	r3, #14
   155be:	5ee1      	ldrsh	r1, [r4, r3]
   155c0:	003b      	movs	r3, r7
   155c2:	f000 f839 	bl	15638 <_write_r>
   155c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155c8:	ffffefff 	.word	0xffffefff

000155cc <__sseek>:
   155cc:	b570      	push	{r4, r5, r6, lr}
   155ce:	000c      	movs	r4, r1
   155d0:	250e      	movs	r5, #14
   155d2:	5f49      	ldrsh	r1, [r1, r5]
   155d4:	f000 f87a 	bl	156cc <_lseek_r>
   155d8:	89a3      	ldrh	r3, [r4, #12]
   155da:	1c42      	adds	r2, r0, #1
   155dc:	d103      	bne.n	155e6 <__sseek+0x1a>
   155de:	4a05      	ldr	r2, [pc, #20]	; (155f4 <__sseek+0x28>)
   155e0:	4013      	ands	r3, r2
   155e2:	81a3      	strh	r3, [r4, #12]
   155e4:	bd70      	pop	{r4, r5, r6, pc}
   155e6:	2280      	movs	r2, #128	; 0x80
   155e8:	0152      	lsls	r2, r2, #5
   155ea:	4313      	orrs	r3, r2
   155ec:	81a3      	strh	r3, [r4, #12]
   155ee:	6560      	str	r0, [r4, #84]	; 0x54
   155f0:	e7f8      	b.n	155e4 <__sseek+0x18>
   155f2:	46c0      	nop			; (mov r8, r8)
   155f4:	ffffefff 	.word	0xffffefff

000155f8 <__sclose>:
   155f8:	b510      	push	{r4, lr}
   155fa:	230e      	movs	r3, #14
   155fc:	5ec9      	ldrsh	r1, [r1, r3]
   155fe:	f000 f82f 	bl	15660 <_close_r>
   15602:	bd10      	pop	{r4, pc}

00015604 <strchr>:
   15604:	b2c9      	uxtb	r1, r1
   15606:	7803      	ldrb	r3, [r0, #0]
   15608:	2b00      	cmp	r3, #0
   1560a:	d004      	beq.n	15616 <strchr+0x12>
   1560c:	4299      	cmp	r1, r3
   1560e:	d100      	bne.n	15612 <strchr+0xe>
   15610:	4770      	bx	lr
   15612:	3001      	adds	r0, #1
   15614:	e7f7      	b.n	15606 <strchr+0x2>
   15616:	424b      	negs	r3, r1
   15618:	4159      	adcs	r1, r3
   1561a:	4249      	negs	r1, r1
   1561c:	4008      	ands	r0, r1
   1561e:	e7f7      	b.n	15610 <strchr+0xc>

00015620 <__ascii_wctomb>:
   15620:	1e0b      	subs	r3, r1, #0
   15622:	d004      	beq.n	1562e <__ascii_wctomb+0xe>
   15624:	2aff      	cmp	r2, #255	; 0xff
   15626:	d904      	bls.n	15632 <__ascii_wctomb+0x12>
   15628:	238a      	movs	r3, #138	; 0x8a
   1562a:	6003      	str	r3, [r0, #0]
   1562c:	3b8b      	subs	r3, #139	; 0x8b
   1562e:	0018      	movs	r0, r3
   15630:	4770      	bx	lr
   15632:	700a      	strb	r2, [r1, #0]
   15634:	2301      	movs	r3, #1
   15636:	e7fa      	b.n	1562e <__ascii_wctomb+0xe>

00015638 <_write_r>:
   15638:	b570      	push	{r4, r5, r6, lr}
   1563a:	0005      	movs	r5, r0
   1563c:	0008      	movs	r0, r1
   1563e:	0011      	movs	r1, r2
   15640:	2200      	movs	r2, #0
   15642:	4c06      	ldr	r4, [pc, #24]	; (1565c <_write_r+0x24>)
   15644:	6022      	str	r2, [r4, #0]
   15646:	001a      	movs	r2, r3
   15648:	f7f9 f9de 	bl	ea08 <_write>
   1564c:	1c43      	adds	r3, r0, #1
   1564e:	d103      	bne.n	15658 <_write_r+0x20>
   15650:	6823      	ldr	r3, [r4, #0]
   15652:	2b00      	cmp	r3, #0
   15654:	d000      	beq.n	15658 <_write_r+0x20>
   15656:	602b      	str	r3, [r5, #0]
   15658:	bd70      	pop	{r4, r5, r6, pc}
   1565a:	46c0      	nop			; (mov r8, r8)
   1565c:	20005d54 	.word	0x20005d54

00015660 <_close_r>:
   15660:	2300      	movs	r3, #0
   15662:	b570      	push	{r4, r5, r6, lr}
   15664:	4c06      	ldr	r4, [pc, #24]	; (15680 <_close_r+0x20>)
   15666:	0005      	movs	r5, r0
   15668:	0008      	movs	r0, r1
   1566a:	6023      	str	r3, [r4, #0]
   1566c:	f7f9 fa06 	bl	ea7c <_close>
   15670:	1c43      	adds	r3, r0, #1
   15672:	d103      	bne.n	1567c <_close_r+0x1c>
   15674:	6823      	ldr	r3, [r4, #0]
   15676:	2b00      	cmp	r3, #0
   15678:	d000      	beq.n	1567c <_close_r+0x1c>
   1567a:	602b      	str	r3, [r5, #0]
   1567c:	bd70      	pop	{r4, r5, r6, pc}
   1567e:	46c0      	nop			; (mov r8, r8)
   15680:	20005d54 	.word	0x20005d54

00015684 <_fstat_r>:
   15684:	2300      	movs	r3, #0
   15686:	b570      	push	{r4, r5, r6, lr}
   15688:	4c06      	ldr	r4, [pc, #24]	; (156a4 <_fstat_r+0x20>)
   1568a:	0005      	movs	r5, r0
   1568c:	0008      	movs	r0, r1
   1568e:	0011      	movs	r1, r2
   15690:	6023      	str	r3, [r4, #0]
   15692:	f7f9 f9f6 	bl	ea82 <_fstat>
   15696:	1c43      	adds	r3, r0, #1
   15698:	d103      	bne.n	156a2 <_fstat_r+0x1e>
   1569a:	6823      	ldr	r3, [r4, #0]
   1569c:	2b00      	cmp	r3, #0
   1569e:	d000      	beq.n	156a2 <_fstat_r+0x1e>
   156a0:	602b      	str	r3, [r5, #0]
   156a2:	bd70      	pop	{r4, r5, r6, pc}
   156a4:	20005d54 	.word	0x20005d54

000156a8 <_isatty_r>:
   156a8:	2300      	movs	r3, #0
   156aa:	b570      	push	{r4, r5, r6, lr}
   156ac:	4c06      	ldr	r4, [pc, #24]	; (156c8 <_isatty_r+0x20>)
   156ae:	0005      	movs	r5, r0
   156b0:	0008      	movs	r0, r1
   156b2:	6023      	str	r3, [r4, #0]
   156b4:	f7f9 f9ea 	bl	ea8c <_isatty>
   156b8:	1c43      	adds	r3, r0, #1
   156ba:	d103      	bne.n	156c4 <_isatty_r+0x1c>
   156bc:	6823      	ldr	r3, [r4, #0]
   156be:	2b00      	cmp	r3, #0
   156c0:	d000      	beq.n	156c4 <_isatty_r+0x1c>
   156c2:	602b      	str	r3, [r5, #0]
   156c4:	bd70      	pop	{r4, r5, r6, pc}
   156c6:	46c0      	nop			; (mov r8, r8)
   156c8:	20005d54 	.word	0x20005d54

000156cc <_lseek_r>:
   156cc:	b570      	push	{r4, r5, r6, lr}
   156ce:	0005      	movs	r5, r0
   156d0:	0008      	movs	r0, r1
   156d2:	0011      	movs	r1, r2
   156d4:	2200      	movs	r2, #0
   156d6:	4c06      	ldr	r4, [pc, #24]	; (156f0 <_lseek_r+0x24>)
   156d8:	6022      	str	r2, [r4, #0]
   156da:	001a      	movs	r2, r3
   156dc:	f7f9 f9d8 	bl	ea90 <_lseek>
   156e0:	1c43      	adds	r3, r0, #1
   156e2:	d103      	bne.n	156ec <_lseek_r+0x20>
   156e4:	6823      	ldr	r3, [r4, #0]
   156e6:	2b00      	cmp	r3, #0
   156e8:	d000      	beq.n	156ec <_lseek_r+0x20>
   156ea:	602b      	str	r3, [r5, #0]
   156ec:	bd70      	pop	{r4, r5, r6, pc}
   156ee:	46c0      	nop			; (mov r8, r8)
   156f0:	20005d54 	.word	0x20005d54

000156f4 <memchr>:
   156f4:	b2c9      	uxtb	r1, r1
   156f6:	1882      	adds	r2, r0, r2
   156f8:	4290      	cmp	r0, r2
   156fa:	d101      	bne.n	15700 <memchr+0xc>
   156fc:	2000      	movs	r0, #0
   156fe:	4770      	bx	lr
   15700:	7803      	ldrb	r3, [r0, #0]
   15702:	428b      	cmp	r3, r1
   15704:	d0fb      	beq.n	156fe <memchr+0xa>
   15706:	3001      	adds	r0, #1
   15708:	e7f6      	b.n	156f8 <memchr+0x4>

0001570a <_realloc_r>:
   1570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1570c:	0007      	movs	r7, r0
   1570e:	000d      	movs	r5, r1
   15710:	0016      	movs	r6, r2
   15712:	2900      	cmp	r1, #0
   15714:	d105      	bne.n	15722 <_realloc_r+0x18>
   15716:	0011      	movs	r1, r2
   15718:	f7fe fe02 	bl	14320 <_malloc_r>
   1571c:	0004      	movs	r4, r0
   1571e:	0020      	movs	r0, r4
   15720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15722:	2a00      	cmp	r2, #0
   15724:	d103      	bne.n	1572e <_realloc_r+0x24>
   15726:	f7fe fdb1 	bl	1428c <_free_r>
   1572a:	0034      	movs	r4, r6
   1572c:	e7f7      	b.n	1571e <_realloc_r+0x14>
   1572e:	f000 f827 	bl	15780 <_malloc_usable_size_r>
   15732:	002c      	movs	r4, r5
   15734:	4286      	cmp	r6, r0
   15736:	d9f2      	bls.n	1571e <_realloc_r+0x14>
   15738:	0031      	movs	r1, r6
   1573a:	0038      	movs	r0, r7
   1573c:	f7fe fdf0 	bl	14320 <_malloc_r>
   15740:	1e04      	subs	r4, r0, #0
   15742:	d0ec      	beq.n	1571e <_realloc_r+0x14>
   15744:	0029      	movs	r1, r5
   15746:	0032      	movs	r2, r6
   15748:	f7fe fd7c 	bl	14244 <memcpy>
   1574c:	0029      	movs	r1, r5
   1574e:	0038      	movs	r0, r7
   15750:	f7fe fd9c 	bl	1428c <_free_r>
   15754:	e7e3      	b.n	1571e <_realloc_r+0x14>
	...

00015758 <_read_r>:
   15758:	b570      	push	{r4, r5, r6, lr}
   1575a:	0005      	movs	r5, r0
   1575c:	0008      	movs	r0, r1
   1575e:	0011      	movs	r1, r2
   15760:	2200      	movs	r2, #0
   15762:	4c06      	ldr	r4, [pc, #24]	; (1577c <_read_r+0x24>)
   15764:	6022      	str	r2, [r4, #0]
   15766:	001a      	movs	r2, r3
   15768:	f7f9 f92c 	bl	e9c4 <_read>
   1576c:	1c43      	adds	r3, r0, #1
   1576e:	d103      	bne.n	15778 <_read_r+0x20>
   15770:	6823      	ldr	r3, [r4, #0]
   15772:	2b00      	cmp	r3, #0
   15774:	d000      	beq.n	15778 <_read_r+0x20>
   15776:	602b      	str	r3, [r5, #0]
   15778:	bd70      	pop	{r4, r5, r6, pc}
   1577a:	46c0      	nop			; (mov r8, r8)
   1577c:	20005d54 	.word	0x20005d54

00015780 <_malloc_usable_size_r>:
   15780:	1f0b      	subs	r3, r1, #4
   15782:	681b      	ldr	r3, [r3, #0]
   15784:	1f18      	subs	r0, r3, #4
   15786:	2b00      	cmp	r3, #0
   15788:	da01      	bge.n	1578e <_malloc_usable_size_r+0xe>
   1578a:	580b      	ldr	r3, [r1, r0]
   1578c:	18c0      	adds	r0, r0, r3
   1578e:	4770      	bx	lr
   15790:	00000fd2 	.word	0x00000fd2
   15794:	00000fcc 	.word	0x00000fcc
   15798:	00000fc6 	.word	0x00000fc6
   1579c:	00000fc0 	.word	0x00000fc0
   157a0:	00000fd8 	.word	0x00000fd8
   157a4:	00000fe0 	.word	0x00000fe0
   157a8:	00000fd8 	.word	0x00000fd8
   157ac:	00000fba 	.word	0x00000fba
   157b0:	00000fb4 	.word	0x00000fb4
   157b4:	00000fd8 	.word	0x00000fd8
   157b8:	00000fae 	.word	0x00000fae
   157bc:	00000fae 	.word	0x00000fae
   157c0:	00000fa8 	.word	0x00000fa8
   157c4:	00000fa2 	.word	0x00000fa2
   157c8:	00000fe0 	.word	0x00000fe0
   157cc:	0000104a 	.word	0x0000104a
   157d0:	00001044 	.word	0x00001044
   157d4:	0000103e 	.word	0x0000103e
   157d8:	00001038 	.word	0x00001038
   157dc:	00001050 	.word	0x00001050
   157e0:	00001058 	.word	0x00001058
   157e4:	00001050 	.word	0x00001050
   157e8:	00001032 	.word	0x00001032
   157ec:	0000102c 	.word	0x0000102c
   157f0:	00001050 	.word	0x00001050
   157f4:	00001026 	.word	0x00001026
   157f8:	00001026 	.word	0x00001026
   157fc:	00001020 	.word	0x00001020
   15800:	0000101a 	.word	0x0000101a
   15804:	00001058 	.word	0x00001058
   15808:	000010c4 	.word	0x000010c4
   1580c:	000010be 	.word	0x000010be
   15810:	000010b8 	.word	0x000010b8
   15814:	000010b2 	.word	0x000010b2
   15818:	000010ca 	.word	0x000010ca
   1581c:	000010ca 	.word	0x000010ca
   15820:	000010ca 	.word	0x000010ca
   15824:	000010ac 	.word	0x000010ac
   15828:	000010a6 	.word	0x000010a6
   1582c:	000010ca 	.word	0x000010ca
   15830:	000010a0 	.word	0x000010a0
   15834:	000010a0 	.word	0x000010a0
   15838:	0000109a 	.word	0x0000109a
   1583c:	00001094 	.word	0x00001094
   15840:	33323130 	.word	0x33323130
   15844:	37363534 	.word	0x37363534
   15848:	62613938 	.word	0x62613938
   1584c:	66656463 	.word	0x66656463
   15850:	00000d31 	.word	0x00000d31
   15854:	6e617254 	.word	0x6e617254
   15858:	72656673 	.word	0x72656673
   1585c:	636e452d 	.word	0x636e452d
   15860:	6e69646f 	.word	0x6e69646f
   15864:	00203a67 	.word	0x00203a67
   15868:	6e6e6f43 	.word	0x6e6e6f43
   1586c:	69746365 	.word	0x69746365
   15870:	203a6e6f 	.word	0x203a6e6f
   15874:	00000000 	.word	0x00000000
   15878:	50545448 	.word	0x50545448
   1587c:	0000002f 	.word	0x0000002f
   15880:	20544547 	.word	0x20544547
   15884:	00000000 	.word	0x00000000
   15888:	54534f50 	.word	0x54534f50
   1588c:	00000020 	.word	0x00000020
   15890:	454c4544 	.word	0x454c4544
   15894:	00204554 	.word	0x00204554
   15898:	20545550 	.word	0x20545550
   1589c:	00000000 	.word	0x00000000
   158a0:	4954504f 	.word	0x4954504f
   158a4:	20534e4f 	.word	0x20534e4f
   158a8:	00000000 	.word	0x00000000
   158ac:	44414548 	.word	0x44414548
   158b0:	00000020 	.word	0x00000020
   158b4:	54544820 	.word	0x54544820
   158b8:	2e312f50 	.word	0x2e312f50
   158bc:	000a0d31 	.word	0x000a0d31
   158c0:	72657355 	.word	0x72657355
   158c4:	6567412d 	.word	0x6567412d
   158c8:	203a746e 	.word	0x203a746e
   158cc:	00000000 	.word	0x00000000
   158d0:	74736f48 	.word	0x74736f48
   158d4:	0000203a 	.word	0x0000203a
   158d8:	6e6e6f43 	.word	0x6e6e6f43
   158dc:	69746365 	.word	0x69746365
   158e0:	203a6e6f 	.word	0x203a6e6f
   158e4:	7065654b 	.word	0x7065654b
   158e8:	696c412d 	.word	0x696c412d
   158ec:	0a0d6576 	.word	0x0a0d6576
   158f0:	00000000 	.word	0x00000000
   158f4:	65636341 	.word	0x65636341
   158f8:	452d7470 	.word	0x452d7470
   158fc:	646f636e 	.word	0x646f636e
   15900:	3a676e69 	.word	0x3a676e69
   15904:	000a0d20 	.word	0x000a0d20
   15908:	65636341 	.word	0x65636341
   1590c:	432d7470 	.word	0x432d7470
   15910:	73726168 	.word	0x73726168
   15914:	203a7465 	.word	0x203a7465
   15918:	2d667475 	.word	0x2d667475
   1591c:	000a0d38 	.word	0x000a0d38
   15920:	6e617254 	.word	0x6e617254
   15924:	72656673 	.word	0x72656673
   15928:	636e452d 	.word	0x636e452d
   1592c:	6e69646f 	.word	0x6e69646f
   15930:	63203a67 	.word	0x63203a67
   15934:	6b6e7568 	.word	0x6b6e7568
   15938:	0a0d6465 	.word	0x0a0d6465
   1593c:	00000000 	.word	0x00000000
   15940:	00007525 	.word	0x00007525
   15944:	746e6f43 	.word	0x746e6f43
   15948:	2d746e65 	.word	0x2d746e65
   1594c:	676e654c 	.word	0x676e654c
   15950:	203a6874 	.word	0x203a6874
   15954:	00000000 	.word	0x00000000
   15958:	656d7461 	.word	0x656d7461
   1595c:	2e312f6c 	.word	0x2e312f6c
   15960:	00322e30 	.word	0x00322e30
   15964:	70747468 	.word	0x70747468
   15968:	002f2f3a 	.word	0x002f2f3a
   1596c:	70747468 	.word	0x70747468
   15970:	2f2f3a73 	.word	0x2f2f3a73
   15974:	00000000 	.word	0x00000000
   15978:	42002000 	.word	0x42002000
   1597c:	42002400 	.word	0x42002400
   15980:	42002800 	.word	0x42002800

00015984 <font5x8>:
   15984:	005f0000 00070000 7f140007 24147f14     .._............$
   15994:	122a7f2a 64081323 55493662 05005022     *.*.#..db6IU"P..
   159a4:	00000003 0041221c 1c224100 3e081400     ....."A..A"....>
   159b4:	08081408 0008083e 00003050 08080808     ....>...P0......
   159c4:	60600008 10200000 3e020408 3e454951     ..``.. ....>QIE>
   159d4:	407f4200 51614200 41214649 18314b45     .B.@.BaQIF!AEK1.
   159e4:	107f1214 45454527 494a3c39 71013049     ....'EEE9<JII0.q
   159f4:	36030509 36494949 29494906 3636001e     ...6III6.II)..66
   15a04:	56000000 08000036 00412214 14141414     ...V6...."A.....
   15a14:	22410014 01020814 32060951 3e417949     ..A"....Q..2IyA>
   15a24:	1111117e 49497f7e 413e3649 7f224141     ~...~.III6>AAA".
   15a34:	1c224141 4949497f 09097f41 413e0109     AA"..IIIA.....>A
   15a44:	7f7a4949 7f080808 417f4100 41402000     IIz......A.A. @A
   15a54:	087f013f 7f412214 40404040 020c027f     ?...."A.@@@@....
   15a64:	08047f7f 413e7f10 7f3e4141 06090909     ......>AAA>.....
   15a74:	2151413e 19097f5e 49464629 01314949     >AQ!^...)FFIII1.
   15a84:	01017f01 4040403f 40201f3f 403f1f20     ....?@@@?. @ .?@
   15a94:	633f4038 63140814 08700807 49516107     8@?c...c..p..aQI
   15aa4:	7f004345 02004141 20100804 7f414100     EC..AA..... .AA.
   15ab4:	01020400 40400402 00404040 00040201     ......@@@@@.....
   15ac4:	54545420 44487f78 44383844 38204444      TTTx.HDD88DDD 8
   15ad4:	7f484444 54545438 097e0818 520c0201     DDH.8TTT..~....R
   15ae4:	7f3e5252 78040408 407d4400 44402000     RR>....x.D}@. @D
   15af4:	107f003d 00004428 00407f41 0418047c     =...(D..A.@.|...
   15b04:	04087c78 44387804 7c384444 08141414     x|...x8DDD8|....
   15b14:	18141408 04087c7c 54480804 04205454     ....||....HTTT .
   15b24:	2040443f 2040403c 40201c7c 403c1c20     ?D@ <@@ |. @ .<@
   15b34:	443c4030 44281028 5050500c 5464443c     0@<D(.(D.PPP<DdT
   15b44:	0800444c 00004136 00007f00 08364100     LD..6A.......A6.
   15b54:	08081000 00000810                       ........

00015b5c <font8x16_terminal>:
   15b5c:	00000000 1bfe007c 007c1bfe 00000000     ....|.....|.....
   15b6c:	000e0000 0000001e 001e0000 0000000e     ................
   15b7c:	0ffc0120 01200ffc 0ffc0120 01200ffc      ..... . ..... .
   15b8c:	0c7c0638 3fff0844 08843fff 07180f8c     8.|.D..?.?......
   15b9c:	1e14181c 01e0079c 141e1c78 00001c06     ........x.......
   15bac:	10fe1fbc 10c21042 0f3c1ffe 10801980     ....B.....<.....
   15bbc:	00000000 001e0010 0000000e 00000000     ................
   15bcc:	00000000 1ffc07f0 2002380e 00000000     .........8. ....
   15bdc:	00000000 380e2002 07f01ffc 00000000     ..... .8........
   15bec:	02a00080 01c003e0 03e001c0 008002a0     ................
   15bfc:	00800080 03e00080 008003e0 00800080     ................
   15c0c:	00000000 78004000 00003800 00000000     .....@.x.8......
   15c1c:	00800080 00800080 00800080 00800080     ................
   15c2c:	00000000 18000000 00001800 00000000     ................
   15c3c:	1e001800 01e00780 001e0078 00000006     ........x.......
   15c4c:	0ffc07f8 10c21806 180610c2 07f80ffc     ................
   15c5c:	10080000 1ffe100c 10001ffe 00001000     ................
   15c6c:	1e061c04 11821302 106210c2 181c183e     ..........b.>...
   15c7c:	18060804 10421002 10421042 0fbc1ffe     ......B.B.B.....
   15c8c:	01e001c0 01180130 1ffe110c 11001ffe     ....0...........
   15c9c:	187e087e 10421042 10421042 0f821fc2     ~.~.B.B.B.B.....
   15cac:	1ffc0ff8 10421046 10421042 0f801fc0     ....F.B.B.B.....
   15cbc:	00060006 1f020002 00f21fc2 000e003e     ............>...
   15ccc:	1ffe0fbc 10421042 10421042 0fbc1ffe     ....B.B.B.B.....
   15cdc:	107e003c 10421042 18421042 07fc0ffe     <.~.B.B.B.B.....
   15cec:	00000000 0c300000 00000c30 00000000     ......0.0.......
   15cfc:	00000000 3c602000 00001c60 00000000     ..... `<`.......
   15d0c:	01c00080 06300360 180c0c18 00001004     ....`.0.........
   15d1c:	02400240 02400240 02400240 02400240     @.@.@.@.@.@.@.@.
   15d2c:	180c1004 06300c18 01c00360 00000080     ......0.`.......
   15d3c:	00060004 1b820002 00621bc2 001c003e     ..........b.>...
   15d4c:	1ffe0ffc 11821002 13e213c2 03fc13fe     ................
   15d5c:	1ff81ff0 0106010c 010c0106 1ff01ff8     ................
   15d6c:	1ffe1002 10421ffe 10421042 0fbc1ffe     ......B.B.B.....
   15d7c:	0ffc07f8 10021806 10021002 0c0c1806     ................
   15d8c:	1ffe1002 10021ffe 18061002 07f80ffc     ................
   15d9c:	1ffe1002 10421ffe 10e21042 18061806     ......B.B.......
   15dac:	1ffe1002 10421ffe 00e20042 00060006     ......B.B.......
   15dbc:	0ffc07f8 10021806 10821082 1f8c0f86     ................
   15dcc:	1ffe1ffe 00400040 00400040 1ffe1ffe     ....@.@.@.@.....
   15ddc:	10020000 1ffe1002 10021ffe 00001002     ................
   15dec:	1c000c00 10001000 1ffe1002 00020ffe     ................
   15dfc:	1ffe1002 00e01ffe 031801b0 1c061e0e     ................
   15e0c:	1ffe1002 10021ffe 10001000 18001800     ................
   15e1c:	1ffe1ffe 00f00018 001800f0 1ffe1ffe     ................
   15e2c:	1ffe1ffe 00700038 01c000e0 1ffe1ffe     ....8.p.........
   15e3c:	1ffe0ffc 10021002 10021002 0ffc1ffe     ................
   15e4c:	1ffe1002 10421ffe 00420042 003c007e     ......B.B.B.~.<.
   15e5c:	1ffe0ffc 1c021002 70023802 0ffc5ffe     .........8.p._..
   15e6c:	1ffe1002 00421ffe 00c20042 1f3c1ffe     ......B.B.....<.
   15e7c:	1c3e0c1c 10421062 10c21042 0f0c1f8e     ..>.b.B.B.......
   15e8c:	00060006 1ffe1002 10021ffe 00060006     ................
   15e9c:	1ffe0ffe 10001000 10001000 0ffe1ffe     ................
   15eac:	07fe03fe 18000c00 0c001800 03fe07fe     ................
   15ebc:	1ffe07fe 07c01c00 1c0007c0 07fe1ffe     ................
   15ecc:	1e1e1c0e 01e00330 033001e0 1c0e1e1e     ....0.....0.....
   15edc:	003e001e 1fc01060 10601fc0 001e003e     ..>.`.....`.>...
   15eec:	1f061e06 10c21182 10321062 180e181e     ........b.2.....
   15efc:	00000000 1ffe1ffe 10021002 00000000     ................
   15f0c:	1e001800 01e00780 001e0078 00000006     ........x.......
   15f1c:	00000000 10021002 1ffe1ffe 00000000     ................
   15f2c:	00300020 000c0018 00300018 00000020      .0.......0. ...
   15f3c:	80008000 80008000 80008000 80008000     ................
   15f4c:	00000000 00380000 00400078 00000000     ......8.x.@.....
   15f5c:	1f200e00 11201120 0fe01120 10001fc0     .. . . . .......
   15f6c:	1ffe1002 10200ffe 10601020 0f801fc0     ...... . .`.....
   15f7c:	1fe00fc0 10201020 10201020 08401860     .... . . . .`.@.
   15f8c:	1fc00f80 10201060 0ffe1022 10001ffe     ....`. .".......
   15f9c:	1fe00fc0 11201120 11201120 09c019e0     .... . . . .....
   15fac:	10200000 1ffe1ffc 00221022 00040006     .. .....".".....
   15fbc:	dfe04fc0 90209020 ffc09020 00207fe0     .O.. . . ..... .
   15fcc:	1ffe1002 00401ffe 00200020 1fc01fe0     ......@. . .....
   15fdc:	10200000 1fec1020 10001fec 00001000     .. . ...........
   15fec:	c0006000 80208020 7fecffec 00000000     .`.. . .........
   15ffc:	1ffe1002 01801ffe 06c00380 18201c60     ............`. .
   1600c:	10020000 1ffe1002 10001ffe 00001000     ................
   1601c:	1fe01fe0 0fc00060 00600fc0 1fc01fe0     ....`.....`.....
   1602c:	1fe00020 00201fc0 00200020 1fc01fe0      ..... . . .....
   1603c:	1fe00fc0 10201020 10201020 0fc01fe0     .... . . . .....
   1604c:	ffe08020 9020ffc0 10201020 0fc01fe0      ..... . . .....
   1605c:	1fe00fc0 10201020 ffc09020 8020ffe0     .... . . ..... .
   1606c:	1fe01020 10601fc0 00200020 00400060      .....`. . .`.@.
   1607c:	19e008c0 11201120 12201320 0c401e60     .... . . . .`.@.
   1608c:	00200020 1ffe0ffc 18201020 00000800      . ..... . .....
   1609c:	1fe00fe0 10001000 0fe01000 10001fe0     ................
   160ac:	07e003e0 18000c00 0c001800 03e007e0     ................
   160bc:	1fe00fe0 0f001800 18000f00 0fe01fe0     ................
   160cc:	18601020 07800cc0 0cc00780 10201860      .`.........`. .
   160dc:	9fe08fe0 90009000 d0009000 3fe07fe0     ...............?
   160ec:	1c601860 13201620 10e011a0 18201860     `.`. . .....`. .
   160fc:	00000000 1ffc0080 20023f7e 00002002     ........~?. . ..
   1610c:	00000000 3e7c0000 00003e7c 00000000     ......|>|>......
   1611c:	20020000 3f7e2002 00801ffc 00000000     ... . ~?........
   1612c:	00002004 0000200e 0000201e 0000205a     . ... ... ..Z ..
   1613c:	00002070 6167227b 3a22656d 0000005b     p ..{"game":[...
   1614c:	61470a0d 6d20656d 61737365 72206567     ..Game message r
   1615c:	69656365 21646576 00000a0d 732a2e25     eceived!....%.*s
   1616c:	00000000 61500a0d 64657372 6d6f4320     ......Parsed Com
   1617c:	646e616d 0000203a 002c6425 65530a0d     mand: ..%d,...Se
   1618c:	7020746e 2079616c 63206f74 72746e6f     nt play to contr
   1619c:	0d216c6f 0000000a 61470a0d 6d20656d     ol!.......Game m
   161ac:	61737365 72206567 69656365 20646576     essage received 
   161bc:	20747562 20746f6e 65646e75 6f747372     but not understo
   161cc:	0d21646f 0000000a 4d490a0d 6f742055     od!.......IMU to
   161dc:	20636970 65636572 64657669 000a0d21     pic received!...
   161ec:	25200a0d 00732a2e 28626772 00000000     .. %.*s.rgb(....
   161fc:	47520a0d 64252042 20642520 0a0d6425     ..RGB %d %d %d..
   1620c:	00000000 6565460d 676e6964 73694620     .....Feeding Fis
   1621c:	2e252068 0a0d732a 00000020 65757274     h %.*s.. ...true
   1622c:	00000000 64656546 20676e69 68736946     ....Feeding Fish
   1623c:	732a2520 000a0d20 5454514d 696e6920      %*s ...MQTT ini
   1624c:	6c616974 74617a69 206e6f69 6c696166     tialization fail
   1625c:	202e6465 6f727245 6f632072 69206564     ed. Error code i
   1626c:	25282073 0a0d2964 00000000 5454514d     s (%d)......MQTT
   1627c:	67657220 65747369 61632072 61626c6c      register callba
   1628c:	66206b63 656c6961 45202e64 726f7272     ck failed. Error
   1629c:	646f6320 73692065 64252820 000a0d29      code is (%d)...
   162ac:	2264227b 74227b3a 22706d65 7d64253a     {"d":{"temp":%d}
   162bc:	0000007d 70747468 696c635f 5f746e65     }...http_client_
   162cc:	6c6c6163 6b636162 5448203a 63205054     callback: HTTP c
   162dc:	6e65696c 6f732074 74656b63 6e6f6320     lient socket con
   162ec:	7463656e 0d2e6465 0000000a 70747468     nected......http
   162fc:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
   1630c:	6572203a 73657571 6f632074 656c706d     : request comple
   1631c:	2e646574 00000a0d 70747468 696c635f     ted.....http_cli
   1632c:	5f746e65 6c6c6163 6b636162 6572203a     ent_callback: re
   1633c:	76696563 72206465 6f707365 2065736e     ceived response 
   1634c:	64207525 20617461 657a6973 0d752520     %u data size %u.
   1635c:	0000000a 70747468 696c635f 5f746e65     ....http_client_
   1636c:	6c6c6163 6b636162 6964203a 6e6f6373     callback: discon
   1637c:	7463656e 206e6f69 73616572 253a6e6f     nection reason:%
   1638c:	000a0d64                                d...

00016390 <main_mqtt_broker>:
   16390:	2e323731 2e323731 2e353631 00003833     172.172.165.38..
   163a0:	6f430a0d 63656e6e 676e6974 206f7420     ..Connecting to 
   163b0:	6b6f7242 2e2e7265 0000002e 505f4d56     Broker......VM_P
   163c0:	5f74726f 6f633332 00006c6f 65746e49     ort_23cool..Inte
   163d0:	54696c6c 006b6e61 5454514d 72452020     lliTank.MQTT  Er
   163e0:	20726f72 4f4e202d 6f432054 63656e6e     ror - NOT Connec
   163f0:	20646574 62206f74 656b6f72 000a0d72     ted to broker...
   16400:	5454514d 6e6f4320 7463656e 74206465     MQTT Connected t
   16410:	7262206f 72656b6f 00000a0d 6e6e6f43     o broker....Conn
   16420:	20746365 6c696166 206f7420 76726573     ect fail to serv
   16430:	25287265 20212973 72746572 74692079     er(%s)! retry it
   16440:	74756120 74616d6f 6c616369 0d2e796c      automatically..
   16450:	0000000a 475f3150 5f454d41 35455345     ....P1_GAME_ESE5
   16460:	545f3631 00000030 4c5f3150 455f4445     16_T0...P1_LED_E
   16470:	31354553 30545f36 00000000 495f3150     SE516_T0....P1_I
   16480:	455f554d 31354553 30545f36 00000000     MU_ESE516_T0....
   16490:	76726573 0000736f 5454514d 6e6f4320     servos..MQTT Con
   164a0:	7463656e 0a0d6465 00000000 5454514d     nected......MQTT
   164b0:	6f726220 2072656b 6c636564 20656e69      broker decline 
   164c0:	72756f79 63636120 21737365 72726520     your access! err
   164d0:	6320726f 2065646f 0a0d6425 00000000     or code %d......
   164e0:	5454514d 73696420 6e6e6f63 65746365     MQTT disconnecte
   164f0:	000a0d64 6f736572 5f65766c 203a6263     d...resolve_cb: 
   16500:	49207325 64612050 73657264 73692073     %s IP address is
   16510:	2e642520 252e6425 64252e64 0a0d0a0d      %d.%d.%d.%d....
   16520:	00000000 72617473 6f645f74 6f6c6e77     ....start_downlo
   16530:	203a6461 20434d4d 726f7473 20656761     ad: MMC storage 
   16540:	20746f6e 64616572 0a0d2e79 00000000     not ready.......
   16550:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
   16560:	462d6957 73692069 746f6e20 6e6f6320     Wi-Fi is not con
   16570:	7463656e 0d2e6465 0000000a 72617473     nected......star
   16580:	6f645f74 6f6c6e77 203a6461 75716572     t_download: requ
   16590:	20747365 73207369 20746e65 65726c61     est is sent alre
   165a0:	2e796461 00000a0d 72617473 6f645f74     ady.....start_do
   165b0:	6f6c6e77 203a6461 6e6e7572 20676e69     wnload: running 
   165c0:	6e776f64 64616f6c 726c6120 79646165     download already
   165d0:	000a0d2e 72617473 6f645f74 6f6c6e77     ....start_downlo
   165e0:	203a6461 646e6573 20676e69 50545448     ad: sending HTTP
   165f0:	71657220 74736575 0d2e2e2e 0000000a      request........
   16600:	70747468 322f2f3a 36312e30 34322e39     http://20.169.24
   16610:	38392e31 7365542f 622e4274 00006e69     1.98/TestB.bin..
   16620:	726f7473 69665f65 705f656c 656b6361     store_file_packe
   16630:	65203a74 7974706d 74616420 0a0d2e61     t: empty data...
   16640:	00000000 64333025 00000000 726f7473     ....%03d....stor
   16650:	69665f65 705f656c 656b6361 63203a74     e_file_packet: c
   16660:	74616572 20676e69 656c6966 73255b20     reating file [%s
   16670:	000a0d5d 726f7473 69665f65 705f656c     ]...store_file_p
   16680:	656b6361 66203a74 20656c69 656d616e     acket: file name
   16690:	20736920 61766e69 2e64696c 776f4420      is invalid. Dow
   166a0:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   166b0:	0000000a 726f7473 69665f65 705f656c     ....store_file_p
   166c0:	656b6361 66203a74 20656c69 61657263     acket: file crea
   166d0:	6e6f6974 72726520 2021726f 3a746572     tion error! ret:
   166e0:	0a0d6425 00000000 726f7473 69665f65     %d......store_fi
   166f0:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   16700:	74697277 72652065 2c726f72 776f6420     write error, dow
   16710:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
   16720:	0000000a 726f7473 69665f65 705f656c     ....store_file_p
   16730:	656b6361 72203a74 69656365 5b646576     acket: received[
   16740:	5d756c25 6966202c 7320656c 5b657a69     %lu], file size[
   16750:	5d756c25 00000a0d 726f7473 69665f65     %lu]....store_fi
   16760:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
   16770:	6e776f64 64616f6c 73206465 65636375     downloaded succe
   16780:	75667373 2e796c6c 00000a0d 4f525245     ssfully.....ERRO
   16790:	6e492052 61697469 697a696c 5720676e     R Initializing W
   167a0:	20696669 61746144 65757120 21736575     ifi Data queues!
   167b0:	00000a0d 35455345 2d203631 66695720     ....ESE516 - Wif
   167c0:	6e492069 43207469 0d65646f 0000000a     i Init Code.....
   167d0:	666e6f63 72756769 74685f65 635f7074     configure_http_c
   167e0:	6e65696c 48203a74 20505454 65696c63     lient: HTTP clie
   167f0:	6920746e 6974696e 7a696c61 6f697461     nt initializatio
   16800:	6166206e 64656c69 72282021 25207365     n failed! (res %
   16810:	0a0d2964 00000000 6e69616d 326d203a     d)......main: m2
   16820:	69775f6d 695f6966 2074696e 6c6c6163     m_wifi_init call
   16830:	72726520 2021726f 73657228 29642520      error! (res %d)
   16840:	00000a0d 6e69616d 6f63203a 63656e6e     ....main: connec
   16850:	676e6974 206f7420 69466957 20504120     ting to WiFi AP 
   16860:	2e2e7325 000a0d2e 6e6e6f43 65746365     %s......Connecte
   16870:	6f742064 54514d20 72422054 72656b6f     d to MQTT Broker
   16880:	000a0d21 00006425 00007d5d 475f3250     !...%d..]}..P2_G
   16890:	5f454d41 35455345 545f3631 00000030     AME_ESE516_T0...
   168a0:	6d69227b 3a227875 202c6425 756d6922     {"imux":%d, "imu
   168b0:	203a2279 202c6425 756d6922 203a227a     y": %d, "imuz": 
   168c0:	007d6425 4941465b 72205d4c 25207365     %d}.[FAIL] res %
   168d0:	000a0d64 67616c46 78742e41 64612074     d...FlagA.txt ad
   168e0:	21646564 00000a0d 545f3150 45504d45     ded!....P1_TEMPE
   168f0:	55544152 455f4552 31354553 30545f36     RATURE_ESE516_T0
   16900:	00000000 5454514d 6e657320 73252064     ....MQTT send %s
   16910:	00000a0d 6c463a30 2e416761 00747874     ....0:FlagA.txt.
   16920:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   16930:	4f435f49 43454e4e 0d444554 0000000a     I_CONNECTED.....
   16940:	69666977 3a62635f 4d324d20 4649575f     wifi_cb: M2M_WIF
   16950:	49445f49 4e4f4353 5443454e 0a0d4445     I_DISCONNECTED..
   16960:	00000000 7472306e 75304368 7972746e     ....n0rthC0untry
   16970:	00000000 6b746544 49206e69 4e20544f     ....Detkin IOT N
   16980:	6874726f 00000000 69666977 3a62635f     orth....wifi_cb:
   16990:	20504920 72646461 20737365 25207369      IP address is %
   169a0:	75252e75 2e75252e 0a0d7525 00000000     u.%u.%u.%u......
   169b0:	6f727245 6f632072 63656e6e 676e6974     Error connecting
   169c0:	206f7420 5454514d 6f724220 2172656b      to MQTT Broker!
   169d0:	00000a0d 00082008 736e6553 4520726f     ..... ..Sensor E
   169e0:	726f7272 21642520 00000a0d 74736944     rror %d!....Dist
   169f0:	65636e61 6425203a 0d6d6d20 0000000a     ance: %d mm.....
   16a00:	74736944 65636e61 74614420 514d2061     Distance Data MQ
   16a10:	50205454 0d74736f 0000000a 76726553     TT Post.....Serv
   16a20:	6341206f 74617574 2e676e69 0a0d2e2e     o Actuating.....
   16a30:	00000000 65636341 6172656c 6e6f6974     ....Acceleration
   16a40:	676d5b20 20583a5d 59096425 09642520      [mg]:X %d.Y %d.
   16a50:	6425205a 00000a0d 64206f4e 20617461     Z %d....No data 
   16a60:	64616572 0d202179 0000000a 706d6554     ready! .....Temp
   16a70:	74617265 3a657275 20752520 00000a0d     erature: %u ....
   16a80:	6e79654b 70206d75 6d617261 72657465     Keynum parameter
   16a90:	74756f20 20666f20 676e6172 30282065      out of range (0
   16aa0:	2935312d 000a0d2e 20646552 61726170     -15)....Red para
   16ab0:	6574656d 756f2072 666f2074 6e617220     meter out of ran
   16ac0:	28206567 35322d30 0d2e2935 0000000a     ge (0-255)......
   16ad0:	65657247 6170206e 656d6172 20726574     Green parameter 
   16ae0:	2074756f 7220666f 65676e61 2d302820     out of range (0-
   16af0:	29353532 000a0d2e 65756c42 72617020     255)....Blue par
   16b00:	74656d61 6f207265 6f207475 61722066     ameter out of ra
   16b10:	2065676e 322d3028 2e293535 00000a0d     nge (0-255).....
   16b20:	6f727245 65732072 6e697474 454c2067     Error setting LE
   16b30:	25203a44 000a0d64 6f727245 70752072     D: %d...Error up
   16b40:	69746164 4c20676e 203a4445 0a0d6425     dating LED: %d..
   16b50:	00000000 2044454c 73206425 74207465     ....LED %d set t
   16b60:	3a52206f 47206425 2064253a 64253a42     o R:%d G:%d B:%d
   16b70:	00000a0d 64746567 61747369 0065636e     ....getdistance.
   16b80:	64746567 61747369 3a65636e 74655220     getdistance: Ret
   16b90:	736e7275 65687420 73696420 636e6174     urns the distanc
   16ba0:	72662065 74206d6f 55206568 30312d53     e from the US-10
   16bb0:	65532030 726f736e 000a0d2e 64656566     0 Sensor....feed
   16bc0:	00000000 64656566 6546203a 74206465     ....feed: Feed t
   16bd0:	66206568 0d687369 0000000a 706d6574     he fish.....temp
   16be0:	00000000 706d6574 6552203a 6e727574     ....temp: Return
   16bf0:	20612073 756c6176 72662065 74206d6f     s a value from t
   16c00:	74206568 20706d65 736e6573 0a0d726f     he temp sensor..
   16c10:	00000000 00736c63 3a736c63 656c4320     ....cls.cls: Cle
   16c20:	20737261 20656874 6d726574 6c616e69     ars the terminal
   16c30:	72637320 0d6e6565 0000000a 0064656c      screen.....led.
   16c40:	2064656c 79656b5b 5d6d756e 5b5d525b     led [keynum][R][
   16c50:	425b5d47 53203a5d 20737465 20656874     G][B]: Sets the 
   16c60:	65766967 454c206e 6f742044 65687420     given LED to the
   16c70:	76696720 52206e65 422c472c 6c617620      given R,G,B val
   16c80:	2e736575 00000a0d 65736572 00000074     ues.....reset...
   16c90:	65736572 52203a74 74657365 68742073     reset: Resets th
   16ca0:	65642065 65636976 00000a0d 00756d69     e device....imu.
   16cb0:	3a756d69 74655220 736e7275 76206120     imu: Returns a v
   16cc0:	65756c61 6f726620 6874206d 4d492065     alue from the IM
   16cd0:	000a0d55 65657246 534f5452 494c4320     U...FreeRTOS CLI
   16ce0:	540a0d2e 20657079 706c6548 206f7420     ...Type Help to 
   16cf0:	77656976 6c206120 20747369 7220666f     view a list of r
   16d00:	73696765 65726574 6f632064 6e616d6d     egistered comman
   16d10:	0d2e7364 0000000a 6c756f43 6f6e2064     ds......Could no
   16d20:	6c612074 61636f6c 73206574 70616d65     t allocate semap
   16d30:	65726f68 00000a0d 0000616f 325b6325     hore....oa..%c[2
   16d40:	003e0d4b                                K.>.

00016d44 <xClearScreen>:
   16d44:	00016c14 00016c18 00002cb1 00000000     .l...l...,......
   16d54:	325b6325 0000004a                       %c[2J...

00016d5c <xDistanceSensorGetDistance>:
   16d5c:	00016b74 00016b80 00002d9d 00000000     tk...k...-......

00016d6c <xFeedCommand>:
   16d6c:	00016bbc 00016bc4 00002d45 00000000     .k...k..E-......

00016d7c <xImuGetCommand>:
   16d7c:	00016cac 00016cb0 00002bfd 00000000     .l...l...+......

00016d8c <xNeotrellisTurnLEDCommand>:
   16d8c:	00016c3c 00016c40 00002e19 00000004     <l..@l..........

00016d9c <xResetCommand>:
   16d9c:	00016c88 00016c90 00002be5 00000000     .l...l...+......

00016dac <xTempGetCommand>:
   16dac:	00016bdc 00016be4 00002cdd 00000000     .k...k...,......
   16dbc:	6c756f43 6f6e2064 6e692074 61697469     Could not initia
   16dcc:	657a696c 73694420 636e6174 65532065     lize Distance Se
   16ddc:	726f736e 00000021 00001010 0000050e     nsor!...........
   16dec:	6f636e49 63657272 6f632074 6e616d6d     Incorrect comman
   16dfc:	61702064 656d6172 28726574 202e2973     d parameter(s). 
   16e0c:	746e4520 22207265 706c6568 6f742022      Enter "help" to
   16e1c:	65697620 20612077 7473696c 20666f20      view a list of 
   16e2c:	69617661 6c62616c 6f632065 6e616d6d     available comman
   16e3c:	0d2e7364 000a0d0a 6d6d6f43 20646e61     ds......Command 
   16e4c:	20746f6e 6f636572 73696e67 202e6465     not recognised. 
   16e5c:	746e4520 27207265 706c6568 6f742027      Enter 'help' to
   16e6c:	65697620 20612077 7473696c 20666f20      view a list of 
   16e7c:	69617661 6c62616c 6f632065 6e616d6d     available comman
   16e8c:	0d2e7364 000a0d0a 706c6568 00000000     ds......help....
   16e9c:	65680a0d 0d3a706c 694c200a 20737473     ..help:.. Lists 
   16eac:	206c6c61 20656874 69676572 72657473     all the register
   16ebc:	63206465 616d6d6f 0d73646e 000a0d0a     ed commands.....

00016ecc <xHelpCommand>:
   16ecc:	00016e94 00016e9c 0000421d 00000000     .n...n...B......
   16edc:	00004690 00004688 0000468c 000046a8     .F...F...F...F..
   16eec:	00004684 00004694 00004698 0000469c     .F...F...F...F..
   16efc:	000046a0 20746f4e 756f6e65 54206867     .F..Not enough T
   16f0c:	204b5341 646e6168 2073656c 6e69202d     ASK handles - in
   16f1c:	61657263 54206573 435f4352 4e5f4746     crease TRC_CFG_N
   16f2c:	4b534154 206e6920 53637274 7370616e     TASK in trcSnaps
   16f3c:	43746f68 69666e6f 00682e67 20746f4e     hotConfig.h.Not 
   16f4c:	756f6e65 49206867 68205253 6c646e61     enough ISR handl
   16f5c:	2d207365 636e6920 73616572 52542065     es - increase TR
   16f6c:	46435f43 494e5f47 69205253 7274206e     C_CFG_NISR in tr
   16f7c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   16f8c:	00000068 20746f4e 756f6e65 53206867     h...Not enough S
   16f9c:	50414d45 45524f48 6e616820 73656c64     EMAPHORE handles
   16fac:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   16fbc:	5f474643 4d45534e 4f485041 69204552     CFG_NSEMAPHORE i
   16fcc:	7274206e 616e5363 6f687370 6e6f4374     n trcSnapshotCon
   16fdc:	2e676966 00000068 20746f4e 756f6e65     fig.h...Not enou
   16fec:	4d206867 58455455 6e616820 73656c64     gh MUTEX handles
   16ffc:	69202d20 6572636e 20657361 5f435254      - increase TRC_
   1700c:	5f474643 54554d4e 69205845 7274206e     CFG_NMUTEX in tr
   1701c:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   1702c:	00000068 20746f4e 756f6e65 51206867     h...Not enough Q
   1703c:	45554555 6e616820 73656c64 69202d20     UEUE handles - i
   1704c:	6572636e 20657361 5f435254 5f474643     ncrease TRC_CFG_
   1705c:	4555514e 69204555 7274206e 616e5363     NQUEUE in trcSna
   1706c:	6f687370 6e6f4374 2e676966 00000068     pshotConfig.h...
   1707c:	20746f4e 756f6e65 54206867 52454d49     Not enough TIMER
   1708c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   1709c:	20657361 5f435254 5f474643 4d49544e     ase TRC_CFG_NTIM
   170ac:	69205245 7274206e 616e5363 6f687370     ER in trcSnapsho
   170bc:	6e6f4374 2e676966 00000068 20746f4e     tConfig.h...Not 
   170cc:	756f6e65 45206867 544e4556 554f5247     enough EVENTGROU
   170dc:	61682050 656c646e 202d2073 72636e69     P handles - incr
   170ec:	65736165 43525420 4746435f 56454e5f     ease TRC_CFG_NEV
   170fc:	47544e45 50554f52 206e6920 53637274     ENTGROUP in trcS
   1710c:	7370616e 43746f68 69666e6f 00682e67     napshotConfig.h.
   1711c:	20746f4e 756f6e65 53206867 41455254     Not enough STREA
   1712c:	4655424d 20524546 646e6168 2073656c     MBUFFER handles 
   1713c:	6e69202d 61657263 54206573 435f4352     - increase TRC_C
   1714c:	4e5f4746 45525453 55424d41 52454646     FG_NSTREAMBUFFER
   1715c:	206e6920 53637274 7370616e 43746f68      in trcSnapshotC
   1716c:	69666e6f 00682e67 20746f4e 756f6e65     onfig.h.Not enou
   1717c:	4d206867 41535345 55424547 52454646     gh MESSAGEBUFFER
   1718c:	6e616820 73656c64 69202d20 6572636e      handles - incre
   1719c:	20657361 5f435254 5f474643 53454d4e     ase TRC_CFG_NMES
   171ac:	45474153 46465542 69205245 7274206e     SAGEBUFFER in tr
   171bc:	616e5363 6f687370 6e6f4374 2e676966     cSnapshotConfig.
   171cc:	00000068 547a7370 65636172 45746547     h...pszTraceGetE
   171dc:	726f7272 646e6148 3a73656c 766e4920     rrorHandles: Inv
   171ec:	64696c61 6a626f20 63746365 7373616c     alid objectclass
   171fc:	00000021 61725476 6e456563 656c6261     !...vTraceEnable
   1720c:	43525428 4154535f 415f5452 54494157     (TRC_START_AWAIT
   1721c:	534f485f 6e202954 6120746f 776f6c6c     _HOST) not allow
   1722c:	69206465 6e53206e 68737061 6d20746f     ed in Snapshot m
   1723c:	0065646f 78656e55 74636570 61206465     ode.Unexpected a
   1724c:	6d756772 20746e65 76206f74 63617254     rgument to vTrac
   1725c:	616e4565 20656c62 616e7328 6f687370     eEnable (snapsho
   1726c:	6f6d2074 00296564 43415254 53415f45     t mode).TRACE_AS
   1727c:	54524553 7270203a 65684376 61446b63     SERT: prvCheckDa
   1728c:	6f546174 764f6542 72777265 65747469     taToBeOverwritte
   1729c:	726f466e 746c754d 746e4569 76457972     nForMultiEntryEv
   172ac:	73746e65 6f6e203a 746e4566 73656972     ents: nofEntries
   172bc:	68436f54 206b6365 30203d3d 00000000     ToCheck == 0....
   172cc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   172dc:	61725476 65476563 53544474 6e49203a     vTraceGetDTS: In
   172ec:	696c6176 61762064 2065756c 20726f66     valid value for 
   172fc:	61726170 616d5f6d 53544478 00000000     param_maxDTS....
   1730c:	20646142 61726170 616d5f6d 53544478     Bad param_maxDTS
   1731c:	206e6920 54767270 65636172 44746547      in prvTraceGetD
   1732c:	00005354 43415254 53415f45 54524553     TS..TRACE_ASSERT
   1733c:	7270203a 61725476 65476563 6a624f74     : prvTraceGetObj
   1734c:	48746365 6c646e61 49203a65 6c61766e     ectHandle: Inval
   1735c:	76206469 65756c61 726f6620 6a626f20     id value for obj
   1736c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
   1737c:	53415f45 54524553 7270203a 61725476     E_ASSERT: prvTra
   1738c:	65476563 72615074 203a6d61 61766e49     ceGetParam: Inva
   1739c:	2064696c 756c6176 6f662065 61702072     lid value for pa
   173ac:	5f6d6172 0078616d 43415254 53415f45     ram_max.TRACE_AS
   173bc:	54524553 7270203a 61725476 65476563     SERT: prvTraceGe
   173cc:	69725074 7469726f 6f725079 74726570     tPriorityPropert
   173dc:	6f203a79 63656a62 616c6374 3e207373     y: objectclass >
   173ec:	5254203d 5f454341 414c434e 53455353     = TRACE_NCLASSES
   173fc:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   1740c:	7270203a 61725476 65476563 69725074     : prvTraceGetPri
   1741c:	7469726f 6f725079 74726570 49203a79     orityProperty: I
   1742c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   1743c:	00646920 63617254 65522065 64726f63      id.Trace Record
   1744c:	44207265 006f6d65 65747441 2074706d     er Demo.Attempt 
   1745c:	69206f74 7865646e 74756f20 65646973     to index outside
   1746c:	65766520 6220746e 65666675 00002172      event buffer!..
   1747c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   1748c:	61725476 65536563 6a624f74 4e746365     vTraceSetObjectN
   1749c:	3a656d61 6d616e20 3d3d2065 4c554e20     ame: name == NUL
   174ac:	0000004c 656c6c49 206c6167 656a626f     L...Illegal obje
   174bc:	63207463 7373616c 206e6920 54767270     ct class in prvT
   174cc:	65636172 4f746553 63656a62 6d614e74     raceSetObjectNam
   174dc:	00000065 656c6c49 206c6167 646e6168     e...Illegal hand
   174ec:	2820656c 69202930 7270206e 61725476     le (0) in prvTra
   174fc:	65536563 6a624f74 4e746365 2e656d61     ceSetObjectName.
   1750c:	00000000 43415254 53415f45 54524553     ....TRACE_ASSERT
   1751c:	7270203a 61725476 65536563 6a624f74     : prvTraceSetObj
   1752c:	53746365 65746174 626f203a 7463656a     ectState: object
   1753c:	73616c63 3d3e2073 41525420 4e5f4543     class >= TRACE_N
   1754c:	53414c43 00534553 43415254 53415f45     CLASSES.TRACE_AS
   1755c:	54524553 7270203a 61725476 65536563     SERT: prvTraceSe
   1756c:	6a624f74 53746365 65746174 6e49203a     tObjectState: In
   1757c:	696c6176 61762064 2065756c 20726f66     valid value for 
   1758c:	00006469 43415254 53415f45 54524553     id..TRACE_ASSERT
   1759c:	7270203a 61725476 65536563 69725074     : prvTraceSetPri
   175ac:	7469726f 6f725079 74726570 6f203a79     orityProperty: o
   175bc:	63656a62 616c6374 3e207373 5254203d     bjectclass >= TR
   175cc:	5f454341 414c434e 53455353 00000000     ACE_NCLASSES....
   175dc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   175ec:	61725476 65536563 69725074 7469726f     vTraceSetPriorit
   175fc:	6f725079 74726570 49203a79 6c61766e     yProperty: Inval
   1760c:	76206469 65756c61 726f6620 00646920     id value for id.
   1761c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   1762c:	61725476 65536563 73615474 736e496b     vTraceSetTaskIns
   1763c:	636e6174 6e694665 65687369 49203a64     tanceFinished: I
   1764c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   1765c:	6e616820 00656c64 43415254 53415f45      handle.TRACE_AS
   1766c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1767c:	4b65726f 656e7265 6c61436c 65203a6c     oreKernelCall: e
   1768c:	65646f63 203d3e20 46467830 00000000     code >= 0xFF....
   1769c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   176ac:	61725476 74536563 4b65726f 656e7265     vTraceStoreKerne
   176bc:	6c61436c 6f203a6c 63656a62 616c4374     lCall: objectCla
   176cc:	3e207373 5254203d 5f454341 414c434e     ss >= TRACE_NCLA
   176dc:	53455353 00000000 43415254 53415f45     SSES....TRACE_AS
   176ec:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   176fc:	4b65726f 656e7265 6c61436c 49203a6c     oreKernelCall: I
   1770c:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   1771c:	6a626f20 4e746365 65626d75 00000072      objectNumber...
   1772c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   1773c:	68676968 69727020 7469726f 53492079     high priority IS
   1774c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   1775c:	29322820 00000000 43415254 53415f45      (2)....TRACE_AS
   1776c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1777c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
   1778c:	6d754e68 63697265 61726150 6c6e4f6d     hNumericParamOnl
   1779c:	49203a79 6c61766e 76206469 65756c61     y: Invalid value
   177ac:	726f6620 74766520 65646f63 00000000      for evtcode....
   177bc:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   177cc:	68676968 69727020 7469726f 53492079     high priority IS
   177dc:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   177ec:	29342820 00000000 43415254 53415f45      (4)....TRACE_AS
   177fc:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1780c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
   1781c:	72615068 203a6d61 63747665 2065646f     hParam: evtcode 
   1782c:	30203d3e 00464678 43415254 53415f45     >= 0xFF.TRACE_AS
   1783c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1784c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
   1785c:	72615068 203a6d61 656a626f 6c437463     hParam: objectCl
   1786c:	20737361 54203d3e 45434152 4c434e5f     ass >= TRACE_NCL
   1787c:	45535341 00000053 43415254 53415f45     ASSES...TRACE_AS
   1788c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1789c:	4b65726f 656e7265 6c61436c 7469576c     oreKernelCallWit
   178ac:	72615068 203a6d61 61766e49 2064696c     hParam: Invalid 
   178bc:	756c6176 6f662065 626f2072 7463656a     value for object
   178cc:	626d754e 00007265 6f636552 72656472     Number..Recorder
   178dc:	73756220 202d2079 68676968 69727020      busy - high pri
   178ec:	7469726f 53492079 73752052 20676e69     ority ISR using 
   178fc:	63737973 3f6c6c61 29332820 00000000     syscall? (3)....
   1790c:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   1791c:	61725476 74536563 5465726f 526b7361     vTraceStoreTaskR
   1792c:	79646165 6e49203a 696c6176 61762064     eady: Invalid va
   1793c:	2065756c 20726f66 646e6168 0000656c     lue for handle..
   1794c:	6f636552 72656472 73756220 202d2079     Recorder busy - 
   1795c:	68676968 69727020 7469726f 53492079     high priority IS
   1796c:	73752052 20676e69 63737973 3f6c6c61     R using syscall?
   1797c:	29312820 00000000 43415254 53415f45      (1)....TRACE_AS
   1798c:	54524553 7270203a 61725476 74536563     SERT: prvTraceSt
   1799c:	5465726f 736b7361 63746977 49203a68     oreTaskswitch: I
   179ac:	6c61766e 76206469 65756c61 726f6620     nvalid value for
   179bc:	73617420 61685f6b 656c646e 00000000      task_handle....
   179cc:	43415254 53415f45 54524553 7270203a     TRACE_ASSERT: pr
   179dc:	61725476 65476563 6a624f74 53746365     vTraceGetObjectS
   179ec:	65746174 6e49203a 696c6176 61762064     tate: Invalid va
   179fc:	2065756c 20726f66 00006469 43415254     lue for id..TRAC
   17a0c:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
   17a1c:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
   17a2c:	76206469 65756c61 726f6620 6a626f20     id value for obj
   17a3c:	63746365 7373616c 00000000 43415254     ectclass....TRAC
   17a4c:	53415f45 54524553 6975203a 65646e49     E_ASSERT: uiInde
   17a5c:	4f664f78 63656a62 49203a74 6c61766e     xOfObject: Inval
   17a6c:	76206469 65756c61 726f6620 6a626f20     id value for obj
   17a7c:	68746365 6c646e61 00000065 43415254     ecthandle...TRAC
   17a8c:	53415f45 54524553 6552203a 64726f63     E_ASSERT: Record
   17a9c:	6e207265 6920746f 6974696e 7a696c61     er not initializ
   17aac:	202e6465 20657355 61725476 6e456563     ed. Use vTraceEn
   17abc:	656c6261 69202928 6574736e 00216461     able() instead!.
   17acc:	61747328 70757472 00000029 43415254     (startup)...TRAC
   17adc:	53415f45 54524553 5478203a 65636172     E_ASSERT: xTrace
   17aec:	69676552 72657473 69727453 203a676e     RegisterString: 
   17afc:	6562616c 3d3d206c 4c554e20 0000004c     label == NULL...
   17b0c:	43415254 53415f45 54524553 6552203a     TRACE_ASSERT: Re
   17b1c:	64726f63 6e207265 6920746f 6974696e     corder not initi
   17b2c:	7a696c61 202c6465 6c6c6163 72547620     alized, call vTr
   17b3c:	45656361 6c62616e 20292865 73726966     aceEnable() firs
   17b4c:	00002174 454c4449 00000000 00007c14     t!..IDLE.....|..
   17b5c:	00007c14 00007c14 00007b8c 00007c56     .|...|...{..V|..
   17b6c:	00007c70 00007c14 00007c14 00007b8c     p|...|...|...{..
   17b7c:	00007c56 20726d54 00637653              V|..Tmr Svc.

00017b88 <mmc_trans_multipliers>:
   17b88:	00000000 0000000a 0000000c 0000000d     ................
   17b98:	0000000f 00000014 0000001a 0000001e     ................
   17ba8:	00000023 00000028 0000002d 00000034     #...(...-...4...
   17bb8:	00000037 0000003c 00000046 00000050     7...<...F...P...

00017bc8 <sd_mmc_trans_units>:
   17bc8:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00017be4 <sd_trans_multipliers>:
   17be4:	00000000 0000000a 0000000c 0000000d     ................
   17bf4:	0000000f 00000014 00000019 0000001e     ................
   17c04:	00000023 00000028 0000002d 00000032     #...(...-...2...
   17c14:	00000037 0000003c 00000046 00000050     7...<...F...P...

00017c24 <__FUNCTION__.16102>:
   17c24:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   17c34:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   17c44:	00005d64 61766e69 6564696c 636f6920     d]..invalide ioc
   17c54:	6320746c 000a646d 0000000d 00009c28     lt cmd......(...
   17c64:	00009bf8 00009bf0 00009c08 00009c00     ................
   17c74:	00009c20 00009c10 00009c18               ...........

00017c80 <__FUNCTION__.16970>:
   17c80:	5f666968 646e6573 00000000              hif_send....

00017c8c <__FUNCTION__.16980>:
   17c8c:	5f666968 00727369                       hif_isr.

00017c94 <__FUNCTION__.16989>:
   17c94:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00017ca4 <__FUNCTION__.17001>:
   17ca4:	5f666968 65636572 00657669              hif_receive.

00017cb0 <__FUNCTION__.17017>:
   17cb0:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   17cc0:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   17cd0:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   17ce0:	0a6c6961 00000000 66696828 64612029     ail.....(hif) ad
   17cf0:	73657264 75622073 61662073 000a6c69     dress bus fail..
   17d00:	66696828 6f432029 70757272 20646574     (hif) Corrupted 
   17d10:	6b636170 53207465 20657a69 7525203d     packet Size = %u
   17d20:	204c3c20 7525203d 2047202c 7525203d      <L = %u, G = %u
   17d30:	504f202c 25203d20 3e583230 0000000a     , OP = %02X>....
   17d40:	49464957 6c616320 6361626c 7369206b     WIFI callback is
   17d50:	746f6e20 67657220 65747369 0a646572      not registered.
   17d60:	00000000 6b6f6353 63207465 626c6c61     ....Scoket callb
   17d70:	206b6361 6e207369 7220746f 73696765     ack is not regis
   17d80:	65726574 00000a64 2061744f 6c6c6163     tered...Ota call
   17d90:	6b636162 20736920 20746f6e 69676572     back is not regi
   17da0:	72657473 000a6465 70797243 63206f74     stered..Crypto c
   17db0:	626c6c61 206b6361 6e207369 7220746f     allback is not r
   17dc0:	73696765 65726574 00000a64 6d676953     egistered...Sigm
   17dd0:	61632061 61626c6c 69206b63 6f6e2073     a callback is no
   17de0:	65722074 74736967 64657265 0000000a     t registered....
   17df0:	66696828 6e692029 696c6176 72672064     (hif) invalid gr
   17e00:	2070756f 000a4449 66696828 6f682029     oup ID..(hif) ho
   17e10:	61207473 64207070 276e6469 65732074     st app didn't se
   17e20:	58522074 6e6f4420 253c2065 253c3e75     t RX Done <%u><%
   17e30:	000a3e58 66696828 72572029 20676e6f     X>..(hif) Wrong 
   17e40:	657a6953 0000000a 66696828 61462029     Size....(hif) Fa
   17e50:	2065736c 65746e69 70757272 6c252074     lse interrupt %l
   17e60:	00000078 66696828 61462029 74206c69     x...(hif) Fail t
   17e70:	6552206f 69206461 7265746e 74707572     o Read interrupt
   17e80:	67657220 0000000a 46494828 61462029      reg....(HIF) Fa
   17e90:	74206c69 6168206f 656c646e 746e6920     il to handle int
   17ea0:	75727265 25207470 72742064 67412079     errupt %d try Ag
   17eb0:	2e6e6961 00000a2e 66696820 6365725f     ain..... hif_rec
   17ec0:	65766965 6e49203a 696c6176 72612064     eive: Invalid ar
   17ed0:	656d7567 000a746e 20505041 75716552     gument..APP Requ
   17ee0:	65747365 69532064 6920657a 616c2073     ested Size is la
   17ef0:	72656772 61687420 6874206e 65722065     rger than the re
   17f00:	65766963 75622064 72656666 7a697320     cived buffer siz
   17f10:	253c2065 253c3e75 0a3e756c 00000000     e <%u><%lu>.....
   17f20:	20505041 75716552 65747365 64412064     APP Requested Ad
   17f30:	73657264 65622073 646e6f79 65687420     dress beyond the
   17f40:	63657220 64657669 66756220 20726566      recived buffer 
   17f50:	72646461 20737365 20646e61 676e656c     address and leng
   17f60:	000a6874 20705247 6425203f 0000000a     th..GRp ? %d....
   17f70:	50504128 4e492829 00294f46 776f6c53     (APP)(INFO).Slow
   17f80:	20676e69 6e776f64 0a2e2e2e 00000000     ing down........
   17f90:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
   17fa0:	74207075 63206568 0a706968 00000000     up the chip.....

00017fb0 <__FUNCTION__.16952>:
   17fb0:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00017fbc <__FUNCTION__.16981>:
   17fbc:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00017fcc <__FUNCTION__.17012>:
   17fcc:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   17fdc:	0063735f 666e6f43 7463696c 49206465     _sc.Conflicted I
   17fec:	20222050 252e7525 75252e75 2075252e     P " %u.%u.%u.%u 
   17ffc:	000a2022 20514552 20746f4e 69666564     " ..REQ Not defi
   1800c:	2064656e 000a6425 2079654b 6e207369     ned %d..Key is n
   1801c:	7620746f 64696c61 0000000a 61766e49     ot valid....Inva
   1802c:	2064696c 0a79654b 00000000 44495353     lid Key.....SSID
   1803c:	4e454c20 564e4920 44494c41 0000000a      LEN INVALID....
   1804c:	49204843 4c41564e 000a4449 61766e49     CH INVALID..Inva
   1805c:	2064696c 20706557 2079656b 65646e69     lid Wep key inde
   1806c:	64252078 0000000a 61766e49 2064696c     x %d....Invalid 
   1807c:	20706557 2079656b 676e656c 25206874     Wep key length %
   1808c:	00000a64 6f636e49 63657272 53502074     d...Incorrect PS
   1809c:	656b204b 656c2079 6874676e 0000000a     K key length....
   180ac:	65646e75 656e6966 65732064 79742063     undefined sec ty
   180bc:	000a6570 6d726946 65726177 72657620     pe..Firmware ver
   180cc:	3a202020 2e752520 252e7525 76532075        : %u.%u.%u Sv
   180dc:	7665726e 0a752520 00000000 6d726946     nrev %u.....Firm
   180ec:	65726177 69754220 2520646c 69542073     ware Build %s Ti
   180fc:	2520656d 00000a73 6d726946 65726177     me %s...Firmware
   1810c:	6e694d20 69726420 20726576 20726576      Min driver ver 
   1811c:	7525203a 2e75252e 000a7525 76697244     : %u.%u.%u..Driv
   1812c:	76207265 203a7265 252e7525 75252e75     er ver: %u.%u.%u
   1813c:	0000000a 313a3430 37333a38 00000000     ....04:18:37....
   1814c:	20636544 32203831 00333230 76697244     Dec 18 2023.Driv
   1815c:	62207265 746c6975 20746120 25097325     er built at %s.%
   1816c:	00000a73 6d73694d 68637461 72694620     s...Mismatch Fir
   1817c:	7277616d 65562065 6f697372 00000a6e     mawre Version...

0001818c <__FUNCTION__.16809>:
   1818c:	70696863 6b61775f 00000065              chip_wake...

00018198 <__FUNCTION__.16858>:
   18198:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   181a8:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   181b8:	0a657a69 00000000 20737542 6f727265     ize.....Bus erro
   181c8:	35282072 64252e29 786c2520 0000000a     r (5).%d %lx....
   181d8:	6c696146 74206465 6177206f 2070756b     Failed to wakup 
   181e8:	20656874 70696863 0000000a 76697244     the chip....Driv
   181f8:	65567265 666e4972 30203a6f 38302578     erVerInfo: 0x%08
   18208:	000a786c                                lx..

0001820c <__FUNCTION__.16856>:
   1820c:	645f6d6e 695f7672 0074696e              nm_drv_init.

00018218 <__FUNCTION__.16863>:
   18218:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   18228:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   18238:	6965645f 2074696e 6c696166 0000000a     _deinit fail....
   18248:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   18258:	73616c66 69642068 6c626173 61662065     flash disable fa
   18268:	000a6c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   18278:	6c696166 696e6920 75622074 00000a73     fail init bus...
   18288:	6c696166 74206465 6e65206f 656c6261     failed to enable
   18298:	746e6920 75727265 2e737470 00000a2e      interrupts.....
   182a8:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   182b8:	6e69206c 62207469 000a7375 70696843     l init bus..Chip
   182c8:	20444920 0a786c25 00000000 0000aba4      ID %lx.........
   182d8:	0000aba4 0000abd4 0000ab56 0000ab7a     ........V...z...
   182e8:	0000ab88 0000abba 0000abba 0000ac02     ................
   182f8:	0000ab3a 0000ac38 0000ac38 0000ac38     :...8...8...8...
   18308:	0000ac38 0000ab96 0000ae26 0000ae26     8.......&...&...
   18318:	0000ae5e 0000add0 0000adf6 0000ae06     ^...............
   18328:	0000ae40 0000ae40 0000ae98 0000adac     @...@...........
   18338:	0000b26c 0000b26c 0000b26c 0000b26c     l...l...l...l...
   18348:	0000ae16 cac4c9c3                       ........

00018350 <__FUNCTION__.16131>:
   18350:	5f697073 00646d63                       spi_cmd.

00018358 <__FUNCTION__.16138>:
   18358:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

00018368 <__FUNCTION__.16147>:
   18368:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00018374 <__FUNCTION__.16180>:
   18374:	5f697073 5f646d63 706d6f63 6574656c     spi_cmd_complete
   18384:	00000000                                ....

00018388 <__FUNCTION__.16226>:
   18388:	5f697073 61746164 6972775f 00006574     spi_data_write..

00018398 <__FUNCTION__.16238>:
   18398:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000183a8 <__FUNCTION__.16249>:
   183a8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000183b8 <__FUNCTION__.16261>:
   183b8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

000183c8 <__FUNCTION__.16272>:
   183c8:	735f6d6e 725f6970 00646165              nm_spi_read.

000183d4 <__FUNCTION__.16293>:
   183d4:	735f6d6e 695f6970 0074696e              nm_spi_init.

000183e0 <crc7_syndrome_table>:
   183e0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   183f0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   18400:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   18410:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   18420:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   18430:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   18440:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   18450:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   18460:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   18470:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   18480:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   18490:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   184a0:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   184b0:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   184c0:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   184d0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   184e0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   184f0:	6e692064 6e726574 72206c61 20646165     d internal read 
   18500:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   18510:	6e6f2043 6572202c 69727974 7720676e     C on, retyring w
   18520:	20687469 20435243 2e66666f 000a2e2e     ith CRC off.....
   18530:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18540:	6e692064 6e726574 72206c61 20646165     d internal read 
   18550:	746f7270 6c6f636f 0a2e2e2e 00000000     protocol........
   18560:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18570:	6e692064 6e726574 77206c61 65746972     d internal write
   18580:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   18590:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   185a0:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   185b0:	64692070 0a2e2e2e 00000000 696d6e5b     p id........[nmi
   185c0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   185d0:	72202c64 20646165 636f6c62 2528206b     d, read block (%
   185e0:	29783830 0a2e2e2e 00000000 65736552     08x)........Rese
   185f0:	6e612074 65722064 20797274 25206425     t and retry %d %
   18600:	2520786c 00000a64 696d6e5b 69707320     lx %d...[nmi spi
   18610:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   18620:	65746972 6f6c6220 28206b63 78383025     rite block (%08x
   18630:	2e2e2e29 0000000a 696d6e5b 69707320     ).......[nmi spi
   18640:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   18650:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   18660:	20737562 6f727265 2e2e2e72 0000000a     bus error.......
   18670:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18680:	61642064 62206174 6b636f6c 69727720     d data block wri
   18690:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   186a0:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   186b0:	656c6961 61642064 62206174 6b636f6c     ailed data block
   186c0:	63726320 69727720 202c6574 20737562      crc write, bus 
   186d0:	6f727265 2e2e2e72 0000000a 696d6e5b     error.......[nmi
   186e0:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   186f0:	72652073 2e726f72 000a2e2e 696d6e5b     s error.....[nmi
   18700:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   18710:	72206174 6f707365 2065736e 64616572     ta response read
   18720:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   18730:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   18740:	206b636f 61746164 69727720 2e2e6574     ock data write..
   18750:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18760:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   18770:	73756220 72726520 2e2e726f 00000a2e      bus error......
   18780:	696d6e5b 69707320 73203a5d 62206970     [nmi spi]: spi b
   18790:	65666675 69732072 7420657a 73206f6f     uffer size too s
   187a0:	6c6c616d 64252820 25282029 000a2964     mall (%d) (%d)..
   187b0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   187c0:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   187d0:	20646d63 32302528 202c2978 70736572     cmd (%02x), resp
   187e0:	30252820 0a297832 00000000 696d6e5b      (%02x).....[nmi
   187f0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   18800:	74732064 20657461 70736572 65736e6f     d state response
   18810:	61747320 28206574 78323025 00000a29      state (%02x)...
   18820:	696d6e5b 69707320 45203a5d 726f7272     [nmi spi]: Error
   18830:	6164202c 72206174 20646165 70736572     , data read resp
   18840:	65736e6f 30252820 0a297832 00000000     onse (%02x).....
   18850:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   18860:	766f2072 75727265 6877206e 72206e65     r overrun when r
   18870:	69646165 6420676e 2e617461 0000000a     eading data.....
   18880:	696d6e5b 69707320 62203a5d 65666675     [nmi spi]: buffe
   18890:	766f2072 75727265 6877206e 72206e65     r overrun when r
   188a0:	69646165 6320676e 0a2e6372 00000000     eading crc......
   188b0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   188c0:	61642064 62206174 6b636f6c 61657220     d data block rea
   188d0:	62202c64 65207375 726f7272 0a2e2e2e     d, bus error....
   188e0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   188f0:	656c6961 61642064 62206174 6b636f6c     ailed data block
   18900:	63726320 61657220 62202c64 65207375      crc read, bus e
   18910:	726f7272 0a2e2e2e 00000000 696d6e5b     rror........[nmi
   18920:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   18930:	72206174 6f707365 2065736e 64616572     ta response read
   18940:	7562202c 72652073 2e726f72 000a2e2e     , bus error.....
   18950:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   18960:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   18970:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   18980:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   18990:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   189a0:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   189b0:	65736552 6e612074 65722064 20797274     Reset and retry 
   189c0:	25206425 000a786c 696d6e5b 69707320     %d %lx..[nmi spi
   189d0:	46203a5d 656c6961 6d632064 77202c64     ]: Failed cmd, w
   189e0:	65746972 67657220 30252820 2e297838     rite reg (%08x).
   189f0:	000a2e2e 65736552 6e612074 65722064     ....Reset and re
   18a00:	20797274 25206425 2520786c 000a786c     try %d %lx %lx..
   18a10:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
   18a20:	000a3e64 6b636f53 206f7420 656c6564     d>..Sock to dele
   18a30:	3c206574 0a3e6425 00000000 6b636f53     te <%d>.....Sock
   18a40:	25207465 65732064 6f697373 4449206e     et %d session ID
   18a50:	25203d20 000a0d64 42000800 42000c00      = %d......B...B
   18a60:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   18a70:	0000da3a 0000da36 0000da36 0000da9c     :...6...6.......
   18a80:	0000da9c 0000da4e 0000da40 0000da54     ....N...@...T...
   18a90:	0000da8a 0000dbc8 0000dba8 0000dba8     ................
   18aa0:	0000dc34 0000dbba 0000dbd6 0000dbac     4...............
   18ab0:	0000dbe4 0000dc24                       ....$...

00018ab8 <_tcc_apbcmasks>:
   18ab8:	00000100 00000200 00000400              ............

00018ac4 <_tcc_cc_nums>:
   18ac4:	00020204                                ....

00018ac8 <_tcc_gclk_ids>:
   18ac8:	001b1a1a                                ....

00018acc <_tcc_maxs>:
   18acc:	00ffffff 00ffffff 0000ffff              ............

00018ad8 <_tcc_ow_nums>:
   18ad8:	00020408                                ....

00018adc <_tcc_intflag>:
   18adc:	00000001 00000002 00000004 00000008     ................
   18aec:	00001000 00002000 00004000 00008000     ..... ...@......
   18afc:	00010000 00020000 00040000 00080000     ................

00018b0c <tcc_interrupt_vectors.12458>:
   18b0c:	0011100f                                ....

00018b10 <LfnOfs>:
   18b10:	07050301 12100e09 1c181614 0000001e     ................

00018b20 <excvt.4558>:
   18b20:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
   18b30:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
   18b40:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
   18b50:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   18b60:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
   18b70:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   18b80:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
   18b90:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   18ba0:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
   18bb0:	00005d5b                                []..

00018bb4 <Tbl>:
   18bb4:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
   18bc4:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
   18bd4:	00e600c9 00f400c6 00f200f6 00f900fb     ................
   18be4:	00d600ff 00f800dc 00d800a3 019200d7     ................
   18bf4:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
   18c04:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
   18c14:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
   18c24:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
   18c34:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
   18c44:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
   18c54:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
   18c64:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
   18c74:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
   18c84:	00da00de 00d900db 00dd00fd 00b400af     ................
   18c94:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
   18ca4:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00018cb4 <tbl_lower.4308>:
   18cb4:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
   18cc4:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
   18cd4:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
   18ce4:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
   18cf4:	00e100e0 00e300e2 00e500e4 00e700e6     ................
   18d04:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
   18d14:	00f100f0 00f300f2 00f500f4 00f800f6     ................
   18d24:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
   18d34:	01050103 01090107 010d010b 0111010f     ................
   18d44:	01150113 01190117 011d011b 0121011f     ..............!.
   18d54:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
   18d64:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
   18d74:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
   18d84:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
   18d94:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
   18da4:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
   18db4:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
   18dc4:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
   18dd4:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
   18de4:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
   18df4:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
   18e04:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
   18e14:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
   18e24:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
   18e34:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
   18e44:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
   18e54:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
   18e64:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
   18e74:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
   18e84:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00018e94 <tbl_upper.4309>:
   18e94:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
   18ea4:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
   18eb4:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
   18ec4:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
   18ed4:	00c100c0 00c300c2 00c500c4 00c700c6     ................
   18ee4:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
   18ef4:	00d100d0 00d300d2 00d500d4 00d800d6     ................
   18f04:	00da00d9 00dc00db 00de00dd 01000178     ............x...
   18f14:	01040102 01080106 010c010a 0110010e     ................
   18f24:	01140112 01180116 011c011a 0120011e     .............. .
   18f34:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
   18f44:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
   18f54:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
   18f64:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
   18f74:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
   18f84:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
   18f94:	03940393 03960395 03980397 039a0399     ................
   18fa4:	039c039b 039e039d 03a0039f 03a303a1     ................
   18fb4:	03a503a4 03a703a6 03a903a8 041003aa     ................
   18fc4:	04120411 04140413 04160415 04180417     ................
   18fd4:	041a0419 041c041b 041e041d 0420041f     .............. .
   18fe4:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
   18ff4:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
   19004:	04030402 04050404 04070406 04090408     ................
   19014:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
   19024:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
   19034:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
   19044:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
   19054:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
   19064:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
   19074:	4354514d 00000000 00000004 00000000     MQTC............
	...
   1908c:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   190cc:	4354514d 00000000 00000004 00000000     MQTC............
	...
   190e4:	0001003c 5754514d 00000000 00000000     <...MQTW........
	...
   19124:	5454514d 00000000 7349514d 00007064     MQTT....MQIsdp..
   19134:	0a0d0a0d 2d2d2d2d 4553452d 20363135     ....-----ESE516 
   19144:	6e69614d 6f725020 6d617267 2d2d2d2d     Main Program----
   19154:	000a0d2d 0a0d0a0d 74696e49 696c6169     -.......Initiali
   19164:	4820657a 2e2e2e57 00000a0d 6f727245     ze HW.......Erro
   19174:	6e692072 61697469 697a696c 4920676e     r initializing I
   19184:	44204332 65766972 0a0d2172 00000000     2C Driver!......
   19194:	74696e49 696c6169 2064657a 20433249     Initialized I2C 
   191a4:	76697244 0d217265 0000000a 6e490a0d     Driver!.......In
   191b4:	61697469 697a696c 5520676e 30312d53     itializing US-10
   191c4:	69442030 6e617473 53206563 6f736e65     0 Distance Senso
   191d4:	2e2e2e72 00000a0d 31445353 20363033     r.......SSD1306 
   191e4:	74696e69 696c6169 2164657a 00000a0d     initialized!....
   191f4:	70616548 66656220 2065726f 72617473     Heap before star
   19204:	676e6974 73617420 203a736b 0a0d6425     ting tasks: %d..
   19214:	00000000 5f494c43 4b534154 00000000     ....CLI_TASK....
   19224:	3a525245 494c4320 73617420 6f63206b     ERR: CLI task co
   19234:	20646c75 20746f6e 69206562 6974696e     uld not be initi
   19244:	7a696c61 0d216465 0000000a 70616548     alized!.....Heap
   19254:	74666120 73207265 74726174 20676e69      after starting 
   19264:	3a494c43 0d642520 0000000a 49464957     CLI: %d.....WIFI
   19274:	5341545f 0000004b 3a525245 46495720     _TASK...ERR: WIF
   19284:	61742049 63206b73 646c756f 746f6e20     I task could not
   19294:	20656220 74696e69 696c6169 2164657a      be initialized!
   192a4:	00000a0d 70616548 74666120 73207265     ....Heap after s
   192b4:	74726174 20676e69 49464957 6425203a     tarting WIFI: %d
   192c4:	00000a0d 74736944 65636e61 4d303031     ....Distance100M
   192d4:	75736165 656d6572 6554746e 6165706d     easurementTempea
   192e4:	72757472 73615465 0000006b 6f727245     rtureTask...Erro
   192f4:	72632072 69746165 4420676e 61747369     r creating Dista
   19304:	3165636e 654d3030 72757361 6e656d65     nce100Measuremen
   19314:	6d655474 72616570 65727574 6b736154     tTempeartureTask
   19324:	000a0d21 70616548 74666120 73207265     !...Heap after s
   19334:	74726174 20676e69 206c6c61 6b736174     tarting all task
   19344:	25203a73 000a0d64 6f727245 6e6f2072     s: %d...Error on
   19354:	6d656d20 2079726f 6f6c6c61 69746163      memory allocati
   19364:	6f206e6f 5246206e 54524545 0d21534f     on on FREERTOS!.
   19374:	0000000a 6f727245 6e6f2072 61747320     ....Error on sta
   19384:	6f206b63 66726576 20776f6c 46206e6f     ck overflow on F
   19394:	52454552 21534f54 00000a0d 6f727245     REERTOS!....Erro
   193a4:	65722072 6e696461 69642067 6e617473     r reading distan
   193b4:	0a0d6563 00000000 646f6f46 6425203a     ce......Food: %d
   193c4:	00002525 00012210 00012160 00012160     %%..."..`!..`!..
   193d4:	0001215e 00012202 00012202 000121f8     ^!..."..."...!..
   193e4:	0001215e 00012202 000121f8 00012202     ^!..."...!..."..
   193f4:	0001215e 00012208 00012208 00012208     ^!..."..."..."..
   19404:	00012298 00012f54 00012f36 00012ef0     ."..T/..6/......
   19414:	00012e0e 00012ef0 00012f28 00012ef0     ........(/......
   19424:	00012e0e 00012f36 00012f36 00012f28     ....6/..6/..(/..
   19434:	00012e0e 00012e06 00012e06 00012e06     ................
   19444:	0001316c 000135b4 00013474 00013474     l1...5..t4..t4..
   19454:	00013470 0001358c 0001358c 0001357e     p4...5...5..~5..
   19464:	00013470 0001358c 0001357e 0001358c     p4...5..~5...5..
   19474:	00013470 00013594 00013594 00013594     p4...5...5...5..
   19484:	00013798                                .7..

00019488 <_global_impure_ptr>:
   19488:	20000104                                ... 

0001948c <__sf_fake_stderr>:
	...

000194ac <__sf_fake_stdin>:
	...

000194cc <__sf_fake_stdout>:
	...
   194ec:	4f500043 00584953 2d23002e 00202b30     C.POSIX...#-0+ .
   194fc:	004c6c68 45676665 30004746 34333231     hlL.efgEFG.01234
   1950c:	38373635 43424139 00464544 33323130     56789ABCDEF.0123
   1951c:	37363534 62613938 66656463 20200000              456789abcdef.

00019529 <_ctype_>:
   19529:	20202000 20202020 28282020 20282828     .         ((((( 
   19539:	20202020 20202020 20202020 20202020                     
   19549:	10108820 10101010 10101010 10101010      ...............
   19559:	04040410 04040404 10040404 10101010     ................
   19569:	41411010 41414141 01010101 01010101     ..AAAAAA........
   19579:	01010101 01010101 01010101 10101010     ................
   19589:	42421010 42424242 02020202 02020202     ..BBBBBB........
   19599:	02020202 02020202 02020202 10101010     ................
   195a9:	00000020 00000000 00000000 00000000      ...............
	...

0001962c <_init>:
   1962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1962e:	46c0      	nop			; (mov r8, r8)
   19630:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19632:	bc08      	pop	{r3}
   19634:	469e      	mov	lr, r3
   19636:	4770      	bx	lr

00019638 <__init_array_start>:
   19638:	000000dd 	.word	0x000000dd

0001963c <_fini>:
   1963c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1963e:	46c0      	nop			; (mov r8, r8)
   19640:	bcf8      	pop	{r3, r4, r5, r6, r7}
   19642:	bc08      	pop	{r3}
   19644:	469e      	mov	lr, r3
   19646:	4770      	bx	lr

00019648 <__fini_array_start>:
   19648:	000000b5 	.word	0x000000b5
